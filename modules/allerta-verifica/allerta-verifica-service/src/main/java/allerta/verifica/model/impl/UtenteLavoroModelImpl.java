/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package allerta.verifica.model.impl;

import aQute.bnd.annotation.ProviderType;

import allerta.verifica.model.UtenteLavoro;
import allerta.verifica.model.UtenteLavoroModel;
import allerta.verifica.model.UtenteLavoroSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the UtenteLavoro service. Represents a row in the &quot;VERIFICA_UtenteLavoro&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>UtenteLavoroModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UtenteLavoroImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UtenteLavoroImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class UtenteLavoroModelImpl
	extends BaseModelImpl<UtenteLavoro> implements UtenteLavoroModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a utente lavoro model instance should use the <code>UtenteLavoro</code> interface instead.
	 */
	public static final String TABLE_NAME = "VERIFICA_UtenteLavoro";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"documento", Types.BIGINT},
		{"utente", Types.VARCHAR}, {"ts", Types.TIMESTAMP},
		{"attivita", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("documento", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("utente", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ts", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("attivita", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table VERIFICA_UtenteLavoro (id_ LONG not null primary key,documento LONG,utente VARCHAR(75) null,ts DATE null,attivita VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table VERIFICA_UtenteLavoro";

	public static final String ORDER_BY_JPQL = " ORDER BY utenteLavoro.ts DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY VERIFICA_UtenteLavoro.ts DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.verifica.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.allerta.verifica.model.UtenteLavoro"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.verifica.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.allerta.verifica.model.UtenteLavoro"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		allerta.verifica.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.allerta.verifica.model.UtenteLavoro"),
		true);

	public static final long DOCUMENTO_COLUMN_BITMASK = 1L;

	public static final long TS_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static UtenteLavoro toModel(UtenteLavoroSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		UtenteLavoro model = new UtenteLavoroImpl();

		model.setId(soapModel.getId());
		model.setDocumento(soapModel.getDocumento());
		model.setUtente(soapModel.getUtente());
		model.setTs(soapModel.getTs());
		model.setAttivita(soapModel.getAttivita());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<UtenteLavoro> toModels(UtenteLavoroSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<UtenteLavoro> models = new ArrayList<UtenteLavoro>(
			soapModels.length);

		for (UtenteLavoroSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		allerta.verifica.service.util.ServiceProps.get(
			"lock.expiration.time.allerta.verifica.model.UtenteLavoro"));

	public UtenteLavoroModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UtenteLavoro.class;
	}

	@Override
	public String getModelClassName() {
		return UtenteLavoro.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<UtenteLavoro, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<UtenteLavoro, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UtenteLavoro, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((UtenteLavoro)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<UtenteLavoro, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<UtenteLavoro, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(UtenteLavoro)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<UtenteLavoro, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<UtenteLavoro, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<UtenteLavoro, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<UtenteLavoro, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<UtenteLavoro, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<UtenteLavoro, Object>>();
		Map<String, BiConsumer<UtenteLavoro, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<UtenteLavoro, ?>>();

		attributeGetterFunctions.put(
			"id",
			new Function<UtenteLavoro, Object>() {

				@Override
				public Object apply(UtenteLavoro utenteLavoro) {
					return utenteLavoro.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<UtenteLavoro, Object>() {

				@Override
				public void accept(UtenteLavoro utenteLavoro, Object id) {
					utenteLavoro.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"documento",
			new Function<UtenteLavoro, Object>() {

				@Override
				public Object apply(UtenteLavoro utenteLavoro) {
					return utenteLavoro.getDocumento();
				}

			});
		attributeSetterBiConsumers.put(
			"documento",
			new BiConsumer<UtenteLavoro, Object>() {

				@Override
				public void accept(
					UtenteLavoro utenteLavoro, Object documento) {

					utenteLavoro.setDocumento((Long)documento);
				}

			});
		attributeGetterFunctions.put(
			"utente",
			new Function<UtenteLavoro, Object>() {

				@Override
				public Object apply(UtenteLavoro utenteLavoro) {
					return utenteLavoro.getUtente();
				}

			});
		attributeSetterBiConsumers.put(
			"utente",
			new BiConsumer<UtenteLavoro, Object>() {

				@Override
				public void accept(UtenteLavoro utenteLavoro, Object utente) {
					utenteLavoro.setUtente((String)utente);
				}

			});
		attributeGetterFunctions.put(
			"ts",
			new Function<UtenteLavoro, Object>() {

				@Override
				public Object apply(UtenteLavoro utenteLavoro) {
					return utenteLavoro.getTs();
				}

			});
		attributeSetterBiConsumers.put(
			"ts",
			new BiConsumer<UtenteLavoro, Object>() {

				@Override
				public void accept(UtenteLavoro utenteLavoro, Object ts) {
					utenteLavoro.setTs((Date)ts);
				}

			});
		attributeGetterFunctions.put(
			"attivita",
			new Function<UtenteLavoro, Object>() {

				@Override
				public Object apply(UtenteLavoro utenteLavoro) {
					return utenteLavoro.getAttivita();
				}

			});
		attributeSetterBiConsumers.put(
			"attivita",
			new BiConsumer<UtenteLavoro, Object>() {

				@Override
				public void accept(UtenteLavoro utenteLavoro, Object attivita) {
					utenteLavoro.setAttivita((String)attivita);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getDocumento() {
		return _documento;
	}

	@Override
	public void setDocumento(long documento) {
		_columnBitmask |= DOCUMENTO_COLUMN_BITMASK;

		if (!_setOriginalDocumento) {
			_setOriginalDocumento = true;

			_originalDocumento = _documento;
		}

		_documento = documento;
	}

	public long getOriginalDocumento() {
		return _originalDocumento;
	}

	@JSON
	@Override
	public String getUtente() {
		if (_utente == null) {
			return "";
		}
		else {
			return _utente;
		}
	}

	@Override
	public void setUtente(String utente) {
		_utente = utente;
	}

	@JSON
	@Override
	public Date getTs() {
		return _ts;
	}

	@Override
	public void setTs(Date ts) {
		_columnBitmask = -1L;

		_ts = ts;
	}

	@JSON
	@Override
	public String getAttivita() {
		if (_attivita == null) {
			return "";
		}
		else {
			return _attivita;
		}
	}

	@Override
	public void setAttivita(String attivita) {
		_attivita = attivita;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, UtenteLavoro.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UtenteLavoro toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UtenteLavoro)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UtenteLavoroImpl utenteLavoroImpl = new UtenteLavoroImpl();

		utenteLavoroImpl.setId(getId());
		utenteLavoroImpl.setDocumento(getDocumento());
		utenteLavoroImpl.setUtente(getUtente());
		utenteLavoroImpl.setTs(getTs());
		utenteLavoroImpl.setAttivita(getAttivita());

		utenteLavoroImpl.resetOriginalValues();

		return utenteLavoroImpl;
	}

	@Override
	public int compareTo(UtenteLavoro utenteLavoro) {
		int value = 0;

		value = DateUtil.compareTo(getTs(), utenteLavoro.getTs());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UtenteLavoro)) {
			return false;
		}

		UtenteLavoro utenteLavoro = (UtenteLavoro)obj;

		long primaryKey = utenteLavoro.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		UtenteLavoroModelImpl utenteLavoroModelImpl = this;

		utenteLavoroModelImpl._originalDocumento =
			utenteLavoroModelImpl._documento;

		utenteLavoroModelImpl._setOriginalDocumento = false;

		utenteLavoroModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UtenteLavoro> toCacheModel() {
		UtenteLavoroCacheModel utenteLavoroCacheModel =
			new UtenteLavoroCacheModel();

		utenteLavoroCacheModel.id = getId();

		utenteLavoroCacheModel.documento = getDocumento();

		utenteLavoroCacheModel.utente = getUtente();

		String utente = utenteLavoroCacheModel.utente;

		if ((utente != null) && (utente.length() == 0)) {
			utenteLavoroCacheModel.utente = null;
		}

		Date ts = getTs();

		if (ts != null) {
			utenteLavoroCacheModel.ts = ts.getTime();
		}
		else {
			utenteLavoroCacheModel.ts = Long.MIN_VALUE;
		}

		utenteLavoroCacheModel.attivita = getAttivita();

		String attivita = utenteLavoroCacheModel.attivita;

		if ((attivita != null) && (attivita.length() == 0)) {
			utenteLavoroCacheModel.attivita = null;
		}

		return utenteLavoroCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<UtenteLavoro, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<UtenteLavoro, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UtenteLavoro, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((UtenteLavoro)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<UtenteLavoro, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<UtenteLavoro, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UtenteLavoro, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((UtenteLavoro)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		UtenteLavoro.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		UtenteLavoro.class, ModelWrapper.class
	};

	private long _id;
	private long _documento;
	private long _originalDocumento;
	private boolean _setOriginalDocumento;
	private String _utente;
	private Date _ts;
	private String _attivita;
	private long _columnBitmask;
	private UtenteLavoro _escapedModel;

}