/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package allerta.verifica.service.base;

import aQute.bnd.annotation.ProviderType;

import allerta.verifica.model.Verifica;
import allerta.verifica.service.VerificaLocalService;
import allerta.verifica.service.persistence.UtenteLavoroPersistence;
import allerta.verifica.service.persistence.VerificaDatoPersistence;
import allerta.verifica.service.persistence.VerificaPersistence;

import com.liferay.asset.kernel.service.persistence.AssetEntryPersistence;
import com.liferay.asset.kernel.service.persistence.AssetTagPersistence;
import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the verifica local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link allerta.verifica.service.impl.VerificaLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see allerta.verifica.service.impl.VerificaLocalServiceImpl
 * @generated
 */
@ProviderType
public abstract class VerificaLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements VerificaLocalService, IdentifiableOSGiService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>VerificaLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>allerta.verifica.service.VerificaLocalServiceUtil</code>.
	 */

	/**
	 * Adds the verifica to the database. Also notifies the appropriate model listeners.
	 *
	 * @param verifica the verifica
	 * @return the verifica that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Verifica addVerifica(Verifica verifica) {
		verifica.setNew(true);

		return verificaPersistence.update(verifica);
	}

	/**
	 * Creates a new verifica with the primary key. Does not add the verifica to the database.
	 *
	 * @param id the primary key for the new verifica
	 * @return the new verifica
	 */
	@Override
	@Transactional(enabled = false)
	public Verifica createVerifica(long id) {
		return verificaPersistence.create(id);
	}

	/**
	 * Deletes the verifica with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the verifica
	 * @return the verifica that was removed
	 * @throws PortalException if a verifica with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Verifica deleteVerifica(long id) throws PortalException {
		return verificaPersistence.remove(id);
	}

	/**
	 * Deletes the verifica from the database. Also notifies the appropriate model listeners.
	 *
	 * @param verifica the verifica
	 * @return the verifica that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Verifica deleteVerifica(Verifica verifica) {
		return verificaPersistence.remove(verifica);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			Verifica.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return verificaPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>allerta.verifica.model.impl.VerificaModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return verificaPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>allerta.verifica.model.impl.VerificaModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return verificaPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return verificaPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return verificaPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public Verifica fetchVerifica(long id) {
		return verificaPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the verifica matching the UUID and group.
	 *
	 * @param uuid the verifica's UUID
	 * @param groupId the primary key of the group
	 * @return the matching verifica, or <code>null</code> if a matching verifica could not be found
	 */
	@Override
	public Verifica fetchVerificaByUuidAndGroupId(String uuid, long groupId) {
		return verificaPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the verifica with the primary key.
	 *
	 * @param id the primary key of the verifica
	 * @return the verifica
	 * @throws PortalException if a verifica with the primary key could not be found
	 */
	@Override
	public Verifica getVerifica(long id) throws PortalException {
		return verificaPersistence.findByPrimaryKey(id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(verificaLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(Verifica.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			verificaLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(Verifica.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(verificaLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(Verifica.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {

		final ExportActionableDynamicQuery exportActionableDynamicQuery =
			new ExportActionableDynamicQuery() {

				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary =
						portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(
						stagedModelType, modelAdditionCount);

					long modelDeletionCount =
						ExportImportHelperUtil.getModelDeletionCount(
							portletDataContext, stagedModelType);

					manifestSummary.addModelDeletionCount(
						stagedModelType, modelDeletionCount);

					return modelAdditionCount;
				}

			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(
			new ActionableDynamicQuery.AddCriteriaMethod() {

				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(
						dynamicQuery, "modifiedDate");
				}

			});

		exportActionableDynamicQuery.setCompanyId(
			portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(
			new ActionableDynamicQuery.PerformActionMethod<Verifica>() {

				@Override
				public void performAction(Verifica verifica)
					throws PortalException {

					StagedModelDataHandlerUtil.exportStagedModel(
						portletDataContext, verifica);
				}

			});
		exportActionableDynamicQuery.setStagedModelType(
			new StagedModelType(
				PortalUtil.getClassNameId(Verifica.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		return verificaLocalService.deleteVerifica((Verifica)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return verificaPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the verificas matching the UUID and company.
	 *
	 * @param uuid the UUID of the verificas
	 * @param companyId the primary key of the company
	 * @return the matching verificas, or an empty list if no matches were found
	 */
	@Override
	public List<Verifica> getVerificasByUuidAndCompanyId(
		String uuid, long companyId) {

		return verificaPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of verificas matching the UUID and company.
	 *
	 * @param uuid the UUID of the verificas
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of verificas
	 * @param end the upper bound of the range of verificas (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching verificas, or an empty list if no matches were found
	 */
	@Override
	public List<Verifica> getVerificasByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<Verifica> orderByComparator) {

		return verificaPersistence.findByUuid_C(
			uuid, companyId, start, end, orderByComparator);
	}

	/**
	 * Returns the verifica matching the UUID and group.
	 *
	 * @param uuid the verifica's UUID
	 * @param groupId the primary key of the group
	 * @return the matching verifica
	 * @throws PortalException if a matching verifica could not be found
	 */
	@Override
	public Verifica getVerificaByUuidAndGroupId(String uuid, long groupId)
		throws PortalException {

		return verificaPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the verificas.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>allerta.verifica.model.impl.VerificaModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of verificas
	 * @param end the upper bound of the range of verificas (not inclusive)
	 * @return the range of verificas
	 */
	@Override
	public List<Verifica> getVerificas(int start, int end) {
		return verificaPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of verificas.
	 *
	 * @return the number of verificas
	 */
	@Override
	public int getVerificasCount() {
		return verificaPersistence.countAll();
	}

	/**
	 * Updates the verifica in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param verifica the verifica
	 * @return the verifica that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Verifica updateVerifica(Verifica verifica) {
		return verificaPersistence.update(verifica);
	}

	/**
	 * Returns the utente lavoro local service.
	 *
	 * @return the utente lavoro local service
	 */
	public allerta.verifica.service.UtenteLavoroLocalService
		getUtenteLavoroLocalService() {

		return utenteLavoroLocalService;
	}

	/**
	 * Sets the utente lavoro local service.
	 *
	 * @param utenteLavoroLocalService the utente lavoro local service
	 */
	public void setUtenteLavoroLocalService(
		allerta.verifica.service.UtenteLavoroLocalService
			utenteLavoroLocalService) {

		this.utenteLavoroLocalService = utenteLavoroLocalService;
	}

	/**
	 * Returns the utente lavoro persistence.
	 *
	 * @return the utente lavoro persistence
	 */
	public UtenteLavoroPersistence getUtenteLavoroPersistence() {
		return utenteLavoroPersistence;
	}

	/**
	 * Sets the utente lavoro persistence.
	 *
	 * @param utenteLavoroPersistence the utente lavoro persistence
	 */
	public void setUtenteLavoroPersistence(
		UtenteLavoroPersistence utenteLavoroPersistence) {

		this.utenteLavoroPersistence = utenteLavoroPersistence;
	}

	/**
	 * Returns the verifica local service.
	 *
	 * @return the verifica local service
	 */
	public VerificaLocalService getVerificaLocalService() {
		return verificaLocalService;
	}

	/**
	 * Sets the verifica local service.
	 *
	 * @param verificaLocalService the verifica local service
	 */
	public void setVerificaLocalService(
		VerificaLocalService verificaLocalService) {

		this.verificaLocalService = verificaLocalService;
	}

	/**
	 * Returns the verifica persistence.
	 *
	 * @return the verifica persistence
	 */
	public VerificaPersistence getVerificaPersistence() {
		return verificaPersistence;
	}

	/**
	 * Sets the verifica persistence.
	 *
	 * @param verificaPersistence the verifica persistence
	 */
	public void setVerificaPersistence(
		VerificaPersistence verificaPersistence) {

		this.verificaPersistence = verificaPersistence;
	}

	/**
	 * Returns the verifica dato local service.
	 *
	 * @return the verifica dato local service
	 */
	public allerta.verifica.service.VerificaDatoLocalService
		getVerificaDatoLocalService() {

		return verificaDatoLocalService;
	}

	/**
	 * Sets the verifica dato local service.
	 *
	 * @param verificaDatoLocalService the verifica dato local service
	 */
	public void setVerificaDatoLocalService(
		allerta.verifica.service.VerificaDatoLocalService
			verificaDatoLocalService) {

		this.verificaDatoLocalService = verificaDatoLocalService;
	}

	/**
	 * Returns the verifica dato persistence.
	 *
	 * @return the verifica dato persistence
	 */
	public VerificaDatoPersistence getVerificaDatoPersistence() {
		return verificaDatoPersistence;
	}

	/**
	 * Sets the verifica dato persistence.
	 *
	 * @param verificaDatoPersistence the verifica dato persistence
	 */
	public void setVerificaDatoPersistence(
		VerificaDatoPersistence verificaDatoPersistence) {

		this.verificaDatoPersistence = verificaDatoPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService
		getCounterLocalService() {

		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService
			counterLocalService) {

		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService
		getClassNameLocalService() {

		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService
			classNameLocalService) {

		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {

		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService
		getResourceLocalService() {

		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService
			resourceLocalService) {

		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService
		getUserLocalService() {

		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {

		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	/**
	 * Returns the asset entry local service.
	 *
	 * @return the asset entry local service
	 */
	public com.liferay.asset.kernel.service.AssetEntryLocalService
		getAssetEntryLocalService() {

		return assetEntryLocalService;
	}

	/**
	 * Sets the asset entry local service.
	 *
	 * @param assetEntryLocalService the asset entry local service
	 */
	public void setAssetEntryLocalService(
		com.liferay.asset.kernel.service.AssetEntryLocalService
			assetEntryLocalService) {

		this.assetEntryLocalService = assetEntryLocalService;
	}

	/**
	 * Returns the asset entry persistence.
	 *
	 * @return the asset entry persistence
	 */
	public AssetEntryPersistence getAssetEntryPersistence() {
		return assetEntryPersistence;
	}

	/**
	 * Sets the asset entry persistence.
	 *
	 * @param assetEntryPersistence the asset entry persistence
	 */
	public void setAssetEntryPersistence(
		AssetEntryPersistence assetEntryPersistence) {

		this.assetEntryPersistence = assetEntryPersistence;
	}

	/**
	 * Returns the asset tag local service.
	 *
	 * @return the asset tag local service
	 */
	public com.liferay.asset.kernel.service.AssetTagLocalService
		getAssetTagLocalService() {

		return assetTagLocalService;
	}

	/**
	 * Sets the asset tag local service.
	 *
	 * @param assetTagLocalService the asset tag local service
	 */
	public void setAssetTagLocalService(
		com.liferay.asset.kernel.service.AssetTagLocalService
			assetTagLocalService) {

		this.assetTagLocalService = assetTagLocalService;
	}

	/**
	 * Returns the asset tag persistence.
	 *
	 * @return the asset tag persistence
	 */
	public AssetTagPersistence getAssetTagPersistence() {
		return assetTagPersistence;
	}

	/**
	 * Sets the asset tag persistence.
	 *
	 * @param assetTagPersistence the asset tag persistence
	 */
	public void setAssetTagPersistence(
		AssetTagPersistence assetTagPersistence) {

		this.assetTagPersistence = assetTagPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register(
			"allerta.verifica.model.Verifica", verificaLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"allerta.verifica.model.Verifica");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return VerificaLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return Verifica.class;
	}

	protected String getModelClassName() {
		return Verifica.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = verificaPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(
		type = allerta.verifica.service.UtenteLavoroLocalService.class
	)
	protected allerta.verifica.service.UtenteLavoroLocalService
		utenteLavoroLocalService;

	@BeanReference(type = UtenteLavoroPersistence.class)
	protected UtenteLavoroPersistence utenteLavoroPersistence;

	@BeanReference(type = VerificaLocalService.class)
	protected VerificaLocalService verificaLocalService;

	@BeanReference(type = VerificaPersistence.class)
	protected VerificaPersistence verificaPersistence;

	@BeanReference(
		type = allerta.verifica.service.VerificaDatoLocalService.class
	)
	protected allerta.verifica.service.VerificaDatoLocalService
		verificaDatoLocalService;

	@BeanReference(type = VerificaDatoPersistence.class)
	protected VerificaDatoPersistence verificaDatoPersistence;

	@ServiceReference(
		type = com.liferay.counter.kernel.service.CounterLocalService.class
	)
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ClassNameLocalService.class
	)
	protected com.liferay.portal.kernel.service.ClassNameLocalService
		classNameLocalService;

	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ResourceLocalService.class
	)
	protected com.liferay.portal.kernel.service.ResourceLocalService
		resourceLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.UserLocalService.class
	)
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;

	@ServiceReference(
		type = com.liferay.asset.kernel.service.AssetEntryLocalService.class
	)
	protected com.liferay.asset.kernel.service.AssetEntryLocalService
		assetEntryLocalService;

	@ServiceReference(type = AssetEntryPersistence.class)
	protected AssetEntryPersistence assetEntryPersistence;

	@ServiceReference(
		type = com.liferay.asset.kernel.service.AssetTagLocalService.class
	)
	protected com.liferay.asset.kernel.service.AssetTagLocalService
		assetTagLocalService;

	@ServiceReference(type = AssetTagPersistence.class)
	protected AssetTagPersistence assetTagPersistence;

	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry
		persistedModelLocalServiceRegistry;

}