/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package allerta.verifica.model.impl;

import aQute.bnd.annotation.ProviderType;

import allerta.verifica.model.VerificaDato;
import allerta.verifica.model.VerificaDatoModel;
import allerta.verifica.model.VerificaDatoSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the VerificaDato service. Represents a row in the &quot;VERIFICA_VerificaDato&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>VerificaDatoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VerificaDatoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see VerificaDatoImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class VerificaDatoModelImpl
	extends BaseModelImpl<VerificaDato> implements VerificaDatoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a verifica dato model instance should use the <code>VerificaDato</code> interface instead.
	 */
	public static final String TABLE_NAME = "VERIFICA_VerificaDato";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"documento", Types.BIGINT},
		{"giorno", Types.TIMESTAMP}, {"zona", Types.VARCHAR},
		{"evento", Types.BIGINT}, {"nomeDato", Types.VARCHAR},
		{"progressivo", Types.INTEGER}, {"datoInserito", Types.VARCHAR},
		{"datoCalcolato", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("documento", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("giorno", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("zona", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("evento", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nomeDato", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("progressivo", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("datoInserito", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("datoCalcolato", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table VERIFICA_VerificaDato (id_ LONG not null primary key,documento LONG,giorno DATE null,zona VARCHAR(75) null,evento LONG,nomeDato VARCHAR(75) null,progressivo INTEGER,datoInserito VARCHAR(75) null,datoCalcolato VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table VERIFICA_VerificaDato";

	public static final String ORDER_BY_JPQL =
		" ORDER BY verificaDato.documento ASC, verificaDato.giorno ASC, verificaDato.zona ASC, verificaDato.evento ASC, verificaDato.nomeDato ASC, verificaDato.progressivo ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY VERIFICA_VerificaDato.documento ASC, VERIFICA_VerificaDato.giorno ASC, VERIFICA_VerificaDato.zona ASC, VERIFICA_VerificaDato.evento ASC, VERIFICA_VerificaDato.nomeDato ASC, VERIFICA_VerificaDato.progressivo ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.verifica.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.allerta.verifica.model.VerificaDato"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.verifica.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.allerta.verifica.model.VerificaDato"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		allerta.verifica.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.allerta.verifica.model.VerificaDato"),
		true);

	public static final long DOCUMENTO_COLUMN_BITMASK = 1L;

	public static final long EVENTO_COLUMN_BITMASK = 2L;

	public static final long GIORNO_COLUMN_BITMASK = 4L;

	public static final long ZONA_COLUMN_BITMASK = 8L;

	public static final long NOMEDATO_COLUMN_BITMASK = 16L;

	public static final long PROGRESSIVO_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static VerificaDato toModel(VerificaDatoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		VerificaDato model = new VerificaDatoImpl();

		model.setId(soapModel.getId());
		model.setDocumento(soapModel.getDocumento());
		model.setGiorno(soapModel.getGiorno());
		model.setZona(soapModel.getZona());
		model.setEvento(soapModel.getEvento());
		model.setNomeDato(soapModel.getNomeDato());
		model.setProgressivo(soapModel.getProgressivo());
		model.setDatoInserito(soapModel.getDatoInserito());
		model.setDatoCalcolato(soapModel.getDatoCalcolato());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<VerificaDato> toModels(VerificaDatoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<VerificaDato> models = new ArrayList<VerificaDato>(
			soapModels.length);

		for (VerificaDatoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		allerta.verifica.service.util.ServiceProps.get(
			"lock.expiration.time.allerta.verifica.model.VerificaDato"));

	public VerificaDatoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VerificaDato.class;
	}

	@Override
	public String getModelClassName() {
		return VerificaDato.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<VerificaDato, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<VerificaDato, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<VerificaDato, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((VerificaDato)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<VerificaDato, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<VerificaDato, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(VerificaDato)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<VerificaDato, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<VerificaDato, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<VerificaDato, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<VerificaDato, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<VerificaDato, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<VerificaDato, Object>>();
		Map<String, BiConsumer<VerificaDato, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<VerificaDato, ?>>();

		attributeGetterFunctions.put(
			"id",
			new Function<VerificaDato, Object>() {

				@Override
				public Object apply(VerificaDato verificaDato) {
					return verificaDato.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<VerificaDato, Object>() {

				@Override
				public void accept(VerificaDato verificaDato, Object id) {
					verificaDato.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"documento",
			new Function<VerificaDato, Object>() {

				@Override
				public Object apply(VerificaDato verificaDato) {
					return verificaDato.getDocumento();
				}

			});
		attributeSetterBiConsumers.put(
			"documento",
			new BiConsumer<VerificaDato, Object>() {

				@Override
				public void accept(
					VerificaDato verificaDato, Object documento) {

					verificaDato.setDocumento((Long)documento);
				}

			});
		attributeGetterFunctions.put(
			"giorno",
			new Function<VerificaDato, Object>() {

				@Override
				public Object apply(VerificaDato verificaDato) {
					return verificaDato.getGiorno();
				}

			});
		attributeSetterBiConsumers.put(
			"giorno",
			new BiConsumer<VerificaDato, Object>() {

				@Override
				public void accept(VerificaDato verificaDato, Object giorno) {
					verificaDato.setGiorno((Date)giorno);
				}

			});
		attributeGetterFunctions.put(
			"zona",
			new Function<VerificaDato, Object>() {

				@Override
				public Object apply(VerificaDato verificaDato) {
					return verificaDato.getZona();
				}

			});
		attributeSetterBiConsumers.put(
			"zona",
			new BiConsumer<VerificaDato, Object>() {

				@Override
				public void accept(VerificaDato verificaDato, Object zona) {
					verificaDato.setZona((String)zona);
				}

			});
		attributeGetterFunctions.put(
			"evento",
			new Function<VerificaDato, Object>() {

				@Override
				public Object apply(VerificaDato verificaDato) {
					return verificaDato.getEvento();
				}

			});
		attributeSetterBiConsumers.put(
			"evento",
			new BiConsumer<VerificaDato, Object>() {

				@Override
				public void accept(VerificaDato verificaDato, Object evento) {
					verificaDato.setEvento((Long)evento);
				}

			});
		attributeGetterFunctions.put(
			"nomeDato",
			new Function<VerificaDato, Object>() {

				@Override
				public Object apply(VerificaDato verificaDato) {
					return verificaDato.getNomeDato();
				}

			});
		attributeSetterBiConsumers.put(
			"nomeDato",
			new BiConsumer<VerificaDato, Object>() {

				@Override
				public void accept(VerificaDato verificaDato, Object nomeDato) {
					verificaDato.setNomeDato((String)nomeDato);
				}

			});
		attributeGetterFunctions.put(
			"progressivo",
			new Function<VerificaDato, Object>() {

				@Override
				public Object apply(VerificaDato verificaDato) {
					return verificaDato.getProgressivo();
				}

			});
		attributeSetterBiConsumers.put(
			"progressivo",
			new BiConsumer<VerificaDato, Object>() {

				@Override
				public void accept(
					VerificaDato verificaDato, Object progressivo) {

					verificaDato.setProgressivo((Integer)progressivo);
				}

			});
		attributeGetterFunctions.put(
			"datoInserito",
			new Function<VerificaDato, Object>() {

				@Override
				public Object apply(VerificaDato verificaDato) {
					return verificaDato.getDatoInserito();
				}

			});
		attributeSetterBiConsumers.put(
			"datoInserito",
			new BiConsumer<VerificaDato, Object>() {

				@Override
				public void accept(
					VerificaDato verificaDato, Object datoInserito) {

					verificaDato.setDatoInserito((String)datoInserito);
				}

			});
		attributeGetterFunctions.put(
			"datoCalcolato",
			new Function<VerificaDato, Object>() {

				@Override
				public Object apply(VerificaDato verificaDato) {
					return verificaDato.getDatoCalcolato();
				}

			});
		attributeSetterBiConsumers.put(
			"datoCalcolato",
			new BiConsumer<VerificaDato, Object>() {

				@Override
				public void accept(
					VerificaDato verificaDato, Object datoCalcolato) {

					verificaDato.setDatoCalcolato((String)datoCalcolato);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getDocumento() {
		return _documento;
	}

	@Override
	public void setDocumento(long documento) {
		_columnBitmask = -1L;

		if (!_setOriginalDocumento) {
			_setOriginalDocumento = true;

			_originalDocumento = _documento;
		}

		_documento = documento;
	}

	public long getOriginalDocumento() {
		return _originalDocumento;
	}

	@JSON
	@Override
	public Date getGiorno() {
		return _giorno;
	}

	@Override
	public void setGiorno(Date giorno) {
		_columnBitmask = -1L;

		if (_originalGiorno == null) {
			_originalGiorno = _giorno;
		}

		_giorno = giorno;
	}

	public Date getOriginalGiorno() {
		return _originalGiorno;
	}

	@JSON
	@Override
	public String getZona() {
		if (_zona == null) {
			return "";
		}
		else {
			return _zona;
		}
	}

	@Override
	public void setZona(String zona) {
		_columnBitmask = -1L;

		if (_originalZona == null) {
			_originalZona = _zona;
		}

		_zona = zona;
	}

	public String getOriginalZona() {
		return GetterUtil.getString(_originalZona);
	}

	@JSON
	@Override
	public long getEvento() {
		return _evento;
	}

	@Override
	public void setEvento(long evento) {
		_columnBitmask = -1L;

		if (!_setOriginalEvento) {
			_setOriginalEvento = true;

			_originalEvento = _evento;
		}

		_evento = evento;
	}

	public long getOriginalEvento() {
		return _originalEvento;
	}

	@JSON
	@Override
	public String getNomeDato() {
		if (_nomeDato == null) {
			return "";
		}
		else {
			return _nomeDato;
		}
	}

	@Override
	public void setNomeDato(String nomeDato) {
		_columnBitmask = -1L;

		_nomeDato = nomeDato;
	}

	@JSON
	@Override
	public int getProgressivo() {
		return _progressivo;
	}

	@Override
	public void setProgressivo(int progressivo) {
		_columnBitmask = -1L;

		_progressivo = progressivo;
	}

	@JSON
	@Override
	public String getDatoInserito() {
		if (_datoInserito == null) {
			return "";
		}
		else {
			return _datoInserito;
		}
	}

	@Override
	public void setDatoInserito(String datoInserito) {
		_datoInserito = datoInserito;
	}

	@JSON
	@Override
	public String getDatoCalcolato() {
		if (_datoCalcolato == null) {
			return "";
		}
		else {
			return _datoCalcolato;
		}
	}

	@Override
	public void setDatoCalcolato(String datoCalcolato) {
		_datoCalcolato = datoCalcolato;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, VerificaDato.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VerificaDato toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (VerificaDato)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VerificaDatoImpl verificaDatoImpl = new VerificaDatoImpl();

		verificaDatoImpl.setId(getId());
		verificaDatoImpl.setDocumento(getDocumento());
		verificaDatoImpl.setGiorno(getGiorno());
		verificaDatoImpl.setZona(getZona());
		verificaDatoImpl.setEvento(getEvento());
		verificaDatoImpl.setNomeDato(getNomeDato());
		verificaDatoImpl.setProgressivo(getProgressivo());
		verificaDatoImpl.setDatoInserito(getDatoInserito());
		verificaDatoImpl.setDatoCalcolato(getDatoCalcolato());

		verificaDatoImpl.resetOriginalValues();

		return verificaDatoImpl;
	}

	@Override
	public int compareTo(VerificaDato verificaDato) {
		int value = 0;

		if (getDocumento() < verificaDato.getDocumento()) {
			value = -1;
		}
		else if (getDocumento() > verificaDato.getDocumento()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		value = DateUtil.compareTo(getGiorno(), verificaDato.getGiorno());

		if (value != 0) {
			return value;
		}

		value = getZona().compareTo(verificaDato.getZona());

		if (value != 0) {
			return value;
		}

		if (getEvento() < verificaDato.getEvento()) {
			value = -1;
		}
		else if (getEvento() > verificaDato.getEvento()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		value = getNomeDato().compareTo(verificaDato.getNomeDato());

		if (value != 0) {
			return value;
		}

		if (getProgressivo() < verificaDato.getProgressivo()) {
			value = -1;
		}
		else if (getProgressivo() > verificaDato.getProgressivo()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof VerificaDato)) {
			return false;
		}

		VerificaDato verificaDato = (VerificaDato)obj;

		long primaryKey = verificaDato.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VerificaDatoModelImpl verificaDatoModelImpl = this;

		verificaDatoModelImpl._originalDocumento =
			verificaDatoModelImpl._documento;

		verificaDatoModelImpl._setOriginalDocumento = false;

		verificaDatoModelImpl._originalGiorno = verificaDatoModelImpl._giorno;

		verificaDatoModelImpl._originalZona = verificaDatoModelImpl._zona;

		verificaDatoModelImpl._originalEvento = verificaDatoModelImpl._evento;

		verificaDatoModelImpl._setOriginalEvento = false;

		verificaDatoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<VerificaDato> toCacheModel() {
		VerificaDatoCacheModel verificaDatoCacheModel =
			new VerificaDatoCacheModel();

		verificaDatoCacheModel.id = getId();

		verificaDatoCacheModel.documento = getDocumento();

		Date giorno = getGiorno();

		if (giorno != null) {
			verificaDatoCacheModel.giorno = giorno.getTime();
		}
		else {
			verificaDatoCacheModel.giorno = Long.MIN_VALUE;
		}

		verificaDatoCacheModel.zona = getZona();

		String zona = verificaDatoCacheModel.zona;

		if ((zona != null) && (zona.length() == 0)) {
			verificaDatoCacheModel.zona = null;
		}

		verificaDatoCacheModel.evento = getEvento();

		verificaDatoCacheModel.nomeDato = getNomeDato();

		String nomeDato = verificaDatoCacheModel.nomeDato;

		if ((nomeDato != null) && (nomeDato.length() == 0)) {
			verificaDatoCacheModel.nomeDato = null;
		}

		verificaDatoCacheModel.progressivo = getProgressivo();

		verificaDatoCacheModel.datoInserito = getDatoInserito();

		String datoInserito = verificaDatoCacheModel.datoInserito;

		if ((datoInserito != null) && (datoInserito.length() == 0)) {
			verificaDatoCacheModel.datoInserito = null;
		}

		verificaDatoCacheModel.datoCalcolato = getDatoCalcolato();

		String datoCalcolato = verificaDatoCacheModel.datoCalcolato;

		if ((datoCalcolato != null) && (datoCalcolato.length() == 0)) {
			verificaDatoCacheModel.datoCalcolato = null;
		}

		return verificaDatoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<VerificaDato, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<VerificaDato, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<VerificaDato, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((VerificaDato)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<VerificaDato, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<VerificaDato, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<VerificaDato, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((VerificaDato)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		VerificaDato.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		VerificaDato.class, ModelWrapper.class
	};

	private long _id;
	private long _documento;
	private long _originalDocumento;
	private boolean _setOriginalDocumento;
	private Date _giorno;
	private Date _originalGiorno;
	private String _zona;
	private String _originalZona;
	private long _evento;
	private long _originalEvento;
	private boolean _setOriginalEvento;
	private String _nomeDato;
	private int _progressivo;
	private String _datoInserito;
	private String _datoCalcolato;
	private long _columnBitmask;
	private VerificaDato _escapedModel;

}