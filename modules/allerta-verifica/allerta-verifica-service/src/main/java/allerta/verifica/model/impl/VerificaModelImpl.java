/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package allerta.verifica.model.impl;

import aQute.bnd.annotation.ProviderType;

import allerta.verifica.model.Verifica;
import allerta.verifica.model.VerificaModel;
import allerta.verifica.model.VerificaSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Verifica service. Represents a row in the &quot;VERIFICA_Verifica&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>VerificaModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VerificaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see VerificaImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class VerificaModelImpl
	extends BaseModelImpl<Verifica> implements VerificaModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a verifica model instance should use the <code>Verifica</code> interface instead.
	 */
	public static final String TABLE_NAME = "VERIFICA_Verifica";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"id_", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"documento", Types.BIGINT}, {"stato", Types.INTEGER},
		{"titolo", Types.VARCHAR}, {"fenomeni", Types.VARCHAR},
		{"fenomeniDescritti", Types.VARCHAR}, {"note", Types.VARCHAR},
		{"dataInizio", Types.TIMESTAMP}, {"dataFine", Types.TIMESTAMP},
		{"link", Types.VARCHAR}, {"hash", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("documento", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("stato", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("titolo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fenomeni", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fenomeniDescritti", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("note", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dataInizio", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dataFine", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("link", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hash", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table VERIFICA_Verifica (uuid_ VARCHAR(75) null,id_ LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,documento LONG,stato INTEGER,titolo VARCHAR(75) null,fenomeni VARCHAR(75) null,fenomeniDescritti VARCHAR(75) null,note VARCHAR(75) null,dataInizio DATE null,dataFine DATE null,link VARCHAR(75) null,hash VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table VERIFICA_Verifica";

	public static final String ORDER_BY_JPQL =
		" ORDER BY verifica.dataInizio DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY VERIFICA_Verifica.dataInizio DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.verifica.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.allerta.verifica.model.Verifica"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.verifica.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.allerta.verifica.model.Verifica"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		allerta.verifica.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.allerta.verifica.model.Verifica"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long DOCUMENTO_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long UUID_COLUMN_BITMASK = 8L;

	public static final long DATAINIZIO_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Verifica toModel(VerificaSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Verifica model = new VerificaImpl();

		model.setUuid(soapModel.getUuid());
		model.setId(soapModel.getId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setDocumento(soapModel.getDocumento());
		model.setStato(soapModel.getStato());
		model.setTitolo(soapModel.getTitolo());
		model.setFenomeni(soapModel.getFenomeni());
		model.setFenomeniDescritti(soapModel.getFenomeniDescritti());
		model.setNote(soapModel.getNote());
		model.setDataInizio(soapModel.getDataInizio());
		model.setDataFine(soapModel.getDataFine());
		model.setLink(soapModel.getLink());
		model.setHash(soapModel.getHash());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Verifica> toModels(VerificaSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Verifica> models = new ArrayList<Verifica>(soapModels.length);

		for (VerificaSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		allerta.verifica.service.util.ServiceProps.get(
			"lock.expiration.time.allerta.verifica.model.Verifica"));

	public VerificaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Verifica.class;
	}

	@Override
	public String getModelClassName() {
		return Verifica.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Verifica, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Verifica, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Verifica, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Verifica)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Verifica, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Verifica, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Verifica)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Verifica, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Verifica, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Verifica, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Verifica, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Verifica, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Verifica, Object>>();
		Map<String, BiConsumer<Verifica, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Verifica, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<Verifica, Object>() {

				@Override
				public Object apply(Verifica verifica) {
					return verifica.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<Verifica, Object>() {

				@Override
				public void accept(Verifica verifica, Object uuid) {
					verifica.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"id",
			new Function<Verifica, Object>() {

				@Override
				public Object apply(Verifica verifica) {
					return verifica.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<Verifica, Object>() {

				@Override
				public void accept(Verifica verifica, Object id) {
					verifica.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<Verifica, Object>() {

				@Override
				public Object apply(Verifica verifica) {
					return verifica.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<Verifica, Object>() {

				@Override
				public void accept(Verifica verifica, Object groupId) {
					verifica.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<Verifica, Object>() {

				@Override
				public Object apply(Verifica verifica) {
					return verifica.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<Verifica, Object>() {

				@Override
				public void accept(Verifica verifica, Object companyId) {
					verifica.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<Verifica, Object>() {

				@Override
				public Object apply(Verifica verifica) {
					return verifica.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<Verifica, Object>() {

				@Override
				public void accept(Verifica verifica, Object userId) {
					verifica.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<Verifica, Object>() {

				@Override
				public Object apply(Verifica verifica) {
					return verifica.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<Verifica, Object>() {

				@Override
				public void accept(Verifica verifica, Object userName) {
					verifica.setUserName((String)userName);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<Verifica, Object>() {

				@Override
				public Object apply(Verifica verifica) {
					return verifica.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<Verifica, Object>() {

				@Override
				public void accept(Verifica verifica, Object createDate) {
					verifica.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<Verifica, Object>() {

				@Override
				public Object apply(Verifica verifica) {
					return verifica.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<Verifica, Object>() {

				@Override
				public void accept(Verifica verifica, Object modifiedDate) {
					verifica.setModifiedDate((Date)modifiedDate);
				}

			});
		attributeGetterFunctions.put(
			"documento",
			new Function<Verifica, Object>() {

				@Override
				public Object apply(Verifica verifica) {
					return verifica.getDocumento();
				}

			});
		attributeSetterBiConsumers.put(
			"documento",
			new BiConsumer<Verifica, Object>() {

				@Override
				public void accept(Verifica verifica, Object documento) {
					verifica.setDocumento((Long)documento);
				}

			});
		attributeGetterFunctions.put(
			"stato",
			new Function<Verifica, Object>() {

				@Override
				public Object apply(Verifica verifica) {
					return verifica.getStato();
				}

			});
		attributeSetterBiConsumers.put(
			"stato",
			new BiConsumer<Verifica, Object>() {

				@Override
				public void accept(Verifica verifica, Object stato) {
					verifica.setStato((Integer)stato);
				}

			});
		attributeGetterFunctions.put(
			"titolo",
			new Function<Verifica, Object>() {

				@Override
				public Object apply(Verifica verifica) {
					return verifica.getTitolo();
				}

			});
		attributeSetterBiConsumers.put(
			"titolo",
			new BiConsumer<Verifica, Object>() {

				@Override
				public void accept(Verifica verifica, Object titolo) {
					verifica.setTitolo((String)titolo);
				}

			});
		attributeGetterFunctions.put(
			"fenomeni",
			new Function<Verifica, Object>() {

				@Override
				public Object apply(Verifica verifica) {
					return verifica.getFenomeni();
				}

			});
		attributeSetterBiConsumers.put(
			"fenomeni",
			new BiConsumer<Verifica, Object>() {

				@Override
				public void accept(Verifica verifica, Object fenomeni) {
					verifica.setFenomeni((String)fenomeni);
				}

			});
		attributeGetterFunctions.put(
			"fenomeniDescritti",
			new Function<Verifica, Object>() {

				@Override
				public Object apply(Verifica verifica) {
					return verifica.getFenomeniDescritti();
				}

			});
		attributeSetterBiConsumers.put(
			"fenomeniDescritti",
			new BiConsumer<Verifica, Object>() {

				@Override
				public void accept(
					Verifica verifica, Object fenomeniDescritti) {

					verifica.setFenomeniDescritti((String)fenomeniDescritti);
				}

			});
		attributeGetterFunctions.put(
			"note",
			new Function<Verifica, Object>() {

				@Override
				public Object apply(Verifica verifica) {
					return verifica.getNote();
				}

			});
		attributeSetterBiConsumers.put(
			"note",
			new BiConsumer<Verifica, Object>() {

				@Override
				public void accept(Verifica verifica, Object note) {
					verifica.setNote((String)note);
				}

			});
		attributeGetterFunctions.put(
			"dataInizio",
			new Function<Verifica, Object>() {

				@Override
				public Object apply(Verifica verifica) {
					return verifica.getDataInizio();
				}

			});
		attributeSetterBiConsumers.put(
			"dataInizio",
			new BiConsumer<Verifica, Object>() {

				@Override
				public void accept(Verifica verifica, Object dataInizio) {
					verifica.setDataInizio((Date)dataInizio);
				}

			});
		attributeGetterFunctions.put(
			"dataFine",
			new Function<Verifica, Object>() {

				@Override
				public Object apply(Verifica verifica) {
					return verifica.getDataFine();
				}

			});
		attributeSetterBiConsumers.put(
			"dataFine",
			new BiConsumer<Verifica, Object>() {

				@Override
				public void accept(Verifica verifica, Object dataFine) {
					verifica.setDataFine((Date)dataFine);
				}

			});
		attributeGetterFunctions.put(
			"link",
			new Function<Verifica, Object>() {

				@Override
				public Object apply(Verifica verifica) {
					return verifica.getLink();
				}

			});
		attributeSetterBiConsumers.put(
			"link",
			new BiConsumer<Verifica, Object>() {

				@Override
				public void accept(Verifica verifica, Object link) {
					verifica.setLink((String)link);
				}

			});
		attributeGetterFunctions.put(
			"hash",
			new Function<Verifica, Object>() {

				@Override
				public Object apply(Verifica verifica) {
					return verifica.getHash();
				}

			});
		attributeSetterBiConsumers.put(
			"hash",
			new BiConsumer<Verifica, Object>() {

				@Override
				public void accept(Verifica verifica, Object hash) {
					verifica.setHash((String)hash);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getDocumento() {
		return _documento;
	}

	@Override
	public void setDocumento(long documento) {
		_columnBitmask |= DOCUMENTO_COLUMN_BITMASK;

		if (!_setOriginalDocumento) {
			_setOriginalDocumento = true;

			_originalDocumento = _documento;
		}

		_documento = documento;
	}

	public long getOriginalDocumento() {
		return _originalDocumento;
	}

	@JSON
	@Override
	public int getStato() {
		return _stato;
	}

	@Override
	public void setStato(int stato) {
		_stato = stato;
	}

	@JSON
	@Override
	public String getTitolo() {
		if (_titolo == null) {
			return "";
		}
		else {
			return _titolo;
		}
	}

	@Override
	public void setTitolo(String titolo) {
		_titolo = titolo;
	}

	@JSON
	@Override
	public String getFenomeni() {
		if (_fenomeni == null) {
			return "";
		}
		else {
			return _fenomeni;
		}
	}

	@Override
	public void setFenomeni(String fenomeni) {
		_fenomeni = fenomeni;
	}

	@JSON
	@Override
	public String getFenomeniDescritti() {
		if (_fenomeniDescritti == null) {
			return "";
		}
		else {
			return _fenomeniDescritti;
		}
	}

	@Override
	public void setFenomeniDescritti(String fenomeniDescritti) {
		_fenomeniDescritti = fenomeniDescritti;
	}

	@JSON
	@Override
	public String getNote() {
		if (_note == null) {
			return "";
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	@JSON
	@Override
	public Date getDataInizio() {
		return _dataInizio;
	}

	@Override
	public void setDataInizio(Date dataInizio) {
		_columnBitmask = -1L;

		_dataInizio = dataInizio;
	}

	@JSON
	@Override
	public Date getDataFine() {
		return _dataFine;
	}

	@Override
	public void setDataFine(Date dataFine) {
		_dataFine = dataFine;
	}

	@JSON
	@Override
	public String getLink() {
		if (_link == null) {
			return "";
		}
		else {
			return _link;
		}
	}

	@Override
	public void setLink(String link) {
		_link = link;
	}

	@JSON
	@Override
	public String getHash() {
		if (_hash == null) {
			return "";
		}
		else {
			return _hash;
		}
	}

	@Override
	public void setHash(String hash) {
		_hash = hash;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Verifica.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Verifica.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Verifica toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Verifica)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VerificaImpl verificaImpl = new VerificaImpl();

		verificaImpl.setUuid(getUuid());
		verificaImpl.setId(getId());
		verificaImpl.setGroupId(getGroupId());
		verificaImpl.setCompanyId(getCompanyId());
		verificaImpl.setUserId(getUserId());
		verificaImpl.setUserName(getUserName());
		verificaImpl.setCreateDate(getCreateDate());
		verificaImpl.setModifiedDate(getModifiedDate());
		verificaImpl.setDocumento(getDocumento());
		verificaImpl.setStato(getStato());
		verificaImpl.setTitolo(getTitolo());
		verificaImpl.setFenomeni(getFenomeni());
		verificaImpl.setFenomeniDescritti(getFenomeniDescritti());
		verificaImpl.setNote(getNote());
		verificaImpl.setDataInizio(getDataInizio());
		verificaImpl.setDataFine(getDataFine());
		verificaImpl.setLink(getLink());
		verificaImpl.setHash(getHash());

		verificaImpl.resetOriginalValues();

		return verificaImpl;
	}

	@Override
	public int compareTo(Verifica verifica) {
		int value = 0;

		value = DateUtil.compareTo(getDataInizio(), verifica.getDataInizio());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Verifica)) {
			return false;
		}

		Verifica verifica = (Verifica)obj;

		long primaryKey = verifica.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VerificaModelImpl verificaModelImpl = this;

		verificaModelImpl._originalUuid = verificaModelImpl._uuid;

		verificaModelImpl._originalGroupId = verificaModelImpl._groupId;

		verificaModelImpl._setOriginalGroupId = false;

		verificaModelImpl._originalCompanyId = verificaModelImpl._companyId;

		verificaModelImpl._setOriginalCompanyId = false;

		verificaModelImpl._setModifiedDate = false;

		verificaModelImpl._originalDocumento = verificaModelImpl._documento;

		verificaModelImpl._setOriginalDocumento = false;

		verificaModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Verifica> toCacheModel() {
		VerificaCacheModel verificaCacheModel = new VerificaCacheModel();

		verificaCacheModel.uuid = getUuid();

		String uuid = verificaCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			verificaCacheModel.uuid = null;
		}

		verificaCacheModel.id = getId();

		verificaCacheModel.groupId = getGroupId();

		verificaCacheModel.companyId = getCompanyId();

		verificaCacheModel.userId = getUserId();

		verificaCacheModel.userName = getUserName();

		String userName = verificaCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			verificaCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			verificaCacheModel.createDate = createDate.getTime();
		}
		else {
			verificaCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			verificaCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			verificaCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		verificaCacheModel.documento = getDocumento();

		verificaCacheModel.stato = getStato();

		verificaCacheModel.titolo = getTitolo();

		String titolo = verificaCacheModel.titolo;

		if ((titolo != null) && (titolo.length() == 0)) {
			verificaCacheModel.titolo = null;
		}

		verificaCacheModel.fenomeni = getFenomeni();

		String fenomeni = verificaCacheModel.fenomeni;

		if ((fenomeni != null) && (fenomeni.length() == 0)) {
			verificaCacheModel.fenomeni = null;
		}

		verificaCacheModel.fenomeniDescritti = getFenomeniDescritti();

		String fenomeniDescritti = verificaCacheModel.fenomeniDescritti;

		if ((fenomeniDescritti != null) && (fenomeniDescritti.length() == 0)) {
			verificaCacheModel.fenomeniDescritti = null;
		}

		verificaCacheModel.note = getNote();

		String note = verificaCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			verificaCacheModel.note = null;
		}

		Date dataInizio = getDataInizio();

		if (dataInizio != null) {
			verificaCacheModel.dataInizio = dataInizio.getTime();
		}
		else {
			verificaCacheModel.dataInizio = Long.MIN_VALUE;
		}

		Date dataFine = getDataFine();

		if (dataFine != null) {
			verificaCacheModel.dataFine = dataFine.getTime();
		}
		else {
			verificaCacheModel.dataFine = Long.MIN_VALUE;
		}

		verificaCacheModel.link = getLink();

		String link = verificaCacheModel.link;

		if ((link != null) && (link.length() == 0)) {
			verificaCacheModel.link = null;
		}

		verificaCacheModel.hash = getHash();

		String hash = verificaCacheModel.hash;

		if ((hash != null) && (hash.length() == 0)) {
			verificaCacheModel.hash = null;
		}

		return verificaCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Verifica, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Verifica, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Verifica, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Verifica)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Verifica, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Verifica, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Verifica, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Verifica)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		Verifica.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		Verifica.class, ModelWrapper.class
	};

	private String _uuid;
	private String _originalUuid;
	private long _id;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _documento;
	private long _originalDocumento;
	private boolean _setOriginalDocumento;
	private int _stato;
	private String _titolo;
	private String _fenomeni;
	private String _fenomeniDescritti;
	private String _note;
	private Date _dataInizio;
	private Date _dataFine;
	private String _link;
	private String _hash;
	private long _columnBitmask;
	private Verifica _escapedModel;

}