/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.animazione.image.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.animazione.image.model.PioggiaCumulativa;
import it.eng.animazione.image.model.PioggiaCumulativaModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PioggiaCumulativa service. Represents a row in the &quot;img_animazioni_PioggiaCumulativa&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>PioggiaCumulativaModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PioggiaCumulativaImpl}.
 * </p>
 *
 * @author UTENTE
 * @see PioggiaCumulativaImpl
 * @generated
 */
@ProviderType
public class PioggiaCumulativaModelImpl
	extends BaseModelImpl<PioggiaCumulativa> implements PioggiaCumulativaModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a pioggia cumulativa model instance should use the <code>PioggiaCumulativa</code> interface instead.
	 */
	public static final String TABLE_NAME = "img_animazioni_PioggiaCumulativa";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"nome", Types.VARCHAR},
		{"cumulazione", Types.VARCHAR}, {"inzioCumulazione", Types.TIMESTAMP},
		{"fineCumulazione", Types.TIMESTAMP}, {"imgData", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nome", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cumulazione", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inzioCumulazione", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("fineCumulazione", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("imgData", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table img_animazioni_PioggiaCumulativa (id_ LONG not null primary key,nome VARCHAR(300) null,cumulazione VARCHAR(75) null,inzioCumulazione DATE null,fineCumulazione DATE null,imgData TEXT null)";

	public static final String TABLE_SQL_DROP =
		"drop table img_animazioni_PioggiaCumulativa";

	public static final String ORDER_BY_JPQL =
		" ORDER BY pioggiaCumulativa.id DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY img_animazioni_PioggiaCumulativa.id_ DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.animazione.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.animazione.image.model.PioggiaCumulativa"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.animazione.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.animazione.image.model.PioggiaCumulativa"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		it.eng.animazione.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.it.eng.animazione.image.model.PioggiaCumulativa"),
		true);

	public static final long CUMULAZIONE_COLUMN_BITMASK = 1L;

	public static final long ID_COLUMN_BITMASK = 2L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		it.eng.animazione.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.animazione.image.model.PioggiaCumulativa"));

	public PioggiaCumulativaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PioggiaCumulativa.class;
	}

	@Override
	public String getModelClassName() {
		return PioggiaCumulativa.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PioggiaCumulativa, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PioggiaCumulativa, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PioggiaCumulativa, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((PioggiaCumulativa)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PioggiaCumulativa, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PioggiaCumulativa, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PioggiaCumulativa)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PioggiaCumulativa, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PioggiaCumulativa, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<PioggiaCumulativa, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<PioggiaCumulativa, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<PioggiaCumulativa, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<PioggiaCumulativa, Object>>();
		Map<String, BiConsumer<PioggiaCumulativa, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<PioggiaCumulativa, ?>>();

		attributeGetterFunctions.put(
			"id",
			new Function<PioggiaCumulativa, Object>() {

				@Override
				public Object apply(PioggiaCumulativa pioggiaCumulativa) {
					return pioggiaCumulativa.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<PioggiaCumulativa, Object>() {

				@Override
				public void accept(
					PioggiaCumulativa pioggiaCumulativa, Object id) {

					pioggiaCumulativa.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"nome",
			new Function<PioggiaCumulativa, Object>() {

				@Override
				public Object apply(PioggiaCumulativa pioggiaCumulativa) {
					return pioggiaCumulativa.getNome();
				}

			});
		attributeSetterBiConsumers.put(
			"nome",
			new BiConsumer<PioggiaCumulativa, Object>() {

				@Override
				public void accept(
					PioggiaCumulativa pioggiaCumulativa, Object nome) {

					pioggiaCumulativa.setNome((String)nome);
				}

			});
		attributeGetterFunctions.put(
			"cumulazione",
			new Function<PioggiaCumulativa, Object>() {

				@Override
				public Object apply(PioggiaCumulativa pioggiaCumulativa) {
					return pioggiaCumulativa.getCumulazione();
				}

			});
		attributeSetterBiConsumers.put(
			"cumulazione",
			new BiConsumer<PioggiaCumulativa, Object>() {

				@Override
				public void accept(
					PioggiaCumulativa pioggiaCumulativa, Object cumulazione) {

					pioggiaCumulativa.setCumulazione((String)cumulazione);
				}

			});
		attributeGetterFunctions.put(
			"inzioCumulazione",
			new Function<PioggiaCumulativa, Object>() {

				@Override
				public Object apply(PioggiaCumulativa pioggiaCumulativa) {
					return pioggiaCumulativa.getInzioCumulazione();
				}

			});
		attributeSetterBiConsumers.put(
			"inzioCumulazione",
			new BiConsumer<PioggiaCumulativa, Object>() {

				@Override
				public void accept(
					PioggiaCumulativa pioggiaCumulativa,
					Object inzioCumulazione) {

					pioggiaCumulativa.setInzioCumulazione(
						(Date)inzioCumulazione);
				}

			});
		attributeGetterFunctions.put(
			"fineCumulazione",
			new Function<PioggiaCumulativa, Object>() {

				@Override
				public Object apply(PioggiaCumulativa pioggiaCumulativa) {
					return pioggiaCumulativa.getFineCumulazione();
				}

			});
		attributeSetterBiConsumers.put(
			"fineCumulazione",
			new BiConsumer<PioggiaCumulativa, Object>() {

				@Override
				public void accept(
					PioggiaCumulativa pioggiaCumulativa,
					Object fineCumulazione) {

					pioggiaCumulativa.setFineCumulazione((Date)fineCumulazione);
				}

			});
		attributeGetterFunctions.put(
			"imgData",
			new Function<PioggiaCumulativa, Object>() {

				@Override
				public Object apply(PioggiaCumulativa pioggiaCumulativa) {
					return pioggiaCumulativa.getImgData();
				}

			});
		attributeSetterBiConsumers.put(
			"imgData",
			new BiConsumer<PioggiaCumulativa, Object>() {

				@Override
				public void accept(
					PioggiaCumulativa pioggiaCumulativa, Object imgData) {

					pioggiaCumulativa.setImgData((String)imgData);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@Override
	public String getNome() {
		if (_nome == null) {
			return "";
		}
		else {
			return _nome;
		}
	}

	@Override
	public void setNome(String nome) {
		_nome = nome;
	}

	@Override
	public String getCumulazione() {
		if (_cumulazione == null) {
			return "";
		}
		else {
			return _cumulazione;
		}
	}

	@Override
	public void setCumulazione(String cumulazione) {
		_columnBitmask |= CUMULAZIONE_COLUMN_BITMASK;

		if (_originalCumulazione == null) {
			_originalCumulazione = _cumulazione;
		}

		_cumulazione = cumulazione;
	}

	public String getOriginalCumulazione() {
		return GetterUtil.getString(_originalCumulazione);
	}

	@Override
	public Date getInzioCumulazione() {
		return _inzioCumulazione;
	}

	@Override
	public void setInzioCumulazione(Date inzioCumulazione) {
		_inzioCumulazione = inzioCumulazione;
	}

	@Override
	public Date getFineCumulazione() {
		return _fineCumulazione;
	}

	@Override
	public void setFineCumulazione(Date fineCumulazione) {
		_fineCumulazione = fineCumulazione;
	}

	@Override
	public String getImgData() {
		if (_imgData == null) {
			return "";
		}
		else {
			return _imgData;
		}
	}

	@Override
	public void setImgData(String imgData) {
		_imgData = imgData;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, PioggiaCumulativa.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PioggiaCumulativa toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PioggiaCumulativa)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PioggiaCumulativaImpl pioggiaCumulativaImpl =
			new PioggiaCumulativaImpl();

		pioggiaCumulativaImpl.setId(getId());
		pioggiaCumulativaImpl.setNome(getNome());
		pioggiaCumulativaImpl.setCumulazione(getCumulazione());
		pioggiaCumulativaImpl.setInzioCumulazione(getInzioCumulazione());
		pioggiaCumulativaImpl.setFineCumulazione(getFineCumulazione());
		pioggiaCumulativaImpl.setImgData(getImgData());

		pioggiaCumulativaImpl.resetOriginalValues();

		return pioggiaCumulativaImpl;
	}

	@Override
	public int compareTo(PioggiaCumulativa pioggiaCumulativa) {
		int value = 0;

		if (getId() < pioggiaCumulativa.getId()) {
			value = -1;
		}
		else if (getId() > pioggiaCumulativa.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PioggiaCumulativa)) {
			return false;
		}

		PioggiaCumulativa pioggiaCumulativa = (PioggiaCumulativa)obj;

		long primaryKey = pioggiaCumulativa.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		PioggiaCumulativaModelImpl pioggiaCumulativaModelImpl = this;

		pioggiaCumulativaModelImpl._originalCumulazione =
			pioggiaCumulativaModelImpl._cumulazione;

		pioggiaCumulativaModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PioggiaCumulativa> toCacheModel() {
		PioggiaCumulativaCacheModel pioggiaCumulativaCacheModel =
			new PioggiaCumulativaCacheModel();

		pioggiaCumulativaCacheModel.id = getId();

		pioggiaCumulativaCacheModel.nome = getNome();

		String nome = pioggiaCumulativaCacheModel.nome;

		if ((nome != null) && (nome.length() == 0)) {
			pioggiaCumulativaCacheModel.nome = null;
		}

		pioggiaCumulativaCacheModel.cumulazione = getCumulazione();

		String cumulazione = pioggiaCumulativaCacheModel.cumulazione;

		if ((cumulazione != null) && (cumulazione.length() == 0)) {
			pioggiaCumulativaCacheModel.cumulazione = null;
		}

		Date inzioCumulazione = getInzioCumulazione();

		if (inzioCumulazione != null) {
			pioggiaCumulativaCacheModel.inzioCumulazione =
				inzioCumulazione.getTime();
		}
		else {
			pioggiaCumulativaCacheModel.inzioCumulazione = Long.MIN_VALUE;
		}

		Date fineCumulazione = getFineCumulazione();

		if (fineCumulazione != null) {
			pioggiaCumulativaCacheModel.fineCumulazione =
				fineCumulazione.getTime();
		}
		else {
			pioggiaCumulativaCacheModel.fineCumulazione = Long.MIN_VALUE;
		}

		pioggiaCumulativaCacheModel.imgData = getImgData();

		String imgData = pioggiaCumulativaCacheModel.imgData;

		if ((imgData != null) && (imgData.length() == 0)) {
			pioggiaCumulativaCacheModel.imgData = null;
		}

		return pioggiaCumulativaCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PioggiaCumulativa, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PioggiaCumulativa, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PioggiaCumulativa, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((PioggiaCumulativa)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<PioggiaCumulativa, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<PioggiaCumulativa, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PioggiaCumulativa, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((PioggiaCumulativa)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		PioggiaCumulativa.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		PioggiaCumulativa.class, ModelWrapper.class
	};

	private long _id;
	private String _nome;
	private String _cumulazione;
	private String _originalCumulazione;
	private Date _inzioCumulazione;
	private Date _fineCumulazione;
	private String _imgData;
	private long _columnBitmask;
	private PioggiaCumulativa _escapedModel;

}