/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.animazione.image.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.animazione.image.model.Parametro;
import it.eng.animazione.image.model.ParametroModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Parametro service. Represents a row in the &quot;img_animazioni_Parametro&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ParametroModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ParametroImpl}.
 * </p>
 *
 * @author UTENTE
 * @see ParametroImpl
 * @generated
 */
@ProviderType
public class ParametroModelImpl
	extends BaseModelImpl<Parametro> implements ParametroModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a parametro model instance should use the <code>Parametro</code> interface instead.
	 */
	public static final String TABLE_NAME = "img_animazioni_Parametro";

	public static final Object[][] TABLE_COLUMNS = {
		{"key_", Types.VARCHAR}, {"value", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("key_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("value", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table img_animazioni_Parametro (key_ VARCHAR(75) not null primary key,value VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table img_animazioni_Parametro";

	public static final String ORDER_BY_JPQL = " ORDER BY parametro.key ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY img_animazioni_Parametro.key_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.animazione.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.animazione.image.model.Parametro"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.animazione.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.animazione.image.model.Parametro"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = false;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		it.eng.animazione.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.animazione.image.model.Parametro"));

	public ParametroModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _key;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setKey(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _key;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Parametro.class;
	}

	@Override
	public String getModelClassName() {
		return Parametro.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Parametro, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Parametro, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Parametro, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Parametro)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Parametro, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Parametro, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Parametro)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Parametro, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Parametro, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Parametro, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Parametro, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Parametro, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Parametro, Object>>();
		Map<String, BiConsumer<Parametro, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Parametro, ?>>();

		attributeGetterFunctions.put(
			"key",
			new Function<Parametro, Object>() {

				@Override
				public Object apply(Parametro parametro) {
					return parametro.getKey();
				}

			});
		attributeSetterBiConsumers.put(
			"key",
			new BiConsumer<Parametro, Object>() {

				@Override
				public void accept(Parametro parametro, Object key) {
					parametro.setKey((String)key);
				}

			});
		attributeGetterFunctions.put(
			"value",
			new Function<Parametro, Object>() {

				@Override
				public Object apply(Parametro parametro) {
					return parametro.getValue();
				}

			});
		attributeSetterBiConsumers.put(
			"value",
			new BiConsumer<Parametro, Object>() {

				@Override
				public void accept(Parametro parametro, Object value) {
					parametro.setValue((String)value);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getKey() {
		if (_key == null) {
			return "";
		}
		else {
			return _key;
		}
	}

	@Override
	public void setKey(String key) {
		_key = key;
	}

	@Override
	public String getValue() {
		if (_value == null) {
			return "";
		}
		else {
			return _value;
		}
	}

	@Override
	public void setValue(String value) {
		_value = value;
	}

	@Override
	public Parametro toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Parametro)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ParametroImpl parametroImpl = new ParametroImpl();

		parametroImpl.setKey(getKey());
		parametroImpl.setValue(getValue());

		parametroImpl.resetOriginalValues();

		return parametroImpl;
	}

	@Override
	public int compareTo(Parametro parametro) {
		String primaryKey = parametro.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Parametro)) {
			return false;
		}

		Parametro parametro = (Parametro)obj;

		String primaryKey = parametro.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Parametro> toCacheModel() {
		ParametroCacheModel parametroCacheModel = new ParametroCacheModel();

		parametroCacheModel.key = getKey();

		String key = parametroCacheModel.key;

		if ((key != null) && (key.length() == 0)) {
			parametroCacheModel.key = null;
		}

		parametroCacheModel.value = getValue();

		String value = parametroCacheModel.value;

		if ((value != null) && (value.length() == 0)) {
			parametroCacheModel.value = null;
		}

		return parametroCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Parametro, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Parametro, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Parametro, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Parametro)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Parametro, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Parametro, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Parametro, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Parametro)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		Parametro.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		Parametro.class, ModelWrapper.class
	};

	private String _key;
	private String _value;
	private Parametro _escapedModel;

}