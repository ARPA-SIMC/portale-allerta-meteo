/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.animazione.image.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import it.eng.animazione.image.model.altezzaOnda;
import it.eng.animazione.image.service.altezzaOndaLocalService;
import it.eng.animazione.image.service.persistence.ParametroPersistence;
import it.eng.animazione.image.service.persistence.PioggiaCumulativaPersistence;
import it.eng.animazione.image.service.persistence.altezzaOndaPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the altezza onda local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link it.eng.animazione.image.service.impl.altezzaOndaLocalServiceImpl}.
 * </p>
 *
 * @author UTENTE
 * @see it.eng.animazione.image.service.impl.altezzaOndaLocalServiceImpl
 * @generated
 */
@ProviderType
public abstract class altezzaOndaLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements altezzaOndaLocalService, IdentifiableOSGiService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>altezzaOndaLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>it.eng.animazione.image.service.altezzaOndaLocalServiceUtil</code>.
	 */

	/**
	 * Adds the altezza onda to the database. Also notifies the appropriate model listeners.
	 *
	 * @param altezzaOnda the altezza onda
	 * @return the altezza onda that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public altezzaOnda addaltezzaOnda(altezzaOnda altezzaOnda) {
		altezzaOnda.setNew(true);

		return altezzaOndaPersistence.update(altezzaOnda);
	}

	/**
	 * Creates a new altezza onda with the primary key. Does not add the altezza onda to the database.
	 *
	 * @param id the primary key for the new altezza onda
	 * @return the new altezza onda
	 */
	@Override
	@Transactional(enabled = false)
	public altezzaOnda createaltezzaOnda(long id) {
		return altezzaOndaPersistence.create(id);
	}

	/**
	 * Deletes the altezza onda with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the altezza onda
	 * @return the altezza onda that was removed
	 * @throws PortalException if a altezza onda with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public altezzaOnda deletealtezzaOnda(long id) throws PortalException {
		return altezzaOndaPersistence.remove(id);
	}

	/**
	 * Deletes the altezza onda from the database. Also notifies the appropriate model listeners.
	 *
	 * @param altezzaOnda the altezza onda
	 * @return the altezza onda that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public altezzaOnda deletealtezzaOnda(altezzaOnda altezzaOnda) {
		return altezzaOndaPersistence.remove(altezzaOnda);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			altezzaOnda.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return altezzaOndaPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>it.eng.animazione.image.model.impl.altezzaOndaModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return altezzaOndaPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>it.eng.animazione.image.model.impl.altezzaOndaModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return altezzaOndaPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return altezzaOndaPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return altezzaOndaPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public altezzaOnda fetchaltezzaOnda(long id) {
		return altezzaOndaPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the altezza onda with the primary key.
	 *
	 * @param id the primary key of the altezza onda
	 * @return the altezza onda
	 * @throws PortalException if a altezza onda with the primary key could not be found
	 */
	@Override
	public altezzaOnda getaltezzaOnda(long id) throws PortalException {
		return altezzaOndaPersistence.findByPrimaryKey(id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(altezzaOndaLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(altezzaOnda.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			altezzaOndaLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(altezzaOnda.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(altezzaOndaLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(altezzaOnda.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		return altezzaOndaLocalService.deletealtezzaOnda(
			(altezzaOnda)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return altezzaOndaPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the altezza ondas.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>it.eng.animazione.image.model.impl.altezzaOndaModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of altezza ondas
	 * @param end the upper bound of the range of altezza ondas (not inclusive)
	 * @return the range of altezza ondas
	 */
	@Override
	public List<altezzaOnda> getaltezzaOndas(int start, int end) {
		return altezzaOndaPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of altezza ondas.
	 *
	 * @return the number of altezza ondas
	 */
	@Override
	public int getaltezzaOndasCount() {
		return altezzaOndaPersistence.countAll();
	}

	/**
	 * Updates the altezza onda in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param altezzaOnda the altezza onda
	 * @return the altezza onda that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public altezzaOnda updatealtezzaOnda(altezzaOnda altezzaOnda) {
		return altezzaOndaPersistence.update(altezzaOnda);
	}

	/**
	 * Returns the altezza onda local service.
	 *
	 * @return the altezza onda local service
	 */
	public altezzaOndaLocalService getaltezzaOndaLocalService() {
		return altezzaOndaLocalService;
	}

	/**
	 * Sets the altezza onda local service.
	 *
	 * @param altezzaOndaLocalService the altezza onda local service
	 */
	public void setaltezzaOndaLocalService(
		altezzaOndaLocalService altezzaOndaLocalService) {

		this.altezzaOndaLocalService = altezzaOndaLocalService;
	}

	/**
	 * Returns the altezza onda persistence.
	 *
	 * @return the altezza onda persistence
	 */
	public altezzaOndaPersistence getaltezzaOndaPersistence() {
		return altezzaOndaPersistence;
	}

	/**
	 * Sets the altezza onda persistence.
	 *
	 * @param altezzaOndaPersistence the altezza onda persistence
	 */
	public void setaltezzaOndaPersistence(
		altezzaOndaPersistence altezzaOndaPersistence) {

		this.altezzaOndaPersistence = altezzaOndaPersistence;
	}

	/**
	 * Returns the parametro local service.
	 *
	 * @return the parametro local service
	 */
	public it.eng.animazione.image.service.ParametroLocalService
		getParametroLocalService() {

		return parametroLocalService;
	}

	/**
	 * Sets the parametro local service.
	 *
	 * @param parametroLocalService the parametro local service
	 */
	public void setParametroLocalService(
		it.eng.animazione.image.service.ParametroLocalService
			parametroLocalService) {

		this.parametroLocalService = parametroLocalService;
	}

	/**
	 * Returns the parametro persistence.
	 *
	 * @return the parametro persistence
	 */
	public ParametroPersistence getParametroPersistence() {
		return parametroPersistence;
	}

	/**
	 * Sets the parametro persistence.
	 *
	 * @param parametroPersistence the parametro persistence
	 */
	public void setParametroPersistence(
		ParametroPersistence parametroPersistence) {

		this.parametroPersistence = parametroPersistence;
	}

	/**
	 * Returns the pioggia cumulativa local service.
	 *
	 * @return the pioggia cumulativa local service
	 */
	public it.eng.animazione.image.service.PioggiaCumulativaLocalService
		getPioggiaCumulativaLocalService() {

		return pioggiaCumulativaLocalService;
	}

	/**
	 * Sets the pioggia cumulativa local service.
	 *
	 * @param pioggiaCumulativaLocalService the pioggia cumulativa local service
	 */
	public void setPioggiaCumulativaLocalService(
		it.eng.animazione.image.service.PioggiaCumulativaLocalService
			pioggiaCumulativaLocalService) {

		this.pioggiaCumulativaLocalService = pioggiaCumulativaLocalService;
	}

	/**
	 * Returns the pioggia cumulativa persistence.
	 *
	 * @return the pioggia cumulativa persistence
	 */
	public PioggiaCumulativaPersistence getPioggiaCumulativaPersistence() {
		return pioggiaCumulativaPersistence;
	}

	/**
	 * Sets the pioggia cumulativa persistence.
	 *
	 * @param pioggiaCumulativaPersistence the pioggia cumulativa persistence
	 */
	public void setPioggiaCumulativaPersistence(
		PioggiaCumulativaPersistence pioggiaCumulativaPersistence) {

		this.pioggiaCumulativaPersistence = pioggiaCumulativaPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService
		getCounterLocalService() {

		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService
			counterLocalService) {

		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService
		getClassNameLocalService() {

		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService
			classNameLocalService) {

		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {

		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService
		getResourceLocalService() {

		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService
			resourceLocalService) {

		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService
		getUserLocalService() {

		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {

		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register(
			"it.eng.animazione.image.model.altezzaOnda",
			altezzaOndaLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"it.eng.animazione.image.model.altezzaOnda");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return altezzaOndaLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return altezzaOnda.class;
	}

	protected String getModelClassName() {
		return altezzaOnda.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = altezzaOndaPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = altezzaOndaLocalService.class)
	protected altezzaOndaLocalService altezzaOndaLocalService;

	@BeanReference(type = altezzaOndaPersistence.class)
	protected altezzaOndaPersistence altezzaOndaPersistence;

	@BeanReference(
		type = it.eng.animazione.image.service.ParametroLocalService.class
	)
	protected it.eng.animazione.image.service.ParametroLocalService
		parametroLocalService;

	@BeanReference(type = ParametroPersistence.class)
	protected ParametroPersistence parametroPersistence;

	@BeanReference(
		type = it.eng.animazione.image.service.PioggiaCumulativaLocalService.class
	)
	protected it.eng.animazione.image.service.PioggiaCumulativaLocalService
		pioggiaCumulativaLocalService;

	@BeanReference(type = PioggiaCumulativaPersistence.class)
	protected PioggiaCumulativaPersistence pioggiaCumulativaPersistence;

	@ServiceReference(
		type = com.liferay.counter.kernel.service.CounterLocalService.class
	)
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ClassNameLocalService.class
	)
	protected com.liferay.portal.kernel.service.ClassNameLocalService
		classNameLocalService;

	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ResourceLocalService.class
	)
	protected com.liferay.portal.kernel.service.ResourceLocalService
		resourceLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.UserLocalService.class
	)
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;

	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry
		persistedModelLocalServiceRegistry;

}