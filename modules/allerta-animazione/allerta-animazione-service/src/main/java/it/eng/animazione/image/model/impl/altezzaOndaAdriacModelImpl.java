/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.animazione.image.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.animazione.image.model.altezzaOndaAdriac;
import it.eng.animazione.image.model.altezzaOndaAdriacModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the altezzaOndaAdriac service. Represents a row in the &quot;img_animazioni_altezzaOndaAdriac&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>altezzaOndaAdriacModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link altezzaOndaAdriacImpl}.
 * </p>
 *
 * @author UTENTE
 * @see altezzaOndaAdriacImpl
 * @generated
 */
@ProviderType
public class altezzaOndaAdriacModelImpl
	extends BaseModelImpl<altezzaOndaAdriac> implements altezzaOndaAdriacModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a altezza onda adriac model instance should use the <code>altezzaOndaAdriac</code> interface instead.
	 */
	public static final String TABLE_NAME = "img_animazioni_altezzaOndaAdriac";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"im", Types.VARCHAR},
		{"text_LOC", Types.VARCHAR}, {"timestamp", Types.BIGINT},
		{"imgData", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("im", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("text_LOC", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("timestamp", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("imgData", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table img_animazioni_altezzaOndaAdriac (id_ LONG not null primary key,im VARCHAR(75) null,text_LOC VARCHAR(75) null,timestamp LONG,imgData VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table img_animazioni_altezzaOndaAdriac";

	public static final String ORDER_BY_JPQL =
		" ORDER BY altezzaOndaAdriac.id DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY img_animazioni_altezzaOndaAdriac.id_ DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.animazione.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.animazione.image.model.altezzaOndaAdriac"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.animazione.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.animazione.image.model.altezzaOndaAdriac"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = false;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		it.eng.animazione.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.animazione.image.model.altezzaOndaAdriac"));

	public altezzaOndaAdriacModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return altezzaOndaAdriac.class;
	}

	@Override
	public String getModelClassName() {
		return altezzaOndaAdriac.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<altezzaOndaAdriac, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<altezzaOndaAdriac, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<altezzaOndaAdriac, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((altezzaOndaAdriac)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<altezzaOndaAdriac, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<altezzaOndaAdriac, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(altezzaOndaAdriac)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<altezzaOndaAdriac, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<altezzaOndaAdriac, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<altezzaOndaAdriac, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<altezzaOndaAdriac, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<altezzaOndaAdriac, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<altezzaOndaAdriac, Object>>();
		Map<String, BiConsumer<altezzaOndaAdriac, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<altezzaOndaAdriac, ?>>();

		attributeGetterFunctions.put(
			"id",
			new Function<altezzaOndaAdriac, Object>() {

				@Override
				public Object apply(altezzaOndaAdriac altezzaOndaAdriac) {
					return altezzaOndaAdriac.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<altezzaOndaAdriac, Object>() {

				@Override
				public void accept(
					altezzaOndaAdriac altezzaOndaAdriac, Object id) {

					altezzaOndaAdriac.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"im",
			new Function<altezzaOndaAdriac, Object>() {

				@Override
				public Object apply(altezzaOndaAdriac altezzaOndaAdriac) {
					return altezzaOndaAdriac.getIm();
				}

			});
		attributeSetterBiConsumers.put(
			"im",
			new BiConsumer<altezzaOndaAdriac, Object>() {

				@Override
				public void accept(
					altezzaOndaAdriac altezzaOndaAdriac, Object im) {

					altezzaOndaAdriac.setIm((String)im);
				}

			});
		attributeGetterFunctions.put(
			"text_LOC",
			new Function<altezzaOndaAdriac, Object>() {

				@Override
				public Object apply(altezzaOndaAdriac altezzaOndaAdriac) {
					return altezzaOndaAdriac.getText_LOC();
				}

			});
		attributeSetterBiConsumers.put(
			"text_LOC",
			new BiConsumer<altezzaOndaAdriac, Object>() {

				@Override
				public void accept(
					altezzaOndaAdriac altezzaOndaAdriac, Object text_LOC) {

					altezzaOndaAdriac.setText_LOC((String)text_LOC);
				}

			});
		attributeGetterFunctions.put(
			"ts_UTC",
			new Function<altezzaOndaAdriac, Object>() {

				@Override
				public Object apply(altezzaOndaAdriac altezzaOndaAdriac) {
					return altezzaOndaAdriac.getTs_UTC();
				}

			});
		attributeSetterBiConsumers.put(
			"ts_UTC",
			new BiConsumer<altezzaOndaAdriac, Object>() {

				@Override
				public void accept(
					altezzaOndaAdriac altezzaOndaAdriac, Object ts_UTC) {

					altezzaOndaAdriac.setTs_UTC((Long)ts_UTC);
				}

			});
		attributeGetterFunctions.put(
			"imgData",
			new Function<altezzaOndaAdriac, Object>() {

				@Override
				public Object apply(altezzaOndaAdriac altezzaOndaAdriac) {
					return altezzaOndaAdriac.getImgData();
				}

			});
		attributeSetterBiConsumers.put(
			"imgData",
			new BiConsumer<altezzaOndaAdriac, Object>() {

				@Override
				public void accept(
					altezzaOndaAdriac altezzaOndaAdriac, Object imgData) {

					altezzaOndaAdriac.setImgData((String)imgData);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public String getIm() {
		if (_im == null) {
			return "";
		}
		else {
			return _im;
		}
	}

	@Override
	public void setIm(String im) {
		_im = im;
	}

	@Override
	public String getText_LOC() {
		if (_text_LOC == null) {
			return "";
		}
		else {
			return _text_LOC;
		}
	}

	@Override
	public void setText_LOC(String text_LOC) {
		_text_LOC = text_LOC;
	}

	@Override
	public long getTs_UTC() {
		return _ts_UTC;
	}

	@Override
	public void setTs_UTC(long ts_UTC) {
		_ts_UTC = ts_UTC;
	}

	@Override
	public String getImgData() {
		if (_imgData == null) {
			return "";
		}
		else {
			return _imgData;
		}
	}

	@Override
	public void setImgData(String imgData) {
		_imgData = imgData;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, altezzaOndaAdriac.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public altezzaOndaAdriac toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (altezzaOndaAdriac)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		altezzaOndaAdriacImpl altezzaOndaAdriacImpl =
			new altezzaOndaAdriacImpl();

		altezzaOndaAdriacImpl.setId(getId());
		altezzaOndaAdriacImpl.setIm(getIm());
		altezzaOndaAdriacImpl.setText_LOC(getText_LOC());
		altezzaOndaAdriacImpl.setTs_UTC(getTs_UTC());
		altezzaOndaAdriacImpl.setImgData(getImgData());

		altezzaOndaAdriacImpl.resetOriginalValues();

		return altezzaOndaAdriacImpl;
	}

	@Override
	public int compareTo(altezzaOndaAdriac altezzaOndaAdriac) {
		int value = 0;

		if (getId() < altezzaOndaAdriac.getId()) {
			value = -1;
		}
		else if (getId() > altezzaOndaAdriac.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof altezzaOndaAdriac)) {
			return false;
		}

		altezzaOndaAdriac altezzaOndaAdriac = (altezzaOndaAdriac)obj;

		long primaryKey = altezzaOndaAdriac.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<altezzaOndaAdriac> toCacheModel() {
		altezzaOndaAdriacCacheModel altezzaOndaAdriacCacheModel =
			new altezzaOndaAdriacCacheModel();

		altezzaOndaAdriacCacheModel.id = getId();

		altezzaOndaAdriacCacheModel.im = getIm();

		String im = altezzaOndaAdriacCacheModel.im;

		if ((im != null) && (im.length() == 0)) {
			altezzaOndaAdriacCacheModel.im = null;
		}

		altezzaOndaAdriacCacheModel.text_LOC = getText_LOC();

		String text_LOC = altezzaOndaAdriacCacheModel.text_LOC;

		if ((text_LOC != null) && (text_LOC.length() == 0)) {
			altezzaOndaAdriacCacheModel.text_LOC = null;
		}

		altezzaOndaAdriacCacheModel.ts_UTC = getTs_UTC();

		altezzaOndaAdriacCacheModel.imgData = getImgData();

		String imgData = altezzaOndaAdriacCacheModel.imgData;

		if ((imgData != null) && (imgData.length() == 0)) {
			altezzaOndaAdriacCacheModel.imgData = null;
		}

		return altezzaOndaAdriacCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<altezzaOndaAdriac, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<altezzaOndaAdriac, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<altezzaOndaAdriac, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((altezzaOndaAdriac)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<altezzaOndaAdriac, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<altezzaOndaAdriac, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<altezzaOndaAdriac, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((altezzaOndaAdriac)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		altezzaOndaAdriac.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		altezzaOndaAdriac.class, ModelWrapper.class
	};

	private long _id;
	private String _im;
	private String _text_LOC;
	private long _ts_UTC;
	private String _imgData;
	private altezzaOndaAdriac _escapedModel;

}