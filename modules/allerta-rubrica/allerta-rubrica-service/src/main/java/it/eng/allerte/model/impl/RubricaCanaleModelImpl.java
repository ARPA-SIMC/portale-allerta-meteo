/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.allerte.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.allerte.model.RubricaCanale;
import it.eng.allerte.model.RubricaCanaleModel;
import it.eng.allerte.model.RubricaCanaleSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the RubricaCanale service. Represents a row in the &quot;rubrica_RubricaCanale&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>RubricaCanaleModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RubricaCanaleImpl}.
 * </p>
 *
 * @author Pratola_L
 * @see RubricaCanaleImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class RubricaCanaleModelImpl
	extends BaseModelImpl<RubricaCanale> implements RubricaCanaleModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a rubrica canale model instance should use the <code>RubricaCanale</code> interface instead.
	 */
	public static final String TABLE_NAME = "rubrica_RubricaCanale";

	public static final Object[][] TABLE_COLUMNS = {
		{"ID_CANALE", Types.BIGINT}, {"NOME", Types.VARCHAR},
		{"ICONA", Types.VARCHAR}, {"REGEX", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ID_CANALE", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NOME", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ICONA", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("REGEX", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table rubrica_RubricaCanale (ID_CANALE LONG not null primary key,NOME VARCHAR(75) null,ICONA VARCHAR(75) null,REGEX VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table rubrica_RubricaCanale";

	public static final String ORDER_BY_JPQL =
		" ORDER BY rubricaCanale.ID_CANALE ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY rubrica_RubricaCanale.ID_CANALE ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.rubrica.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.allerte.model.RubricaCanale"),
		false);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.rubrica.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.allerte.model.RubricaCanale"),
		false);

	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static RubricaCanale toModel(RubricaCanaleSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RubricaCanale model = new RubricaCanaleImpl();

		model.setID_CANALE(soapModel.getID_CANALE());
		model.setNOME(soapModel.getNOME());
		model.setICONA(soapModel.getICONA());
		model.setREGEX(soapModel.getREGEX());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<RubricaCanale> toModels(RubricaCanaleSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<RubricaCanale> models = new ArrayList<RubricaCanale>(
			soapModels.length);

		for (RubricaCanaleSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		it.eng.rubrica.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.allerte.model.RubricaCanale"));

	public RubricaCanaleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ID_CANALE;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setID_CANALE(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ID_CANALE;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RubricaCanale.class;
	}

	@Override
	public String getModelClassName() {
		return RubricaCanale.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<RubricaCanale, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<RubricaCanale, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RubricaCanale, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((RubricaCanale)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<RubricaCanale, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<RubricaCanale, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(RubricaCanale)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<RubricaCanale, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<RubricaCanale, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<RubricaCanale, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<RubricaCanale, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<RubricaCanale, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<RubricaCanale, Object>>();
		Map<String, BiConsumer<RubricaCanale, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<RubricaCanale, ?>>();

		attributeGetterFunctions.put(
			"ID_CANALE",
			new Function<RubricaCanale, Object>() {

				@Override
				public Object apply(RubricaCanale rubricaCanale) {
					return rubricaCanale.getID_CANALE();
				}

			});
		attributeSetterBiConsumers.put(
			"ID_CANALE",
			new BiConsumer<RubricaCanale, Object>() {

				@Override
				public void accept(
					RubricaCanale rubricaCanale, Object ID_CANALE) {

					rubricaCanale.setID_CANALE((Long)ID_CANALE);
				}

			});
		attributeGetterFunctions.put(
			"NOME",
			new Function<RubricaCanale, Object>() {

				@Override
				public Object apply(RubricaCanale rubricaCanale) {
					return rubricaCanale.getNOME();
				}

			});
		attributeSetterBiConsumers.put(
			"NOME",
			new BiConsumer<RubricaCanale, Object>() {

				@Override
				public void accept(RubricaCanale rubricaCanale, Object NOME) {
					rubricaCanale.setNOME((String)NOME);
				}

			});
		attributeGetterFunctions.put(
			"ICONA",
			new Function<RubricaCanale, Object>() {

				@Override
				public Object apply(RubricaCanale rubricaCanale) {
					return rubricaCanale.getICONA();
				}

			});
		attributeSetterBiConsumers.put(
			"ICONA",
			new BiConsumer<RubricaCanale, Object>() {

				@Override
				public void accept(RubricaCanale rubricaCanale, Object ICONA) {
					rubricaCanale.setICONA((String)ICONA);
				}

			});
		attributeGetterFunctions.put(
			"REGEX",
			new Function<RubricaCanale, Object>() {

				@Override
				public Object apply(RubricaCanale rubricaCanale) {
					return rubricaCanale.getREGEX();
				}

			});
		attributeSetterBiConsumers.put(
			"REGEX",
			new BiConsumer<RubricaCanale, Object>() {

				@Override
				public void accept(RubricaCanale rubricaCanale, Object REGEX) {
					rubricaCanale.setREGEX((String)REGEX);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getID_CANALE() {
		return _ID_CANALE;
	}

	@Override
	public void setID_CANALE(long ID_CANALE) {
		_ID_CANALE = ID_CANALE;
	}

	@JSON
	@Override
	public String getNOME() {
		if (_NOME == null) {
			return "";
		}
		else {
			return _NOME;
		}
	}

	@Override
	public void setNOME(String NOME) {
		_NOME = NOME;
	}

	@JSON
	@Override
	public String getICONA() {
		if (_ICONA == null) {
			return "";
		}
		else {
			return _ICONA;
		}
	}

	@Override
	public void setICONA(String ICONA) {
		_ICONA = ICONA;
	}

	@JSON
	@Override
	public String getREGEX() {
		if (_REGEX == null) {
			return "";
		}
		else {
			return _REGEX;
		}
	}

	@Override
	public void setREGEX(String REGEX) {
		_REGEX = REGEX;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, RubricaCanale.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RubricaCanale toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RubricaCanale)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RubricaCanaleImpl rubricaCanaleImpl = new RubricaCanaleImpl();

		rubricaCanaleImpl.setID_CANALE(getID_CANALE());
		rubricaCanaleImpl.setNOME(getNOME());
		rubricaCanaleImpl.setICONA(getICONA());
		rubricaCanaleImpl.setREGEX(getREGEX());

		rubricaCanaleImpl.resetOriginalValues();

		return rubricaCanaleImpl;
	}

	@Override
	public int compareTo(RubricaCanale rubricaCanale) {
		long primaryKey = rubricaCanale.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RubricaCanale)) {
			return false;
		}

		RubricaCanale rubricaCanale = (RubricaCanale)obj;

		long primaryKey = rubricaCanale.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<RubricaCanale> toCacheModel() {
		RubricaCanaleCacheModel rubricaCanaleCacheModel =
			new RubricaCanaleCacheModel();

		rubricaCanaleCacheModel.ID_CANALE = getID_CANALE();

		rubricaCanaleCacheModel.NOME = getNOME();

		String NOME = rubricaCanaleCacheModel.NOME;

		if ((NOME != null) && (NOME.length() == 0)) {
			rubricaCanaleCacheModel.NOME = null;
		}

		rubricaCanaleCacheModel.ICONA = getICONA();

		String ICONA = rubricaCanaleCacheModel.ICONA;

		if ((ICONA != null) && (ICONA.length() == 0)) {
			rubricaCanaleCacheModel.ICONA = null;
		}

		rubricaCanaleCacheModel.REGEX = getREGEX();

		String REGEX = rubricaCanaleCacheModel.REGEX;

		if ((REGEX != null) && (REGEX.length() == 0)) {
			rubricaCanaleCacheModel.REGEX = null;
		}

		return rubricaCanaleCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<RubricaCanale, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<RubricaCanale, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RubricaCanale, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((RubricaCanale)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<RubricaCanale, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<RubricaCanale, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RubricaCanale, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((RubricaCanale)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		RubricaCanale.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		RubricaCanale.class, ModelWrapper.class
	};

	private long _ID_CANALE;

	private String _NOME;

	private String _ICONA;

	private String _REGEX;

	private RubricaCanale _escapedModel;

}