/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.allerte.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.allerte.model.RubricaRuolo;
import it.eng.allerte.model.RubricaRuoloModel;
import it.eng.allerte.model.RubricaRuoloSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the RubricaRuolo service. Represents a row in the &quot;rubrica_RubricaRuolo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>RubricaRuoloModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RubricaRuoloImpl}.
 * </p>
 *
 * @author Pratola_L
 * @see RubricaRuoloImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class RubricaRuoloModelImpl
	extends BaseModelImpl<RubricaRuolo> implements RubricaRuoloModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a rubrica ruolo model instance should use the <code>RubricaRuolo</code> interface instead.
	 */
	public static final String TABLE_NAME = "rubrica_RubricaRuolo";

	public static final Object[][] TABLE_COLUMNS = {
		{"ID_RUOLO", Types.BIGINT}, {"DESCRIZIONE", Types.VARCHAR},
		{"FK_RUOLO_LIFERAY", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ID_RUOLO", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("DESCRIZIONE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FK_RUOLO_LIFERAY", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table rubrica_RubricaRuolo (ID_RUOLO LONG not null primary key,DESCRIZIONE VARCHAR(256) null,FK_RUOLO_LIFERAY LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table rubrica_RubricaRuolo";

	public static final String ORDER_BY_JPQL =
		" ORDER BY rubricaRuolo.ID_RUOLO ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY rubrica_RubricaRuolo.ID_RUOLO ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.rubrica.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.allerte.model.RubricaRuolo"),
		false);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.rubrica.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.allerte.model.RubricaRuolo"),
		false);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		it.eng.rubrica.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.it.eng.allerte.model.RubricaRuolo"),
		true);

	public static final long FK_RUOLO_LIFERAY_COLUMN_BITMASK = 1L;

	public static final long ID_RUOLO_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static RubricaRuolo toModel(RubricaRuoloSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RubricaRuolo model = new RubricaRuoloImpl();

		model.setID_RUOLO(soapModel.getID_RUOLO());
		model.setDESCRIZIONE(soapModel.getDESCRIZIONE());
		model.setFK_RUOLO_LIFERAY(soapModel.getFK_RUOLO_LIFERAY());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<RubricaRuolo> toModels(RubricaRuoloSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<RubricaRuolo> models = new ArrayList<RubricaRuolo>(
			soapModels.length);

		for (RubricaRuoloSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		it.eng.rubrica.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.allerte.model.RubricaRuolo"));

	public RubricaRuoloModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ID_RUOLO;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setID_RUOLO(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ID_RUOLO;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RubricaRuolo.class;
	}

	@Override
	public String getModelClassName() {
		return RubricaRuolo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<RubricaRuolo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<RubricaRuolo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RubricaRuolo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((RubricaRuolo)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<RubricaRuolo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<RubricaRuolo, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(RubricaRuolo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<RubricaRuolo, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<RubricaRuolo, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<RubricaRuolo, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<RubricaRuolo, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<RubricaRuolo, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<RubricaRuolo, Object>>();
		Map<String, BiConsumer<RubricaRuolo, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<RubricaRuolo, ?>>();

		attributeGetterFunctions.put(
			"ID_RUOLO",
			new Function<RubricaRuolo, Object>() {

				@Override
				public Object apply(RubricaRuolo rubricaRuolo) {
					return rubricaRuolo.getID_RUOLO();
				}

			});
		attributeSetterBiConsumers.put(
			"ID_RUOLO",
			new BiConsumer<RubricaRuolo, Object>() {

				@Override
				public void accept(RubricaRuolo rubricaRuolo, Object ID_RUOLO) {
					rubricaRuolo.setID_RUOLO((Long)ID_RUOLO);
				}

			});
		attributeGetterFunctions.put(
			"DESCRIZIONE",
			new Function<RubricaRuolo, Object>() {

				@Override
				public Object apply(RubricaRuolo rubricaRuolo) {
					return rubricaRuolo.getDESCRIZIONE();
				}

			});
		attributeSetterBiConsumers.put(
			"DESCRIZIONE",
			new BiConsumer<RubricaRuolo, Object>() {

				@Override
				public void accept(
					RubricaRuolo rubricaRuolo, Object DESCRIZIONE) {

					rubricaRuolo.setDESCRIZIONE((String)DESCRIZIONE);
				}

			});
		attributeGetterFunctions.put(
			"FK_RUOLO_LIFERAY",
			new Function<RubricaRuolo, Object>() {

				@Override
				public Object apply(RubricaRuolo rubricaRuolo) {
					return rubricaRuolo.getFK_RUOLO_LIFERAY();
				}

			});
		attributeSetterBiConsumers.put(
			"FK_RUOLO_LIFERAY",
			new BiConsumer<RubricaRuolo, Object>() {

				@Override
				public void accept(
					RubricaRuolo rubricaRuolo, Object FK_RUOLO_LIFERAY) {

					rubricaRuolo.setFK_RUOLO_LIFERAY((Long)FK_RUOLO_LIFERAY);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getID_RUOLO() {
		return _ID_RUOLO;
	}

	@Override
	public void setID_RUOLO(long ID_RUOLO) {
		_ID_RUOLO = ID_RUOLO;
	}

	@JSON
	@Override
	public String getDESCRIZIONE() {
		if (_DESCRIZIONE == null) {
			return "";
		}
		else {
			return _DESCRIZIONE;
		}
	}

	@Override
	public void setDESCRIZIONE(String DESCRIZIONE) {
		_DESCRIZIONE = DESCRIZIONE;
	}

	@JSON
	@Override
	public long getFK_RUOLO_LIFERAY() {
		return _FK_RUOLO_LIFERAY;
	}

	@Override
	public void setFK_RUOLO_LIFERAY(long FK_RUOLO_LIFERAY) {
		_columnBitmask |= FK_RUOLO_LIFERAY_COLUMN_BITMASK;

		if (!_setOriginalFK_RUOLO_LIFERAY) {
			_setOriginalFK_RUOLO_LIFERAY = true;

			_originalFK_RUOLO_LIFERAY = _FK_RUOLO_LIFERAY;
		}

		_FK_RUOLO_LIFERAY = FK_RUOLO_LIFERAY;
	}

	public long getOriginalFK_RUOLO_LIFERAY() {
		return _originalFK_RUOLO_LIFERAY;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, RubricaRuolo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RubricaRuolo toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RubricaRuolo)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RubricaRuoloImpl rubricaRuoloImpl = new RubricaRuoloImpl();

		rubricaRuoloImpl.setID_RUOLO(getID_RUOLO());
		rubricaRuoloImpl.setDESCRIZIONE(getDESCRIZIONE());
		rubricaRuoloImpl.setFK_RUOLO_LIFERAY(getFK_RUOLO_LIFERAY());

		rubricaRuoloImpl.resetOriginalValues();

		return rubricaRuoloImpl;
	}

	@Override
	public int compareTo(RubricaRuolo rubricaRuolo) {
		long primaryKey = rubricaRuolo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RubricaRuolo)) {
			return false;
		}

		RubricaRuolo rubricaRuolo = (RubricaRuolo)obj;

		long primaryKey = rubricaRuolo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		RubricaRuoloModelImpl rubricaRuoloModelImpl = this;

		rubricaRuoloModelImpl._originalFK_RUOLO_LIFERAY =
			rubricaRuoloModelImpl._FK_RUOLO_LIFERAY;

		rubricaRuoloModelImpl._setOriginalFK_RUOLO_LIFERAY = false;

		rubricaRuoloModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RubricaRuolo> toCacheModel() {
		RubricaRuoloCacheModel rubricaRuoloCacheModel =
			new RubricaRuoloCacheModel();

		rubricaRuoloCacheModel.ID_RUOLO = getID_RUOLO();

		rubricaRuoloCacheModel.DESCRIZIONE = getDESCRIZIONE();

		String DESCRIZIONE = rubricaRuoloCacheModel.DESCRIZIONE;

		if ((DESCRIZIONE != null) && (DESCRIZIONE.length() == 0)) {
			rubricaRuoloCacheModel.DESCRIZIONE = null;
		}

		rubricaRuoloCacheModel.FK_RUOLO_LIFERAY = getFK_RUOLO_LIFERAY();

		return rubricaRuoloCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<RubricaRuolo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<RubricaRuolo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RubricaRuolo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((RubricaRuolo)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<RubricaRuolo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<RubricaRuolo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RubricaRuolo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((RubricaRuolo)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		RubricaRuolo.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		RubricaRuolo.class, ModelWrapper.class
	};

	private long _ID_RUOLO;

	private String _DESCRIZIONE;

	private long _FK_RUOLO_LIFERAY;

	private long _originalFK_RUOLO_LIFERAY;
	private boolean _setOriginalFK_RUOLO_LIFERAY;
	private long _columnBitmask;
	private RubricaRuolo _escapedModel;

}