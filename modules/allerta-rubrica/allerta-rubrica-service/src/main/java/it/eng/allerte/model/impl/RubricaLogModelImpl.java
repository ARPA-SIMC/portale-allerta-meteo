/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.allerte.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.allerte.model.RubricaLog;
import it.eng.allerte.model.RubricaLogModel;
import it.eng.allerte.model.RubricaLogSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the RubricaLog service. Represents a row in the &quot;rubrica_RubricaLog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>RubricaLogModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RubricaLogImpl}.
 * </p>
 *
 * @author Pratola_L
 * @see RubricaLogImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class RubricaLogModelImpl
	extends BaseModelImpl<RubricaLog> implements RubricaLogModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a rubrica log model instance should use the <code>RubricaLog</code> interface instead.
	 */
	public static final String TABLE_NAME = "rubrica_RubricaLog";

	public static final Object[][] TABLE_COLUMNS = {
		{"ID_LOG", Types.BIGINT}, {"FK_SITO_PROPRIETARIO", Types.BIGINT},
		{"TABELLA", Types.VARCHAR}, {"TIPO_OPERAZIONE", Types.VARCHAR},
		{"ID_OGGETTO", Types.VARCHAR}, {"NUOVA_DESCRIZIONE", Types.VARCHAR},
		{"FK_UTENTE_MODIFICA", Types.BIGINT}, {"DATA_MODIFICA", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ID_LOG", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("FK_SITO_PROPRIETARIO", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("TABELLA", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("TIPO_OPERAZIONE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ID_OGGETTO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("NUOVA_DESCRIZIONE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FK_UTENTE_MODIFICA", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("DATA_MODIFICA", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table rubrica_RubricaLog (ID_LOG LONG not null primary key,FK_SITO_PROPRIETARIO LONG,TABELLA VARCHAR(75) null,TIPO_OPERAZIONE VARCHAR(75) null,ID_OGGETTO VARCHAR(75) null,NUOVA_DESCRIZIONE TEXT null,FK_UTENTE_MODIFICA LONG,DATA_MODIFICA DATE null)";

	public static final String TABLE_SQL_DROP = "drop table rubrica_RubricaLog";

	public static final String ORDER_BY_JPQL =
		" ORDER BY rubricaLog.ID_LOG ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY rubrica_RubricaLog.ID_LOG ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.rubrica.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.allerte.model.RubricaLog"),
		false);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.rubrica.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.allerte.model.RubricaLog"),
		false);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		it.eng.rubrica.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.it.eng.allerte.model.RubricaLog"),
		true);

	public static final long DATA_MODIFICA_COLUMN_BITMASK = 1L;

	public static final long FK_SITO_PROPRIETARIO_COLUMN_BITMASK = 2L;

	public static final long FK_UTENTE_MODIFICA_COLUMN_BITMASK = 4L;

	public static final long ID_OGGETTO_COLUMN_BITMASK = 8L;

	public static final long TABELLA_COLUMN_BITMASK = 16L;

	public static final long ID_LOG_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static RubricaLog toModel(RubricaLogSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RubricaLog model = new RubricaLogImpl();

		model.setID_LOG(soapModel.getID_LOG());
		model.setFK_SITO_PROPRIETARIO(soapModel.getFK_SITO_PROPRIETARIO());
		model.setTABELLA(soapModel.getTABELLA());
		model.setTIPO_OPERAZIONE(soapModel.getTIPO_OPERAZIONE());
		model.setID_OGGETTO(soapModel.getID_OGGETTO());
		model.setNUOVA_DESCRIZIONE(soapModel.getNUOVA_DESCRIZIONE());
		model.setFK_UTENTE_MODIFICA(soapModel.getFK_UTENTE_MODIFICA());
		model.setDATA_MODIFICA(soapModel.getDATA_MODIFICA());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<RubricaLog> toModels(RubricaLogSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<RubricaLog> models = new ArrayList<RubricaLog>(soapModels.length);

		for (RubricaLogSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		it.eng.rubrica.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.allerte.model.RubricaLog"));

	public RubricaLogModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ID_LOG;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setID_LOG(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ID_LOG;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RubricaLog.class;
	}

	@Override
	public String getModelClassName() {
		return RubricaLog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<RubricaLog, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<RubricaLog, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RubricaLog, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((RubricaLog)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<RubricaLog, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<RubricaLog, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(RubricaLog)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<RubricaLog, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<RubricaLog, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<RubricaLog, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<RubricaLog, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<RubricaLog, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<RubricaLog, Object>>();
		Map<String, BiConsumer<RubricaLog, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<RubricaLog, ?>>();

		attributeGetterFunctions.put(
			"ID_LOG",
			new Function<RubricaLog, Object>() {

				@Override
				public Object apply(RubricaLog rubricaLog) {
					return rubricaLog.getID_LOG();
				}

			});
		attributeSetterBiConsumers.put(
			"ID_LOG",
			new BiConsumer<RubricaLog, Object>() {

				@Override
				public void accept(RubricaLog rubricaLog, Object ID_LOG) {
					rubricaLog.setID_LOG((Long)ID_LOG);
				}

			});
		attributeGetterFunctions.put(
			"FK_SITO_PROPRIETARIO",
			new Function<RubricaLog, Object>() {

				@Override
				public Object apply(RubricaLog rubricaLog) {
					return rubricaLog.getFK_SITO_PROPRIETARIO();
				}

			});
		attributeSetterBiConsumers.put(
			"FK_SITO_PROPRIETARIO",
			new BiConsumer<RubricaLog, Object>() {

				@Override
				public void accept(
					RubricaLog rubricaLog, Object FK_SITO_PROPRIETARIO) {

					rubricaLog.setFK_SITO_PROPRIETARIO(
						(Long)FK_SITO_PROPRIETARIO);
				}

			});
		attributeGetterFunctions.put(
			"TABELLA",
			new Function<RubricaLog, Object>() {

				@Override
				public Object apply(RubricaLog rubricaLog) {
					return rubricaLog.getTABELLA();
				}

			});
		attributeSetterBiConsumers.put(
			"TABELLA",
			new BiConsumer<RubricaLog, Object>() {

				@Override
				public void accept(RubricaLog rubricaLog, Object TABELLA) {
					rubricaLog.setTABELLA((String)TABELLA);
				}

			});
		attributeGetterFunctions.put(
			"TIPO_OPERAZIONE",
			new Function<RubricaLog, Object>() {

				@Override
				public Object apply(RubricaLog rubricaLog) {
					return rubricaLog.getTIPO_OPERAZIONE();
				}

			});
		attributeSetterBiConsumers.put(
			"TIPO_OPERAZIONE",
			new BiConsumer<RubricaLog, Object>() {

				@Override
				public void accept(
					RubricaLog rubricaLog, Object TIPO_OPERAZIONE) {

					rubricaLog.setTIPO_OPERAZIONE((String)TIPO_OPERAZIONE);
				}

			});
		attributeGetterFunctions.put(
			"ID_OGGETTO",
			new Function<RubricaLog, Object>() {

				@Override
				public Object apply(RubricaLog rubricaLog) {
					return rubricaLog.getID_OGGETTO();
				}

			});
		attributeSetterBiConsumers.put(
			"ID_OGGETTO",
			new BiConsumer<RubricaLog, Object>() {

				@Override
				public void accept(RubricaLog rubricaLog, Object ID_OGGETTO) {
					rubricaLog.setID_OGGETTO((String)ID_OGGETTO);
				}

			});
		attributeGetterFunctions.put(
			"NUOVA_DESCRIZIONE",
			new Function<RubricaLog, Object>() {

				@Override
				public Object apply(RubricaLog rubricaLog) {
					return rubricaLog.getNUOVA_DESCRIZIONE();
				}

			});
		attributeSetterBiConsumers.put(
			"NUOVA_DESCRIZIONE",
			new BiConsumer<RubricaLog, Object>() {

				@Override
				public void accept(
					RubricaLog rubricaLog, Object NUOVA_DESCRIZIONE) {

					rubricaLog.setNUOVA_DESCRIZIONE((String)NUOVA_DESCRIZIONE);
				}

			});
		attributeGetterFunctions.put(
			"FK_UTENTE_MODIFICA",
			new Function<RubricaLog, Object>() {

				@Override
				public Object apply(RubricaLog rubricaLog) {
					return rubricaLog.getFK_UTENTE_MODIFICA();
				}

			});
		attributeSetterBiConsumers.put(
			"FK_UTENTE_MODIFICA",
			new BiConsumer<RubricaLog, Object>() {

				@Override
				public void accept(
					RubricaLog rubricaLog, Object FK_UTENTE_MODIFICA) {

					rubricaLog.setFK_UTENTE_MODIFICA((Long)FK_UTENTE_MODIFICA);
				}

			});
		attributeGetterFunctions.put(
			"DATA_MODIFICA",
			new Function<RubricaLog, Object>() {

				@Override
				public Object apply(RubricaLog rubricaLog) {
					return rubricaLog.getDATA_MODIFICA();
				}

			});
		attributeSetterBiConsumers.put(
			"DATA_MODIFICA",
			new BiConsumer<RubricaLog, Object>() {

				@Override
				public void accept(
					RubricaLog rubricaLog, Object DATA_MODIFICA) {

					rubricaLog.setDATA_MODIFICA((Date)DATA_MODIFICA);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getID_LOG() {
		return _ID_LOG;
	}

	@Override
	public void setID_LOG(long ID_LOG) {
		_ID_LOG = ID_LOG;
	}

	@JSON
	@Override
	public long getFK_SITO_PROPRIETARIO() {
		return _FK_SITO_PROPRIETARIO;
	}

	@Override
	public void setFK_SITO_PROPRIETARIO(long FK_SITO_PROPRIETARIO) {
		_columnBitmask |= FK_SITO_PROPRIETARIO_COLUMN_BITMASK;

		if (!_setOriginalFK_SITO_PROPRIETARIO) {
			_setOriginalFK_SITO_PROPRIETARIO = true;

			_originalFK_SITO_PROPRIETARIO = _FK_SITO_PROPRIETARIO;
		}

		_FK_SITO_PROPRIETARIO = FK_SITO_PROPRIETARIO;
	}

	public long getOriginalFK_SITO_PROPRIETARIO() {
		return _originalFK_SITO_PROPRIETARIO;
	}

	@JSON
	@Override
	public String getTABELLA() {
		if (_TABELLA == null) {
			return "";
		}
		else {
			return _TABELLA;
		}
	}

	@Override
	public void setTABELLA(String TABELLA) {
		_columnBitmask |= TABELLA_COLUMN_BITMASK;

		if (_originalTABELLA == null) {
			_originalTABELLA = _TABELLA;
		}

		_TABELLA = TABELLA;
	}

	public String getOriginalTABELLA() {
		return GetterUtil.getString(_originalTABELLA);
	}

	@JSON
	@Override
	public String getTIPO_OPERAZIONE() {
		if (_TIPO_OPERAZIONE == null) {
			return "";
		}
		else {
			return _TIPO_OPERAZIONE;
		}
	}

	@Override
	public void setTIPO_OPERAZIONE(String TIPO_OPERAZIONE) {
		_TIPO_OPERAZIONE = TIPO_OPERAZIONE;
	}

	@JSON
	@Override
	public String getID_OGGETTO() {
		if (_ID_OGGETTO == null) {
			return "";
		}
		else {
			return _ID_OGGETTO;
		}
	}

	@Override
	public void setID_OGGETTO(String ID_OGGETTO) {
		_columnBitmask |= ID_OGGETTO_COLUMN_BITMASK;

		if (_originalID_OGGETTO == null) {
			_originalID_OGGETTO = _ID_OGGETTO;
		}

		_ID_OGGETTO = ID_OGGETTO;
	}

	public String getOriginalID_OGGETTO() {
		return GetterUtil.getString(_originalID_OGGETTO);
	}

	@JSON
	@Override
	public String getNUOVA_DESCRIZIONE() {
		if (_NUOVA_DESCRIZIONE == null) {
			return "";
		}
		else {
			return _NUOVA_DESCRIZIONE;
		}
	}

	@Override
	public void setNUOVA_DESCRIZIONE(String NUOVA_DESCRIZIONE) {
		_NUOVA_DESCRIZIONE = NUOVA_DESCRIZIONE;
	}

	@JSON
	@Override
	public long getFK_UTENTE_MODIFICA() {
		return _FK_UTENTE_MODIFICA;
	}

	@Override
	public void setFK_UTENTE_MODIFICA(long FK_UTENTE_MODIFICA) {
		_columnBitmask |= FK_UTENTE_MODIFICA_COLUMN_BITMASK;

		if (!_setOriginalFK_UTENTE_MODIFICA) {
			_setOriginalFK_UTENTE_MODIFICA = true;

			_originalFK_UTENTE_MODIFICA = _FK_UTENTE_MODIFICA;
		}

		_FK_UTENTE_MODIFICA = FK_UTENTE_MODIFICA;
	}

	public long getOriginalFK_UTENTE_MODIFICA() {
		return _originalFK_UTENTE_MODIFICA;
	}

	@JSON
	@Override
	public Date getDATA_MODIFICA() {
		return _DATA_MODIFICA;
	}

	@Override
	public void setDATA_MODIFICA(Date DATA_MODIFICA) {
		_columnBitmask |= DATA_MODIFICA_COLUMN_BITMASK;

		if (_originalDATA_MODIFICA == null) {
			_originalDATA_MODIFICA = _DATA_MODIFICA;
		}

		_DATA_MODIFICA = DATA_MODIFICA;
	}

	public Date getOriginalDATA_MODIFICA() {
		return _originalDATA_MODIFICA;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, RubricaLog.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RubricaLog toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RubricaLog)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RubricaLogImpl rubricaLogImpl = new RubricaLogImpl();

		rubricaLogImpl.setID_LOG(getID_LOG());
		rubricaLogImpl.setFK_SITO_PROPRIETARIO(getFK_SITO_PROPRIETARIO());
		rubricaLogImpl.setTABELLA(getTABELLA());
		rubricaLogImpl.setTIPO_OPERAZIONE(getTIPO_OPERAZIONE());
		rubricaLogImpl.setID_OGGETTO(getID_OGGETTO());
		rubricaLogImpl.setNUOVA_DESCRIZIONE(getNUOVA_DESCRIZIONE());
		rubricaLogImpl.setFK_UTENTE_MODIFICA(getFK_UTENTE_MODIFICA());
		rubricaLogImpl.setDATA_MODIFICA(getDATA_MODIFICA());

		rubricaLogImpl.resetOriginalValues();

		return rubricaLogImpl;
	}

	@Override
	public int compareTo(RubricaLog rubricaLog) {
		long primaryKey = rubricaLog.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RubricaLog)) {
			return false;
		}

		RubricaLog rubricaLog = (RubricaLog)obj;

		long primaryKey = rubricaLog.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		RubricaLogModelImpl rubricaLogModelImpl = this;

		rubricaLogModelImpl._originalFK_SITO_PROPRIETARIO =
			rubricaLogModelImpl._FK_SITO_PROPRIETARIO;

		rubricaLogModelImpl._setOriginalFK_SITO_PROPRIETARIO = false;

		rubricaLogModelImpl._originalTABELLA = rubricaLogModelImpl._TABELLA;

		rubricaLogModelImpl._originalID_OGGETTO =
			rubricaLogModelImpl._ID_OGGETTO;

		rubricaLogModelImpl._originalFK_UTENTE_MODIFICA =
			rubricaLogModelImpl._FK_UTENTE_MODIFICA;

		rubricaLogModelImpl._setOriginalFK_UTENTE_MODIFICA = false;

		rubricaLogModelImpl._originalDATA_MODIFICA =
			rubricaLogModelImpl._DATA_MODIFICA;

		rubricaLogModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RubricaLog> toCacheModel() {
		RubricaLogCacheModel rubricaLogCacheModel = new RubricaLogCacheModel();

		rubricaLogCacheModel.ID_LOG = getID_LOG();

		rubricaLogCacheModel.FK_SITO_PROPRIETARIO = getFK_SITO_PROPRIETARIO();

		rubricaLogCacheModel.TABELLA = getTABELLA();

		String TABELLA = rubricaLogCacheModel.TABELLA;

		if ((TABELLA != null) && (TABELLA.length() == 0)) {
			rubricaLogCacheModel.TABELLA = null;
		}

		rubricaLogCacheModel.TIPO_OPERAZIONE = getTIPO_OPERAZIONE();

		String TIPO_OPERAZIONE = rubricaLogCacheModel.TIPO_OPERAZIONE;

		if ((TIPO_OPERAZIONE != null) && (TIPO_OPERAZIONE.length() == 0)) {
			rubricaLogCacheModel.TIPO_OPERAZIONE = null;
		}

		rubricaLogCacheModel.ID_OGGETTO = getID_OGGETTO();

		String ID_OGGETTO = rubricaLogCacheModel.ID_OGGETTO;

		if ((ID_OGGETTO != null) && (ID_OGGETTO.length() == 0)) {
			rubricaLogCacheModel.ID_OGGETTO = null;
		}

		rubricaLogCacheModel.NUOVA_DESCRIZIONE = getNUOVA_DESCRIZIONE();

		String NUOVA_DESCRIZIONE = rubricaLogCacheModel.NUOVA_DESCRIZIONE;

		if ((NUOVA_DESCRIZIONE != null) && (NUOVA_DESCRIZIONE.length() == 0)) {
			rubricaLogCacheModel.NUOVA_DESCRIZIONE = null;
		}

		rubricaLogCacheModel.FK_UTENTE_MODIFICA = getFK_UTENTE_MODIFICA();

		Date DATA_MODIFICA = getDATA_MODIFICA();

		if (DATA_MODIFICA != null) {
			rubricaLogCacheModel.DATA_MODIFICA = DATA_MODIFICA.getTime();
		}
		else {
			rubricaLogCacheModel.DATA_MODIFICA = Long.MIN_VALUE;
		}

		return rubricaLogCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<RubricaLog, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<RubricaLog, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RubricaLog, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((RubricaLog)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<RubricaLog, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<RubricaLog, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RubricaLog, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((RubricaLog)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		RubricaLog.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		RubricaLog.class, ModelWrapper.class
	};

	private long _ID_LOG;

	private long _FK_SITO_PROPRIETARIO;

	private long _originalFK_SITO_PROPRIETARIO;
	private boolean _setOriginalFK_SITO_PROPRIETARIO;

	private String _TABELLA;

	private String _originalTABELLA;

	private String _TIPO_OPERAZIONE;

	private String _ID_OGGETTO;

	private String _originalID_OGGETTO;

	private String _NUOVA_DESCRIZIONE;

	private long _FK_UTENTE_MODIFICA;

	private long _originalFK_UTENTE_MODIFICA;
	private boolean _setOriginalFK_UTENTE_MODIFICA;

	private Date _DATA_MODIFICA;

	private Date _originalDATA_MODIFICA;
	private long _columnBitmask;
	private RubricaLog _escapedModel;

}