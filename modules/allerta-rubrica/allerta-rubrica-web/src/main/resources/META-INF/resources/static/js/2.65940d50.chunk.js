(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[2],[
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (true) {
  module.exports = __webpack_require__(274);
} else {}

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(278);


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});

var utils_1 = __webpack_require__(6);

var Context =
/** @class */
function () {
  function Context(params, logger) {
    this.beanWrappers = {};
    this.componentsMappedByName = {};
    this.destroyed = false;

    if (!params || !params.beans) {
      return;
    }

    this.contextParams = params;
    this.logger = logger;
    this.logger.log(">> creating ag-Application Context");
    this.setupComponents();
    this.createBeans();
    var beanInstances = this.getBeanInstances();
    this.wireBeans(beanInstances);
    this.logger.log(">> ag-Application Context ready - component is alive");
  }

  Context.prototype.getBeanInstances = function () {
    return utils_1._.mapObject(this.beanWrappers, function (beanEntry) {
      return beanEntry.beanInstance;
    });
  };

  Context.prototype.setupComponents = function () {
    var _this = this;

    if (this.contextParams.components) {
      this.contextParams.components.forEach(function (componentMeta) {
        return _this.addComponent(componentMeta);
      });
    }
  };

  Context.prototype.addComponent = function (componentMeta) {
    // get name of the class as a string
    // let className = _.getNameOfClass(ComponentClass);
    // insert a dash after every capital letter
    // let classEscaped = className.replace(/([A-Z])/g, "-$1").toLowerCase();
    var classEscaped = componentMeta.componentName.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase(); // put all to upper case

    var classUpperCase = classEscaped.toUpperCase(); // finally store

    this.componentsMappedByName[classUpperCase] = componentMeta.theClass;
  };

  Context.prototype.createComponentFromElement = function (element, afterPreCreateCallback) {
    var key = element.nodeName;

    if (this.componentsMappedByName && this.componentsMappedByName[key]) {
      var newComponent = new this.componentsMappedByName[key]();
      this.wireBean(newComponent, afterPreCreateCallback);
      return newComponent;
    } else {
      return null;
    }
  }; // public createBean(BeanClass: new () => any): Component {
  //     const beanInstance = new BeanClass();
  //     this.wireBean(beanInstance);
  //     return beanInstance;
  // }


  Context.prototype.wireBean = function (bean, afterPreCreateCallback) {
    if (!bean) {
      throw Error("Can't wire to bean since it is null");
    }

    this.wireBeans([bean], afterPreCreateCallback);
  };

  Context.prototype.wireBeans = function (beanInstances, afterPreCreateCallback) {
    this.autoWireBeans(beanInstances);
    this.methodWireBeans(beanInstances);
    this.callLifeCycleMethods(beanInstances, 'preConstructMethods'); // the callback sets the attributes, so the component has access to attributes
    // before postConstruct methods in the component are executed

    if (utils_1._.exists(afterPreCreateCallback)) {
      beanInstances.forEach(afterPreCreateCallback);
    }

    this.callLifeCycleMethods(beanInstances, 'postConstructMethods');
  };

  Context.prototype.createBeans = function () {
    var _this = this; // register all normal beans


    this.contextParams.beans.forEach(this.createBeanWrapper.bind(this)); // register override beans, these will overwrite beans above of same name

    if (this.contextParams.overrideBeans) {
      this.contextParams.overrideBeans.forEach(this.createBeanWrapper.bind(this));
    } // instantiate all beans - overridden beans will be left out


    utils_1._.iterateObject(this.beanWrappers, function (key, beanEntry) {
      var constructorParamsMeta;

      if (beanEntry.bean.__agBeanMetaData && beanEntry.bean.__agBeanMetaData.autowireMethods && beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor) {
        constructorParamsMeta = beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor;
      }

      var constructorParams = _this.getBeansForParameters(constructorParamsMeta, beanEntry.bean.name);

      var newInstance = applyToConstructor(beanEntry.bean, constructorParams);
      beanEntry.beanInstance = newInstance;

      _this.logger.log("bean " + _this.getBeanName(newInstance) + " created");
    });
  }; // tslint:disable-next-line


  Context.prototype.createBeanWrapper = function (Bean) {
    var metaData = Bean.__agBeanMetaData;

    if (!metaData) {
      var beanName = void 0;

      if (Bean.prototype.constructor) {
        beanName = Bean.prototype.constructor.name;
      } else {
        beanName = "" + Bean;
      }

      console.error("context item " + beanName + " is not a bean");
      return;
    }

    var beanEntry = {
      bean: Bean,
      beanInstance: null,
      beanName: metaData.beanName
    };
    this.beanWrappers[metaData.beanName] = beanEntry;
  };

  Context.prototype.autoWireBeans = function (beanInstances) {
    var _this = this;

    beanInstances.forEach(function (beanInstance) {
      _this.forEachMetaDataInHierarchy(beanInstance, function (metaData, beanName) {
        var attributes = metaData.agClassAttributes;

        if (!attributes) {
          return;
        }

        attributes.forEach(function (attribute) {
          var otherBean = _this.lookupBeanInstance(beanName, attribute.beanName, attribute.optional);

          beanInstance[attribute.attributeName] = otherBean;
        });
      });
    });
  };

  Context.prototype.methodWireBeans = function (beanInstances) {
    var _this = this;

    beanInstances.forEach(function (beanInstance) {
      _this.forEachMetaDataInHierarchy(beanInstance, function (metaData, beanName) {
        utils_1._.iterateObject(metaData.autowireMethods, function (methodName, wireParams) {
          // skip constructor, as this is dealt with elsewhere
          if (methodName === "agConstructor") {
            return;
          }

          var initParams = _this.getBeansForParameters(wireParams, beanName);

          beanInstance[methodName].apply(beanInstance, initParams);
        });
      });
    });
  };

  Context.prototype.forEachMetaDataInHierarchy = function (beanInstance, callback) {
    var prototype = Object.getPrototypeOf(beanInstance);

    while (prototype != null) {
      var constructor = prototype.constructor;

      if (constructor.hasOwnProperty('__agBeanMetaData')) {
        var metaData = constructor.__agBeanMetaData;
        var beanName = this.getBeanName(constructor);
        callback(metaData, beanName);
      }

      prototype = Object.getPrototypeOf(prototype);
    }
  };

  Context.prototype.getBeanName = function (constructor) {
    if (constructor.__agBeanMetaData && constructor.__agBeanMetaData.beanName) {
      return constructor.__agBeanMetaData.beanName;
    }

    var constructorString = constructor.toString();
    var beanName = constructorString.substring(9, constructorString.indexOf("("));
    return beanName;
  };

  Context.prototype.getBeansForParameters = function (parameters, beanName) {
    var _this = this;

    var beansList = [];

    if (parameters) {
      utils_1._.iterateObject(parameters, function (paramIndex, otherBeanName) {
        var otherBean = _this.lookupBeanInstance(beanName, otherBeanName);

        beansList[Number(paramIndex)] = otherBean;
      });
    }

    return beansList;
  };

  Context.prototype.lookupBeanInstance = function (wiringBean, beanName, optional) {
    if (optional === void 0) {
      optional = false;
    }

    if (beanName === "context") {
      return this;
    } else if (this.contextParams.seed && this.contextParams.seed.hasOwnProperty(beanName)) {
      return this.contextParams.seed[beanName];
    } else {
      var beanEntry = this.beanWrappers[beanName];

      if (beanEntry) {
        return beanEntry.beanInstance;
      }

      if (!optional) {
        console.error("ag-Grid: unable to find bean reference " + beanName + " while initialising " + wiringBean);
      }

      return null;
    }
  };

  Context.prototype.callLifeCycleMethods = function (beanInstances, lifeCycleMethod) {
    var _this = this;

    beanInstances.forEach(function (beanInstance) {
      _this.forEachMetaDataInHierarchy(beanInstance, function (metaData) {
        var methods = metaData[lifeCycleMethod];

        if (!methods) {
          return;
        }

        methods.forEach(function (methodName) {
          return beanInstance[methodName]();
        });
      });
    });
  };

  Context.prototype.getBean = function (name) {
    return this.lookupBeanInstance("getBean", name, true);
  };

  Context.prototype.getEnterpriseDefaultComponents = function () {
    return this.contextParams.enterpriseDefaultComponents;
  };

  Context.prototype.destroy = function () {
    // should only be able to destroy once
    if (this.destroyed) {
      return;
    }

    this.logger.log(">> Shutting down ag-Application Context");
    var beanInstances = this.getBeanInstances();
    this.callLifeCycleMethods(beanInstances, 'preDestroyMethods');
    this.contextParams.seed = null;
    this.destroyed = true;
    this.logger.log(">> ag-Application Context shut down - component is dead");
  };

  return Context;
}();

exports.Context = Context; // taken from: http://stackoverflow.com/questions/3362471/how-can-i-call-a-javascript-constructor-using-call-or-apply
// allows calling 'apply' on a constructor

function applyToConstructor(constructor, argArray) {
  var args = [null].concat(argArray);
  var factoryFunction = constructor.bind.apply(constructor, args);
  return new factoryFunction();
}

function PreConstruct(target, methodName, descriptor) {
  var props = getOrCreateProps(target.constructor);

  if (!props.postConstructMethods) {
    props.preConstructMethods = [];
  }

  props.preConstructMethods.push(methodName);
}

exports.PreConstruct = PreConstruct;

function PostConstruct(target, methodName, descriptor) {
  var props = getOrCreateProps(target.constructor);

  if (!props.postConstructMethods) {
    props.postConstructMethods = [];
  }

  props.postConstructMethods.push(methodName);
}

exports.PostConstruct = PostConstruct;

function PreDestroy(target, methodName, descriptor) {
  var props = getOrCreateProps(target.constructor);

  if (!props.preDestroyMethods) {
    props.preDestroyMethods = [];
  }

  props.preDestroyMethods.push(methodName);
}

exports.PreDestroy = PreDestroy;

function Bean(beanName) {
  return function (classConstructor) {
    var props = getOrCreateProps(classConstructor);
    props.beanName = beanName;
  };
}

exports.Bean = Bean;

function Autowired(name) {
  return function (target, propertyKey, descriptor) {
    autowiredFunc(target, name, false, target, propertyKey, null);
  };
}

exports.Autowired = Autowired;

function Optional(name) {
  return function (target, propertyKey, descriptor) {
    autowiredFunc(target, name, true, target, propertyKey, null);
  };
}

exports.Optional = Optional;

function autowiredFunc(target, name, optional, classPrototype, methodOrAttributeName, index) {
  if (name === null) {
    console.error("ag-Grid: Autowired name should not be null");
    return;
  }

  if (typeof index === "number") {
    console.error("ag-Grid: Autowired should be on an attribute");
    return;
  } // it's an attribute on the class


  var props = getOrCreateProps(target.constructor);

  if (!props.agClassAttributes) {
    props.agClassAttributes = [];
  }

  props.agClassAttributes.push({
    attributeName: methodOrAttributeName,
    beanName: name,
    optional: optional
  });
}

function Qualifier(name) {
  return function (classPrototype, methodOrAttributeName, index) {
    var constructor = typeof classPrototype == "function" ? classPrototype : classPrototype.constructor;
    var props;

    if (typeof index === "number") {
      // it's a parameter on a method
      var methodName = void 0;

      if (methodOrAttributeName) {
        props = getOrCreateProps(constructor);
        methodName = methodOrAttributeName;
      } else {
        props = getOrCreateProps(constructor);
        methodName = "agConstructor";
      }

      if (!props.autowireMethods) {
        props.autowireMethods = {};
      }

      if (!props.autowireMethods[methodName]) {
        props.autowireMethods[methodName] = {};
      }

      props.autowireMethods[methodName][index] = name;
    }
  };
}

exports.Qualifier = Qualifier;

function getOrCreateProps(target) {
  if (!target.hasOwnProperty("__agBeanMetaData")) {
    target.__agBeanMetaData = {};
  }

  return target.__agBeanMetaData;
}

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _ToastContainer = _interopRequireDefault(__webpack_require__(280));

exports.ToastContainer = _ToastContainer.default;

var _Transitions = __webpack_require__(189);

exports.Bounce = _Transitions.Bounce;
exports.Slide = _Transitions.Slide;
exports.Zoom = _Transitions.Zoom;
exports.Flip = _Transitions.Flip;

var _constant = __webpack_require__(83);

exports.ToastPosition = _constant.POSITION;
exports.ToastType = _constant.TYPE;

var _toast = _interopRequireDefault(__webpack_require__(290));

exports.toast = _toast.default;

var _cssTransition = _interopRequireDefault(__webpack_require__(190));

exports.cssTransition = _cssTransition.default;

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

/***/ }),
/* 4 */,
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _asyncToGenerator; });
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});

var constants_1 = __webpack_require__(19);

var FUNCTION_STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
var FUNCTION_ARGUMENT_NAMES = /([^\s,]+)/g;
var AG_GRID_STOP_PROPAGATION = '__ag_Grid_Stop_Propagation'; // util class, only used when debugging, for printing time to console

var Timer =
/** @class */
function () {
  function Timer() {
    this.timestamp = new Date().getTime();
  }

  Timer.prototype.print = function (msg) {
    var duration = new Date().getTime() - this.timestamp;
    console.info(msg + " = " + duration);
    this.timestamp = new Date().getTime();
  };

  return Timer;
}();

exports.Timer = Timer;
/** HTML Escapes. */

var HTML_ESCAPES = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;'
};
var reUnescapedHtml = /[&<>"']/g;

var Utils =
/** @class */
function () {
  function Utils() {} // https://ag-grid.com/forum/showthread.php?tid=4362
  // when in IE or Edge, when you are editing a cell, then click on another cell,
  // the other cell doesn't keep focus, so navigation keys, type to start edit etc
  // don't work. appears that when you update the dom in IE it looses focus


  Utils.doIeFocusHack = function (el) {
    if (exports._.isBrowserIE() || exports._.isBrowserEdge()) {
      if (exports._.missing(document.activeElement) || document.activeElement === document.body) {
        // console.log('missing focus');
        el.focus();
      }
    }
  }; // if the key was passed before, then doesn't execute the func


  Utils.doOnce = function (func, key) {
    if (this.doOnceFlags[key]) {
      return;
    }

    func();
    this.doOnceFlags[key] = true;
  }; // got from https://stackoverflow.com/questions/3944122/detect-left-mouse-button-press


  Utils.isLeftClick = function (mouseEvent) {
    if ("buttons" in mouseEvent) {
      return mouseEvent.buttons == 1;
    }

    var button = mouseEvent.which || mouseEvent.button;
    return button == 1;
  }; // returns true if the event is close to the original event by X pixels either vertically or horizontally.
  // we only start dragging after X pixels so this allows us to know if we should start dragging yet.


  Utils.areEventsNear = function (e1, e2, pixelCount) {
    // by default, we wait 4 pixels before starting the drag
    if (pixelCount === 0) {
      return false;
    }

    var diffX = Math.abs(e1.clientX - e2.clientX);
    var diffY = Math.abs(e1.clientY - e2.clientY);
    return Math.max(diffX, diffY) <= pixelCount;
  };

  Utils.jsonEquals = function (val1, val2) {
    var val1Json = val1 ? JSON.stringify(val1) : null;
    var val2Json = val2 ? JSON.stringify(val2) : null;
    var res = val1Json === val2Json;
    return res;
  };

  Utils.shallowCompare = function (arr1, arr2) {
    // if both are missing, then they are the same
    if (this.missing(arr1) && this.missing(arr2)) {
      return true;
    } // if one is present, but other is missing, then then are different


    if (this.missing(arr1) || this.missing(arr2)) {
      return false;
    }

    if (arr1.length !== arr2.length) {
      return false;
    }

    for (var i = 0; i < arr1.length; i++) {
      if (arr1[i] !== arr2[i]) {
        return false;
      }
    }

    return true;
  };

  Utils.getNameOfClass = function (TheClass) {
    var funcNameRegex = /function (.{1,})\(/;
    var funcAsString = TheClass.toString();
    var results = funcNameRegex.exec(funcAsString);
    return results && results.length > 1 ? results[1] : "";
  };

  Utils.values = function (object) {
    var result = [];
    this.iterateObject(object, function (key, value) {
      result.push(value);
    });
    return result;
  };

  Utils.getValueUsingField = function (data, field, fieldContainsDots) {
    if (!field || !data) {
      return;
    } // if no '.', then it's not a deep value


    if (!fieldContainsDots) {
      return data[field];
    } else {
      // otherwise it is a deep value, so need to dig for it
      var fields = field.split('.');
      var currentObject = data;

      for (var i = 0; i < fields.length; i++) {
        currentObject = currentObject[fields[i]];

        if (this.missing(currentObject)) {
          return null;
        }
      }

      return currentObject;
    }
  };

  Utils.getAbsoluteHeight = function (el) {
    var styles = window.getComputedStyle(el);
    var margin = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);
    return Math.ceil(el.offsetHeight + margin);
  };

  Utils.getAbsoluteWidth = function (el) {
    var styles = window.getComputedStyle(el);
    var margin = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);
    return Math.ceil(el.offsetWidth + margin);
  };

  Utils.getScrollLeft = function (element, rtl) {
    var scrollLeft = element.scrollLeft;

    if (rtl) {
      // Absolute value - for FF that reports RTL scrolls in negative numbers
      scrollLeft = Math.abs(scrollLeft); // Get Chrome to return the same value as well

      if (this.isBrowserChrome()) {
        scrollLeft = element.scrollWidth - element.clientWidth - scrollLeft;
      }
    }

    return scrollLeft;
  };

  Utils.cleanNumber = function (value) {
    if (typeof value === 'string') {
      value = parseInt(value, 10);
    }

    if (typeof value === 'number') {
      value = Math.floor(value);
    } else {
      value = null;
    }

    return value;
  };

  Utils.setScrollLeft = function (element, value, rtl) {
    if (rtl) {
      // Chrome and Safari when doing RTL have the END position of the scroll as zero, not the start
      if (this.isBrowserSafari() || this.isBrowserChrome()) {
        value = element.scrollWidth - element.clientWidth - value;
      } // Firefox uses negative numbers when doing RTL scrolling


      if (this.isBrowserFirefox()) {
        value *= -1;
      }
    }

    element.scrollLeft = value;
  };

  Utils.iterateNamedNodeMap = function (map, callback) {
    if (!map) {
      return;
    }

    for (var i = 0; i < map.length; i++) {
      var attr = map[i];
      callback(attr.name, attr.value);
    }
  };

  Utils.iterateObject = function (object, callback) {
    if (!object || this.missing(object)) {
      return;
    }

    if (Array.isArray(object)) {
      object.forEach(function (value, index) {
        callback(index + '', value);
      });
    } else {
      var keys = Object.keys(object);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var value = object[key];
        callback(key, value);
      }
    }
  };

  Utils.cloneObject = function (object) {
    var copy = {};
    var keys = Object.keys(object);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var value = object[key];
      copy[key] = value;
    }

    return copy;
  };

  Utils.deepCloneObject = function (object) {
    return JSON.parse(JSON.stringify(object));
  };

  Utils.map = function (array, callback) {
    var result = [];

    for (var i = 0; i < array.length; i++) {
      var item = array[i];
      var mappedItem = callback(item, i);
      result.push(mappedItem);
    }

    return result;
  };

  Utils.mapObject = function (object, callback) {
    var result = [];
    Utils.iterateObject(object, function (key, value) {
      result.push(callback(value));
    });
    return result;
  };

  Utils.forEach = function (array, callback) {
    if (!array) {
      return;
    }

    for (var i = 0; i < array.length; i++) {
      var value = array[i];
      callback(value, i);
    }
  };

  Utils.filter = function (array, callback) {
    var result = [];
    array.forEach(function (item) {
      if (callback(item)) {
        result.push(item);
      }
    });
    return result;
  };

  Utils.getAllKeysInObjects = function (objects) {
    var allValues = {};
    objects.forEach(function (obj) {
      if (obj) {
        Object.keys(obj).forEach(function (key) {
          return allValues[key] = null;
        });
      }
    });
    return Object.keys(allValues);
  };

  Utils.mergeDeep = function (dest, source) {
    if (!this.exists(source)) {
      return;
    }

    this.iterateObject(source, function (key, newValue) {
      var oldValue = dest[key];

      if (oldValue === newValue) {
        return;
      }

      if (typeof oldValue === 'object' && typeof newValue === 'object') {
        Utils.mergeDeep(oldValue, newValue);
      } else {
        dest[key] = newValue;
      }
    });
  };

  Utils.assign = function (object) {
    var _this = this;

    var sources = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      sources[_i - 1] = arguments[_i];
    }

    sources.forEach(function (source) {
      if (_this.exists(source)) {
        _this.iterateObject(source, function (key, value) {
          object[key] = value;
        });
      }
    });
    return object;
  };

  Utils.parseYyyyMmDdToDate = function (yyyyMmDd, separator) {
    try {
      if (!yyyyMmDd) {
        return null;
      }

      if (yyyyMmDd.indexOf(separator) === -1) {
        return null;
      }

      var fields = yyyyMmDd.split(separator);

      if (fields.length != 3) {
        return null;
      }

      return new Date(Number(fields[0]), Number(fields[1]) - 1, Number(fields[2]));
    } catch (e) {
      return null;
    }
  };

  Utils.serializeDateToYyyyMmDd = function (date, separator) {
    if (!date) {
      return null;
    }

    return date.getFullYear() + separator + Utils.pad(date.getMonth() + 1, 2) + separator + Utils.pad(date.getDate(), 2);
  };

  Utils.pad = function (num, totalStringSize) {
    var asString = num + "";

    while (asString.length < totalStringSize) {
      asString = "0" + asString;
    }

    return asString;
  };

  Utils.pushAll = function (target, source) {
    if (this.missing(source) || this.missing(target)) {
      return;
    }

    source.forEach(function (func) {
      return target.push(func);
    });
  };

  Utils.createArrayOfNumbers = function (first, last) {
    var result = [];

    for (var i = first; i <= last; i++) {
      result.push(i);
    }

    return result;
  };

  Utils.getFunctionParameters = function (func) {
    var fnStr = func.toString().replace(FUNCTION_STRIP_COMMENTS, '');
    var result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(FUNCTION_ARGUMENT_NAMES);

    if (result === null) {
      return [];
    } else {
      return result;
    }
  };

  Utils.find = function (collection, predicate, value) {
    if (collection === null || collection === undefined) {
      return null;
    }

    if (!Array.isArray(collection)) {
      var objToArray = this.values(collection);
      return this.find(objToArray, predicate, value);
    }

    var collectionAsArray = collection;
    var firstMatchingItem = null;

    for (var i = 0; i < collectionAsArray.length; i++) {
      var item = collectionAsArray[i];

      if (typeof predicate === 'string') {
        if (item[predicate] === value) {
          firstMatchingItem = item;
          break;
        }
      } else {
        var callback = predicate;

        if (callback(item)) {
          firstMatchingItem = item;
          break;
        }
      }
    }

    return firstMatchingItem;
  };

  Utils.toStrings = function (array) {
    return this.map(array, function (item) {
      if (item === undefined || item === null || !item.toString) {
        return null;
      } else {
        return item.toString();
      }
    });
  };

  Utils.iterateArray = function (array, callback) {
    for (var index = 0; index < array.length; index++) {
      var value = array[index];
      callback(value, index);
    }
  }; //Returns true if it is a DOM node
  //taken from: http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object


  Utils.isNode = function (o) {
    return typeof Node === "function" ? o instanceof Node : o && typeof o === "object" && typeof o.nodeType === "number" && typeof o.nodeName === "string";
  }; //Returns true if it is a DOM element
  //taken from: http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object


  Utils.isElement = function (o) {
    return typeof HTMLElement === "function" ? o instanceof HTMLElement : //DOM2
    o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string";
  };

  Utils.isNodeOrElement = function (o) {
    return this.isNode(o) || this.isElement(o);
  }; // makes a copy of a node list into a list


  Utils.copyNodeList = function (nodeList) {
    var childCount = nodeList ? nodeList.length : 0;
    var res = [];

    for (var i = 0; i < childCount; i++) {
      res.push(nodeList[i]);
    }

    return res;
  };

  Utils.isEventFromPrintableCharacter = function (event) {
    var pressedChar = String.fromCharCode(event.charCode); // newline is an exception, as it counts as a printable character, but we don't
    // want to start editing when it is pressed. without this check, if user is in chrome
    // and editing a cell, and they press ctrl+enter, the cell stops editing, and then
    // starts editing again with a blank value (two 'key down' events are fired). to
    // test this, remove the line below, edit a cell in chrome and hit ctrl+enter while editing.
    // https://ag-grid.atlassian.net/browse/AG-605

    if (this.isKeyPressed(event, constants_1.Constants.KEY_NEW_LINE)) {
      return false;
    } // no allowed printable chars have alt or ctrl key combinations


    if (event.altKey || event.ctrlKey) {
      return false;
    }

    if (exports._.exists(event.key)) {
      // modern browser will implement key, so we return if key is length 1, eg if it is 'a' for the
      // a key, or '2' for the '2' key. non-printable characters have names, eg 'Enter' or 'Backspace'.
      var printableCharacter = event.key.length === 1; // IE11 & Edge treat the numpad del key differently - with numlock on we get "Del" for key,
      // so this addition checks if its IE11/Edge and handles that specific case the same was as all other browsers

      var numpadDelWithNumlockOnForEdgeOrIe = Utils.isNumpadDelWithNumlockOnForEdgeOrIe(event);
      return printableCharacter || numpadDelWithNumlockOnForEdgeOrIe;
    } else {
      // otherwise, for older browsers, we test against a list of characters, which doesn't include
      // accents for non-English, but don't care much, as most users are on modern browsers
      return Utils.PRINTABLE_CHARACTERS.indexOf(pressedChar) >= 0;
    }
  }; // allows user to tell the grid to skip specific keyboard events


  Utils.isUserSuppressingKeyboardEvent = function (gridOptionsWrapper, keyboardEvent, rowNode, column, editing) {
    var gridOptionsFunc = gridOptionsWrapper.getSuppressKeyboardEventFunc();
    var colDefFunc = column.getColDef().suppressKeyboardEvent; // if no callbacks provided by user, then do nothing

    if (!gridOptionsFunc && !colDefFunc) {
      return false;
    }

    var params = {
      event: keyboardEvent,
      editing: editing,
      column: column,
      api: gridOptionsWrapper.getApi(),
      node: rowNode,
      data: rowNode.data,
      colDef: column.getColDef(),
      context: gridOptionsWrapper.getContext(),
      columnApi: gridOptionsWrapper.getColumnApi()
    }; // colDef get first preference on suppressing events

    if (colDefFunc) {
      var colDefFuncResult = colDefFunc(params); // if colDef func suppressed, then return now, no need to call gridOption func

      if (colDefFuncResult) {
        return true;
      }
    }

    if (gridOptionsFunc) {
      // if gridOption func, return the result
      return gridOptionsFunc(params);
    } else {
      // otherwise return false, don't suppress, as colDef didn't suppress and no func on gridOptions
      return false;
    }
  };

  Utils.getCellCompForEvent = function (gridOptionsWrapper, event) {
    var sourceElement = this.getTarget(event);

    while (sourceElement) {
      var renderedCell = gridOptionsWrapper.getDomData(sourceElement, 'cellComp');

      if (renderedCell) {
        return renderedCell;
      }

      sourceElement = sourceElement.parentElement;
    }

    return null;
  }; //adds all type of change listeners to an element, intended to be a text field


  Utils.addChangeListener = function (element, listener) {
    element.addEventListener("changed", listener);
    element.addEventListener("paste", listener);
    element.addEventListener("input", listener); // IE doesn't fire changed for special keys (eg delete, backspace), so need to
    // listen for this further ones

    element.addEventListener("keydown", listener);
    element.addEventListener("keyup", listener);
  }; //if value is undefined, null or blank, returns null, otherwise returns the value


  Utils.makeNull = function (value) {
    var valueNoType = value;

    if (value === null || value === undefined || valueNoType === "") {
      return null;
    } else {
      return value;
    }
  };

  Utils.missing = function (value) {
    return !this.exists(value);
  };

  Utils.missingOrEmpty = function (value) {
    return !value || this.missing(value) || value.length === 0;
  };

  Utils.missingOrEmptyObject = function (value) {
    return this.missing(value) || Object.keys(value).length === 0;
  };

  Utils.exists = function (value, allowEmptyString) {
    if (allowEmptyString === void 0) {
      allowEmptyString = false;
    }

    return value != null && (value !== '' || allowEmptyString);
  };

  Utils.firstExistingValue = function () {
    var values = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      values[_i] = arguments[_i];
    }

    for (var i = 0; i < values.length; i++) {
      var value = values[i];

      if (exports._.exists(value)) {
        return value;
      }
    }

    return null;
  };

  Utils.anyExists = function (values) {
    if (values) {
      for (var i = 0; i < values.length; i++) {
        if (this.exists(values[i])) {
          return true;
        }
      }
    }

    return false;
  };

  Utils.existsAndNotEmpty = function (value) {
    return value != null && this.exists(value) && value.length > 0;
  };

  Utils.clearElement = function (el) {
    while (el && el.firstChild) {
      el.removeChild(el.firstChild);
    }
  };

  Utils.removeElement = function (parent, cssSelector) {
    this.removeFromParent(parent.querySelector(cssSelector));
  };

  Utils.removeFromParent = function (node) {
    if (node && node.parentNode) {
      node.parentNode.removeChild(node);
    }
  };

  Utils.isVisible = function (element) {
    return element.offsetParent !== null;
  };
  /**
   * loads the template and returns it as an element. makes up for no simple way in
   * the dom api to load html directly, eg we cannot do this: document.createElement(template)
   */


  Utils.loadTemplate = function (template) {
    var tempDiv = document.createElement("div");
    tempDiv.innerHTML = template;
    return tempDiv.firstChild;
  };

  Utils.appendHtml = function (eContainer, htmlTemplate) {
    if (eContainer.lastChild) {
      // https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML
      // we put the items at the start, so new items appear underneath old items,
      // so when expanding/collapsing groups, the new rows don't go on top of the
      // rows below that are moving our of the way
      eContainer.insertAdjacentHTML('afterbegin', htmlTemplate);
    } else {
      eContainer.innerHTML = htmlTemplate;
    }
  };

  Utils.addOrRemoveCssClass = function (element, className, addOrRemove) {
    if (addOrRemove) {
      this.addCssClass(element, className);
    } else {
      this.removeCssClass(element, className);
    }
  };

  Utils.callIfPresent = function (func) {
    if (func) {
      func();
    }
  };

  Utils.addCssClass = function (element, className) {
    var _this = this;

    if (!className || className.length === 0) {
      return;
    }

    if (className.indexOf(' ') >= 0) {
      className.split(' ').forEach(function (value) {
        return _this.addCssClass(element, value);
      });
      return;
    }

    if (element.classList) {
      if (!element.classList.contains(className)) {
        element.classList.add(className);
      }
    } else {
      if (element.className && element.className.length > 0) {
        var cssClasses = element.className.split(' ');

        if (cssClasses.indexOf(className) < 0) {
          cssClasses.push(className);
          element.setAttribute('class', cssClasses.join(' '));
        }
      } else {
        // do not use element.classList = className here, it will cause
        // a read-only assignment error on some browsers (IE/Edge).
        element.setAttribute('class', className);
      }
    }
  };

  Utils.containsClass = function (element, className) {
    if (element.classList) {
      // for modern browsers
      return element.classList.contains(className);
    } else if (element.className) {
      // for older browsers, check against the string of class names
      // if only one class, can check for exact match
      var onlyClass = element.className === className; // if many classes, check for class name, we have to pad with ' ' to stop other
      // class names that are a substring of this class

      var contains = element.className.indexOf(' ' + className + ' ') >= 0; // the padding above then breaks when it's the first or last class names

      var startsWithClass = element.className.indexOf(className + ' ') === 0;
      var endsWithClass = element.className.lastIndexOf(' ' + className) === element.className.length - className.length - 1;
      return onlyClass || contains || startsWithClass || endsWithClass;
    } else {
      // if item is not a node
      return false;
    }
  };

  Utils.getElementAttribute = function (element, attributeName) {
    if (element.attributes) {
      if (element.attributes[attributeName]) {
        var attribute = element.attributes[attributeName];
        return attribute.value;
      } else {
        return null;
      }
    } else {
      return null;
    }
  };

  Utils.offsetHeight = function (element) {
    return element && element.clientHeight ? element.clientHeight : 0;
  };

  Utils.offsetWidth = function (element) {
    return element && element.clientWidth ? element.clientWidth : 0;
  };

  Utils.sortNumberArray = function (numberArray) {
    numberArray.sort(function (a, b) {
      return a - b;
    });
  };

  Utils.removeCssClass = function (element, className) {
    if (element.classList) {
      if (element.classList.contains(className)) {
        element.classList.remove(className);
      }
    } else {
      if (element.className && element.className.length > 0) {
        var cssClasses = element.className.split(' ');

        if (cssClasses.indexOf(className) >= 0) {
          // remove all instances of the item, not just the first, in case it's in more than once
          while (cssClasses.indexOf(className) >= 0) {
            cssClasses.splice(cssClasses.indexOf(className), 1);
          }

          element.setAttribute('class', cssClasses.join(' '));
        }
      }
    }
  };

  Utils.removeRepeatsFromArray = function (array, object) {
    if (!array) {
      return;
    }

    for (var index = array.length - 2; index >= 0; index--) {
      var thisOneMatches = array[index] === object;
      var nextOneMatches = array[index + 1] === object;

      if (thisOneMatches && nextOneMatches) {
        array.splice(index + 1, 1);
      }
    }
  };

  Utils.removeFromArray = function (array, object) {
    if (array.indexOf(object) >= 0) {
      array.splice(array.indexOf(object), 1);
    }
  };

  Utils.removeAllFromArray = function (array, toRemove) {
    toRemove.forEach(function (item) {
      if (array.indexOf(item) >= 0) {
        array.splice(array.indexOf(item), 1);
      }
    });
  };

  Utils.insertIntoArray = function (array, object, toIndex) {
    array.splice(toIndex, 0, object);
  };

  Utils.insertArrayIntoArray = function (dest, src, toIndex) {
    if (this.missing(dest) || this.missing(src)) {
      return;
    } // put items in backwards, otherwise inserted items end up in reverse order


    for (var i = src.length - 1; i >= 0; i--) {
      var item = src[i];
      this.insertIntoArray(dest, item, toIndex);
    }
  };

  Utils.moveInArray = function (array, objectsToMove, toIndex) {
    var _this = this; // first take out it items from the array


    objectsToMove.forEach(function (obj) {
      _this.removeFromArray(array, obj);
    }); // now add the objects, in same order as provided to us, that means we start at the end
    // as the objects will be pushed to the right as they are inserted

    objectsToMove.slice().reverse().forEach(function (obj) {
      _this.insertIntoArray(array, obj, toIndex);
    });
  };

  Utils.defaultComparator = function (valueA, valueB, accentedCompare) {
    if (accentedCompare === void 0) {
      accentedCompare = false;
    }

    var valueAMissing = valueA === null || valueA === undefined;
    var valueBMissing = valueB === null || valueB === undefined; // this is for aggregations sum and avg, where the result can be a number that is wrapped.
    // if we didn't do this, then the toString() value would be used, which would result in
    // the strings getting used instead of the numbers.

    if (valueA && valueA.toNumber) {
      valueA = valueA.toNumber();
    }

    if (valueB && valueB.toNumber) {
      valueB = valueB.toNumber();
    }

    if (valueAMissing && valueBMissing) {
      return 0;
    }

    if (valueAMissing) {
      return -1;
    }

    if (valueBMissing) {
      return 1;
    }

    if (typeof valueA === "string") {
      if (!accentedCompare) {
        return doQuickCompare(valueA, valueB);
      } else {
        try {
          // using local compare also allows chinese comparisons
          return valueA.localeCompare(valueB);
        } catch (e) {
          // if something wrong with localeCompare, eg not supported
          // by browser, then just continue with the quick one
          return doQuickCompare(valueA, valueB);
        }
      }
    }

    if (valueA < valueB) {
      return -1;
    } else if (valueA > valueB) {
      return 1;
    } else {
      return 0;
    }

    function doQuickCompare(a, b) {
      return a > b ? 1 : a < b ? -1 : 0;
    }
  };

  Utils.compareArrays = function (array1, array2) {
    if (this.missing(array1) && this.missing(array2)) {
      return true;
    }

    if (this.missing(array1) || this.missing(array2) || !array1 || !array2) {
      return false;
    }

    if (array1.length !== array2.length) {
      return false;
    }

    for (var i = 0; i < array1.length; i++) {
      if (array1[i] !== array2[i]) {
        return false;
      }
    }

    return true;
  };

  Utils.ensureDomOrder = function (eContainer, eChild, eChildBefore) {
    // if already in right order, do nothing
    if (eChildBefore && eChildBefore.nextSibling === eChild) {
      return;
    }

    if (eChildBefore) {
      if (eChildBefore.nextSibling) {
        // insert between the eRowBefore and the row after it
        eContainer.insertBefore(eChild, eChildBefore.nextSibling);
      } else {
        // if nextSibling is missing, means other row is at end, so just append new row at the end
        eContainer.appendChild(eChild);
      }
    } else {
      // otherwise put at start
      if (eContainer.firstChild && eContainer.firstChild !== eChild) {
        // insert it at the first location
        eContainer.insertAdjacentElement('afterbegin', eChild);
      }
    }
  };

  Utils.insertWithDomOrder = function (eContainer, eChild, eChildBefore) {
    if (eChildBefore) {
      if (eChildBefore.nextSibling) {
        // insert between the eRowBefore and the row after it
        eContainer.insertBefore(eChild, eChildBefore.nextSibling);
      } else {
        // if nextSibling is missing, means other row is at end, so just append new row at the end
        eContainer.appendChild(eChild);
      }
    } else {
      if (eContainer.firstChild) {
        // insert it at the first location
        eContainer.insertBefore(eChild, eContainer.firstChild);
      } else {
        // otherwise eContainer is empty, so just append it
        eContainer.appendChild(eChild);
      }
    }
  };

  Utils.insertTemplateWithDomOrder = function (eContainer, htmlTemplate, eChildBefore) {
    var res;

    if (eChildBefore) {
      // if previous element exists, just slot in after the previous element
      eChildBefore.insertAdjacentHTML('afterend', htmlTemplate);
      res = eChildBefore.nextSibling;
    } else {
      if (eContainer.firstChild) {
        // insert it at the first location
        eContainer.insertAdjacentHTML('afterbegin', htmlTemplate);
      } else {
        // otherwise eContainer is empty, so just append it
        eContainer.innerHTML = htmlTemplate;
      }

      res = eContainer.firstChild;
    }

    return res;
  };

  Utils.every = function (items, callback) {
    if (!items || items.length === 0) {
      return true;
    }

    for (var i = 0; i < items.length; i++) {
      if (!callback(items[i])) {
        return false;
      }
    }

    return true;
  };

  Utils.toStringOrNull = function (value) {
    if (this.exists(value) && value.toString) {
      return value.toString();
    } else {
      return null;
    }
  };

  Utils.formatSize = function (size) {
    if (typeof size === "number") {
      return size + "px";
    } else {
      return size;
    }
  };

  Utils.formatNumberTwoDecimalPlacesAndCommas = function (value) {
    if (typeof value !== 'number') {
      return '';
    } // took this from: http://blog.tompawlak.org/number-currency-formatting-javascript


    return (Math.round(value * 100) / 100).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
  }; // the native method number.toLocaleString(undefined, {minimumFractionDigits: 0}) puts in decimal places in IE,
  // so we use this method instead


  Utils.formatNumberCommas = function (value) {
    if (typeof value !== 'number') {
      return '';
    } // took this from: http://blog.tompawlak.org/number-currency-formatting-javascript


    return value.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
  };

  Utils.prependDC = function (parent, documentFragment) {
    if (this.exists(parent.firstChild)) {
      parent.insertBefore(documentFragment, parent.firstChild);
    } else {
      parent.appendChild(documentFragment);
    }
  };
  /**
   * If icon provided, use this (either a string, or a function callback).
   * if not, then use the default icon from the theme
   */


  Utils.createIcon = function (iconName, gridOptionsWrapper, column) {
    var iconContents = this.createIconNoSpan(iconName, gridOptionsWrapper, column);

    if (iconContents.className.indexOf('ag-icon') > -1) {
      return iconContents;
    } else {
      var eResult = document.createElement('span');
      eResult.appendChild(iconContents);
      return eResult;
    }
  };

  Utils.createIconNoSpan = function (iconName, gridOptionsWrapper, column) {
    var userProvidedIcon = null; // check col for icon first

    var icons = column && column.getColDef().icons ? column.getColDef().icons : null;

    if (icons) {
      userProvidedIcon = icons[iconName];
    } // it not in col, try grid options


    if (!userProvidedIcon && gridOptionsWrapper.getIcons()) {
      userProvidedIcon = gridOptionsWrapper.getIcons()[iconName];
    } // now if user provided, use it


    if (userProvidedIcon) {
      var rendererResult = void 0;

      if (typeof userProvidedIcon === 'function') {
        rendererResult = userProvidedIcon();
      } else if (typeof userProvidedIcon === 'string') {
        rendererResult = userProvidedIcon;
      } else {
        throw new Error('icon from grid options needs to be a string or a function');
      }

      if (typeof rendererResult === 'string') {
        return this.loadTemplate(rendererResult);
      } else if (this.isNodeOrElement(rendererResult)) {
        return rendererResult;
      } else {
        throw new Error('iconRenderer should return back a string or a dom object');
      }
    } else {
      var span = document.createElement('span');
      var cssClass = this.iconNameClassMap[iconName];

      if (!cssClass) {
        throw new Error(iconName + " did not find class");
      }

      span.setAttribute("class", "ag-icon ag-icon-" + cssClass);
      span.setAttribute("unselectable", "on");
      return span;
    }
  };

  Utils.addStylesToElement = function (eElement, styles) {
    var _this = this;

    if (!styles) {
      return;
    }

    Object.keys(styles).forEach(function (key) {
      var keyCamelCase = _this.hyphenToCamelCase(key);

      if (keyCamelCase) {
        eElement.style[keyCamelCase] = styles[key];
      }
    });
  };

  Utils.isHorizontalScrollShowing = function (element) {
    return element.clientWidth < element.scrollWidth;
  };

  Utils.isVerticalScrollShowing = function (element) {
    return element.clientHeight < element.scrollHeight;
  };

  Utils.getMaxDivHeight = function () {
    if (!document.body) {
      return -1;
    }

    var res = 1000000; // FF reports the height back but still renders blank after ~6M px

    var testUpTo = navigator.userAgent.toLowerCase().match(/firefox/) ? 6000000 : 1000000000;
    var div = this.loadTemplate("<div/>");
    document.body.appendChild(div);

    while (true) {
      var test = res * 2;
      div.style.height = test + 'px';

      if (test > testUpTo || div.clientHeight !== test) {
        break;
      } else {
        res = test;
      }
    }

    document.body.removeChild(div);
    return res;
  };

  Utils.getScrollbarWidth = function () {
    var outer = document.createElement("div");
    outer.style.visibility = "hidden";
    outer.style.width = "100px";
    outer.style.msOverflowStyle = "scrollbar"; // needed for WinJS apps

    document.body.appendChild(outer);
    var widthNoScroll = outer.offsetWidth; // force scrollbars

    outer.style.overflow = "scroll"; // add inner div

    var inner = document.createElement("div");
    inner.style.width = "100%";
    outer.appendChild(inner);
    var widthWithScroll = inner.offsetWidth; // remove divs

    if (outer.parentNode) {
      outer.parentNode.removeChild(outer);
    }

    return widthNoScroll - widthWithScroll;
  };

  Utils.hasOverflowScrolling = function () {
    var prefixes = ['webkit', 'moz', 'o', 'ms'];
    var div = document.createElement('div');
    var body = document.getElementsByTagName('body')[0];
    var found = false;
    var p;
    body.appendChild(div);
    div.setAttribute('style', prefixes.map(function (prefix) {
      return "-" + prefix + "-overflow-scrolling: touch";
    }).concat('overflow-scrolling: touch').join(';'));
    var computedStyle = window.getComputedStyle(div);

    if (computedStyle.overflowScrolling === 'touch') {
      found = true;
    }

    if (!found) {
      for (var _i = 0, prefixes_1 = prefixes; _i < prefixes_1.length; _i++) {
        p = prefixes_1[_i];

        if (computedStyle[p + "OverflowScrolling"] === 'touch') {
          found = true;
          break;
        }
      }
    }

    if (div.parentNode) {
      div.parentNode.removeChild(div);
    }

    return found;
  };

  Utils.isKeyPressed = function (event, keyToCheck) {
    var pressedKey = event.which || event.keyCode;
    return pressedKey === keyToCheck;
  };

  Utils.setVisible = function (element, visible) {
    this.addOrRemoveCssClass(element, 'ag-hidden', !visible);
  };

  Utils.setHidden = function (element, hidden) {
    this.addOrRemoveCssClass(element, 'ag-invisible', hidden);
  };

  Utils.setFixedWidth = function (element, width) {
    width = this.formatSize(width);
    element.style.width = width;
    element.style.maxWidth = width;
    element.style.minWidth = width;
  };

  Utils.setFixedHeight = function (element, height) {
    height = this.formatSize(height);
    element.style.height = height;
    element.style.maxHeight = height;
    element.style.minHeight = height;
  };

  Utils.isBrowserIE = function () {
    if (this.isIE === undefined) {
      this.isIE =
      /*@cc_on!@*/
       false || !!document.documentMode; // At least IE6
    }

    return this.isIE;
  };

  Utils.isBrowserEdge = function () {
    if (this.isEdge === undefined) {
      this.isEdge = !this.isBrowserIE() && !!window.StyleMedia;
    }

    return this.isEdge;
  };

  Utils.isBrowserSafari = function () {
    if (this.isSafari === undefined) {
      var anyWindow = window; // taken from https://github.com/ag-grid/ag-grid/issues/550

      this.isSafari = Object.prototype.toString.call(anyWindow.HTMLElement).indexOf('Constructor') > 0 || function (p) {
        return p ? p.toString() === "[object SafariRemoteNotification]" : false;
      }(!anyWindow.safari || anyWindow.safari.pushNotification);
    }

    return this.isSafari;
  };

  Utils.isBrowserChrome = function () {
    if (this.isChrome === undefined) {
      var win = window;
      this.isChrome = !!win.chrome && (!!win.chrome.webstore || !!win.chrome.runtime) || /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
    }

    return this.isChrome;
  };

  Utils.isBrowserFirefox = function () {
    if (this.isFirefox === undefined) {
      var win = window;
      this.isFirefox = typeof win.InstallTrigger !== 'undefined';
    }

    return this.isFirefox;
  };

  Utils.isUserAgentIPad = function () {
    if (this.isIPad === undefined) {
      // taken from https://davidwalsh.name/detect-ipad
      this.isIPad = navigator.userAgent.match(/iPad|iPhone/i) != null;
    }

    return this.isIPad;
  }; // srcElement is only available in IE. In all other browsers it is target
  // http://stackoverflow.com/questions/5301643/how-can-i-make-event-srcelement-work-in-firefox-and-what-does-it-mean


  Utils.getTarget = function (event) {
    var eventNoType = event;
    return eventNoType.target || eventNoType.srcElement;
  };

  Utils.isElementChildOfClass = function (element, cls, maxNest) {
    var counter = 0;

    while (element) {
      if (this.containsClass(element, cls)) {
        return true;
      }

      element = element.parentElement;

      if (maxNest && ++counter > maxNest) {
        break;
      }
    }

    return false;
  };

  Utils.isElementInEventPath = function (element, event) {
    if (!event || !element) {
      return false;
    }

    var path = exports._.getEventPath(event);

    return path.indexOf(element) >= 0;
  };

  Utils.isFunction = function (val) {
    return !!(val && val.constructor && val.call && val.apply);
  };

  Utils.createEventPath = function (event) {
    var res = [];

    var pointer = exports._.getTarget(event);

    while (pointer) {
      res.push(pointer);
      pointer = pointer.parentElement;
    }

    return res;
  }; // firefox doesn't have event.path set, or any alternative to it, so we hack
  // it in. this is needed as it's to late to work out the path when the item is
  // removed from the dom. used by MouseEventService, where it works out if a click
  // was from the current grid, or a detail grid (master / detail).


  Utils.addAgGridEventPath = function (event) {
    event.__agGridEventPath = this.getEventPath(event);
  };

  Utils.getEventPath = function (event) {
    // https://stackoverflow.com/questions/39245488/event-path-undefined-with-firefox-and-vue-js
    // https://developer.mozilla.org/en-US/docs/Web/API/Event
    var eventNoType = event;

    if (eventNoType.deepPath) {
      // IE supports deep path
      return eventNoType.deepPath();
    } else if (eventNoType.path) {
      // Chrome supports path
      return eventNoType.path;
    } else if (eventNoType.composedPath) {
      // Firefox supports composePath
      return eventNoType.composedPath();
    } else if (eventNoType.__agGridEventPath) {
      // Firefox supports composePath
      return eventNoType.__agGridEventPath;
    } else {
      // and finally, if none of the above worked,
      // we create the path ourselves
      return this.createEventPath(event);
    }
  };

  Utils.forEachSnapshotFirst = function (list, callback) {
    if (list) {
      var arrayCopy = list.slice(0);
      arrayCopy.forEach(callback);
    }
  }; // taken from: http://stackoverflow.com/questions/1038727/how-to-get-browser-width-using-javascript-code


  Utils.getBodyWidth = function () {
    if (document.body) {
      return document.body.clientWidth;
    }

    if (window.innerHeight) {
      return window.innerWidth;
    }

    if (document.documentElement && document.documentElement.clientWidth) {
      return document.documentElement.clientWidth;
    }

    return -1;
  }; // taken from: http://stackoverflow.com/questions/1038727/how-to-get-browser-width-using-javascript-code


  Utils.getBodyHeight = function () {
    if (document.body) {
      return document.body.clientHeight;
    }

    if (window.innerHeight) {
      return window.innerHeight;
    }

    if (document.documentElement && document.documentElement.clientHeight) {
      return document.documentElement.clientHeight;
    }

    return -1;
  };

  Utils.setCheckboxState = function (eCheckbox, state) {
    if (typeof state === 'boolean') {
      eCheckbox.checked = state;
      eCheckbox.indeterminate = false;
    } else {
      // isNodeSelected returns back undefined if it's a group and the children
      // are a mix of selected and unselected
      eCheckbox.indeterminate = true;
    }
  };

  Utils.traverseNodesWithKey = function (nodes, callback) {
    var keyParts = [];
    recursiveSearchNodes(nodes);

    function recursiveSearchNodes(currentNodes) {
      currentNodes.forEach(function (node) {
        // also checking for children for tree data
        if (node.group || node.hasChildren()) {
          keyParts.push(node.key);
          var key = keyParts.join('|');
          callback(node, key);
          recursiveSearchNodes(node.childrenAfterGroup);
          keyParts.pop();
        }
      });
    }
  }; // from https://gist.github.com/youssman/745578062609e8acac9f


  Utils.camelCaseToHyphen = function (str) {
    if (str === null || str === undefined) {
      return null;
    }

    return str.replace(/([A-Z])/g, function (g) {
      return '-' + g[0].toLowerCase();
    });
  }; // from https://stackoverflow.com/questions/6660977/convert-hyphens-to-camel-case-camelcase


  Utils.hyphenToCamelCase = function (str) {
    if (str === null || str === undefined) {
      return null;
    }

    return str.replace(/-([a-z])/g, function (g) {
      return g[1].toUpperCase();
    });
  }; // pas in an object eg: {color: 'black', top: '25px'} and it returns "color: black; top: 25px;" for html


  Utils.cssStyleObjectToMarkup = function (stylesToUse) {
    var _this = this;

    if (!stylesToUse) {
      return '';
    }

    var resParts = [];
    this.iterateObject(stylesToUse, function (styleKey, styleValue) {
      var styleKeyDashed = _this.camelCaseToHyphen(styleKey);

      resParts.push(styleKeyDashed + ": " + styleValue + ";");
    });
    return resParts.join(' ');
  };
  /**
   * From http://stackoverflow.com/questions/9716468/is-there-any-function-like-isnumeric-in-javascript-to-validate-numbers
   */


  Utils.isNumeric = function (value) {
    if (value === '') {
      return false;
    }

    return !isNaN(parseFloat(value)) && isFinite(value);
  };

  Utils.escape = function (toEscape) {
    if (toEscape === null || toEscape === undefined || !toEscape.replace) {
      return toEscape;
    }

    return toEscape.replace(reUnescapedHtml, function (chr) {
      return HTML_ESCAPES[chr];
    });
  }; // Taken from here: https://github.com/facebook/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js

  /**
   * Mouse wheel (and 2-finger trackpad) support on the web sucks.  It is
   * complicated, thus this doc is long and (hopefully) detailed enough to answer
   * your questions.
   *
   * If you need to react to the mouse wheel in a predictable way, this code is
   * like your bestest friend. * hugs *
   *
   * As of today, there are 4 DOM event types you can listen to:
   *
   *   'wheel'                -- Chrome(31+), FF(17+), IE(9+)
   *   'mousewheel'           -- Chrome, IE(6+), Opera, Safari
   *   'MozMousePixelScroll'  -- FF(3.5 only!) (2010-2013) -- don't bother!
   *   'DOMMouseScroll'       -- FF(0.9.7+) since 2003
   *
   * So what to do?  The is the best:
   *
   *   normalizeWheel.getEventType();
   *
   * In your event callback, use this code to get sane interpretation of the
   * deltas.  This code will return an object with properties:
   *
   *   spinX   -- normalized spin speed (use for zoom) - x plane
   *   spinY   -- " - y plane
   *   pixelX  -- normalized distance (to pixels) - x plane
   *   pixelY  -- " - y plane
   *
   * Wheel values are provided by the browser assuming you are using the wheel to
   * scroll a web page by a number of lines or pixels (or pages).  Values can vary
   * significantly on different platforms and browsers, forgetting that you can
   * scroll at different speeds.  Some devices (like trackpads) emit more events
   * at smaller increments with fine granularity, and some emit massive jumps with
   * linear speed or acceleration.
   *
   * This code does its best to normalize the deltas for you:
   *
   *   - spin is trying to normalize how far the wheel was spun (or trackpad
   *     dragged).  This is super useful for zoom support where you want to
   *     throw away the chunky scroll steps on the PC and make those equal to
   *     the slow and smooth tiny steps on the Mac. Key data: This code tries to
   *     resolve a single slow step on a wheel to 1.
   *
   *   - pixel is normalizing the desired scroll delta in pixel units.  You'll
   *     get the crazy differences between browsers, but at least it'll be in
   *     pixels!
   *
   *   - positive value indicates scrolling DOWN/RIGHT, negative UP/LEFT.  This
   *     should translate to positive value zooming IN, negative zooming OUT.
   *     This matches the newer 'wheel' event.
   *
   * Why are there spinX, spinY (or pixels)?
   *
   *   - spinX is a 2-finger side drag on the trackpad, and a shift + wheel turn
   *     with a mouse.  It results in side-scrolling in the browser by default.
   *
   *   - spinY is what you expect -- it's the classic axis of a mouse wheel.
   *
   *   - I dropped spinZ/pixelZ.  It is supported by the DOM 3 'wheel' event and
   *     probably is by browsers in conjunction with fancy 3D controllers .. but
   *     you know.
   *
   * Implementation info:
   *
   * Examples of 'wheel' event if you scroll slowly (down) by one step with an
   * average mouse:
   *
   *   OS X + Chrome  (mouse)     -    4   pixel delta  (wheelDelta -120)
   *   OS X + Safari  (mouse)     -  N/A   pixel delta  (wheelDelta  -12)
   *   OS X + Firefox (mouse)     -    0.1 line  delta  (wheelDelta  N/A)
   *   Win8 + Chrome  (mouse)     -  100   pixel delta  (wheelDelta -120)
   *   Win8 + Firefox (mouse)     -    3   line  delta  (wheelDelta -120)
   *
   * On the trackpad:
   *
   *   OS X + Chrome  (trackpad)  -    2   pixel delta  (wheelDelta   -6)
   *   OS X + Firefox (trackpad)  -    1   pixel delta  (wheelDelta  N/A)
   *
   * On other/older browsers.. it's more complicated as there can be multiple and
   * also missing delta values.
   *
   * The 'wheel' event is more standard:
   *
   * http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents
   *
   * The basics is that it includes a unit, deltaMode (pixels, lines, pages), and
   * deltaX, deltaY and deltaZ.  Some browsers provide other values to maintain
   * backward compatibility with older events.  Those other values help us
   * better normalize spin speed.  Example of what the browsers provide:
   *
   *                          | event.wheelDelta | event.detail
   *        ------------------+------------------+--------------
   *          Safari v5/OS X  |       -120       |       0
   *          Safari v5/Win7  |       -120       |       0
   *         Chrome v17/OS X  |       -120       |       0
   *         Chrome v17/Win7  |       -120       |       0
   *                IE9/Win7  |       -120       |   undefined
   *         Firefox v4/OS X  |     undefined    |       1
   *         Firefox v4/Win7  |     undefined    |       3
   *
   */


  Utils.normalizeWheel = function (event) {
    var PIXEL_STEP = 10;
    var LINE_HEIGHT = 40;
    var PAGE_HEIGHT = 800; // spinX, spinY

    var sX = 0;
    var sY = 0; // pixelX, pixelY

    var pX = 0;
    var pY = 0; // Legacy

    if ('detail' in event) {
      sY = event.detail;
    }

    if ('wheelDelta' in event) {
      sY = -event.wheelDelta / 120;
    }

    if ('wheelDeltaY' in event) {
      sY = -event.wheelDeltaY / 120;
    }

    if ('wheelDeltaX' in event) {
      sX = -event.wheelDeltaX / 120;
    } // side scrolling on FF with DOMMouseScroll


    if ('axis' in event && event.axis === event.HORIZONTAL_AXIS) {
      sX = sY;
      sY = 0;
    }

    pX = sX * PIXEL_STEP;
    pY = sY * PIXEL_STEP;

    if ('deltaY' in event) {
      pY = event.deltaY;
    }

    if ('deltaX' in event) {
      pX = event.deltaX;
    }

    if ((pX || pY) && event.deltaMode) {
      if (event.deltaMode == 1) {
        // delta in LINE units
        pX *= LINE_HEIGHT;
        pY *= LINE_HEIGHT;
      } else {
        // delta in PAGE units
        pX *= PAGE_HEIGHT;
        pY *= PAGE_HEIGHT;
      }
    } // Fall-back if spin cannot be determined


    if (pX && !sX) {
      sX = pX < 1 ? -1 : 1;
    }

    if (pY && !sY) {
      sY = pY < 1 ? -1 : 1;
    }

    return {
      spinX: sX,
      spinY: sY,
      pixelX: pX,
      pixelY: pY
    };
  };
  /**
   * https://stackoverflow.com/questions/24004791/can-someone-explain-the-debounce-function-in-javascript
   */


  Utils.debounce = function (func, wait, immediate) {
    if (immediate === void 0) {
      immediate = false;
    } // 'private' variable for instance
    // The returned function will be able to reference this due to closure.
    // Each call to the returned function will share this common timer.


    var timeout; // Calling debounce returns a new anonymous function

    return function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      } // reference the context and args for the setTimeout function


      var context = this; // Should the function be called now? If immediate is true
      //   and not already in a timeout then the answer is: Yes

      var callNow = immediate && !timeout; // This is the basic debounce behaviour where you can call this
      //   function several times, but it will only execute once
      //   [before or after imposing a delay].
      //   Each time the returned function is called, the timer starts over.

      window.clearTimeout(timeout); // Set the new timeout

      timeout = window.setTimeout(function () {
        // Inside the timeout function, clear the timeout variable
        // which will let the next execution run when in 'immediate' mode
        timeout = null; // Check if the function already ran with the immediate flag

        if (!immediate) {
          // Call the original function with apply
          // apply lets you define the 'this' object as well as the arguments
          //    (both captured before setTimeout)
          func.apply(context, args);
        }
      }, wait); // Immediate mode and no wait timer? Execute the function..

      if (callNow) {
        func.apply(context, args);
      }
    };
  }; // a user once raised an issue - they said that when you opened a popup (eg context menu)
  // and then clicked on a selection checkbox, the popup wasn't closed. this is because the
  // popup listens for clicks on the body, however ag-grid WAS stopping propagation on the
  // checkbox clicks (so the rows didn't pick them up as row selection selection clicks).
  // to get around this, we have a pattern to stop propagation for the purposes of ag-Grid,
  // but we still let the event pass back to teh body.


  Utils.stopPropagationForAgGrid = function (event) {
    event[AG_GRID_STOP_PROPAGATION] = true;
  };

  Utils.isStopPropagationForAgGrid = function (event) {
    return event[AG_GRID_STOP_PROPAGATION] === true;
  };

  Utils.executeInAWhile = function (funcs) {
    this.executeAfter(funcs, 400);
  };

  Utils.executeNextVMTurn = function (funcs) {
    this.executeAfter(funcs, 0);
  };

  Utils.executeAfter = function (funcs, millis) {
    if (funcs.length > 0) {
      window.setTimeout(function () {
        funcs.forEach(function (func) {
          return func();
        });
      }, millis);
    }
  };

  Utils.referenceCompare = function (left, right) {
    if (left == null && right == null) {
      return true;
    }

    if (left == null && right) {
      return false;
    }

    if (left && right == null) {
      return false;
    }

    return left === right;
  };

  Utils.get = function (source, expression, defaultValue) {
    if (source == null) {
      return defaultValue;
    }

    if (expression.indexOf('.') > -1) {
      var fields = expression.split('.');
      var thisKey = fields[0];
      var nextValue = source[thisKey];

      if (nextValue != null) {
        return Utils.get(nextValue, fields.slice(1, fields.length).join('.'), defaultValue);
      } else {
        return defaultValue;
      }
    } else {
      var nextValue = source[expression];
      return nextValue != null ? nextValue : defaultValue;
    }
  };

  Utils.addSafePassiveEventListener = function (eElement, event, listener, options) {
    if (Utils.passiveEvents.indexOf(event) !== -1) {
      if (options === undefined) {
        options = {};
      } else if (typeof options === 'boolean') {
        options = {
          capture: options
        };
      }

      options.passive = true;
    }

    eElement.addEventListener(event, listener, options);
  };

  Utils.camelCaseToHumanText = function (camelCase) {
    if (!camelCase || camelCase == null) {
      return null;
    } // Who needs to learn how to code when you have stack overflow!
    // from: https://stackoverflow.com/questions/15369566/putting-space-in-camel-case-string-using-regular-expression


    var rex = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g;
    var words = camelCase.replace(rex, '$1$4 $2$3$5').replace('.', ' ').split(' ');
    return words.map(function (word) {
      return word.substring(0, 1).toUpperCase() + (word.length > 1 ? word.substring(1, word.length) : '');
    }).join(' ');
  }; // displays a message to the browser. this is useful in iPad, where you can't easily see the console.
  // so the javascript code can use this to give feedback. this is NOT intended to be called in production.
  // it is intended the ag-Grid developer calls this to troubleshoot, but then takes out the calls before
  // checking in.


  Utils.message = function (msg) {
    var eMessage = document.createElement('div');
    eMessage.innerHTML = msg;
    var eBox = document.querySelector('#__ag__message');

    if (!eBox) {
      var template = "<div id=\"__ag__message\" style=\"display: inline-block; position: absolute; top: 0px; left: 0px; color: white; background-color: black; z-index: 20; padding: 2px; border: 1px solid darkred; height: 200px; overflow-y: auto;\"></div>";
      eBox = this.loadTemplate(template);

      if (document.body) {
        document.body.appendChild(eBox);
      }
    }

    eBox.insertBefore(eMessage, eBox.children[0]); // eBox.appendChild(eMessage);
  }; // gets called by: a) ClientSideNodeManager and b) GroupStage to do sorting.
  // when in ClientSideNodeManager we always have indexes (as this sorts the items the
  // user provided) but when in GroupStage, the nodes can contain filler nodes that
  // don't have order id's


  Utils.sortRowNodesByOrder = function (rowNodes, rowNodeOrder) {
    if (!rowNodes) {
      return;
    }

    var comparator = function comparator(nodeA, nodeB) {
      var positionA = rowNodeOrder[nodeA.id];
      var positionB = rowNodeOrder[nodeB.id];
      var aHasIndex = positionA !== undefined;
      var bHasIndex = positionB !== undefined;
      var bothNodesAreUserNodes = aHasIndex && bHasIndex;
      var bothNodesAreFillerNodes = !aHasIndex && !bHasIndex;

      if (bothNodesAreUserNodes) {
        // when comparing two nodes the user has provided, they always
        // have indexes
        return positionA - positionB;
      } else if (bothNodesAreFillerNodes) {
        // when comparing two filler nodes, we have no index to compare them
        // against, however we want this sorting to be deterministic, so that
        // the rows don't jump around as the user does delta updates. so we
        // want the same sort result. so we use the __objectId - which doesn't make sense
        // from a sorting point of view, but does give consistent behaviour between
        // calls. otherwise groups jump around as delta updates are done.
        // note: previously here we used nodeId, however this gave a strange order
        // as string ordering of numbers is wrong, so using id based on creation order
        // as least gives better looking order.
        return nodeA.__objectId - nodeB.__objectId;
      } else if (aHasIndex) {
        return 1;
      }

      return -1;
    }; // const a = new Date().getTime();
    // check if the list first needs sorting


    var rowNodeA;
    var rowNodeB;
    var atLeastOneOutOfOrder = false;

    for (var i = 0; i < rowNodes.length - 1; i++) {
      rowNodeA = rowNodes[i];
      rowNodeB = rowNodes[i + 1];

      if (comparator(rowNodeA, rowNodeB) > 0) {
        atLeastOneOutOfOrder = true;
        break;
      }
    } // const b = new Date().getTime();


    if (atLeastOneOutOfOrder) {
      rowNodes.sort(comparator);
    } // const c = new Date().getTime();
    // console.log(`${this.count}: ${rowNodes.length} items, ${b-a}ms ${atLeastOneOutOfOrder} ${c-b}ms`);

  };

  Utils.fuzzyCheckStrings = function (inputValues, validValues, allSuggestions) {
    var _this = this;

    var fuzzyMatches = {};
    var invalidInputs = inputValues.filter(function (inputValue) {
      return !validValues.some(function (validValue) {
        return validValue === inputValue;
      });
    });

    if (invalidInputs.length > 0) {
      invalidInputs.forEach(function (invalidInput) {
        return fuzzyMatches[invalidInput] = _this.fuzzySuggestions(invalidInput, validValues, allSuggestions);
      });
    }

    return fuzzyMatches;
  };

  Utils.fuzzySuggestions = function (inputValue, validValues, allSuggestions) {
    var thisSuggestions = allSuggestions.slice(0);
    thisSuggestions.sort(function (suggestedValueLeft, suggestedValueRight) {
      var leftDifference = exports._.string_similarity(suggestedValueLeft.toLowerCase(), inputValue.toLowerCase());

      var rightDifference = exports._.string_similarity(suggestedValueRight.toLowerCase(), inputValue.toLowerCase());

      return leftDifference > rightDifference ? -1 : leftDifference === rightDifference ? 0 : 1;
    });
    return thisSuggestions;
  }; //Algorithm to do fuzzy search
  //https://stackoverflow.com/questions/23305000/javascript-fuzzy-search-that-makes-sense


  Utils.get_bigrams = function (from) {
    var s = from.toLowerCase();
    var v = new Array(s.length - 1);
    var i;
    var j;
    var ref;

    for (i = j = 0, ref = v.length; j <= ref; i = j += 1) {
      v[i] = s.slice(i, i + 2);
    }

    return v;
  };

  Utils.isNumpadDelWithNumlockOnForEdgeOrIe = function (event) {
    if (Utils.isBrowserEdge() || Utils.isBrowserIE()) {
      return event.key === Utils.NUMPAD_DEL_NUMLOCK_ON_KEY && event.charCode === Utils.NUMPAD_DEL_NUMLOCK_ON_CHARCODE;
    }

    return false;
  }; // cell renderers are used in a few places. they bind to dom slightly differently to other cell renderes as they
  // can return back strings (instead of html elemnt) in the getGui() method. common code placed here to handle that.


  Utils.bindCellRendererToHtmlElement = function (cellRendererPromise, eTarget) {
    cellRendererPromise.then(function (cellRenderer) {
      var gui = cellRenderer.getGui();

      if (gui != null) {
        if (typeof gui == 'object') {
          eTarget.appendChild(gui);
        } else {
          eTarget.innerHTML = gui;
        }
      }
    });
  };

  Utils.PRINTABLE_CHARACTERS = 'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890!"£$%^&*()_+-=[];\'#,./\\|<>?:@~{}';
  Utils.NUMPAD_DEL_NUMLOCK_ON_KEY = 'Del';
  Utils.NUMPAD_DEL_NUMLOCK_ON_CHARCODE = 46;
  Utils.doOnceFlags = {};

  Utils.compose = function () {
    var fns = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      fns[_i] = arguments[_i];
    }

    return function (arg) {
      return fns.reduce(function (composed, f) {
        return f(composed);
      }, arg);
    };
  };

  Utils.decToHex = function (number, bytes) {
    var hex = '';

    for (var i = 0; i < bytes; i++) {
      hex += String.fromCharCode(number & 0xff);
      number >>>= 8;
    }

    return hex;
  };

  Utils.utf8_encode = function (s) {
    var utftext = '';
    s = s.replace(/\r\n/g, "\n");

    for (var n = 0, len = s.length; n < len; n++) {
      var c = s.charCodeAt(n);

      if (c < 128) {
        utftext += String.fromCharCode(c);
      } else if (c > 127 && c < 2048) {
        utftext += String.fromCharCode(c >> 6 | 192);
        utftext += String.fromCharCode(c & 63 | 128);
      } else {
        utftext += String.fromCharCode(c >> 12 | 224);
        utftext += String.fromCharCode(c >> 6 & 63 | 128);
        utftext += String.fromCharCode(c & 63 | 128);
      }
    }

    return utftext;
  }; // static prepend(parent: HTMLElement, child: HTMLElement): void {
  //     if (this.exists(parent.firstChild)) {
  //         parent.insertBefore(child, parent.firstChild);
  //     } else {
  //         parent.appendChild(child);
  //     }
  // }


  Utils.iconNameClassMap = {
    columnGroupOpened: 'expanded',
    columnGroupClosed: 'contracted',
    columnSelectClosed: 'tree-closed',
    columnSelectOpen: 'tree-open',
    columnMovePin: 'pin',
    columnMoveAdd: 'plus',
    columnMoveHide: 'eye-slash',
    columnMoveMove: 'arrows',
    columnMoveLeft: 'left',
    columnMoveRight: 'right',
    columnMoveGroup: 'group',
    columnMoveValue: 'aggregation',
    columnMovePivot: 'pivot',
    dropNotAllowed: 'not-allowed',
    groupContracted: 'expanded',
    groupExpanded: 'contracted',
    checkboxChecked: 'checkbox-checked',
    checkboxUnchecked: 'checkbox-unchecked',
    checkboxIndeterminate: 'checkbox-indeterminate',
    checkboxCheckedReadOnly: 'checkbox-checked-readonly',
    checkboxUncheckedReadOnly: 'checkbox-unchecked-readonly',
    checkboxIndeterminateReadOnly: 'checkbox-indeterminate-readonly',
    groupLoading: 'loading',
    menu: 'menu',
    filter: 'filter',
    columns: 'columns',
    menuPin: 'pin',
    menuValue: 'aggregation',
    menuAddRowGroup: 'group',
    menuRemoveRowGroup: 'group',
    clipboardCopy: 'copy',
    clipboardCut: 'cut',
    clipboardPaste: 'paste',
    pivotPanel: 'pivot',
    rowGroupPanel: 'group',
    valuePanel: 'aggregation',
    columnDrag: 'column-drag',
    rowDrag: 'row-drag',

    /** from @deprecated header, remove at some point */
    sortAscending: 'asc',
    sortDescending: 'desc',
    sortUnSort: 'none'
  };
  Utils.passiveEvents = ['touchstart', 'touchend', 'touchmove', 'touchcancel'];

  Utils.string_similarity = function (str1, str2) {
    if (str1.length > 0 && str2.length > 0) {
      var pairs1 = Utils.get_bigrams(str1);
      var pairs2 = Utils.get_bigrams(str2);
      var union = pairs1.length + pairs2.length;
      var hit_count = 0;
      var j = void 0;
      var len = void 0;

      for (j = 0, len = pairs1.length; j < len; j++) {
        var x = pairs1[j];
        var k = void 0;
        var len1 = void 0;

        for (k = 0, len1 = pairs2.length; k < len1; k++) {
          var y = pairs2[k];

          if (x === y) {
            hit_count++;
          }
        }
      }

      if (hit_count > 0) {
        return 2.0 * hit_count / union;
      }
    }

    return 0.0;
  };

  return Utils;
}();

exports.Utils = Utils;

var NumberSequence =
/** @class */
function () {
  function NumberSequence(initValue, step) {
    if (initValue === void 0) {
      initValue = 0;
    }

    if (step === void 0) {
      step = 1;
    }

    this.nextValue = initValue;
    this.step = step;
  }

  NumberSequence.prototype.next = function () {
    var valToReturn = this.nextValue;
    this.nextValue += this.step;
    return valToReturn;
  };

  NumberSequence.prototype.peek = function () {
    return this.nextValue;
  };

  NumberSequence.prototype.skip = function (count) {
    this.nextValue += count;
  };

  return NumberSequence;
}();

exports.NumberSequence = NumberSequence;
exports._ = Utils;
var PromiseStatus;

(function (PromiseStatus) {
  PromiseStatus[PromiseStatus["IN_PROGRESS"] = 0] = "IN_PROGRESS";
  PromiseStatus[PromiseStatus["RESOLVED"] = 1] = "RESOLVED";
})(PromiseStatus = exports.PromiseStatus || (exports.PromiseStatus = {}));

var Promise =
/** @class */
function () {
  function Promise(callback) {
    this.status = PromiseStatus.IN_PROGRESS;
    this.resolution = null;
    this.listOfWaiters = [];
    callback(this.onDone.bind(this), this.onReject.bind(this));
  }

  Promise.all = function (toCombine) {
    return new Promise(function (resolve) {
      var combinedValues = [];
      var remainingToResolve = toCombine.length;
      toCombine.forEach(function (source, index) {
        source.then(function (sourceResolved) {
          remainingToResolve--;
          combinedValues[index] = sourceResolved;

          if (remainingToResolve == 0) {
            resolve(combinedValues);
          }
        });
        combinedValues.push(null); // spl todo: review with Alberto - why?
      });
    });
  };

  Promise.resolve = function (value) {
    return new Promise(function (resolve) {
      return resolve(value);
    });
  };

  Promise.external = function () {
    var capture;
    var promise = new Promise(function (resolve) {
      capture = resolve;
    });
    return {
      promise: promise,
      resolve: function resolve(value) {
        capture(value);
      }
    };
  };

  Promise.prototype.then = function (func) {
    if (this.status === PromiseStatus.IN_PROGRESS) {
      this.listOfWaiters.push(func);
    } else {
      func(this.resolution);
    }
  };

  Promise.prototype.firstOneOnly = function (func) {
    if (this.status === PromiseStatus.IN_PROGRESS) {
      if (this.listOfWaiters.length === 0) {
        this.listOfWaiters.push(func);
      }
    } else {
      func(this.resolution);
    }
  };

  Promise.prototype.map = function (adapter) {
    var _this = this;

    return new Promise(function (resolve) {
      _this.then(function (unmapped) {
        resolve(adapter(unmapped));
      });
    });
  };

  Promise.prototype.resolveNow = function (ifNotResolvedValue, ifResolved) {
    if (this.status == PromiseStatus.IN_PROGRESS) {
      return ifNotResolvedValue;
    }

    return ifResolved(this.resolution);
  };

  Promise.prototype.onDone = function (value) {
    this.status = PromiseStatus.RESOLVED;
    this.resolution = value;
    this.listOfWaiters.forEach(function (waiter) {
      return waiter(value);
    });
  };

  Promise.prototype.onReject = function (params) {
    console.warn('TBI');
  };

  return Promise;
}();

exports.Promise = Promise;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var __param = this && this.__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var eventService_1 = __webpack_require__(14);

var constants_1 = __webpack_require__(19);

var componentUtil_1 = __webpack_require__(137);

var gridApi_1 = __webpack_require__(20);

var context_1 = __webpack_require__(2);

var columnApi_1 = __webpack_require__(21);

var columnController_1 = __webpack_require__(17);

var environment_1 = __webpack_require__(88);

var propertyKeys_1 = __webpack_require__(192);

var colDefUtil_1 = __webpack_require__(202);

var eventKeys_1 = __webpack_require__(57);

var autoHeightCalculator_1 = __webpack_require__(159);

var sideBar_1 = __webpack_require__(203);

var utils_1 = __webpack_require__(6);

var DEFAULT_ROW_HEIGHT = 25;
var DEFAULT_DETAIL_ROW_HEIGHT = 300;
var DEFAULT_VIEWPORT_ROW_MODEL_PAGE_SIZE = 5;
var DEFAULT_VIEWPORT_ROW_MODEL_BUFFER_SIZE = 5;

function isTrue(value) {
  return value === true || value === 'true';
}

function zeroOrGreater(value, defaultValue) {
  if (value >= 0) {
    return value;
  } // zero gets returned if number is missing or the wrong type


  return defaultValue;
}

function oneOrGreater(value, defaultValue) {
  if (value > 0) {
    return value;
  } // zero gets returned if number is missing or the wrong type


  return defaultValue;
}

var GridOptionsWrapper =
/** @class */
function () {
  function GridOptionsWrapper() {
    this.propertyEventService = new eventService_1.EventService();
    this.domDataKey = '__AG_' + Math.random().toString();
    this.layoutElements = [];
  }

  GridOptionsWrapper_1 = GridOptionsWrapper;

  GridOptionsWrapper.prototype.agWire = function (gridApi, columnApi) {
    this.gridOptions.api = gridApi;
    this.gridOptions.columnApi = columnApi;
    this.checkForDeprecated();
    this.checkForViolations();
  };

  GridOptionsWrapper.prototype.destroy = function () {
    // need to remove these, as we don't own the lifecycle of the gridOptions, we need to
    // remove the references in case the user keeps the grid options, we want the rest
    // of the grid to be picked up by the garbage collector
    this.gridOptions.api = null;
    this.gridOptions.columnApi = null;
  };

  GridOptionsWrapper.prototype.init = function () {
    if (!(this.gridOptions.suppressPropertyNamesCheck === true)) {
      this.checkGridOptionsProperties();
      this.checkColumnDefProperties();
    }

    var async = this.useAsyncEvents();
    this.eventService.addGlobalListener(this.globalEventHandler.bind(this), async);

    if (this.isGroupSelectsChildren() && this.isSuppressParentsInRowNodes()) {
      console.warn('ag-Grid: groupSelectsChildren does not work wth suppressParentsInRowNodes, this selection method needs the part in rowNode to work');
    }

    if (this.isGroupSelectsChildren()) {
      if (!this.isRowSelectionMulti()) {
        console.warn("ag-Grid: rowSelection must be 'multiple' for groupSelectsChildren to make sense");
      }

      if (this.isRowModelServerSide()) {
        console.warn('ag-Grid: group selects children is NOT support for Server Side Row Model. ' + 'This is because the rows are lazy loaded, so selecting a group is not possible as' + 'the grid has no way of knowing what the children are.');
      }
    }

    if (this.isGroupRemoveSingleChildren() && this.isGroupHideOpenParents()) {
      console.warn('ag-Grid: groupRemoveSingleChildren and groupHideOpenParents do not work with each other, you need to pick one. And don\'t ask us how to us these together on our support forum either you will get the same answer!');
    }

    this.addEventListener(GridOptionsWrapper_1.PROP_DOM_LAYOUT, this.updateLayoutClasses.bind(this));
  };

  GridOptionsWrapper.prototype.checkColumnDefProperties = function () {
    var _this = this;

    if (this.gridOptions.columnDefs == null) {
      return;
    }

    this.gridOptions.columnDefs.forEach(function (colDef) {
      var userProperties = Object.getOwnPropertyNames(colDef);
      var validProperties = colDefUtil_1.ColDefUtil.ALL_PROPERTIES.concat(colDefUtil_1.ColDefUtil.FRAMEWORK_PROPERTIES);

      _this.checkProperties(userProperties, validProperties, validProperties, 'colDef', 'https://www.ag-grid.com/javascript-grid-column-properties/');
    });
  };

  GridOptionsWrapper.prototype.checkGridOptionsProperties = function () {
    var userProperties = Object.getOwnPropertyNames(this.gridOptions);
    var validProperties = propertyKeys_1.PropertyKeys.ALL_PROPERTIES.concat(propertyKeys_1.PropertyKeys.FRAMEWORK_PROPERTIES);
    Object.keys(eventKeys_1.Events).forEach(function (it) {
      return validProperties.push(componentUtil_1.ComponentUtil.getCallbackForEvent(eventKeys_1.Events[it]));
    });
    var validPropertiesAndExceptions = validProperties.concat('api', 'columnApi');
    this.checkProperties(userProperties, validPropertiesAndExceptions, validProperties, 'gridOptions', 'https://www.ag-grid.com/javascript-grid-properties/');
  };

  GridOptionsWrapper.prototype.checkProperties = function (userProperties, validPropertiesAndExceptions, validProperties, containerName, docsUrl) {
    var invalidProperties = utils_1._.fuzzyCheckStrings(userProperties, validPropertiesAndExceptions, validProperties);

    var invalidPropertyKeys = Object.keys(invalidProperties);
    invalidPropertyKeys.forEach(function (invalidPropertyKey) {
      var fuzzySuggestions = invalidProperties[invalidPropertyKey];
      console.warn("ag-grid: invalid " + containerName + " property '" + invalidPropertyKey + "' did you mean any of these: " + fuzzySuggestions.slice(0, 8).join(","));
    });

    if (invalidPropertyKeys.length > 0) {
      console.warn("ag-grid: to see all the valid " + containerName + " properties please check: " + docsUrl);
    }
  }; // returns the dom data, or undefined if not found


  GridOptionsWrapper.prototype.getDomData = function (element, key) {
    var domData = element[this.domDataKey];

    if (domData) {
      return domData[key];
    }

    return;
  };

  GridOptionsWrapper.prototype.setDomData = function (element, key, value) {
    var domData = element[this.domDataKey];

    if (utils_1._.missing(domData)) {
      domData = {};
      element[this.domDataKey] = domData;
    }

    domData[key] = value;
  };

  GridOptionsWrapper.prototype.isEnterprise = function () {
    return this.enterprise;
  };

  GridOptionsWrapper.prototype.isRowSelection = function () {
    return this.gridOptions.rowSelection === "single" || this.gridOptions.rowSelection === "multiple";
  };

  GridOptionsWrapper.prototype.isRowDeselection = function () {
    return isTrue(this.gridOptions.rowDeselection);
  };

  GridOptionsWrapper.prototype.isRowSelectionMulti = function () {
    return this.gridOptions.rowSelection === 'multiple';
  };

  GridOptionsWrapper.prototype.isRowMultiSelectWithClick = function () {
    return isTrue(this.gridOptions.rowMultiSelectWithClick);
  };

  GridOptionsWrapper.prototype.getContext = function () {
    return this.gridOptions.context;
  };

  GridOptionsWrapper.prototype.isPivotMode = function () {
    return isTrue(this.gridOptions.pivotMode);
  };

  GridOptionsWrapper.prototype.isPivotTotals = function () {
    return isTrue(this.gridOptions.pivotTotals);
  };

  GridOptionsWrapper.prototype.getPivotColumnGroupTotals = function () {
    return this.gridOptions.pivotColumnGroupTotals;
  };

  GridOptionsWrapper.prototype.getPivotRowTotals = function () {
    return this.gridOptions.pivotRowTotals;
  };

  GridOptionsWrapper.prototype.isRowModelInfinite = function () {
    return this.gridOptions.rowModelType === constants_1.Constants.ROW_MODEL_TYPE_INFINITE;
  };

  GridOptionsWrapper.prototype.isRowModelViewport = function () {
    return this.gridOptions.rowModelType === constants_1.Constants.ROW_MODEL_TYPE_VIEWPORT;
  };

  GridOptionsWrapper.prototype.isRowModelServerSide = function () {
    return this.gridOptions.rowModelType === constants_1.Constants.ROW_MODEL_TYPE_SERVER_SIDE;
  };

  GridOptionsWrapper.prototype.isRowModelDefault = function () {
    return utils_1._.missing(this.gridOptions.rowModelType) || this.gridOptions.rowModelType === constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE || this.gridOptions.rowModelType === constants_1.Constants.DEPRECATED_ROW_MODEL_TYPE_NORMAL;
  };

  GridOptionsWrapper.prototype.isFullRowEdit = function () {
    return this.gridOptions.editType === 'fullRow';
  };

  GridOptionsWrapper.prototype.isSuppressFocusAfterRefresh = function () {
    return isTrue(this.gridOptions.suppressFocusAfterRefresh);
  };

  GridOptionsWrapper.prototype.isSuppressBrowserResizeObserver = function () {
    return isTrue(this.gridOptions.suppressBrowserResizeObserver);
  };

  GridOptionsWrapper.prototype.isSuppressMaintainUnsortedOrder = function () {
    return isTrue(this.gridOptions.suppressMaintainUnsortedOrder);
  };

  GridOptionsWrapper.prototype.isShowToolPanel = function () {
    return isTrue(this.gridOptions.sideBar && Array.isArray(this.getSideBar().toolPanels));
  };

  GridOptionsWrapper.prototype.getSideBar = function () {
    return this.gridOptions.sideBar;
  };

  GridOptionsWrapper.prototype.isSuppressTouch = function () {
    return isTrue(this.gridOptions.suppressTouch);
  };

  GridOptionsWrapper.prototype.isSuppressRowTransform = function () {
    return isTrue(this.gridOptions.suppressRowTransform);
  };

  GridOptionsWrapper.prototype.isSuppressSetColumnStateEvents = function () {
    return isTrue(this.gridOptions.suppressSetColumnStateEvents);
  };

  GridOptionsWrapper.prototype.useAsyncEvents = function () {
    return !isTrue(this.gridOptions.suppressAsyncEvents);
  };

  GridOptionsWrapper.prototype.isEnableCellChangeFlash = function () {
    return isTrue(this.gridOptions.enableCellChangeFlash);
  };

  GridOptionsWrapper.prototype.isGroupSelectsChildren = function () {
    var result = isTrue(this.gridOptions.groupSelectsChildren);

    if (result && this.isTreeData()) {
      console.warn('ag-Grid: groupSelectsChildren does not work with tree data');
      return false;
    }

    return result;
  };

  GridOptionsWrapper.prototype.isSuppressRowHoverHighlight = function () {
    return isTrue(this.gridOptions.suppressRowHoverHighlight);
  };

  GridOptionsWrapper.prototype.isGroupSelectsFiltered = function () {
    return isTrue(this.gridOptions.groupSelectsFiltered);
  };

  GridOptionsWrapper.prototype.isGroupHideOpenParents = function () {
    return isTrue(this.gridOptions.groupHideOpenParents);
  }; // if we are doing hideOpenParents, then we always have groupMultiAutoColumn, otherwise hideOpenParents would not work


  GridOptionsWrapper.prototype.isGroupMultiAutoColumn = function () {
    return isTrue(this.gridOptions.groupMultiAutoColumn) || isTrue(this.gridOptions.groupHideOpenParents);
  };

  GridOptionsWrapper.prototype.isGroupRemoveSingleChildren = function () {
    return isTrue(this.gridOptions.groupRemoveSingleChildren);
  };

  GridOptionsWrapper.prototype.isGroupRemoveLowestSingleChildren = function () {
    return isTrue(this.gridOptions.groupRemoveLowestSingleChildren);
  };

  GridOptionsWrapper.prototype.isGroupIncludeFooter = function () {
    return isTrue(this.gridOptions.groupIncludeFooter);
  };

  GridOptionsWrapper.prototype.isGroupIncludeTotalFooter = function () {
    return isTrue(this.gridOptions.groupIncludeTotalFooter);
  };

  GridOptionsWrapper.prototype.isGroupSuppressBlankHeader = function () {
    return isTrue(this.gridOptions.groupSuppressBlankHeader);
  };

  GridOptionsWrapper.prototype.isSuppressRowClickSelection = function () {
    return isTrue(this.gridOptions.suppressRowClickSelection);
  };

  GridOptionsWrapper.prototype.isSuppressCellSelection = function () {
    return isTrue(this.gridOptions.suppressCellSelection);
  };

  GridOptionsWrapper.prototype.isSuppressMultiSort = function () {
    return isTrue(this.gridOptions.suppressMultiSort);
  };

  GridOptionsWrapper.prototype.isMultiSortKeyCtrl = function () {
    return this.gridOptions.multiSortKey === 'ctrl';
  };

  GridOptionsWrapper.prototype.isGroupSuppressAutoColumn = function () {
    return isTrue(this.gridOptions.groupSuppressAutoColumn);
  };

  GridOptionsWrapper.prototype.isSuppressDragLeaveHidesColumns = function () {
    return isTrue(this.gridOptions.suppressDragLeaveHidesColumns);
  };

  GridOptionsWrapper.prototype.isSuppressScrollOnNewData = function () {
    return isTrue(this.gridOptions.suppressScrollOnNewData);
  };

  GridOptionsWrapper.prototype.isRowDragManaged = function () {
    return isTrue(this.gridOptions.rowDragManaged);
  };

  GridOptionsWrapper.prototype.isSuppressRowDrag = function () {
    return isTrue(this.gridOptions.suppressRowDrag);
  }; // returns either 'print', 'autoHeight' or 'normal' (normal is the default)


  GridOptionsWrapper.prototype.getDomLayout = function () {
    var _this = this;

    var domLayout = this.gridOptions.domLayout;

    if (domLayout === constants_1.Constants.DOM_LAYOUT_PRINT || domLayout === constants_1.Constants.DOM_LAYOUT_AUTO_HEIGHT || domLayout === constants_1.Constants.DOM_LAYOUT_NORMAL) {
      return domLayout;
    } else if (domLayout === null || domLayout === undefined) {
      return constants_1.Constants.DOM_LAYOUT_NORMAL;
    } else {
      utils_1._.doOnce(function () {
        return console.warn("ag-Grid: " + _this.gridOptions.domLayout + " is not valid for DOM Layout, valid values are " + constants_1.Constants.DOM_LAYOUT_NORMAL + ", " + constants_1.Constants.DOM_LAYOUT_AUTO_HEIGHT + " and " + constants_1.Constants.DOM_LAYOUT_PRINT);
      }, 'warn about dom layout values');

      return constants_1.Constants.DOM_LAYOUT_NORMAL;
    }
  };

  GridOptionsWrapper.prototype.isSuppressHorizontalScroll = function () {
    return isTrue(this.gridOptions.suppressHorizontalScroll);
  };

  GridOptionsWrapper.prototype.isSuppressMaxRenderedRowRestriction = function () {
    return isTrue(this.gridOptions.suppressMaxRenderedRowRestriction);
  };

  GridOptionsWrapper.prototype.isExcludeChildrenWhenTreeDataFiltering = function () {
    return isTrue(this.gridOptions.excludeChildrenWhenTreeDataFiltering);
  };

  GridOptionsWrapper.prototype.isAlwaysShowVerticalScroll = function () {
    return isTrue(this.gridOptions.alwaysShowVerticalScroll);
  };

  GridOptionsWrapper.prototype.isSuppressLoadingOverlay = function () {
    return isTrue(this.gridOptions.suppressLoadingOverlay);
  };

  GridOptionsWrapper.prototype.isSuppressNoRowsOverlay = function () {
    return isTrue(this.gridOptions.suppressNoRowsOverlay);
  };

  GridOptionsWrapper.prototype.isSuppressFieldDotNotation = function () {
    return isTrue(this.gridOptions.suppressFieldDotNotation);
  };

  GridOptionsWrapper.prototype.getPinnedTopRowData = function () {
    return this.gridOptions.pinnedTopRowData;
  };

  GridOptionsWrapper.prototype.getPinnedBottomRowData = function () {
    return this.gridOptions.pinnedBottomRowData;
  };

  GridOptionsWrapper.prototype.isFunctionsPassive = function () {
    return isTrue(this.gridOptions.functionsPassive);
  };

  GridOptionsWrapper.prototype.isSuppressTabbing = function () {
    return isTrue(this.gridOptions.suppressTabbing);
  };

  GridOptionsWrapper.prototype.isSuppressChangeDetection = function () {
    return isTrue(this.gridOptions.suppressChangeDetection);
  };

  GridOptionsWrapper.prototype.isSuppressAnimationFrame = function () {
    return isTrue(this.gridOptions.suppressAnimationFrame);
  };

  GridOptionsWrapper.prototype.getQuickFilterText = function () {
    return this.gridOptions.quickFilterText;
  };

  GridOptionsWrapper.prototype.isCacheQuickFilter = function () {
    return isTrue(this.gridOptions.cacheQuickFilter);
  };

  GridOptionsWrapper.prototype.isUnSortIcon = function () {
    return isTrue(this.gridOptions.unSortIcon);
  };

  GridOptionsWrapper.prototype.isSuppressMenuHide = function () {
    return isTrue(this.gridOptions.suppressMenuHide);
  };

  GridOptionsWrapper.prototype.isEnterMovesDownAfterEdit = function () {
    return isTrue(this.gridOptions.enterMovesDownAfterEdit);
  };

  GridOptionsWrapper.prototype.isEnterMovesDown = function () {
    return isTrue(this.gridOptions.enterMovesDown);
  };

  GridOptionsWrapper.prototype.getRowStyle = function () {
    return this.gridOptions.rowStyle;
  };

  GridOptionsWrapper.prototype.getRowClass = function () {
    return this.gridOptions.rowClass;
  };

  GridOptionsWrapper.prototype.getRowStyleFunc = function () {
    return this.gridOptions.getRowStyle;
  };

  GridOptionsWrapper.prototype.getRowClassFunc = function () {
    return this.gridOptions.getRowClass;
  };

  GridOptionsWrapper.prototype.rowClassRules = function () {
    return this.gridOptions.rowClassRules;
  };

  GridOptionsWrapper.prototype.getPopupParent = function () {
    return this.gridOptions.popupParent;
  };

  GridOptionsWrapper.prototype.getBlockLoadDebounceMillis = function () {
    return this.gridOptions.blockLoadDebounceMillis;
  };

  GridOptionsWrapper.prototype.getPostProcessPopupFunc = function () {
    return this.gridOptions.postProcessPopup;
  };

  GridOptionsWrapper.prototype.getDoesDataFlowerFunc = function () {
    return this.gridOptions.doesDataFlower;
  };

  GridOptionsWrapper.prototype.getPaginationNumberFormatterFunc = function () {
    return this.gridOptions.paginationNumberFormatter;
  };

  GridOptionsWrapper.prototype.getChildCountFunc = function () {
    return this.gridOptions.getChildCount;
  };

  GridOptionsWrapper.prototype.getDefaultGroupSortComparator = function () {
    return this.gridOptions.defaultGroupSortComparator;
  };

  GridOptionsWrapper.prototype.getIsFullWidthCellFunc = function () {
    return this.gridOptions.isFullWidthCell;
  };

  GridOptionsWrapper.prototype.getFullWidthCellRendererParams = function () {
    return this.gridOptions.fullWidthCellRendererParams;
  };

  GridOptionsWrapper.prototype.isEmbedFullWidthRows = function () {
    return isTrue(this.gridOptions.deprecatedEmbedFullWidthRows);
  };

  GridOptionsWrapper.prototype.getSuppressKeyboardEventFunc = function () {
    return this.gridOptions.suppressKeyboardEvent;
  };

  GridOptionsWrapper.prototype.getBusinessKeyForNodeFunc = function () {
    return this.gridOptions.getBusinessKeyForNode;
  };

  GridOptionsWrapper.prototype.getApi = function () {
    return this.gridOptions.api;
  };

  GridOptionsWrapper.prototype.getColumnApi = function () {
    return this.gridOptions.columnApi;
  };

  GridOptionsWrapper.prototype.isDeltaRowDataMode = function () {
    return isTrue(this.gridOptions.deltaRowDataMode);
  };

  GridOptionsWrapper.prototype.isDeltaColumnMode = function () {
    return isTrue(this.gridOptions.deltaColumnMode);
  };

  GridOptionsWrapper.prototype.isEnsureDomOrder = function () {
    return isTrue(this.gridOptions.ensureDomOrder);
  };

  GridOptionsWrapper.prototype.isEnableCharts = function () {
    return isTrue(this.gridOptions.enableCharts);
  };

  GridOptionsWrapper.prototype.getColResizeDefault = function () {
    return this.gridOptions.colResizeDefault;
  };

  GridOptionsWrapper.prototype.isSingleClickEdit = function () {
    return isTrue(this.gridOptions.singleClickEdit);
  };

  GridOptionsWrapper.prototype.isSuppressClickEdit = function () {
    return isTrue(this.gridOptions.suppressClickEdit);
  };

  GridOptionsWrapper.prototype.isStopEditingWhenGridLosesFocus = function () {
    return isTrue(this.gridOptions.stopEditingWhenGridLosesFocus);
  };

  GridOptionsWrapper.prototype.getGroupDefaultExpanded = function () {
    return this.gridOptions.groupDefaultExpanded;
  };

  GridOptionsWrapper.prototype.getMaxConcurrentDatasourceRequests = function () {
    return this.gridOptions.maxConcurrentDatasourceRequests;
  };

  GridOptionsWrapper.prototype.getMaxBlocksInCache = function () {
    return this.gridOptions.maxBlocksInCache;
  };

  GridOptionsWrapper.prototype.getCacheOverflowSize = function () {
    return this.gridOptions.cacheOverflowSize;
  };

  GridOptionsWrapper.prototype.getPaginationPageSize = function () {
    return this.gridOptions.paginationPageSize;
  };

  GridOptionsWrapper.prototype.getCacheBlockSize = function () {
    return this.gridOptions.cacheBlockSize;
  };

  GridOptionsWrapper.prototype.getInfiniteInitialRowCount = function () {
    return this.gridOptions.infiniteInitialRowCount;
  };

  GridOptionsWrapper.prototype.isPurgeClosedRowNodes = function () {
    return isTrue(this.gridOptions.purgeClosedRowNodes);
  };

  GridOptionsWrapper.prototype.isSuppressPaginationPanel = function () {
    return isTrue(this.gridOptions.suppressPaginationPanel);
  };

  GridOptionsWrapper.prototype.getRowData = function () {
    return this.gridOptions.rowData;
  };

  GridOptionsWrapper.prototype.isGroupUseEntireRow = function () {
    return isTrue(this.gridOptions.groupUseEntireRow);
  };

  GridOptionsWrapper.prototype.isEnableRtl = function () {
    return isTrue(this.gridOptions.enableRtl);
  };

  GridOptionsWrapper.prototype.getAutoGroupColumnDef = function () {
    return this.gridOptions.autoGroupColumnDef;
  };

  GridOptionsWrapper.prototype.isGroupSuppressRow = function () {
    return isTrue(this.gridOptions.groupSuppressRow);
  };

  GridOptionsWrapper.prototype.getRowGroupPanelShow = function () {
    return this.gridOptions.rowGroupPanelShow;
  };

  GridOptionsWrapper.prototype.getPivotPanelShow = function () {
    return this.gridOptions.pivotPanelShow;
  };

  GridOptionsWrapper.prototype.isAngularCompileRows = function () {
    return isTrue(this.gridOptions.angularCompileRows);
  };

  GridOptionsWrapper.prototype.isAngularCompileFilters = function () {
    return isTrue(this.gridOptions.angularCompileFilters);
  };

  GridOptionsWrapper.prototype.isAngularCompileHeaders = function () {
    return isTrue(this.gridOptions.angularCompileHeaders);
  };

  GridOptionsWrapper.prototype.isDebug = function () {
    return isTrue(this.gridOptions.debug);
  };

  GridOptionsWrapper.prototype.getColumnDefs = function () {
    return this.gridOptions.columnDefs;
  };

  GridOptionsWrapper.prototype.getColumnTypes = function () {
    return this.gridOptions.columnTypes;
  };

  GridOptionsWrapper.prototype.getDatasource = function () {
    return this.gridOptions.datasource;
  };

  GridOptionsWrapper.prototype.getViewportDatasource = function () {
    return this.gridOptions.viewportDatasource;
  };

  GridOptionsWrapper.prototype.getServerSideDatasource = function () {
    return this.gridOptions.serverSideDatasource;
  };

  GridOptionsWrapper.prototype.isAccentedSort = function () {
    return isTrue(this.gridOptions.accentedSort);
  };

  GridOptionsWrapper.prototype.isEnableBrowserTooltips = function () {
    return isTrue(this.gridOptions.enableBrowserTooltips);
  };

  GridOptionsWrapper.prototype.isEnableCellExpressions = function () {
    return isTrue(this.gridOptions.enableCellExpressions);
  };

  GridOptionsWrapper.prototype.isEnableGroupEdit = function () {
    return isTrue(this.gridOptions.enableGroupEdit);
  };

  GridOptionsWrapper.prototype.isSuppressMiddleClickScrolls = function () {
    return isTrue(this.gridOptions.suppressMiddleClickScrolls);
  };

  GridOptionsWrapper.prototype.isSuppressPreventDefaultOnMouseWheel = function () {
    return isTrue(this.gridOptions.suppressPreventDefaultOnMouseWheel);
  };

  GridOptionsWrapper.prototype.isSuppressColumnVirtualisation = function () {
    return isTrue(this.gridOptions.suppressColumnVirtualisation);
  };

  GridOptionsWrapper.prototype.isSuppressContextMenu = function () {
    return isTrue(this.gridOptions.suppressContextMenu);
  };

  GridOptionsWrapper.prototype.isAllowContextMenuWithControlKey = function () {
    return isTrue(this.gridOptions.allowContextMenuWithControlKey);
  };

  GridOptionsWrapper.prototype.isSuppressCopyRowsToClipboard = function () {
    return isTrue(this.gridOptions.suppressCopyRowsToClipboard);
  };

  GridOptionsWrapper.prototype.isCopyHeadersToClipboard = function () {
    return isTrue(this.gridOptions.copyHeadersToClipboard);
  };

  GridOptionsWrapper.prototype.isSuppressClipboardPaste = function () {
    return isTrue(this.gridOptions.suppressClipboardPaste);
  };

  GridOptionsWrapper.prototype.isPagination = function () {
    return isTrue(this.gridOptions.pagination);
  };

  GridOptionsWrapper.prototype.isSuppressEnterpriseResetOnNewColumns = function () {
    return isTrue(this.gridOptions.suppressEnterpriseResetOnNewColumns);
  };

  GridOptionsWrapper.prototype.getProcessDataFromClipboardFunc = function () {
    return this.gridOptions.processDataFromClipboard;
  };

  GridOptionsWrapper.prototype.getBatchUpdateWaitMillis = function () {
    return utils_1._.exists(this.gridOptions.batchUpdateWaitMillis) ? this.gridOptions.batchUpdateWaitMillis : constants_1.Constants.BATCH_WAIT_MILLIS;
  };

  GridOptionsWrapper.prototype.isSuppressMovableColumns = function () {
    return isTrue(this.gridOptions.suppressMovableColumns);
  };

  GridOptionsWrapper.prototype.isAnimateRows = function () {
    // never allow animating if enforcing the row order
    if (this.isEnsureDomOrder()) {
      return false;
    }

    return isTrue(this.gridOptions.animateRows);
  };

  GridOptionsWrapper.prototype.isSuppressColumnMoveAnimation = function () {
    return isTrue(this.gridOptions.suppressColumnMoveAnimation);
  };

  GridOptionsWrapper.prototype.isSuppressAggFuncInHeader = function () {
    return isTrue(this.gridOptions.suppressAggFuncInHeader);
  };

  GridOptionsWrapper.prototype.isSuppressAggAtRootLevel = function () {
    return isTrue(this.gridOptions.suppressAggAtRootLevel);
  };

  GridOptionsWrapper.prototype.isEnableRangeSelection = function () {
    return isTrue(this.gridOptions.enableRangeSelection);
  };

  GridOptionsWrapper.prototype.isSuppressMultiRangeSelection = function () {
    return isTrue(this.gridOptions.suppressMultiRangeSelection);
  };

  GridOptionsWrapper.prototype.isPaginationAutoPageSize = function () {
    return isTrue(this.gridOptions.paginationAutoPageSize);
  };

  GridOptionsWrapper.prototype.isRememberGroupStateWhenNewData = function () {
    return isTrue(this.gridOptions.rememberGroupStateWhenNewData);
  };

  GridOptionsWrapper.prototype.getIcons = function () {
    return this.gridOptions.icons;
  };

  GridOptionsWrapper.prototype.getAggFuncs = function () {
    return this.gridOptions.aggFuncs;
  };

  GridOptionsWrapper.prototype.getSortingOrder = function () {
    return this.gridOptions.sortingOrder;
  };

  GridOptionsWrapper.prototype.getAlignedGrids = function () {
    return this.gridOptions.alignedGrids;
  };

  GridOptionsWrapper.prototype.isMasterDetail = function () {
    var _this = this;

    var usingMasterDetail = isTrue(this.gridOptions.masterDetail);

    utils_1._.doOnce(function () {
      if (usingMasterDetail && !_this.enterprise) {
        console.warn('ag-grid: Master Detail is an Enterprise feature of ag-Grid.');
      }
    }, 'MasterDetailEnterpriseCheck');

    return usingMasterDetail && this.enterprise;
  };

  GridOptionsWrapper.prototype.getIsRowMasterFunc = function () {
    return this.gridOptions.isRowMaster;
  };

  GridOptionsWrapper.prototype.getIsRowSelectableFunc = function () {
    return this.gridOptions.isRowSelectable;
  };

  GridOptionsWrapper.prototype.getGroupRowRendererParams = function () {
    return this.gridOptions.groupRowRendererParams;
  };

  GridOptionsWrapper.prototype.getOverlayLoadingTemplate = function () {
    return this.gridOptions.overlayLoadingTemplate;
  };

  GridOptionsWrapper.prototype.getOverlayNoRowsTemplate = function () {
    return this.gridOptions.overlayNoRowsTemplate;
  };

  GridOptionsWrapper.prototype.isSuppressAutoSize = function () {
    return isTrue(this.gridOptions.suppressAutoSize);
  };

  GridOptionsWrapper.prototype.isEnableCellTextSelection = function () {
    return isTrue(this.gridOptions.enableCellTextSelection);
  };

  GridOptionsWrapper.prototype.isSuppressParentsInRowNodes = function () {
    return isTrue(this.gridOptions.suppressParentsInRowNodes);
  };

  GridOptionsWrapper.prototype.isFunctionsReadOnly = function () {
    return isTrue(this.gridOptions.functionsReadOnly);
  };

  GridOptionsWrapper.prototype.isFloatingFilter = function () {
    return this.gridOptions.floatingFilter;
  };

  GridOptionsWrapper.prototype.isEnableCellTextSelect = function () {
    return isTrue(this.gridOptions.enableCellTextSelection);
  };

  GridOptionsWrapper.prototype.isEnableOldSetFilterModel = function () {
    return isTrue(this.gridOptions.enableOldSetFilterModel);
  };

  GridOptionsWrapper.prototype.getDefaultColDef = function () {
    return this.gridOptions.defaultColDef;
  };

  GridOptionsWrapper.prototype.getDefaultColGroupDef = function () {
    return this.gridOptions.defaultColGroupDef;
  };

  GridOptionsWrapper.prototype.getDefaultExportParams = function () {
    return this.gridOptions.defaultExportParams;
  };

  GridOptionsWrapper.prototype.isSuppressCsvExport = function () {
    return isTrue(this.gridOptions.suppressCsvExport);
  };

  GridOptionsWrapper.prototype.isSuppressExcelExport = function () {
    return isTrue(this.gridOptions.suppressExcelExport);
  };

  GridOptionsWrapper.prototype.isSuppressMakeColumnVisibleAfterUnGroup = function () {
    return isTrue(this.gridOptions.suppressMakeColumnVisibleAfterUnGroup);
  };

  GridOptionsWrapper.prototype.getNodeChildDetailsFunc = function () {
    return this.gridOptions.getNodeChildDetails;
  };

  GridOptionsWrapper.prototype.getDataPathFunc = function () {
    return this.gridOptions.getDataPath;
  };

  GridOptionsWrapper.prototype.getIsServerSideGroupFunc = function () {
    return this.gridOptions.isServerSideGroup;
  };

  GridOptionsWrapper.prototype.getServerSideGroupKeyFunc = function () {
    return this.gridOptions.getServerSideGroupKey;
  };

  GridOptionsWrapper.prototype.getGroupRowAggNodesFunc = function () {
    return this.gridOptions.groupRowAggNodes;
  };

  GridOptionsWrapper.prototype.getContextMenuItemsFunc = function () {
    return this.gridOptions.getContextMenuItems;
  };

  GridOptionsWrapper.prototype.getMainMenuItemsFunc = function () {
    return this.gridOptions.getMainMenuItems;
  };

  GridOptionsWrapper.prototype.getRowNodeIdFunc = function () {
    return this.gridOptions.getRowNodeId;
  };

  GridOptionsWrapper.prototype.getNavigateToNextCellFunc = function () {
    return this.gridOptions.navigateToNextCell;
  };

  GridOptionsWrapper.prototype.getTabToNextCellFunc = function () {
    return this.gridOptions.tabToNextCell;
  };

  GridOptionsWrapper.prototype.isTreeData = function () {
    var _this = this;

    var usingTreeData = isTrue(this.gridOptions.treeData);

    utils_1._.doOnce(function () {
      if (usingTreeData && !_this.enterprise) {
        console.warn('ag-grid: TreeData is an Enterprise feature of ag-Grid.');
      }
    }, 'TreeDataEnterpriseCheck');

    return usingTreeData;
  };

  GridOptionsWrapper.prototype.isValueCache = function () {
    return isTrue(this.gridOptions.valueCache);
  };

  GridOptionsWrapper.prototype.isValueCacheNeverExpires = function () {
    return isTrue(this.gridOptions.valueCacheNeverExpires);
  };

  GridOptionsWrapper.prototype.isDeltaSort = function () {
    return isTrue(this.gridOptions.deltaSort);
  };

  GridOptionsWrapper.prototype.isAggregateOnlyChangedColumns = function () {
    return isTrue(this.gridOptions.aggregateOnlyChangedColumns);
  };

  GridOptionsWrapper.prototype.getProcessSecondaryColDefFunc = function () {
    return this.gridOptions.processSecondaryColDef;
  };

  GridOptionsWrapper.prototype.getProcessSecondaryColGroupDefFunc = function () {
    return this.gridOptions.processSecondaryColGroupDef;
  };

  GridOptionsWrapper.prototype.getSendToClipboardFunc = function () {
    return this.gridOptions.sendToClipboard;
  };

  GridOptionsWrapper.prototype.getProcessRowPostCreateFunc = function () {
    return this.gridOptions.processRowPostCreate;
  };

  GridOptionsWrapper.prototype.getProcessCellForClipboardFunc = function () {
    return this.gridOptions.processCellForClipboard;
  };

  GridOptionsWrapper.prototype.getProcessHeaderForClipboardFunc = function () {
    return this.gridOptions.processHeaderForClipboard;
  };

  GridOptionsWrapper.prototype.getProcessCellFromClipboardFunc = function () {
    return this.gridOptions.processCellFromClipboard;
  };

  GridOptionsWrapper.prototype.getViewportRowModelPageSize = function () {
    return oneOrGreater(this.gridOptions.viewportRowModelPageSize, DEFAULT_VIEWPORT_ROW_MODEL_PAGE_SIZE);
  };

  GridOptionsWrapper.prototype.getViewportRowModelBufferSize = function () {
    return zeroOrGreater(this.gridOptions.viewportRowModelBufferSize, DEFAULT_VIEWPORT_ROW_MODEL_BUFFER_SIZE);
  }; // public getCellRenderers(): {[key: string]: {new(): ICellRenderer} | ICellRendererFunc} { return this.gridOptions.cellRenderers; }
  // public getCellEditors(): {[key: string]: {new(): ICellEditor}} { return this.gridOptions.cellEditors; }


  GridOptionsWrapper.prototype.isServerSideSortingAlwaysResets = function () {
    return isTrue(this.gridOptions.serverSideSortingAlwaysResets);
  };

  GridOptionsWrapper.prototype.getPostSortFunc = function () {
    return this.gridOptions.postSort;
  };

  GridOptionsWrapper.prototype.getClipboardDeliminator = function () {
    return utils_1._.exists(this.gridOptions.clipboardDeliminator) ? this.gridOptions.clipboardDeliminator : '\t';
  };

  GridOptionsWrapper.prototype.setProperty = function (key, value) {
    var gridOptionsNoType = this.gridOptions;
    var previousValue = gridOptionsNoType[key];

    if (previousValue !== value) {
      gridOptionsNoType[key] = value;
      var event_1 = {
        type: key,
        currentValue: value,
        previousValue: previousValue
      };
      this.propertyEventService.dispatchEvent(event_1);
    }
  }; // this logic is repeated in lots of places. any element that had different CSS
  // dependent on the layout needs to have the layout class added ot it.


  GridOptionsWrapper.prototype.addLayoutElement = function (element) {
    this.layoutElements.push(element);
    this.updateLayoutClasses();
  };

  GridOptionsWrapper.prototype.updateLayoutClasses = function () {
    var domLayout = this.getDomLayout();
    var domLayoutAutoHeight = domLayout === constants_1.Constants.DOM_LAYOUT_AUTO_HEIGHT;
    var domLayoutPrint = domLayout === constants_1.Constants.DOM_LAYOUT_PRINT;
    var domLayoutNormal = domLayout === constants_1.Constants.DOM_LAYOUT_NORMAL;
    this.layoutElements.forEach(function (e) {
      utils_1._.addOrRemoveCssClass(e, 'ag-layout-auto-height', domLayoutAutoHeight);

      utils_1._.addOrRemoveCssClass(e, 'ag-layout-normal', domLayoutNormal);

      utils_1._.addOrRemoveCssClass(e, 'ag-layout-print', domLayoutPrint);
    });
  };

  GridOptionsWrapper.prototype.addEventListener = function (key, listener) {
    GridOptionsWrapper_1.checkEventDeprecation(key);
    this.propertyEventService.addEventListener(key, listener);
  };

  GridOptionsWrapper.checkEventDeprecation = function (eventName) {
    if (eventName === 'floatingRowDataChanged') {
      console.warn('ag-Grid: floatingRowDataChanged is now called pinnedRowDataChanged');
    }
  };

  GridOptionsWrapper.prototype.removeEventListener = function (key, listener) {
    this.propertyEventService.removeEventListener(key, listener);
  };

  GridOptionsWrapper.prototype.getAutoSizePadding = function () {
    return this.gridOptions.autoSizePadding && this.gridOptions.autoSizePadding > 0 ? this.gridOptions.autoSizePadding : 20;
  }; // properties


  GridOptionsWrapper.prototype.getHeaderHeight = function () {
    if (typeof this.gridOptions.headerHeight === 'number') {
      return this.gridOptions.headerHeight;
    }

    return this.specialForNewMaterial(25, 'headerHeight');
  };

  GridOptionsWrapper.prototype.getFloatingFiltersHeight = function () {
    if (typeof this.gridOptions.floatingFiltersHeight === 'number') {
      return this.gridOptions.floatingFiltersHeight;
    }

    return this.specialForNewMaterial(25, 'headerHeight');
  };

  GridOptionsWrapper.prototype.getGroupHeaderHeight = function () {
    if (typeof this.gridOptions.groupHeaderHeight === 'number') {
      return this.gridOptions.groupHeaderHeight;
    }

    return this.getHeaderHeight();
  };

  GridOptionsWrapper.prototype.getPivotHeaderHeight = function () {
    if (typeof this.gridOptions.pivotHeaderHeight === 'number') {
      return this.gridOptions.pivotHeaderHeight;
    }

    return this.getHeaderHeight();
  };

  GridOptionsWrapper.prototype.getPivotGroupHeaderHeight = function () {
    if (typeof this.gridOptions.pivotGroupHeaderHeight === 'number') {
      return this.gridOptions.pivotGroupHeaderHeight;
    }

    return this.getGroupHeaderHeight();
  };

  GridOptionsWrapper.prototype.isExternalFilterPresent = function () {
    if (typeof this.gridOptions.isExternalFilterPresent === 'function') {
      return this.gridOptions.isExternalFilterPresent();
    }

    return false;
  };

  GridOptionsWrapper.prototype.doesExternalFilterPass = function (node) {
    if (typeof this.gridOptions.doesExternalFilterPass === 'function') {
      return this.gridOptions.doesExternalFilterPass(node);
    }

    return false;
  };

  GridOptionsWrapper.prototype.getDocument = function () {
    // if user is providing document, we use the users one,
    // otherwise we use the document on the global namespace.
    var result = null;

    if (this.gridOptions.getDocument && utils_1._.exists(this.gridOptions.getDocument)) {
      result = this.gridOptions.getDocument();
    }

    if (result && utils_1._.exists(result)) {
      return result;
    }

    return document;
  };

  GridOptionsWrapper.prototype.getMinColWidth = function () {
    if (this.gridOptions.minColWidth && this.gridOptions.minColWidth > GridOptionsWrapper_1.MIN_COL_WIDTH) {
      return this.gridOptions.minColWidth;
    }

    return GridOptionsWrapper_1.MIN_COL_WIDTH;
  };

  GridOptionsWrapper.prototype.getMaxColWidth = function () {
    if (this.gridOptions.maxColWidth && this.gridOptions.maxColWidth > GridOptionsWrapper_1.MIN_COL_WIDTH) {
      return this.gridOptions.maxColWidth;
    }

    return null;
  };

  GridOptionsWrapper.prototype.getColWidth = function () {
    if (typeof this.gridOptions.colWidth !== 'number' || this.gridOptions.colWidth < GridOptionsWrapper_1.MIN_COL_WIDTH) {
      return 200;
    }

    return this.gridOptions.colWidth;
  };

  GridOptionsWrapper.prototype.getRowBufferInPixels = function () {
    var rowsToBuffer;

    if (typeof this.gridOptions.rowBuffer === 'number') {
      if (this.gridOptions.rowBuffer < 0) {
        utils_1._.doOnce(function () {
          return console.warn("ag-Grid: rowBuffer should not be negative");
        }, 'warn rowBuffer negative');

        rowsToBuffer = 0;
      } else {
        rowsToBuffer = this.gridOptions.rowBuffer;
      }
    } else {
      rowsToBuffer = constants_1.Constants.ROW_BUFFER_SIZE;
    }

    var defaultRowHeight = this.getRowHeightAsNumber();
    var res = rowsToBuffer * defaultRowHeight;
    return res;
  }; // the user might be using some non-standard scrollbar, eg a scrollbar that has zero
  // width and overlays (like the Safari scrollbar, but presented in Chrome). so we
  // allow the user to provide the scroll width before we work it out.


  GridOptionsWrapper.prototype.getScrollbarWidth = function () {
    var scrollbarWidth = this.gridOptions.scrollbarWidth;

    if (typeof scrollbarWidth !== 'number' || scrollbarWidth < 0) {
      scrollbarWidth = utils_1._.getScrollbarWidth();
    }

    return scrollbarWidth;
  };

  GridOptionsWrapper.prototype.checkForDeprecated = function () {
    var _this = this; // casting to generic object, so typescript compiles even though
    // we are looking for attributes that don't exist


    var options = this.gridOptions;

    if (options.suppressUnSort) {
      console.warn('ag-grid: as of v1.12.4 suppressUnSort is not used. Please use sortingOrder instead.');
    }

    if (options.suppressDescSort) {
      console.warn('ag-grid: as of v1.12.4 suppressDescSort is not used. Please use sortingOrder instead.');
    }

    if (options.groupAggFields) {
      console.warn('ag-grid: as of v3 groupAggFields is not used. Please add appropriate agg fields to your columns.');
    }

    if (options.groupHidePivotColumns) {
      console.warn('ag-grid: as of v3 groupHidePivotColumns is not used as pivot columns are now called rowGroup columns. Please refer to the documentation');
    }

    if (options.groupKeys) {
      console.warn('ag-grid: as of v3 groupKeys is not used. You need to set rowGroupIndex on the columns to group. Please refer to the documentation');
    }

    if (typeof options.groupDefaultExpanded === 'boolean') {
      console.warn('ag-grid: groupDefaultExpanded can no longer be boolean. for groupDefaultExpanded=true, use groupDefaultExpanded=9999 instead, to expand all the groups');
    }

    if (options.onRowDeselected || options.rowDeselected) {
      console.warn('ag-grid: since version 3.4 event rowDeselected no longer exists, please check the docs');
    }

    if (options.rowsAlreadyGrouped) {
      console.warn('ag-grid: since version 3.4 rowsAlreadyGrouped no longer exists, please use getNodeChildDetails() instead');
    }

    if (options.groupAggFunction) {
      console.warn('ag-grid: since version 4.3.x groupAggFunction is now called groupRowAggNodes');
    }

    if (options.checkboxSelection) {
      console.warn('ag-grid: since version 8.0.x checkboxSelection is not supported as a grid option. ' + 'If you want this on all columns, use defaultColDef instead and set it there');
    }

    if (options.paginationInitialRowCount) {
      console.warn('ag-grid: since version 9.0.x paginationInitialRowCount is now called infiniteInitialRowCount');
    }

    if (options.infinitePageSize) {
      console.warn('ag-grid: since version 9.0.x infinitePageSize is now called cacheBlockSize');
    }

    if (options.infiniteBlockSize) {
      console.warn('ag-grid: since version 10.0.x infiniteBlockSize is now called cacheBlockSize');
    }

    if (options.maxPagesInCache) {
      console.warn('ag-grid: since version 10.0.x maxPagesInCache is now called maxBlocksInCache');
    }

    if (options.paginationOverflowSize) {
      console.warn('ag-grid: since version 10.0.x paginationOverflowSize is now called cacheOverflowSize');
    } // if (options.forPrint) {
    //     console.warn('ag-grid: since version 10.1.x, use property domLayout="forPrint" instead of forPrint=true');
    // }


    if (options.suppressMenuFilterPanel) {
      console.warn("ag-grid: since version 11.0.x, use property colDef.menuTabs=['generalMenuTab','columnsMenuTab'] instead of suppressMenuFilterPanel=true");
    }

    if (options.suppressMenuMainPanel) {
      console.warn("ag-grid: since version 11.0.x, use property colDef.menuTabs=['filterMenuTab','columnsMenuTab'] instead of suppressMenuMainPanel=true");
    }

    if (options.suppressMenuColumnPanel) {
      console.warn("ag-grid: since version 11.0.x, use property colDef.menuTabs=['generalMenuTab','filterMenuTab'] instead of suppressMenuColumnPanel=true");
    }

    if (options.suppressUseColIdForGroups) {
      console.warn("ag-grid: since version 11.0.x, this is not in use anymore. You should be able to remove it from your definition");
    }

    if (options.groupSuppressRow) {
      console.warn("ag-grid: since version 18.2.x, 'groupSuppressRow' should not be used anymore. Instead remove row groups and perform custom sorting.");
    }

    if (options.groupColumnDef) {
      console.warn("ag-grid: since version 11.0.x, groupColumnDef has been renamed, this property is now called autoGroupColumnDef. Please change your configuration accordingly");
    }

    if (options.slaveGrids) {
      console.warn("ag-grid: since version 12.x, slaveGrids has been renamed, this property is now called alignedGrids. Please change your configuration accordingly");
    }

    if (options.floatingTopRowData) {
      console.warn("ag-grid: since version 12.x, floatingTopRowData is now called pinnedTopRowData");
    }

    if (options.floatingBottomRowData) {
      console.warn("ag-grid: since version 12.x, floatingBottomRowData is now called pinnedBottomRowData");
    }

    if (options.paginationStartPage) {
      console.warn("ag-grid: since version 12.x, paginationStartPage is gone, please call api.paginationGoToPage(" + options.paginationStartPage + ") instead.");
    }

    if (options.getHeaderCellTemplate) {
      console.warn("ag-grid: since version 15.x, getHeaderCellTemplate is gone, please check the header documentation on how to set header templates.");
    }

    if (options.headerCellTemplate) {
      console.warn("ag-grid: since version 15.x, headerCellTemplate is gone, please check the header documentation on how to set header templates.");
    }

    if (options.headerCellRenderer) {
      console.warn("ag-grid: since version 15.x, headerCellRenderer is gone, please check the header documentation on how to set header templates.");
    }

    if (options.angularCompileHeaders) {
      console.warn("ag-grid: since version 15.x, angularCompileHeaders is gone, please see the getting started for Angular 1 docs to see how to do headers in Angular 1.x.");
    }

    if (options.pivotTotals) {
      console.warn("ag-grid: since version 18.x, pivotTotals has been removed, instead if using pivotTotals, set pivotColumnGroupTotals='before'|'after'.");
      options.pivotColumnGroupTotals = 'before';
    }

    if (options.rowModelType === 'inMemory') {
      console.warn("ag-grid: since version 18.x, The In Memory Row Model has been renamed to the Client Side Row Model, set rowModelType='clientSide' instead.");
      options.rowModelType = 'clientSide';
    }

    if (options.rowModelType === 'enterprise') {
      console.warn("ag-grid: since version 18.x, The Enterprise Row Model has been renamed to the Server Side Row Model, set rowModelType='serverSide' instead.");
      options.rowModelType = 'serverSide';
    }

    if (options.layoutInterval) {
      console.warn("ag-grid: since version 18.x, layoutInterval is no longer a property. This is because the grid now uses CSS Flex for layout.");
    }

    if (options.gridAutoHeight) {
      console.warn("ag-grid: since version 19.x, gridAutoHeight is gone, please use domLayout=autoHeight instead");
      options.domLayout = 'autoHeight';
    }

    if (options.showToolPanel === true) {
      console.warn("ag-grid: since version 19.x, showToolPanel is gone, please specify toolPanel components. See https://www.ag-grid.com/javascript-grid-tool-panel/");
      options.showToolPanel = undefined;
      options.sideBar = options.sideBar || true;
    }

    if (options.showToolPanel === false) {
      console.warn("ag-grid: since version 19.x, showToolPanel is gone, please specify toolPanel components. See https://www.ag-grid.com/javascript-grid-tool-panel/");
      options.showToolPanel = undefined;
      options.sideBar = options.sideBar || false;
    }

    var oldToolPanelProperties = {
      toolPanelSuppressRowGroups: 'suppressRowGroups',
      toolPanelSuppressValues: 'suppressValues',
      toolPanelSuppressPivots: 'suppressPivots',
      toolPanelSuppressPivotMode: 'suppressPivotMode',
      toolPanelSuppressColumnFilter: 'suppressColumnFilter',
      toolPanelSuppressColumnSelectAll: 'suppressColumnSelectAll',
      toolPanelSuppressSideButtons: 'suppressSideButtons',
      toolPanelSuppressColumnExpandAll: 'suppressColumnExpandAll',
      contractColumnSelection: 'contractColumnSelection'
    };
    var toolPanelColumnsCompProps = {};
    Object.keys(oldToolPanelProperties).forEach(function (key) {
      var translation = oldToolPanelProperties[key];
      var value = _this.gridOptions[key];

      if (value !== undefined) {
        if (key === 'toolPanelSuppressSideButtons') {
          console.warn('ag-grid: since v19.0 toolPanelSuppressSideButtons has been completely removed. See https://www.ag-grid.com/javascript-grid-tool-panel/');
          return;
        }

        console.warn("ag-grid: since v19.0 gridOptions." + key + " is deprecated, please use gridOptions.sideBar.toolPanel[columnsIndex].componentParams." + translation);
        toolPanelColumnsCompProps[translation] = value;
      }
    });

    if (Object.keys(toolPanelColumnsCompProps).length > 0 && !utils_1._.exists(options.sideBar)) {
      console.warn("ag-grid: since version 19.x, sideBar is mandatory if using toolPanel related properties. See https://www.ag-grid.com/javascript-grid-tool-panel/");
      options.sideBar = true;
    }

    if (options.sideBar != null) {
      options.sideBar = sideBar_1.SideBarDefParser.parse(options.sideBar);
    }

    var sideBarDef = this.gridOptions.sideBar;

    if (Object.keys(toolPanelColumnsCompProps).length > 0 && sideBarDef && sideBarDef.toolPanels) {
      var columnsDef = sideBarDef.toolPanels.filter(function (it) {
        return it.id === 'columns';
      });

      if (columnsDef.length === 1) {
        utils_1._.mergeDeep(columnsDef[0], {
          componentParams: toolPanelColumnsCompProps
        });
      }
    }

    if (options.enableStatusBar) {
      console.warn("ag-grid: since version 19.x, enableStatusBar is gone, please specify statusBar components");
      options.statusBar = options.statusBar || {
        components: [{
          component: 'agAggregationComponent'
        }]
      };
    }

    if (options.alwaysShowStatusBar) {
      console.warn("ag-grid: since version 19.x, alwaysShowStatusBar is gone. Please specify a min-height on the ag-status-bar css class, eg .ag-status-bar {min-height: 35px; }");
    }

    if (options.enableServerSideSorting || options.enableSorting) {
      console.warn("ag-Grid: since v20, grid options enableSorting and enableServerSideSorting are gone. Instead set sortable=true on the column definition for the columns sorting are allowed on. To migrate from gridOption.enableSorting=true, set gridOptions.defaultColDef.sortable=true");

      if (!options.defaultColDef) {
        options.defaultColDef = {};
      }

      if (!options.defaultColDef.sortable) {
        options.defaultColDef.sortable = true;
      }
    }

    if (options.enableFilter || options.enableServerSideFilter) {
      console.warn("ag-Grid: since v20, grid options enableFilter and enableServerSideFilter are gone. Instead set filter=true (if not already specifying a specific filter) on the column definition for the columns filtering is allowed on. To migrate from gridOptions.enableFilter=true, set gridOptions.defaultColDef.filter=true. If you are explicitly setting specific filters for each column (ie colDef.filter is already set) the you don't need to do anything.");

      if (!options.defaultColDef) {
        options.defaultColDef = {};
      }

      if (!options.defaultColDef.filter) {
        options.defaultColDef.filter = true;
      }
    }

    if (options.enableColResize) {
      console.warn("ag-Grid: since v20, grid options enableColResize is gone. Instead set resizable=true on the column definition for the columns resizing are allowed on. To migrate from gridOption.enableColResize=true, set gridOptions.defaultColDef.resizable=true");

      if (!options.defaultColDef) {
        options.defaultColDef = {};
      }

      if (!options.defaultColDef.resizable) {
        options.defaultColDef.resizable = true;
      }
    }

    if (options.embedFullWidthRows) {
      console.warn("ag-Grid: since v20.1, embedFullWidthRows is now gone. This property was introduced to allow faster vertical scrolling when using slow browsers (IE) and full width rows. However in v20 the dom layout was redesigned and this performance problem no longer exists, hence this property 'hack' is no longer necessary.");
    }

    if (options.suppressTabbing) {
      console.warn("ag-Grid: since v20.1, suppressTabbing is replaced with the more powerful grid callback suppressKeyboardEvent(params) which can suppress any keyboard event including tabbing.");
    }
  };

  GridOptionsWrapper.prototype.checkForViolations = function () {
    if (this.isTreeData()) {
      this.treeDataViolations();
    }
  };

  GridOptionsWrapper.prototype.treeDataViolations = function () {
    if (this.isRowModelDefault()) {
      if (utils_1._.missing(this.getDataPathFunc())) {
        console.warn('ag-Grid: property usingTreeData=true with rowModel=clientSide, but you did not ' + 'provide getDataPath function, please provide getDataPath function if using tree data.');
      }
    }

    if (this.isRowModelServerSide()) {
      if (utils_1._.missing(this.getIsServerSideGroupFunc())) {
        console.warn('ag-Grid: property usingTreeData=true with rowModel=serverSide, but you did not ' + 'provide isServerSideGroup function, please provide isServerSideGroup function if using tree data.');
      }

      if (utils_1._.missing(this.getServerSideGroupKeyFunc())) {
        console.warn('ag-Grid: property usingTreeData=true with rowModel=serverSide, but you did not ' + 'provide getServerSideGroupKey function, please provide getServerSideGroupKey function if using tree data.');
      }
    }
  };

  GridOptionsWrapper.prototype.getLocaleTextFunc = function () {
    if (this.gridOptions.localeTextFunc) {
      return this.gridOptions.localeTextFunc;
    }

    var that = this;
    return function (key, defaultValue) {
      var localeText = that.gridOptions.localeText;

      if (localeText && localeText[key]) {
        return localeText[key];
      }

      return defaultValue;
    };
  }; // responsible for calling the onXXX functions on gridOptions


  GridOptionsWrapper.prototype.globalEventHandler = function (eventName, event) {
    var callbackMethodName = componentUtil_1.ComponentUtil.getCallbackForEvent(eventName);

    if (typeof this.gridOptions[callbackMethodName] === 'function') {
      this.gridOptions[callbackMethodName](event);
    }
  }; // we don't allow dynamic row height for virtual paging


  GridOptionsWrapper.prototype.getRowHeightAsNumber = function () {
    if (!this.gridOptions.rowHeight || utils_1._.missing(this.gridOptions.rowHeight)) {
      return this.getDefaultRowHeight();
    } else if (this.gridOptions.rowHeight && this.isNumeric(this.gridOptions.rowHeight)) {
      return this.gridOptions.rowHeight;
    }

    console.warn('ag-Grid row height must be a number if not using standard row model');
    return this.getDefaultRowHeight();
  };

  GridOptionsWrapper.prototype.getRowHeightForNode = function (rowNode, allowEstimate) {
    // check the function first, in case use set both function and
    // number, when using virtual pagination then function can be
    // used for pinned rows and the number for the body rows.
    if (allowEstimate === void 0) {
      allowEstimate = false;
    }

    if (typeof this.gridOptions.getRowHeight === 'function') {
      if (allowEstimate) {
        return {
          height: this.getDefaultRowHeight(),
          estimated: true
        };
      }

      var params = {
        node: rowNode,
        data: rowNode.data,
        api: this.gridOptions.api,
        context: this.gridOptions.context
      };
      return {
        height: this.gridOptions.getRowHeight(params),
        estimated: false
      };
    } else if (rowNode.detail && this.isMasterDetail()) {
      if (this.isNumeric(this.gridOptions.detailRowHeight)) {
        return {
          height: this.gridOptions.detailRowHeight,
          estimated: false
        };
      } else {
        return {
          height: DEFAULT_DETAIL_ROW_HEIGHT,
          estimated: false
        };
      }
    }

    var minRowHeight = this.getDefaultRowHeight();
    var rowHeight = this.gridOptions.rowHeight && this.isNumeric(this.gridOptions.rowHeight) ? this.gridOptions.rowHeight : minRowHeight;

    if (this.columnController.isAutoRowHeightActive()) {
      if (allowEstimate) {
        return {
          height: rowHeight,
          estimated: true
        };
      }

      var autoHeight = this.autoHeightCalculator.getPreferredHeightForRow(rowNode); // never return less than the default row height - covers when auto height
      // cells are blank.

      return {
        height: Math.max(autoHeight, minRowHeight),
        estimated: false
      };
    }

    return {
      height: rowHeight,
      estimated: false
    };
  };

  GridOptionsWrapper.prototype.isDynamicRowHeight = function () {
    return typeof this.gridOptions.getRowHeight === 'function';
  };

  GridOptionsWrapper.prototype.getVirtualItemHeight = function () {
    return this.specialForNewMaterial(20, 'virtualItemHeight');
  };

  GridOptionsWrapper.prototype.isNumeric = function (value) {
    return !isNaN(value) && typeof value === 'number';
  }; // Material data table has strict guidelines about whitespace, and these values are different than the ones
  // ag-grid uses by default. We override the default ones for the sake of making it better out of the box


  GridOptionsWrapper.prototype.specialForNewMaterial = function (defaultValue, sassVariableName) {
    var theme = this.environment.getTheme();

    if (theme && theme.indexOf('ag-theme') === 0) {
      return this.environment.getSassVariable(theme, sassVariableName);
    }

    return defaultValue;
  };

  GridOptionsWrapper.prototype.getDefaultRowHeight = function () {
    return this.specialForNewMaterial(DEFAULT_ROW_HEIGHT, 'rowHeight');
  };

  var GridOptionsWrapper_1;
  GridOptionsWrapper.MIN_COL_WIDTH = 10;
  GridOptionsWrapper.PROP_HEADER_HEIGHT = 'headerHeight';
  GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN = 'groupRemoveSingleChildren';
  GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN = 'groupRemoveLowestSingleChildren';
  GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT = 'pivotHeaderHeight';
  GridOptionsWrapper.PROP_SUPPRESS_CLIPBOARD_PASTE = 'suppressClipboardPaste';
  GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT = 'groupHeaderHeight';
  GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT = 'pivotGroupHeaderHeight';
  GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT = 'floatingFiltersHeight';
  GridOptionsWrapper.PROP_SUPPRESS_ROW_DRAG = 'suppressRowDrag';
  GridOptionsWrapper.PROP_POPUP_PARENT = 'popupParent';
  GridOptionsWrapper.PROP_DOM_LAYOUT = 'domLayout';

  __decorate([context_1.Autowired('gridOptions'), __metadata("design:type", Object)], GridOptionsWrapper.prototype, "gridOptions", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], GridOptionsWrapper.prototype, "columnController", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], GridOptionsWrapper.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('enterprise'), __metadata("design:type", Boolean)], GridOptionsWrapper.prototype, "enterprise", void 0);

  __decorate([context_1.Autowired('frameworkFactory'), __metadata("design:type", Object)], GridOptionsWrapper.prototype, "frameworkFactory", void 0);

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], GridOptionsWrapper.prototype, "gridApi", void 0);

  __decorate([context_1.Autowired('columnApi'), __metadata("design:type", columnApi_1.ColumnApi)], GridOptionsWrapper.prototype, "columnApi", void 0);

  __decorate([context_1.Autowired('environment'), __metadata("design:type", environment_1.Environment)], GridOptionsWrapper.prototype, "environment", void 0);

  __decorate([context_1.Autowired('autoHeightCalculator'), __metadata("design:type", autoHeightCalculator_1.AutoHeightCalculator)], GridOptionsWrapper.prototype, "autoHeightCalculator", void 0);

  __decorate([__param(0, context_1.Qualifier('gridApi')), __param(1, context_1.Qualifier('columnApi')), __metadata("design:type", Function), __metadata("design:paramtypes", [gridApi_1.GridApi, columnApi_1.ColumnApi]), __metadata("design:returntype", void 0)], GridOptionsWrapper.prototype, "agWire", null);

  __decorate([context_1.PreDestroy, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], GridOptionsWrapper.prototype, "destroy", null);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], GridOptionsWrapper.prototype, "init", null);

  GridOptionsWrapper = GridOptionsWrapper_1 = __decorate([context_1.Bean('gridOptionsWrapper')], GridOptionsWrapper);
  return GridOptionsWrapper;
}();

exports.GridOptionsWrapper = GridOptionsWrapper;

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return invariant; });
/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */
function invariant(condition, format) {
  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  if (false) {}

  if (!condition) {
    var error;

    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame

    throw error;
  }
}



/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _classCallCheck; });
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _createClass; });
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _getPrototypeOf; });
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
var assertThisInitialized = __webpack_require__(36);

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _possibleConstructorReturn; });


function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return Object(assertThisInitialized["a" /* default */])(self);
}

/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}
// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _inherits; });

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var __param = this && this.__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var logger_1 = __webpack_require__(30);

var context_1 = __webpack_require__(2);

var context_2 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var utils_1 = __webpack_require__(6);

var EventService =
/** @class */
function () {
  function EventService() {
    this.allSyncListeners = {};
    this.allAsyncListeners = {};
    this.globalSyncListeners = [];
    this.globalAsyncListeners = [];
    this.asyncFunctionsQueue = [];
    this.scheduled = false;
    this.firedEvents = {};
  }

  EventService_1 = EventService; // because this class is used both inside the context and outside the context, we do not
  // use autowired attributes, as that would be confusing, as sometimes the attributes
  // would be wired, and sometimes not.
  //
  // the global event servers used by ag-Grid is autowired by the context once, and this
  // setBeans method gets called once.
  //
  // the times when this class is used outside of the context (eg RowNode has an instance of this
  // class) then it is not a bean, and this setBeans method is not called.

  EventService.prototype.setBeans = function (loggerFactory, gridOptionsWrapper, globalEventListener) {
    if (globalEventListener === void 0) {
      globalEventListener = null;
    }

    this.logger = loggerFactory.create('EventService');

    if (globalEventListener) {
      var async = gridOptionsWrapper.useAsyncEvents();
      this.addGlobalListener(globalEventListener, async);
    }
  };

  EventService.prototype.getListenerList = function (eventType, async) {
    var listenerMap = async ? this.allAsyncListeners : this.allSyncListeners;
    var listenerList = listenerMap[eventType];

    if (!listenerList) {
      listenerList = [];
      listenerMap[eventType] = listenerList;
    }

    return listenerList;
  };

  EventService.prototype.addEventListener = function (eventType, listener, async) {
    if (async === void 0) {
      async = false;
    }

    var listenerList = this.getListenerList(eventType, async);

    if (listenerList.indexOf(listener) < 0) {
      listenerList.push(listener);
    }
  }; // for some events, it's important that the model gets to hear about them before the view,
  // as the model may need to update before the view works on the info. if you register
  // via this method, you get notified before the view parts


  EventService.prototype.addModalPriorityEventListener = function (eventType, listener, async) {
    if (async === void 0) {
      async = false;
    }

    this.addEventListener(eventType + EventService_1.PRIORITY, listener, async);
  };

  EventService.prototype.addGlobalListener = function (listener, async) {
    if (async === void 0) {
      async = false;
    }

    if (async) {
      this.globalAsyncListeners.push(listener);
    } else {
      this.globalSyncListeners.push(listener);
    }
  };

  EventService.prototype.removeEventListener = function (eventType, listener, async) {
    if (async === void 0) {
      async = false;
    }

    var listenerList = this.getListenerList(eventType, async);

    utils_1._.removeFromArray(listenerList, listener);
  };

  EventService.prototype.removeGlobalListener = function (listener, async) {
    if (async === void 0) {
      async = false;
    }

    if (async) {
      utils_1._.removeFromArray(this.globalAsyncListeners, listener);
    } else {
      utils_1._.removeFromArray(this.globalSyncListeners, listener);
    }
  }; // why do we pass the type here? the type is in ColumnChangeEvent, so unless the
  // type is not in other types of events???


  EventService.prototype.dispatchEvent = function (event) {
    // console.log(`dispatching ${eventType}: ${event}`);
    this.dispatchToListeners(event, true);
    this.dispatchToListeners(event, false);
    this.firedEvents[event.type] = true;
  };

  EventService.prototype.dispatchEventOnce = function (event) {
    if (!this.firedEvents[event.type]) {
      this.dispatchEvent(event);
    }
  };

  EventService.prototype.dispatchToListeners = function (event, async) {
    var _this = this;

    var globalListeners = async ? this.globalAsyncListeners : this.globalSyncListeners;
    var eventType = event.type; // this allows the columnController to get events before anyone else

    var p1ListenerList = this.getListenerList(eventType + EventService_1.PRIORITY, async);

    utils_1._.forEachSnapshotFirst(p1ListenerList, function (listener) {
      if (async) {
        _this.dispatchAsync(function () {
          return listener(event);
        });
      } else {
        listener(event);
      }
    });

    var listenerList = this.getListenerList(eventType, async);

    utils_1._.forEachSnapshotFirst(listenerList, function (listener) {
      if (async) {
        _this.dispatchAsync(function () {
          return listener(event);
        });
      } else {
        listener(event);
      }
    });

    utils_1._.forEachSnapshotFirst(globalListeners, function (listener) {
      if (async) {
        _this.dispatchAsync(function () {
          return listener(eventType, event);
        });
      } else {
        listener(eventType, event);
      }
    });
  }; // this gets called inside the grid's thread, for each event that it
  // wants to set async. the grid then batches the events into one setTimeout()
  // because setTimeout() is an expensive operation. ideally we would have
  // each event in it's own setTimeout(), but we batch for performance.


  EventService.prototype.dispatchAsync = function (func) {
    // add to the queue for executing later in the next VM turn
    this.asyncFunctionsQueue.push(func); // check if timeout is already scheduled. the first time the grid calls
    // this within it's thread turn, this should be false, so it will schedule
    // the 'flush queue' method the first time it comes here. then the flag is
    // set to 'true' so it will know it's already scheduled for subsequent calls.

    if (!this.scheduled) {
      // if not scheduled, schedule one
      window.setTimeout(this.flushAsyncQueue.bind(this), 0); // mark that it is scheduled

      this.scheduled = true;
    }
  }; // this happens in the next VM turn only, and empties the queue of events


  EventService.prototype.flushAsyncQueue = function () {
    this.scheduled = false; // we take a copy, because the event listener could be using
    // the grid, which would cause more events, which would be potentially
    // added to the queue, so safe to take a copy, the new events will
    // get executed in a later VM turn rather than risk updating the
    // queue as we are flushing it.

    var queueCopy = this.asyncFunctionsQueue.slice();
    this.asyncFunctionsQueue = []; // execute the queue

    queueCopy.forEach(function (func) {
      return func();
    });
  };

  var EventService_1; // this is an old idea niall had, should really take it out, was to do with ordering who gets to process
  // events first, to give model and service objects preference over the view

  EventService.PRIORITY = '-P1';

  __decorate([__param(0, context_2.Qualifier('loggerFactory')), __param(1, context_2.Qualifier('gridOptionsWrapper')), __param(2, context_2.Qualifier('globalEventListener')), __metadata("design:type", Function), __metadata("design:paramtypes", [logger_1.LoggerFactory, gridOptionsWrapper_1.GridOptionsWrapper, Function]), __metadata("design:returntype", void 0)], EventService.prototype, "setBeans", null);

  EventService = EventService_1 = __decorate([context_1.Bean('eventService')], EventService);
  return EventService;
}();

exports.EventService = EventService;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(27);

exports.__esModule = true;
exports.addMethod = addMethod;
exports.lazy = exports.ref = exports.boolean = void 0;

var _mixed = _interopRequireDefault(__webpack_require__(61));

exports.mixed = _mixed.default;

var _boolean = _interopRequireDefault(__webpack_require__(425));

exports.bool = _boolean.default;

var _string = _interopRequireDefault(__webpack_require__(426));

exports.string = _string.default;

var _number = _interopRequireDefault(__webpack_require__(427));

exports.number = _number.default;

var _date = _interopRequireDefault(__webpack_require__(428));

exports.date = _date.default;

var _object = _interopRequireDefault(__webpack_require__(430));

exports.object = _object.default;

var _array = _interopRequireDefault(__webpack_require__(450));

exports.array = _array.default;

var _Reference = _interopRequireDefault(__webpack_require__(98));

var _Lazy = _interopRequireDefault(__webpack_require__(451));

var _ValidationError = _interopRequireDefault(__webpack_require__(183));

exports.ValidationError = _ValidationError.default;

var _reach = _interopRequireDefault(__webpack_require__(263));

exports.reach = _reach.default;

var _isSchema = _interopRequireDefault(__webpack_require__(64));

exports.isSchema = _isSchema.default;

var _setLocale = _interopRequireDefault(__webpack_require__(452));

exports.setLocale = _setLocale.default;
var boolean = _boolean.default;
exports.boolean = boolean;

var ref = function ref(key, options) {
  return new _Reference.default(key, options);
};

exports.ref = ref;

var lazy = function lazy(fn) {
  return new _Lazy.default(fn);
};

exports.lazy = lazy;

function addMethod(schemaType, name, fn) {
  if (!schemaType || !(0, _isSchema.default)(schemaType.prototype)) throw new TypeError('You must provide a yup schema constructor function');
  if (typeof name !== 'string') throw new TypeError('A Method name must be provided');
  if (typeof fn !== 'function') throw new TypeError('Method function must be provided');
  schemaType.prototype[name] = fn;
}

/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./node_modules/tslib/tslib.es6.js
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */
var _extendStatics = function extendStatics(d, b) {
  _extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) {
      if (b.hasOwnProperty(p)) d[p] = b[p];
    }
  };

  return _extendStatics(d, b);
};

function __extends(d, b) {
  _extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var _assign = function __assign() {
  _assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return _assign.apply(this, arguments);
};


function __rest(s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function sent() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}
function __exportStar(m, exports) {
  for (var p in m) {
    if (!exports.hasOwnProperty(p)) exports[p] = m[p];
  }
}
function __values(o) {
  var m = typeof Symbol === "function" && o[Symbol.iterator],
      i = 0;
  if (m) return m.call(o);
  return {
    next: function next() {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) {
    ar = ar.concat(__read(arguments[i]));
  }

  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
    s += arguments[i].length;
  }

  for (var r = Array(s), k = 0, i = 0; i < il; i++) {
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
      r[k] = a[j];
    }
  }

  return r;
}
;
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
      i,
      q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;

  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }

  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }

  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }

  function fulfill(value) {
    resume("next", value);
  }

  function reject(value) {
    resume("throw", value);
  }

  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;

  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
      i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);

  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }

  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }

  return cooked;
}
;
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result.default = mod;
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    default: mod
  };
}
// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(0);

// EXTERNAL MODULE: ./node_modules/react-fast-compare/index.js
var react_fast_compare = __webpack_require__(133);
var react_fast_compare_default = /*#__PURE__*/__webpack_require__.n(react_fast_compare);

// CONCATENATED MODULE: ./node_modules/deepmerge/dist/es.js
var isMergeableObject = function isMergeableObject(value) {
  return isNonNullObject(value) && !isSpecial(value);
};

function isNonNullObject(value) {
  return !!value && typeof value === 'object';
}

function isSpecial(value) {
  var stringValue = Object.prototype.toString.call(value);
  return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement(value);
} // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25


var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

function isReactElement(value) {
  return value.$$typeof === REACT_ELEMENT_TYPE;
}

function emptyTarget(val) {
  return Array.isArray(val) ? [] : {};
}

function cloneUnlessOtherwiseSpecified(value, options) {
  return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
}

function defaultArrayMerge(target, source, options) {
  return target.concat(source).map(function (element) {
    return cloneUnlessOtherwiseSpecified(element, options);
  });
}

function mergeObject(target, source, options) {
  var destination = {};

  if (options.isMergeableObject(target)) {
    Object.keys(target).forEach(function (key) {
      destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    });
  }

  Object.keys(source).forEach(function (key) {
    if (!options.isMergeableObject(source[key]) || !target[key]) {
      destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
    } else {
      destination[key] = deepmerge(target[key], source[key], options);
    }
  });
  return destination;
}

function deepmerge(target, source, options) {
  options = options || {};
  options.arrayMerge = options.arrayMerge || defaultArrayMerge;
  options.isMergeableObject = options.isMergeableObject || isMergeableObject;
  var sourceIsArray = Array.isArray(source);
  var targetIsArray = Array.isArray(target);
  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

  if (!sourceAndTargetTypesMatch) {
    return cloneUnlessOtherwiseSpecified(source, options);
  } else if (sourceIsArray) {
    return options.arrayMerge(target, source, options);
  } else {
    return mergeObject(target, source, options);
  }
}

deepmerge.all = function deepmergeAll(array, options) {
  if (!Array.isArray(array)) {
    throw new Error('first argument should be an array');
  }

  return array.reduce(function (prev, next) {
    return deepmerge(prev, next, options);
  }, {});
};

var deepmerge_1 = deepmerge;
/* harmony default export */ var es = (deepmerge_1);
// EXTERNAL MODULE: ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
var hoist_non_react_statics_cjs = __webpack_require__(184);
var hoist_non_react_statics_cjs_default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics_cjs);

// EXTERNAL MODULE: ./node_modules/create-react-context/lib/index.js
var lib = __webpack_require__(268);
var lib_default = /*#__PURE__*/__webpack_require__.n(lib);

// CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheClear.js
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

/* harmony default export */ var _listCacheClear = (listCacheClear);
// CONCATENATED MODULE: ./node_modules/lodash-es/eq.js
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || value !== value && other !== other;
}

/* harmony default export */ var lodash_es_eq = (eq);
// CONCATENATED MODULE: ./node_modules/lodash-es/_assocIndexOf.js

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */

function assocIndexOf(array, key) {
  var length = array.length;

  while (length--) {
    if (lodash_es_eq(array[length][0], key)) {
      return length;
    }
  }

  return -1;
}

/* harmony default export */ var _assocIndexOf = (assocIndexOf);
// CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheDelete.js

/** Used for built-in method references. */

var arrayProto = Array.prototype;
/** Built-in value references. */

var splice = arrayProto.splice;
/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

function listCacheDelete(key) {
  var data = this.__data__,
      index = _assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }

  var lastIndex = data.length - 1;

  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }

  --this.size;
  return true;
}

/* harmony default export */ var _listCacheDelete = (listCacheDelete);
// CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheGet.js

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

function listCacheGet(key) {
  var data = this.__data__,
      index = _assocIndexOf(data, key);
  return index < 0 ? undefined : data[index][1];
}

/* harmony default export */ var _listCacheGet = (listCacheGet);
// CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheHas.js

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

function listCacheHas(key) {
  return _assocIndexOf(this.__data__, key) > -1;
}

/* harmony default export */ var _listCacheHas = (listCacheHas);
// CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheSet.js

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */

function listCacheSet(key, value) {
  var data = this.__data__,
      index = _assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }

  return this;
}

/* harmony default export */ var _listCacheSet = (listCacheSet);
// CONCATENATED MODULE: ./node_modules/lodash-es/_ListCache.js





/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
} // Add methods to `ListCache`.


ListCache.prototype.clear = _listCacheClear;
ListCache.prototype['delete'] = _listCacheDelete;
ListCache.prototype.get = _listCacheGet;
ListCache.prototype.has = _listCacheHas;
ListCache.prototype.set = _listCacheSet;
/* harmony default export */ var _ListCache = (ListCache);
// CONCATENATED MODULE: ./node_modules/lodash-es/_stackClear.js

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */

function stackClear() {
  this.__data__ = new _ListCache();
  this.size = 0;
}

/* harmony default export */ var _stackClear = (stackClear);
// CONCATENATED MODULE: ./node_modules/lodash-es/_stackDelete.js
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);
  this.size = data.size;
  return result;
}

/* harmony default export */ var _stackDelete = (stackDelete);
// CONCATENATED MODULE: ./node_modules/lodash-es/_stackGet.js
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/* harmony default export */ var _stackGet = (stackGet);
// CONCATENATED MODULE: ./node_modules/lodash-es/_stackHas.js
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/* harmony default export */ var _stackHas = (stackHas);
// EXTERNAL MODULE: ./node_modules/lodash-es/_root.js
var _root = __webpack_require__(26);

// CONCATENATED MODULE: ./node_modules/lodash-es/_Symbol.js

/** Built-in value references. */

var _Symbol_Symbol = _root["a" /* default */].Symbol;
/* harmony default export */ var _Symbol = (_Symbol_Symbol);
// CONCATENATED MODULE: ./node_modules/lodash-es/_getRawTag.js

/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var _getRawTag_hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var nativeObjectToString = objectProto.toString;
/** Built-in value references. */

var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */

function getRawTag(value) {
  var isOwn = _getRawTag_hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);

  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }

  return result;
}

/* harmony default export */ var _getRawTag = (getRawTag);
// CONCATENATED MODULE: ./node_modules/lodash-es/_objectToString.js
/** Used for built-in method references. */
var _objectToString_objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var _objectToString_nativeObjectToString = _objectToString_objectProto.toString;
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */

function objectToString(value) {
  return _objectToString_nativeObjectToString.call(value);
}

/* harmony default export */ var _objectToString = (objectToString);
// CONCATENATED MODULE: ./node_modules/lodash-es/_baseGetTag.js



/** `Object#toString` result references. */

var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';
/** Built-in value references. */

var _baseGetTag_symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }

  return _baseGetTag_symToStringTag && _baseGetTag_symToStringTag in Object(value) ? _getRawTag(value) : _objectToString(value);
}

/* harmony default export */ var _baseGetTag = (baseGetTag);
// CONCATENATED MODULE: ./node_modules/lodash-es/isObject.js
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

/* harmony default export */ var lodash_es_isObject = (isObject);
// CONCATENATED MODULE: ./node_modules/lodash-es/isFunction.js


/** `Object#toString` result references. */

var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */

function isFunction(value) {
  if (!lodash_es_isObject(value)) {
    return false;
  } // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.


  var tag = _baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

/* harmony default export */ var lodash_es_isFunction = (isFunction);
// CONCATENATED MODULE: ./node_modules/lodash-es/_coreJsData.js

/** Used to detect overreaching core-js shims. */

var coreJsData = _root["a" /* default */]['__core-js_shared__'];
/* harmony default export */ var _coreJsData = (coreJsData);
// CONCATENATED MODULE: ./node_modules/lodash-es/_isMasked.js

/** Used to detect methods masquerading as native. */

var maskSrcKey = function () {
  var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
  return uid ? 'Symbol(src)_1.' + uid : '';
}();
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */


function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}

/* harmony default export */ var _isMasked = (isMasked);
// CONCATENATED MODULE: ./node_modules/lodash-es/_toSource.js
/** Used for built-in method references. */
var funcProto = Function.prototype;
/** Used to resolve the decompiled source of functions. */

var funcToString = funcProto.toString;
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */

function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}

    try {
      return func + '';
    } catch (e) {}
  }

  return '';
}

/* harmony default export */ var _toSource = (toSource);
// CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsNative.js




/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */

var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to detect host constructors (Safari). */

var reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used for built-in method references. */

var _baseIsNative_funcProto = Function.prototype,
    _baseIsNative_objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */

var _baseIsNative_funcToString = _baseIsNative_funcProto.toString;
/** Used to check objects for own properties. */

var _baseIsNative_hasOwnProperty = _baseIsNative_objectProto.hasOwnProperty;
/** Used to detect if a method is native. */

var reIsNative = RegExp('^' + _baseIsNative_funcToString.call(_baseIsNative_hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */

function baseIsNative(value) {
  if (!lodash_es_isObject(value) || _isMasked(value)) {
    return false;
  }

  var pattern = lodash_es_isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(_toSource(value));
}

/* harmony default export */ var _baseIsNative = (baseIsNative);
// CONCATENATED MODULE: ./node_modules/lodash-es/_getValue.js
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/* harmony default export */ var _getValue = (getValue);
// CONCATENATED MODULE: ./node_modules/lodash-es/_getNative.js


/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */

function getNative(object, key) {
  var value = _getValue(object, key);
  return _baseIsNative(value) ? value : undefined;
}

/* harmony default export */ var _getNative = (getNative);
// CONCATENATED MODULE: ./node_modules/lodash-es/_Map.js


/* Built-in method references that are verified to be native. */

var Map = _getNative(_root["a" /* default */], 'Map');
/* harmony default export */ var _Map = (Map);
// CONCATENATED MODULE: ./node_modules/lodash-es/_nativeCreate.js

/* Built-in method references that are verified to be native. */

var nativeCreate = _getNative(Object, 'create');
/* harmony default export */ var _nativeCreate = (nativeCreate);
// CONCATENATED MODULE: ./node_modules/lodash-es/_hashClear.js

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */

function hashClear() {
  this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
  this.size = 0;
}

/* harmony default export */ var _hashClear = (hashClear);
// CONCATENATED MODULE: ./node_modules/lodash-es/_hashDelete.js
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

/* harmony default export */ var _hashDelete = (hashDelete);
// CONCATENATED MODULE: ./node_modules/lodash-es/_hashGet.js

/** Used to stand-in for `undefined` hash values. */

var HASH_UNDEFINED = '__lodash_hash_undefined__';
/** Used for built-in method references. */

var _hashGet_objectProto = Object.prototype;
/** Used to check objects for own properties. */

var _hashGet_hasOwnProperty = _hashGet_objectProto.hasOwnProperty;
/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

function hashGet(key) {
  var data = this.__data__;

  if (_nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }

  return _hashGet_hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/* harmony default export */ var _hashGet = (hashGet);
// CONCATENATED MODULE: ./node_modules/lodash-es/_hashHas.js

/** Used for built-in method references. */

var _hashHas_objectProto = Object.prototype;
/** Used to check objects for own properties. */

var _hashHas_hasOwnProperty = _hashHas_objectProto.hasOwnProperty;
/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

function hashHas(key) {
  var data = this.__data__;
  return _nativeCreate ? data[key] !== undefined : _hashHas_hasOwnProperty.call(data, key);
}

/* harmony default export */ var _hashHas = (hashHas);
// CONCATENATED MODULE: ./node_modules/lodash-es/_hashSet.js

/** Used to stand-in for `undefined` hash values. */

var _hashSet_HASH_UNDEFINED = '__lodash_hash_undefined__';
/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */

function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = _nativeCreate && value === undefined ? _hashSet_HASH_UNDEFINED : value;
  return this;
}

/* harmony default export */ var _hashSet = (hashSet);
// CONCATENATED MODULE: ./node_modules/lodash-es/_Hash.js





/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
} // Add methods to `Hash`.


Hash.prototype.clear = _hashClear;
Hash.prototype['delete'] = _hashDelete;
Hash.prototype.get = _hashGet;
Hash.prototype.has = _hashHas;
Hash.prototype.set = _hashSet;
/* harmony default export */ var _Hash = (Hash);
// CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheClear.js



/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */

function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new _Hash(),
    'map': new (_Map || _ListCache)(),
    'string': new _Hash()
  };
}

/* harmony default export */ var _mapCacheClear = (mapCacheClear);
// CONCATENATED MODULE: ./node_modules/lodash-es/_isKeyable.js
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}

/* harmony default export */ var _isKeyable = (isKeyable);
// CONCATENATED MODULE: ./node_modules/lodash-es/_getMapData.js

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */

function getMapData(map, key) {
  var data = map.__data__;
  return _isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}

/* harmony default export */ var _getMapData = (getMapData);
// CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheDelete.js

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

function mapCacheDelete(key) {
  var result = _getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

/* harmony default export */ var _mapCacheDelete = (mapCacheDelete);
// CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheGet.js

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

function mapCacheGet(key) {
  return _getMapData(this, key).get(key);
}

/* harmony default export */ var _mapCacheGet = (mapCacheGet);
// CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheHas.js

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

function mapCacheHas(key) {
  return _getMapData(this, key).has(key);
}

/* harmony default export */ var _mapCacheHas = (mapCacheHas);
// CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheSet.js

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */

function mapCacheSet(key, value) {
  var data = _getMapData(this, key),
      size = data.size;
  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

/* harmony default export */ var _mapCacheSet = (mapCacheSet);
// CONCATENATED MODULE: ./node_modules/lodash-es/_MapCache.js





/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
} // Add methods to `MapCache`.


MapCache.prototype.clear = _mapCacheClear;
MapCache.prototype['delete'] = _mapCacheDelete;
MapCache.prototype.get = _mapCacheGet;
MapCache.prototype.has = _mapCacheHas;
MapCache.prototype.set = _mapCacheSet;
/* harmony default export */ var _MapCache = (MapCache);
// CONCATENATED MODULE: ./node_modules/lodash-es/_stackSet.js



/** Used as the size to enable large array optimizations. */

var LARGE_ARRAY_SIZE = 200;
/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */

function stackSet(key, value) {
  var data = this.__data__;

  if (data instanceof _ListCache) {
    var pairs = data.__data__;

    if (!_Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }

    data = this.__data__ = new _MapCache(pairs);
  }

  data.set(key, value);
  this.size = data.size;
  return this;
}

/* harmony default export */ var _stackSet = (stackSet);
// CONCATENATED MODULE: ./node_modules/lodash-es/_Stack.js






/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

function Stack(entries) {
  var data = this.__data__ = new _ListCache(entries);
  this.size = data.size;
} // Add methods to `Stack`.


Stack.prototype.clear = _stackClear;
Stack.prototype['delete'] = _stackDelete;
Stack.prototype.get = _stackGet;
Stack.prototype.has = _stackHas;
Stack.prototype.set = _stackSet;
/* harmony default export */ var _Stack = (Stack);
// CONCATENATED MODULE: ./node_modules/lodash-es/_arrayEach.js
/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }

  return array;
}

/* harmony default export */ var _arrayEach = (arrayEach);
// CONCATENATED MODULE: ./node_modules/lodash-es/_defineProperty.js


var defineProperty = function () {
  try {
    var func = _getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}();

/* harmony default export */ var _defineProperty = (defineProperty);
// CONCATENATED MODULE: ./node_modules/lodash-es/_baseAssignValue.js

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */

function baseAssignValue(object, key, value) {
  if (key == '__proto__' && _defineProperty) {
    _defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

/* harmony default export */ var _baseAssignValue = (baseAssignValue);
// CONCATENATED MODULE: ./node_modules/lodash-es/_assignValue.js


/** Used for built-in method references. */

var _assignValue_objectProto = Object.prototype;
/** Used to check objects for own properties. */

var _assignValue_hasOwnProperty = _assignValue_objectProto.hasOwnProperty;
/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */

function assignValue(object, key, value) {
  var objValue = object[key];

  if (!(_assignValue_hasOwnProperty.call(object, key) && lodash_es_eq(objValue, value)) || value === undefined && !(key in object)) {
    _baseAssignValue(object, key, value);
  }
}

/* harmony default export */ var _assignValue = (assignValue);
// CONCATENATED MODULE: ./node_modules/lodash-es/_copyObject.js


/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */

function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});
  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];
    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }

    if (isNew) {
      _baseAssignValue(object, key, newValue);
    } else {
      _assignValue(object, key, newValue);
    }
  }

  return object;
}

/* harmony default export */ var _copyObject = (copyObject);
// CONCATENATED MODULE: ./node_modules/lodash-es/_baseTimes.js
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }

  return result;
}

/* harmony default export */ var _baseTimes = (baseTimes);
// CONCATENATED MODULE: ./node_modules/lodash-es/isObjectLike.js
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/* harmony default export */ var lodash_es_isObjectLike = (isObjectLike);
// CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsArguments.js


/** `Object#toString` result references. */

var argsTag = '[object Arguments]';
/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */

function baseIsArguments(value) {
  return lodash_es_isObjectLike(value) && _baseGetTag(value) == argsTag;
}

/* harmony default export */ var _baseIsArguments = (baseIsArguments);
// CONCATENATED MODULE: ./node_modules/lodash-es/isArguments.js


/** Used for built-in method references. */

var isArguments_objectProto = Object.prototype;
/** Used to check objects for own properties. */

var isArguments_hasOwnProperty = isArguments_objectProto.hasOwnProperty;
/** Built-in value references. */

var propertyIsEnumerable = isArguments_objectProto.propertyIsEnumerable;
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */

var isArguments = _baseIsArguments(function () {
  return arguments;
}()) ? _baseIsArguments : function (value) {
  return lodash_es_isObjectLike(value) && isArguments_hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};
/* harmony default export */ var lodash_es_isArguments = (isArguments);
// CONCATENATED MODULE: ./node_modules/lodash-es/isArray.js
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;
/* harmony default export */ var lodash_es_isArray = (isArray);
// EXTERNAL MODULE: ./node_modules/lodash-es/isBuffer.js
var isBuffer = __webpack_require__(128);

// CONCATENATED MODULE: ./node_modules/lodash-es/_isIndex.js
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;
/** Used to detect unsigned integer values. */

var reIsUint = /^(?:0|[1-9]\d*)$/;
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */

function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}

/* harmony default export */ var _isIndex = (isIndex);
// CONCATENATED MODULE: ./node_modules/lodash-es/isLength.js
/** Used as references for various `Number` constants. */
var isLength_MAX_SAFE_INTEGER = 9007199254740991;
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */

function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= isLength_MAX_SAFE_INTEGER;
}

/* harmony default export */ var lodash_es_isLength = (isLength);
// CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsTypedArray.js



/** `Object#toString` result references. */

var _baseIsTypedArray_argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    _baseIsTypedArray_funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';
/** Used to identify `toStringTag` values of typed arrays. */

var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[_baseIsTypedArray_argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[_baseIsTypedArray_funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */

function baseIsTypedArray(value) {
  return lodash_es_isObjectLike(value) && lodash_es_isLength(value.length) && !!typedArrayTags[_baseGetTag(value)];
}

/* harmony default export */ var _baseIsTypedArray = (baseIsTypedArray);
// CONCATENATED MODULE: ./node_modules/lodash-es/_baseUnary.js
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function (value) {
    return func(value);
  };
}

/* harmony default export */ var _baseUnary = (baseUnary);
// EXTERNAL MODULE: ./node_modules/lodash-es/_nodeUtil.js
var _nodeUtil = __webpack_require__(50);

// CONCATENATED MODULE: ./node_modules/lodash-es/isTypedArray.js



/* Node.js helper references. */

var nodeIsTypedArray = _nodeUtil["a" /* default */] && _nodeUtil["a" /* default */].isTypedArray;
/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */

var isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;
/* harmony default export */ var lodash_es_isTypedArray = (isTypedArray);
// CONCATENATED MODULE: ./node_modules/lodash-es/_arrayLikeKeys.js






/** Used for built-in method references. */

var _arrayLikeKeys_objectProto = Object.prototype;
/** Used to check objects for own properties. */

var _arrayLikeKeys_hasOwnProperty = _arrayLikeKeys_objectProto.hasOwnProperty;
/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */

function arrayLikeKeys(value, inherited) {
  var isArr = lodash_es_isArray(value),
      isArg = !isArr && lodash_es_isArguments(value),
      isBuff = !isArr && !isArg && Object(isBuffer["a" /* default */])(value),
      isType = !isArr && !isArg && !isBuff && lodash_es_isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? _baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || _arrayLikeKeys_hasOwnProperty.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.
    key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
    _isIndex(key, length)))) {
      result.push(key);
    }
  }

  return result;
}

/* harmony default export */ var _arrayLikeKeys = (arrayLikeKeys);
// CONCATENATED MODULE: ./node_modules/lodash-es/_isPrototype.js
/** Used for built-in method references. */
var _isPrototype_objectProto = Object.prototype;
/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */

function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = typeof Ctor == 'function' && Ctor.prototype || _isPrototype_objectProto;
  return value === proto;
}

/* harmony default export */ var _isPrototype = (isPrototype);
// CONCATENATED MODULE: ./node_modules/lodash-es/_overArg.js
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function (arg) {
    return func(transform(arg));
  };
}

/* harmony default export */ var _overArg = (overArg);
// CONCATENATED MODULE: ./node_modules/lodash-es/_nativeKeys.js

/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeKeys = _overArg(Object.keys, Object);
/* harmony default export */ var _nativeKeys = (nativeKeys);
// CONCATENATED MODULE: ./node_modules/lodash-es/_baseKeys.js


/** Used for built-in method references. */

var _baseKeys_objectProto = Object.prototype;
/** Used to check objects for own properties. */

var _baseKeys_hasOwnProperty = _baseKeys_objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

function baseKeys(object) {
  if (!_isPrototype(object)) {
    return _nativeKeys(object);
  }

  var result = [];

  for (var key in Object(object)) {
    if (_baseKeys_hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }

  return result;
}

/* harmony default export */ var _baseKeys = (baseKeys);
// CONCATENATED MODULE: ./node_modules/lodash-es/isArrayLike.js


/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */

function isArrayLike(value) {
  return value != null && lodash_es_isLength(value.length) && !lodash_es_isFunction(value);
}

/* harmony default export */ var lodash_es_isArrayLike = (isArrayLike);
// CONCATENATED MODULE: ./node_modules/lodash-es/keys.js



/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */

function keys(object) {
  return lodash_es_isArrayLike(object) ? _arrayLikeKeys(object) : _baseKeys(object);
}

/* harmony default export */ var lodash_es_keys = (keys);
// CONCATENATED MODULE: ./node_modules/lodash-es/_baseAssign.js


/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */

function baseAssign(object, source) {
  return object && _copyObject(source, lodash_es_keys(source), object);
}

/* harmony default export */ var _baseAssign = (baseAssign);
// CONCATENATED MODULE: ./node_modules/lodash-es/_nativeKeysIn.js
/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];

  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }

  return result;
}

/* harmony default export */ var _nativeKeysIn = (nativeKeysIn);
// CONCATENATED MODULE: ./node_modules/lodash-es/_baseKeysIn.js



/** Used for built-in method references. */

var _baseKeysIn_objectProto = Object.prototype;
/** Used to check objects for own properties. */

var _baseKeysIn_hasOwnProperty = _baseKeysIn_objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

function baseKeysIn(object) {
  if (!lodash_es_isObject(object)) {
    return _nativeKeysIn(object);
  }

  var isProto = _isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !_baseKeysIn_hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }

  return result;
}

/* harmony default export */ var _baseKeysIn = (baseKeysIn);
// CONCATENATED MODULE: ./node_modules/lodash-es/keysIn.js



/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */

function keysIn_keysIn(object) {
  return lodash_es_isArrayLike(object) ? _arrayLikeKeys(object, true) : _baseKeysIn(object);
}

/* harmony default export */ var lodash_es_keysIn = (keysIn_keysIn);
// CONCATENATED MODULE: ./node_modules/lodash-es/_baseAssignIn.js


/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */

function baseAssignIn(object, source) {
  return object && _copyObject(source, lodash_es_keysIn(source), object);
}

/* harmony default export */ var _baseAssignIn = (baseAssignIn);
// EXTERNAL MODULE: ./node_modules/lodash-es/_cloneBuffer.js
var _cloneBuffer = __webpack_require__(270);

// CONCATENATED MODULE: ./node_modules/lodash-es/_copyArray.js
/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;
  array || (array = Array(length));

  while (++index < length) {
    array[index] = source[index];
  }

  return array;
}

/* harmony default export */ var _copyArray = (copyArray);
// CONCATENATED MODULE: ./node_modules/lodash-es/_arrayFilter.js
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];

    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }

  return result;
}

/* harmony default export */ var _arrayFilter = (arrayFilter);
// CONCATENATED MODULE: ./node_modules/lodash-es/stubArray.js
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

/* harmony default export */ var lodash_es_stubArray = (stubArray);
// CONCATENATED MODULE: ./node_modules/lodash-es/_getSymbols.js


/** Used for built-in method references. */

var _getSymbols_objectProto = Object.prototype;
/** Built-in value references. */

var _getSymbols_propertyIsEnumerable = _getSymbols_objectProto.propertyIsEnumerable;
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeGetSymbols = Object.getOwnPropertySymbols;
/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */

var getSymbols = !nativeGetSymbols ? lodash_es_stubArray : function (object) {
  if (object == null) {
    return [];
  }

  object = Object(object);
  return _arrayFilter(nativeGetSymbols(object), function (symbol) {
    return _getSymbols_propertyIsEnumerable.call(object, symbol);
  });
};
/* harmony default export */ var _getSymbols = (getSymbols);
// CONCATENATED MODULE: ./node_modules/lodash-es/_copySymbols.js


/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */

function copySymbols(source, object) {
  return _copyObject(source, _getSymbols(source), object);
}

/* harmony default export */ var _copySymbols = (copySymbols);
// CONCATENATED MODULE: ./node_modules/lodash-es/_arrayPush.js
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }

  return array;
}

/* harmony default export */ var _arrayPush = (arrayPush);
// CONCATENATED MODULE: ./node_modules/lodash-es/_getPrototype.js

/** Built-in value references. */

var getPrototype = _overArg(Object.getPrototypeOf, Object);
/* harmony default export */ var _getPrototype = (getPrototype);
// CONCATENATED MODULE: ./node_modules/lodash-es/_getSymbolsIn.js




/* Built-in method references for those with the same name as other `lodash` methods. */

var _getSymbolsIn_nativeGetSymbols = Object.getOwnPropertySymbols;
/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */

var getSymbolsIn = !_getSymbolsIn_nativeGetSymbols ? lodash_es_stubArray : function (object) {
  var result = [];

  while (object) {
    _arrayPush(result, _getSymbols(object));
    object = _getPrototype(object);
  }

  return result;
};
/* harmony default export */ var _getSymbolsIn = (getSymbolsIn);
// CONCATENATED MODULE: ./node_modules/lodash-es/_copySymbolsIn.js


/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */

function copySymbolsIn(source, object) {
  return _copyObject(source, _getSymbolsIn(source), object);
}

/* harmony default export */ var _copySymbolsIn = (copySymbolsIn);
// CONCATENATED MODULE: ./node_modules/lodash-es/_baseGetAllKeys.js


/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */

function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return lodash_es_isArray(object) ? result : _arrayPush(result, symbolsFunc(object));
}

/* harmony default export */ var _baseGetAllKeys = (baseGetAllKeys);
// CONCATENATED MODULE: ./node_modules/lodash-es/_getAllKeys.js



/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */

function getAllKeys(object) {
  return _baseGetAllKeys(object, lodash_es_keys, _getSymbols);
}

/* harmony default export */ var _getAllKeys = (getAllKeys);
// CONCATENATED MODULE: ./node_modules/lodash-es/_getAllKeysIn.js



/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */

function getAllKeysIn(object) {
  return _baseGetAllKeys(object, lodash_es_keysIn, _getSymbolsIn);
}

/* harmony default export */ var _getAllKeysIn = (getAllKeysIn);
// CONCATENATED MODULE: ./node_modules/lodash-es/_DataView.js


/* Built-in method references that are verified to be native. */

var DataView = _getNative(_root["a" /* default */], 'DataView');
/* harmony default export */ var _DataView = (DataView);
// CONCATENATED MODULE: ./node_modules/lodash-es/_Promise.js


/* Built-in method references that are verified to be native. */

var _Promise_Promise = _getNative(_root["a" /* default */], 'Promise');
/* harmony default export */ var _Promise = (_Promise_Promise);
// CONCATENATED MODULE: ./node_modules/lodash-es/_Set.js


/* Built-in method references that are verified to be native. */

var Set = _getNative(_root["a" /* default */], 'Set');
/* harmony default export */ var _Set = (Set);
// CONCATENATED MODULE: ./node_modules/lodash-es/_WeakMap.js


/* Built-in method references that are verified to be native. */

var _WeakMap_WeakMap = _getNative(_root["a" /* default */], 'WeakMap');
/* harmony default export */ var _WeakMap = (_WeakMap_WeakMap);
// CONCATENATED MODULE: ./node_modules/lodash-es/_getTag.js







/** `Object#toString` result references. */

var _getTag_mapTag = '[object Map]',
    _getTag_objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    _getTag_setTag = '[object Set]',
    _getTag_weakMapTag = '[object WeakMap]';
var _getTag_dataViewTag = '[object DataView]';
/** Used to detect maps, sets, and weakmaps. */

var dataViewCtorString = _toSource(_DataView),
    mapCtorString = _toSource(_Map),
    promiseCtorString = _toSource(_Promise),
    setCtorString = _toSource(_Set),
    weakMapCtorString = _toSource(_WeakMap);
/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

var _getTag_getTag = _baseGetTag; // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.

if (_DataView && _getTag_getTag(new _DataView(new ArrayBuffer(1))) != _getTag_dataViewTag || _Map && _getTag_getTag(new _Map()) != _getTag_mapTag || _Promise && _getTag_getTag(_Promise.resolve()) != promiseTag || _Set && _getTag_getTag(new _Set()) != _getTag_setTag || _WeakMap && _getTag_getTag(new _WeakMap()) != _getTag_weakMapTag) {
  _getTag_getTag = function getTag(value) {
    var result = _baseGetTag(value),
        Ctor = result == _getTag_objectTag ? value.constructor : undefined,
        ctorString = Ctor ? _toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString:
          return _getTag_dataViewTag;

        case mapCtorString:
          return _getTag_mapTag;

        case promiseCtorString:
          return promiseTag;

        case setCtorString:
          return _getTag_setTag;

        case weakMapCtorString:
          return _getTag_weakMapTag;
      }
    }

    return result;
  };
}

/* harmony default export */ var _getTag = (_getTag_getTag);
// CONCATENATED MODULE: ./node_modules/lodash-es/_initCloneArray.js
/** Used for built-in method references. */
var _initCloneArray_objectProto = Object.prototype;
/** Used to check objects for own properties. */

var _initCloneArray_hasOwnProperty = _initCloneArray_objectProto.hasOwnProperty;
/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */

function initCloneArray(array) {
  var length = array.length,
      result = new array.constructor(length); // Add properties assigned by `RegExp#exec`.

  if (length && typeof array[0] == 'string' && _initCloneArray_hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }

  return result;
}

/* harmony default export */ var _initCloneArray = (initCloneArray);
// CONCATENATED MODULE: ./node_modules/lodash-es/_Uint8Array.js

/** Built-in value references. */

var Uint8Array = _root["a" /* default */].Uint8Array;
/* harmony default export */ var _Uint8Array = (Uint8Array);
// CONCATENATED MODULE: ./node_modules/lodash-es/_cloneArrayBuffer.js

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */

function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new _Uint8Array(result).set(new _Uint8Array(arrayBuffer));
  return result;
}

/* harmony default export */ var _cloneArrayBuffer = (cloneArrayBuffer);
// CONCATENATED MODULE: ./node_modules/lodash-es/_cloneDataView.js

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */

function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? _cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

/* harmony default export */ var _cloneDataView = (cloneDataView);
// CONCATENATED MODULE: ./node_modules/lodash-es/_cloneRegExp.js
/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;
/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */

function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

/* harmony default export */ var _cloneRegExp = (cloneRegExp);
// CONCATENATED MODULE: ./node_modules/lodash-es/_cloneSymbol.js

/** Used to convert symbols to primitives and strings. */

var symbolProto = _Symbol ? _Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */

function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

/* harmony default export */ var _cloneSymbol = (cloneSymbol);
// CONCATENATED MODULE: ./node_modules/lodash-es/_cloneTypedArray.js

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */

function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? _cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

/* harmony default export */ var _cloneTypedArray = (cloneTypedArray);
// CONCATENATED MODULE: ./node_modules/lodash-es/_initCloneByTag.js





/** `Object#toString` result references. */

var _initCloneByTag_boolTag = '[object Boolean]',
    _initCloneByTag_dateTag = '[object Date]',
    _initCloneByTag_mapTag = '[object Map]',
    _initCloneByTag_numberTag = '[object Number]',
    _initCloneByTag_regexpTag = '[object RegExp]',
    _initCloneByTag_setTag = '[object Set]',
    _initCloneByTag_stringTag = '[object String]',
    symbolTag = '[object Symbol]';
var _initCloneByTag_arrayBufferTag = '[object ArrayBuffer]',
    _initCloneByTag_dataViewTag = '[object DataView]',
    _initCloneByTag_float32Tag = '[object Float32Array]',
    _initCloneByTag_float64Tag = '[object Float64Array]',
    _initCloneByTag_int8Tag = '[object Int8Array]',
    _initCloneByTag_int16Tag = '[object Int16Array]',
    _initCloneByTag_int32Tag = '[object Int32Array]',
    _initCloneByTag_uint8Tag = '[object Uint8Array]',
    _initCloneByTag_uint8ClampedTag = '[object Uint8ClampedArray]',
    _initCloneByTag_uint16Tag = '[object Uint16Array]',
    _initCloneByTag_uint32Tag = '[object Uint32Array]';
/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */

function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;

  switch (tag) {
    case _initCloneByTag_arrayBufferTag:
      return _cloneArrayBuffer(object);

    case _initCloneByTag_boolTag:
    case _initCloneByTag_dateTag:
      return new Ctor(+object);

    case _initCloneByTag_dataViewTag:
      return _cloneDataView(object, isDeep);

    case _initCloneByTag_float32Tag:
    case _initCloneByTag_float64Tag:
    case _initCloneByTag_int8Tag:
    case _initCloneByTag_int16Tag:
    case _initCloneByTag_int32Tag:
    case _initCloneByTag_uint8Tag:
    case _initCloneByTag_uint8ClampedTag:
    case _initCloneByTag_uint16Tag:
    case _initCloneByTag_uint32Tag:
      return _cloneTypedArray(object, isDeep);

    case _initCloneByTag_mapTag:
      return new Ctor();

    case _initCloneByTag_numberTag:
    case _initCloneByTag_stringTag:
      return new Ctor(object);

    case _initCloneByTag_regexpTag:
      return _cloneRegExp(object);

    case _initCloneByTag_setTag:
      return new Ctor();

    case symbolTag:
      return _cloneSymbol(object);
  }
}

/* harmony default export */ var _initCloneByTag = (initCloneByTag);
// CONCATENATED MODULE: ./node_modules/lodash-es/_baseCreate.js

/** Built-in value references. */

var objectCreate = Object.create;
/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */

var baseCreate = function () {
  function object() {}

  return function (proto) {
    if (!lodash_es_isObject(proto)) {
      return {};
    }

    if (objectCreate) {
      return objectCreate(proto);
    }

    object.prototype = proto;
    var result = new object();
    object.prototype = undefined;
    return result;
  };
}();

/* harmony default export */ var _baseCreate = (baseCreate);
// CONCATENATED MODULE: ./node_modules/lodash-es/_initCloneObject.js



/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */

function initCloneObject(object) {
  return typeof object.constructor == 'function' && !_isPrototype(object) ? _baseCreate(_getPrototype(object)) : {};
}

/* harmony default export */ var _initCloneObject = (initCloneObject);
// CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsMap.js


/** `Object#toString` result references. */

var _baseIsMap_mapTag = '[object Map]';
/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */

function baseIsMap(value) {
  return lodash_es_isObjectLike(value) && _getTag(value) == _baseIsMap_mapTag;
}

/* harmony default export */ var _baseIsMap = (baseIsMap);
// CONCATENATED MODULE: ./node_modules/lodash-es/isMap.js



/* Node.js helper references. */

var nodeIsMap = _nodeUtil["a" /* default */] && _nodeUtil["a" /* default */].isMap;
/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */

var isMap = nodeIsMap ? _baseUnary(nodeIsMap) : _baseIsMap;
/* harmony default export */ var lodash_es_isMap = (isMap);
// CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsSet.js


/** `Object#toString` result references. */

var _baseIsSet_setTag = '[object Set]';
/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */

function baseIsSet(value) {
  return lodash_es_isObjectLike(value) && _getTag(value) == _baseIsSet_setTag;
}

/* harmony default export */ var _baseIsSet = (baseIsSet);
// CONCATENATED MODULE: ./node_modules/lodash-es/isSet.js



/* Node.js helper references. */

var nodeIsSet = _nodeUtil["a" /* default */] && _nodeUtil["a" /* default */].isSet;
/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */

var isSet = nodeIsSet ? _baseUnary(nodeIsSet) : _baseIsSet;
/* harmony default export */ var lodash_es_isSet = (isSet);
// CONCATENATED MODULE: ./node_modules/lodash-es/_baseClone.js





















/** Used to compose bitmasks for cloning. */

var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;
/** `Object#toString` result references. */

var _baseClone_argsTag = '[object Arguments]',
    _baseClone_arrayTag = '[object Array]',
    _baseClone_boolTag = '[object Boolean]',
    _baseClone_dateTag = '[object Date]',
    _baseClone_errorTag = '[object Error]',
    _baseClone_funcTag = '[object Function]',
    _baseClone_genTag = '[object GeneratorFunction]',
    _baseClone_mapTag = '[object Map]',
    _baseClone_numberTag = '[object Number]',
    _baseClone_objectTag = '[object Object]',
    _baseClone_regexpTag = '[object RegExp]',
    _baseClone_setTag = '[object Set]',
    _baseClone_stringTag = '[object String]',
    _baseClone_symbolTag = '[object Symbol]',
    _baseClone_weakMapTag = '[object WeakMap]';
var _baseClone_arrayBufferTag = '[object ArrayBuffer]',
    _baseClone_dataViewTag = '[object DataView]',
    _baseClone_float32Tag = '[object Float32Array]',
    _baseClone_float64Tag = '[object Float64Array]',
    _baseClone_int8Tag = '[object Int8Array]',
    _baseClone_int16Tag = '[object Int16Array]',
    _baseClone_int32Tag = '[object Int32Array]',
    _baseClone_uint8Tag = '[object Uint8Array]',
    _baseClone_uint8ClampedTag = '[object Uint8ClampedArray]',
    _baseClone_uint16Tag = '[object Uint16Array]',
    _baseClone_uint32Tag = '[object Uint32Array]';
/** Used to identify `toStringTag` values supported by `_.clone`. */

var cloneableTags = {};
cloneableTags[_baseClone_argsTag] = cloneableTags[_baseClone_arrayTag] = cloneableTags[_baseClone_arrayBufferTag] = cloneableTags[_baseClone_dataViewTag] = cloneableTags[_baseClone_boolTag] = cloneableTags[_baseClone_dateTag] = cloneableTags[_baseClone_float32Tag] = cloneableTags[_baseClone_float64Tag] = cloneableTags[_baseClone_int8Tag] = cloneableTags[_baseClone_int16Tag] = cloneableTags[_baseClone_int32Tag] = cloneableTags[_baseClone_mapTag] = cloneableTags[_baseClone_numberTag] = cloneableTags[_baseClone_objectTag] = cloneableTags[_baseClone_regexpTag] = cloneableTags[_baseClone_setTag] = cloneableTags[_baseClone_stringTag] = cloneableTags[_baseClone_symbolTag] = cloneableTags[_baseClone_uint8Tag] = cloneableTags[_baseClone_uint8ClampedTag] = cloneableTags[_baseClone_uint16Tag] = cloneableTags[_baseClone_uint32Tag] = true;
cloneableTags[_baseClone_errorTag] = cloneableTags[_baseClone_funcTag] = cloneableTags[_baseClone_weakMapTag] = false;
/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */

function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }

  if (result !== undefined) {
    return result;
  }

  if (!lodash_es_isObject(value)) {
    return value;
  }

  var isArr = lodash_es_isArray(value);

  if (isArr) {
    result = _initCloneArray(value);

    if (!isDeep) {
      return _copyArray(value, result);
    }
  } else {
    var tag = _getTag(value),
        isFunc = tag == _baseClone_funcTag || tag == _baseClone_genTag;

    if (Object(isBuffer["a" /* default */])(value)) {
      return Object(_cloneBuffer["a" /* default */])(value, isDeep);
    }

    if (tag == _baseClone_objectTag || tag == _baseClone_argsTag || isFunc && !object) {
      result = isFlat || isFunc ? {} : _initCloneObject(value);

      if (!isDeep) {
        return isFlat ? _copySymbolsIn(value, _baseAssignIn(result, value)) : _copySymbols(value, _baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }

      result = _initCloneByTag(value, tag, isDeep);
    }
  } // Check for circular references and return its corresponding clone.


  stack || (stack = new _Stack());
  var stacked = stack.get(value);

  if (stacked) {
    return stacked;
  }

  stack.set(value, result);

  if (lodash_es_isSet(value)) {
    value.forEach(function (subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (lodash_es_isMap(value)) {
    value.forEach(function (subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
  }

  var keysFunc = isFull ? isFlat ? _getAllKeysIn : _getAllKeys : isFlat ? keysIn : lodash_es_keys;
  var props = isArr ? undefined : keysFunc(value);
  _arrayEach(props || value, function (subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    } // Recursively populate clone (susceptible to call stack limits).


    _assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

/* harmony default export */ var _baseClone = (baseClone);
// CONCATENATED MODULE: ./node_modules/lodash-es/clone.js

/** Used to compose bitmasks for cloning. */

var clone_CLONE_SYMBOLS_FLAG = 4;
/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */

function clone(value) {
  return _baseClone(value, clone_CLONE_SYMBOLS_FLAG);
}

/* harmony default export */ var lodash_es_clone = (clone);
// CONCATENATED MODULE: ./node_modules/lodash-es/_arrayMap.js
/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }

  return result;
}

/* harmony default export */ var _arrayMap = (arrayMap);
// CONCATENATED MODULE: ./node_modules/lodash-es/isSymbol.js


/** `Object#toString` result references. */

var isSymbol_symbolTag = '[object Symbol]';
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */

function isSymbol(value) {
  return typeof value == 'symbol' || lodash_es_isObjectLike(value) && _baseGetTag(value) == isSymbol_symbolTag;
}

/* harmony default export */ var lodash_es_isSymbol = (isSymbol);
// CONCATENATED MODULE: ./node_modules/lodash-es/memoize.js

/** Error message constants. */

var FUNC_ERROR_TEXT = 'Expected a function';
/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */

function memoize(func, resolver) {
  if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }

  var memoized = function memoized() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }

    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };

  memoized.cache = new (memoize.Cache || _MapCache)();
  return memoized;
} // Expose `MapCache`.


memoize.Cache = _MapCache;
/* harmony default export */ var lodash_es_memoize = (memoize);
// CONCATENATED MODULE: ./node_modules/lodash-es/_memoizeCapped.js

/** Used as the maximum memoize cache size. */

var MAX_MEMOIZE_SIZE = 500;
/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */

function memoizeCapped(func) {
  var result = lodash_es_memoize(func, function (key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }

    return key;
  });
  var cache = result.cache;
  return result;
}

/* harmony default export */ var _memoizeCapped = (memoizeCapped);
// CONCATENATED MODULE: ./node_modules/lodash-es/_stringToPath.js

/** Used to match property names within property paths. */

var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
/** Used to match backslashes in property paths. */

var reEscapeChar = /\\(\\)?/g;
/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */

var stringToPath = _memoizeCapped(function (string) {
  var result = [];

  if (string.charCodeAt(0) === 46
  /* . */
  ) {
      result.push('');
    }

  string.replace(rePropName, function (match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
  });
  return result;
});
/* harmony default export */ var _stringToPath = (stringToPath);
// CONCATENATED MODULE: ./node_modules/lodash-es/_toKey.js

/** Used as references for various `Number` constants. */

var INFINITY = 1 / 0;
/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */

function toKey(value) {
  if (typeof value == 'string' || lodash_es_isSymbol(value)) {
    return value;
  }

  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}

/* harmony default export */ var _toKey = (toKey);
// CONCATENATED MODULE: ./node_modules/lodash-es/_baseToString.js




/** Used as references for various `Number` constants. */

var _baseToString_INFINITY = 1 / 0;
/** Used to convert symbols to primitives and strings. */

var _baseToString_symbolProto = _Symbol ? _Symbol.prototype : undefined,
    symbolToString = _baseToString_symbolProto ? _baseToString_symbolProto.toString : undefined;
/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */

function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }

  if (lodash_es_isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return _arrayMap(value, baseToString) + '';
  }

  if (lodash_es_isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }

  var result = value + '';
  return result == '0' && 1 / value == -_baseToString_INFINITY ? '-0' : result;
}

/* harmony default export */ var _baseToString = (baseToString);
// CONCATENATED MODULE: ./node_modules/lodash-es/toString.js

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */

function toString_toString(value) {
  return value == null ? '' : _baseToString(value);
}

/* harmony default export */ var lodash_es_toString = (toString_toString);
// CONCATENATED MODULE: ./node_modules/lodash-es/toPath.js







/**
 * Converts `value` to a property path array.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {*} value The value to convert.
 * @returns {Array} Returns the new property path array.
 * @example
 *
 * _.toPath('a.b.c');
 * // => ['a', 'b', 'c']
 *
 * _.toPath('a[0].b.c');
 * // => ['a', '0', 'b', 'c']
 */

function toPath(value) {
  if (lodash_es_isArray(value)) {
    return _arrayMap(value, _toKey);
  }

  return lodash_es_isSymbol(value) ? [value] : _copyArray(_stringToPath(lodash_es_toString(value)));
}

/* harmony default export */ var lodash_es_toPath = (toPath);
// CONCATENATED MODULE: ./node_modules/lodash-es/cloneDeep.js

/** Used to compose bitmasks for cloning. */

var cloneDeep_CLONE_DEEP_FLAG = 1,
    cloneDeep_CLONE_SYMBOLS_FLAG = 4;
/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */

function cloneDeep(value) {
  return _baseClone(value, cloneDeep_CLONE_DEEP_FLAG | cloneDeep_CLONE_SYMBOLS_FLAG);
}

/* harmony default export */ var lodash_es_cloneDeep = (cloneDeep);
// CONCATENATED MODULE: ./node_modules/formik/dist/formik.esm.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return formik_esm_Formik; });
/* unused harmony export yupToFormErrors */
/* unused harmony export validateYupSchema */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Field; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return Form; });
/* unused harmony export withFormik */
/* unused harmony export move */
/* unused harmony export swap */
/* unused harmony export insert */
/* unused harmony export replace */
/* unused harmony export FieldArray */
/* unused harmony export isFunction */
/* unused harmony export isObject */
/* unused harmony export isInteger */
/* unused harmony export isString */
/* unused harmony export isNaN */
/* unused harmony export isEmptyChildren */
/* unused harmony export isPromise */
/* unused harmony export isInputEvent */
/* unused harmony export getActiveElement */
/* unused harmony export makeCancelable */
/* unused harmony export getIn */
/* unused harmony export setIn */
/* unused harmony export setNestedObjectValues */
/* unused harmony export FastField */
/* unused harmony export FormikProvider */
/* unused harmony export FormikConsumer */
/* unused harmony export connect */
/* unused harmony export ErrorMessage */











var formik_esm_a;

var FormikProvider = (formik_esm_a =
/*#__PURE__*/
lib_default()({}), formik_esm_a.Provider),
    FormikConsumer = formik_esm_a.Consumer;

function connect(Comp) {
  var C = function C(props) {
    return Object(react["createElement"])(FormikConsumer, null, function (formik) {
      return Object(react["createElement"])(Comp, _assign({}, props, {
        formik: formik
      }));
    });
  };

  var componentDisplayName = Comp.displayName || Comp.name || Comp.constructor && Comp.constructor.name || 'Component';
  C.WrappedComponent = Comp;
  C.displayName = "FormikConnect(" + componentDisplayName + ")";
  return hoist_non_react_statics_cjs_default()(C, Comp);
}

var formik_esm_isFunction = function isFunction(obj) {
  return typeof obj === 'function';
};

var formik_esm_isObject = function isObject(obj) {
  return obj !== null && typeof obj === 'object';
};

var isInteger = function isInteger(obj) {
  return String(Math.floor(Number(obj))) === obj;
};

var isString = function isString(obj) {
  return Object.prototype.toString.call(obj) === '[object String]';
};

var formik_esm_isNaN = function isNaN(obj) {
  return obj !== obj;
};

var formik_esm_isEmptyChildren = function isEmptyChildren(children) {
  return react["Children"].count(children) === 0;
};

var isPromise = function isPromise(value) {
  return formik_esm_isObject(value) && formik_esm_isFunction(value.then);
};

var isInputEvent = function isInputEvent(value) {
  return value && formik_esm_isObject(value) && formik_esm_isObject(value.target);
};

function getActiveElement(doc) {
  doc = doc || (typeof document !== 'undefined' ? document : undefined);

  if (typeof doc === 'undefined') {
    return null;
  }

  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

function makeCancelable(promise) {
  var hasCanceled = false;
  var wrappedPromise = new Promise(function (resolve, reject) {
    promise.then(function (val) {
      return hasCanceled ? reject({
        isCanceled: true
      }) : resolve(val);
    }, function (error) {
      return hasCanceled ? reject({
        isCanceled: true
      }) : reject(error);
    });
  });
  return [wrappedPromise, function cancel() {
    hasCanceled = true;
  }];
}

function getIn(obj, key, def, p) {
  if (p === void 0) {
    p = 0;
  }

  var path = lodash_es_toPath(key);

  while (obj && p < path.length) {
    obj = obj[path[p++]];
  }

  return obj === undefined ? def : obj;
}

function setIn(obj, path, value) {
  var res = lodash_es_clone(obj);
  var resVal = res;
  var i = 0;
  var pathArray = lodash_es_toPath(path);

  for (; i < pathArray.length - 1; i++) {
    var currentPath = pathArray[i];
    var currentObj = getIn(obj, pathArray.slice(0, i + 1));

    if (currentObj) {
      resVal = resVal[currentPath] = lodash_es_clone(currentObj);
    } else {
      var nextPath = pathArray[i + 1];
      resVal = resVal[currentPath] = isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};
    }
  }

  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {
    return obj;
  }

  if (value === undefined) {
    delete resVal[pathArray[i]];
  } else {
    resVal[pathArray[i]] = value;
  }

  if (i === 0 && value === undefined) {
    delete res[pathArray[i]];
  }

  return res;
}

function setNestedObjectValues(object, value, visited, response) {
  if (visited === void 0) {
    visited = new WeakMap();
  }

  if (response === void 0) {
    response = {};
  }

  for (var _i = 0, _a = Object.keys(object); _i < _a.length; _i++) {
    var k = _a[_i];
    var val = object[k];

    if (formik_esm_isObject(val)) {
      if (!visited.get(val)) {
        visited.set(val, true);
        response[k] = Array.isArray(val) ? [] : {};
        setNestedObjectValues(val, value, visited, response[k]);
      }
    } else {
      response[k] = value;
    }
  }

  return response;
}

var formik_esm_Formik =
/*#__PURE__*/
function (_super) {
  __extends(Formik, _super);

  function Formik(props) {
    var _this = _super.call(this, props) || this;

    _this.hcCache = {};
    _this.hbCache = {};

    _this.registerField = function (name, Comp) {
      _this.fields[name] = Comp;
    };

    _this.unregisterField = function (name) {
      delete _this.fields[name];
    };

    _this.setErrors = function (errors) {
      _this.setState({
        errors: errors
      });
    };

    _this.setTouched = function (touched) {
      _this.setState({
        touched: touched
      }, function () {
        if (_this.props.validateOnBlur) {
          _this.runValidations(_this.state.values);
        }
      });
    };

    _this.setValues = function (values) {
      _this.setState({
        values: values
      }, function () {
        if (_this.props.validateOnChange) {
          _this.runValidations(values);
        }
      });
    };

    _this.setStatus = function (status) {
      _this.setState({
        status: status
      });
    };

    _this.setError = function (error) {
      if (false) {}

      _this.setState({
        error: error
      });
    };

    _this.setSubmitting = function (isSubmitting) {
      if (_this.didMount) {
        _this.setState({
          isSubmitting: isSubmitting
        });
      }
    };

    _this.validateField = function (field) {
      _this.setState({
        isValidating: true
      });

      return _this.runSingleFieldLevelValidation(field, getIn(_this.state.values, field)).then(function (error) {
        if (_this.didMount) {
          _this.setState({
            errors: setIn(_this.state.errors, field, error),
            isValidating: false
          });
        }

        return error;
      });
    };

    _this.runSingleFieldLevelValidation = function (field, value) {
      return new Promise(function (resolve) {
        return resolve(_this.fields[field].props.validate(value));
      }).then(function (x) {
        return x;
      }, function (e) {
        return e;
      });
    };

    _this.runValidationSchema = function (values) {
      return new Promise(function (resolve) {
        var validationSchema = _this.props.validationSchema;
        var schema = formik_esm_isFunction(validationSchema) ? validationSchema() : validationSchema;
        validateYupSchema(values, schema).then(function () {
          resolve({});
        }, function (err) {
          resolve(yupToFormErrors(err));
        });
      });
    };

    _this.runValidations = function (values) {
      if (values === void 0) {
        values = _this.state.values;
      }

      if (_this.validator) {
        _this.validator();
      }

      var _a = makeCancelable(Promise.all([_this.runFieldLevelValidations(values), _this.props.validationSchema ? _this.runValidationSchema(values) : {}, _this.props.validate ? _this.runValidateHandler(values) : {}]).then(function (_a) {
        var fieldErrors = _a[0],
            schemaErrors = _a[1],
            handlerErrors = _a[2];
        return es.all([fieldErrors, schemaErrors, handlerErrors], {
          arrayMerge: arrayMerge
        });
      })),
          promise = _a[0],
          cancel = _a[1];

      _this.validator = cancel;
      return promise.then(function (errors) {
        if (_this.didMount) {
          _this.setState(function (prevState) {
            if (!react_fast_compare_default()(prevState.errors, errors)) {
              return {
                errors: errors
              };
            }

            return null;
          });
        }

        return errors;
      }).catch(function (x) {
        return x;
      });
    };

    _this.handleChange = function (eventOrPath) {
      var executeChange = function executeChange(eventOrValue, maybePath) {
        var field = maybePath;
        var value;

        if (isInputEvent(eventOrValue)) {
          var event_1 = eventOrValue;

          if (event_1.persist) {
            event_1.persist();
          }

          var _a = event_1.target,
              type = _a.type,
              name_1 = _a.name,
              id = _a.id,
              checked = _a.checked,
              outerHTML = _a.outerHTML;
          field = maybePath ? maybePath : name_1 ? name_1 : id;

          if (!field && "production" !== 'production') {
            warnAboutMissingIdentifier({
              htmlContent: outerHTML,
              documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',
              handlerName: 'handleChange'
            });
          }

          value = event_1.target.value;

          if (/number|range/.test(type)) {
            var parsed = parseFloat(event_1.target.value);
            value = formik_esm_isNaN(parsed) ? '' : parsed;
          }

          if (/checkbox/.test(type)) {
            value = checked;
          }
        } else {
          value = eventOrValue;
        }

        if (field) {
          _this.setState(function (prevState) {
            return _assign({}, prevState, {
              values: setIn(prevState.values, field, value)
            });
          }, function () {
            if (_this.props.validateOnChange) {
              _this.runValidations(setIn(_this.state.values, field, value));
            }
          });
        }
      };

      if (isString(eventOrPath)) {
        var path_1 = eventOrPath;

        if (!formik_esm_isFunction(_this.hcCache[path_1])) {
          _this.hcCache[path_1] = function (eventOrValue) {
            return executeChange(eventOrValue, path_1);
          };
        }

        return _this.hcCache[path_1];
      } else {
        var event_2 = eventOrPath;
        executeChange(event_2);
      }
    };

    _this.setFieldValue = function (field, value, shouldValidate) {
      if (shouldValidate === void 0) {
        shouldValidate = true;
      }

      if (_this.didMount) {
        _this.setState(function (prevState) {
          return _assign({}, prevState, {
            values: setIn(prevState.values, field, value)
          });
        }, function () {
          if (_this.props.validateOnChange && shouldValidate) {
            _this.runValidations(_this.state.values);
          }
        });
      }
    };

    _this.handleSubmit = function (e) {
      if (e && e.preventDefault) {
        e.preventDefault();
      }

      if (false) { var activeElement; }

      _this.submitForm();
    };

    _this.submitForm = function () {
      _this.setState(function (prevState) {
        return {
          touched: setNestedObjectValues(prevState.values, true),
          isSubmitting: true,
          isValidating: true,
          submitCount: prevState.submitCount + 1
        };
      });

      return _this.runValidations(_this.state.values).then(function (combinedErrors) {
        if (_this.didMount) {
          _this.setState({
            isValidating: false
          });
        }

        var isValid = Object.keys(combinedErrors).length === 0;

        if (isValid) {
          _this.executeSubmit();
        } else if (_this.didMount) {
          _this.setState({
            isSubmitting: false
          });
        }
      });
    };

    _this.executeSubmit = function () {
      _this.props.onSubmit(_this.state.values, _this.getFormikActions());
    };

    _this.handleBlur = function (eventOrPath) {
      var executeBlur = function executeBlur(maybeEvent, maybePath) {
        var field = maybePath;

        if (isInputEvent(maybeEvent)) {
          var event_3 = maybeEvent;

          if (event_3.persist) {
            event_3.persist();
          }

          var _a = event_3.target,
              name_2 = _a.name,
              id = _a.id,
              outerHTML = _a.outerHTML;
          field = name_2 ? name_2 : id;

          if (!field && "production" !== 'production') {
            warnAboutMissingIdentifier({
              htmlContent: outerHTML,
              documentationAnchorLink: 'handleblur-e-reactfocuseventany--void',
              handlerName: 'handleBlur'
            });
          }
        }

        _this.setState(function (prevState) {
          return {
            touched: setIn(prevState.touched, field, true)
          };
        });

        if (_this.props.validateOnBlur) {
          _this.runValidations(_this.state.values);
        }
      };

      if (isString(eventOrPath)) {
        var path_2 = eventOrPath;

        if (!formik_esm_isFunction(_this.hbCache[path_2])) {
          _this.hbCache[path_2] = function (event) {
            return executeBlur(event, path_2);
          };
        }

        return _this.hbCache[path_2];
      } else {
        var event_4 = eventOrPath;
        executeBlur(event_4);
      }
    };

    _this.setFieldTouched = function (field, touched, shouldValidate) {
      if (touched === void 0) {
        touched = true;
      }

      if (shouldValidate === void 0) {
        shouldValidate = true;
      }

      _this.setState(function (prevState) {
        return _assign({}, prevState, {
          touched: setIn(prevState.touched, field, touched)
        });
      }, function () {
        if (_this.props.validateOnBlur && shouldValidate) {
          _this.runValidations(_this.state.values);
        }
      });
    };

    _this.setFieldError = function (field, message) {
      _this.setState(function (prevState) {
        return _assign({}, prevState, {
          errors: setIn(prevState.errors, field, message)
        });
      });
    };

    _this.resetForm = function (nextValues) {
      var values = nextValues ? nextValues : _this.props.initialValues;
      _this.initialValues = values;

      _this.setState({
        isSubmitting: false,
        isValidating: false,
        errors: {},
        touched: {},
        error: undefined,
        status: _this.props.initialStatus,
        values: values,
        submitCount: 0
      });
    };

    _this.handleReset = function () {
      if (_this.props.onReset) {
        var maybePromisedOnReset = _this.props.onReset(_this.state.values, _this.getFormikActions());

        if (isPromise(maybePromisedOnReset)) {
          maybePromisedOnReset.then(_this.resetForm);
        } else {
          _this.resetForm();
        }
      } else {
        _this.resetForm();
      }
    };

    _this.setFormikState = function (s, callback) {
      return _this.setState(s, callback);
    };

    _this.validateForm = function (values) {
      _this.setState({
        isValidating: true
      });

      return _this.runValidations(values).then(function (errors) {
        if (_this.didMount) {
          _this.setState({
            isValidating: false
          });
        }

        return errors;
      });
    };

    _this.getFormikActions = function () {
      return {
        resetForm: _this.resetForm,
        submitForm: _this.submitForm,
        validateForm: _this.validateForm,
        validateField: _this.validateField,
        setError: _this.setError,
        setErrors: _this.setErrors,
        setFieldError: _this.setFieldError,
        setFieldTouched: _this.setFieldTouched,
        setFieldValue: _this.setFieldValue,
        setStatus: _this.setStatus,
        setSubmitting: _this.setSubmitting,
        setTouched: _this.setTouched,
        setValues: _this.setValues,
        setFormikState: _this.setFormikState
      };
    };

    _this.getFormikComputedProps = function () {
      var isInitialValid = _this.props.isInitialValid;
      var dirty = !react_fast_compare_default()(_this.initialValues, _this.state.values);
      return {
        dirty: dirty,
        isValid: dirty ? _this.state.errors && Object.keys(_this.state.errors).length === 0 : isInitialValid !== false && formik_esm_isFunction(isInitialValid) ? isInitialValid(_this.props) : isInitialValid,
        initialValues: _this.initialValues
      };
    };

    _this.getFormikBag = function () {
      return _assign({}, _this.state, _this.getFormikActions(), _this.getFormikComputedProps(), {
        registerField: _this.registerField,
        unregisterField: _this.unregisterField,
        handleBlur: _this.handleBlur,
        handleChange: _this.handleChange,
        handleReset: _this.handleReset,
        handleSubmit: _this.handleSubmit,
        validateOnChange: _this.props.validateOnChange,
        validateOnBlur: _this.props.validateOnBlur
      });
    };

    _this.getFormikContext = function () {
      return _assign({}, _this.getFormikBag(), {
        validationSchema: _this.props.validationSchema,
        validate: _this.props.validate,
        initialValues: _this.initialValues
      });
    };

    _this.state = {
      values: props.initialValues || {},
      errors: {},
      touched: {},
      isSubmitting: false,
      isValidating: false,
      submitCount: 0,
      status: props.initialStatus
    };
    _this.didMount = false;
    _this.fields = {};
    _this.initialValues = props.initialValues || {};
     false ? undefined : void 0;
     false ? undefined : void 0;
     false ? undefined : void 0;
    return _this;
  }

  Formik.prototype.componentDidMount = function () {
    this.didMount = true;
  };

  Formik.prototype.componentWillUnmount = function () {
    this.didMount = false;

    if (this.validator) {
      this.validator();
    }
  };

  Formik.prototype.componentDidUpdate = function (prevProps) {
    if (this.props.enableReinitialize && !react_fast_compare_default()(prevProps.initialValues, this.props.initialValues)) {
      this.initialValues = this.props.initialValues;
      this.resetForm(this.props.initialValues);
    }
  };

  Formik.prototype.runFieldLevelValidations = function (values) {
    var _this = this;

    var fieldKeysWithValidation = Object.keys(this.fields).filter(function (f) {
      return _this.fields && _this.fields[f] && _this.fields[f].props.validate && formik_esm_isFunction(_this.fields[f].props.validate);
    });
    var fieldValidations = fieldKeysWithValidation.length > 0 ? fieldKeysWithValidation.map(function (f) {
      return _this.runSingleFieldLevelValidation(f, getIn(values, f));
    }) : [Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')];
    return Promise.all(fieldValidations).then(function (fieldErrorsList) {
      return fieldErrorsList.reduce(function (prev, curr, index) {
        if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {
          return prev;
        }

        if (!!curr) {
          prev = setIn(prev, fieldKeysWithValidation[index], curr);
        }

        return prev;
      }, {});
    });
  };

  Formik.prototype.runValidateHandler = function (values) {
    var _this = this;

    return new Promise(function (resolve) {
      var maybePromisedErrors = _this.props.validate(values);

      if (maybePromisedErrors === undefined) {
        resolve({});
      } else if (isPromise(maybePromisedErrors)) {
        maybePromisedErrors.then(function () {
          resolve({});
        }, function (errors) {
          resolve(errors);
        });
      } else {
        resolve(maybePromisedErrors);
      }
    });
  };

  Formik.prototype.render = function () {
    var _a = this.props,
        component = _a.component,
        render = _a.render,
        children = _a.children;
    var props = this.getFormikBag();
    var ctx = this.getFormikContext();
    return Object(react["createElement"])(FormikProvider, {
      value: ctx
    }, component ? Object(react["createElement"])(component, props) : render ? render(props) : children ? formik_esm_isFunction(children) ? children(props) : !formik_esm_isEmptyChildren(children) ? react["Children"].only(children) : null : null);
  };

  Formik.defaultProps = {
    validateOnChange: true,
    validateOnBlur: true,
    isInitialValid: false,
    enableReinitialize: false
  };
  return Formik;
}(react["Component"]);

function warnAboutMissingIdentifier(_a) {
  var htmlContent = _a.htmlContent,
      documentationAnchorLink = _a.documentationAnchorLink,
      handlerName = _a.handlerName;
  console.warn("Warning: Formik called `" + handlerName + "`, but you forgot to pass an `id` or `name` attribute to your input:\n\n    " + htmlContent + "\n\n    Formik cannot determine which value to update. For more info see https://github.com/jaredpalmer/formik#" + documentationAnchorLink + "\n  ");
}

function yupToFormErrors(yupError) {
  var errors = {};

  if (yupError.inner.length === 0) {
    return setIn(errors, yupError.path, yupError.message);
  }

  for (var _i = 0, _a = yupError.inner; _i < _a.length; _i++) {
    var err = _a[_i];

    if (!errors[err.path]) {
      errors = setIn(errors, err.path, err.message);
    }
  }

  return errors;
}

function validateYupSchema(values, schema, sync, context) {
  if (sync === void 0) {
    sync = false;
  }

  if (context === void 0) {
    context = {};
  }

  var validateData = {};

  for (var k in values) {
    if (values.hasOwnProperty(k)) {
      var key = String(k);
      validateData[key] = values[key] !== '' ? values[key] : undefined;
    }
  }

  return schema[sync ? 'validateSync' : 'validate'](validateData, {
    abortEarly: false,
    context: context
  });
}

function arrayMerge(target, source, options) {
  var destination = target.slice();
  source.forEach(function (e, i) {
    if (typeof destination[i] === 'undefined') {
      var cloneRequested = options.clone !== false;
      var shouldClone = cloneRequested && options.isMergeableObject(e);
      destination[i] = shouldClone ? es(Array.isArray(e) ? [] : {}, e, options) : e;
    } else if (options.isMergeableObject(e)) {
      destination[i] = es(target[i], e, options);
    } else if (target.indexOf(e) === -1) {
      destination.push(e);
    }
  });
  return destination;
}

var formik_esm_FieldInner =
/*#__PURE__*/
function (_super) {
  __extends(FieldInner, _super);

  function FieldInner(props) {
    var _this = _super.call(this, props) || this;

    var render = props.render,
        children = props.children,
        component = props.component;
     false ? undefined : void 0;
     false ? undefined : void 0;
     false ? undefined : void 0;
    return _this;
  }

  FieldInner.prototype.componentDidMount = function () {
    this.props.formik.registerField(this.props.name, this);
  };

  FieldInner.prototype.componentDidUpdate = function (prevProps) {
    if (this.props.name !== prevProps.name) {
      this.props.formik.unregisterField(prevProps.name);
      this.props.formik.registerField(this.props.name, this);
    }

    if (this.props.validate !== prevProps.validate) {
      this.props.formik.registerField(this.props.name, this);
    }
  };

  FieldInner.prototype.componentWillUnmount = function () {
    this.props.formik.unregisterField(this.props.name);
  };

  FieldInner.prototype.render = function () {
    var _a = this.props,
        validate = _a.validate,
        name = _a.name,
        render = _a.render,
        children = _a.children,
        _b = _a.component,
        component = _b === void 0 ? 'input' : _b,
        formik = _a.formik,
        props = __rest(_a, ["validate", "name", "render", "children", "component", "formik"]);

    var _validate = formik.validate,
        _validationSchema = formik.validationSchema,
        restOfFormik = __rest(formik, ["validate", "validationSchema"]);

    var field = {
      value: props.type === 'radio' || props.type === 'checkbox' ? props.value : getIn(formik.values, name),
      name: name,
      onChange: formik.handleChange,
      onBlur: formik.handleBlur
    };
    var bag = {
      field: field,
      form: restOfFormik
    };

    if (render) {
      return render(bag);
    }

    if (formik_esm_isFunction(children)) {
      return children(bag);
    }

    if (typeof component === 'string') {
      var innerRef = props.innerRef,
          rest = __rest(props, ["innerRef"]);

      return Object(react["createElement"])(component, _assign({
        ref: innerRef
      }, field, rest, {
        children: children
      }));
    }

    return Object(react["createElement"])(component, _assign({}, bag, props, {
      children: children
    }));
  };

  return FieldInner;
}(react["Component"]);

var Field =
/*#__PURE__*/
connect(formik_esm_FieldInner);
var Form =
/*#__PURE__*/
connect(function (_a) {
  var _b = _a.formik,
      handleReset = _b.handleReset,
      handleSubmit = _b.handleSubmit,
      props = __rest(_a, ["formik"]);

  return Object(react["createElement"])("form", _assign({
    onReset: handleReset,
    onSubmit: handleSubmit
  }, props));
});
Form.displayName = 'Form';

function withFormik(_a) {
  var _b = _a.mapPropsToValues,
      mapPropsToValues = _b === void 0 ? function (vanillaProps) {
    var val = {};

    for (var k in vanillaProps) {
      if (vanillaProps.hasOwnProperty(k) && typeof vanillaProps[k] !== 'function') {
        val[k] = vanillaProps[k];
      }
    }

    return val;
  } : _b,
      config = __rest(_a, ["mapPropsToValues"]);

  return function createFormik(Component$$1) {
    var componentDisplayName = Component$$1.displayName || Component$$1.name || Component$$1.constructor && Component$$1.constructor.name || 'Component';

    var C = function (_super) {
      __extends(C, _super);

      function C() {
        var _this = _super !== null && _super.apply(this, arguments) || this;

        _this.validate = function (values) {
          return config.validate(values, _this.props);
        };

        _this.validationSchema = function () {
          return formik_esm_isFunction(config.validationSchema) ? config.validationSchema(_this.props) : config.validationSchema;
        };

        _this.handleSubmit = function (values, actions) {
          return config.handleSubmit(values, _assign({}, actions, {
            props: _this.props
          }));
        };

        _this.renderFormComponent = function (formikProps) {
          return Object(react["createElement"])(Component$$1, _assign({}, _this.props, formikProps));
        };

        return _this;
      }

      C.prototype.render = function () {
        var _a = this.props,
            children = _a.children,
            props = __rest(_a, ["children"]);

        return Object(react["createElement"])(formik_esm_Formik, _assign({}, props, config, {
          validate: config.validate && this.validate,
          validationSchema: config.validationSchema && this.validationSchema,
          initialValues: mapPropsToValues(this.props),
          initialStatus: config.mapPropsToStatus && config.mapPropsToStatus(this.props),
          onSubmit: this.handleSubmit,
          render: this.renderFormComponent
        }));
      };

      C.displayName = "WithFormik(" + componentDisplayName + ")";
      return C;
    }(react["Component"]);

    return hoist_non_react_statics_cjs_default()(C, Component$$1);
  };
}

var move = function move(array, from, to) {
  var copy = (array || []).slice();
  var value = copy[from];
  copy.splice(from, 1);
  copy.splice(to, 0, value);
  return copy;
};

var swap = function swap(array, indexA, indexB) {
  var copy = (array || []).slice();
  var a = copy[indexA];
  copy[indexA] = copy[indexB];
  copy[indexB] = a;
  return copy;
};

var insert = function insert(array, index, value) {
  var copy = (array || []).slice();
  copy.splice(index, 0, value);
  return copy;
};

var replace = function replace(array, index, value) {
  var copy = (array || []).slice();
  copy[index] = value;
  return copy;
};

var formik_esm_FieldArrayInner =
/*#__PURE__*/
function (_super) {
  __extends(FieldArrayInner, _super);

  function FieldArrayInner(props) {
    var _this = _super.call(this, props) || this;

    _this.updateArrayField = function (fn, alterTouched, alterErrors) {
      var _a = _this.props,
          name = _a.name,
          validateOnChange = _a.validateOnChange,
          _b = _a.formik,
          setFormikState = _b.setFormikState,
          validateForm = _b.validateForm;
      setFormikState(function (prevState) {
        var updateErrors = typeof alterErrors === 'function' ? alterErrors : fn;
        var updateTouched = typeof alterTouched === 'function' ? alterTouched : fn;
        return _assign({}, prevState, {
          values: setIn(prevState.values, name, fn(getIn(prevState.values, name))),
          errors: alterErrors ? setIn(prevState.errors, name, updateErrors(getIn(prevState.errors, name))) : prevState.errors,
          touched: alterTouched ? setIn(prevState.touched, name, updateTouched(getIn(prevState.touched, name))) : prevState.touched
        });
      }, function () {
        if (validateOnChange) {
          validateForm();
        }
      });
    };

    _this.push = function (value) {
      return _this.updateArrayField(function (array) {
        return (array || []).concat([lodash_es_cloneDeep(value)]);
      }, false, false);
    };

    _this.handlePush = function (value) {
      return function () {
        return _this.push(value);
      };
    };

    _this.swap = function (indexA, indexB) {
      return _this.updateArrayField(function (array) {
        return swap(array, indexA, indexB);
      }, true, true);
    };

    _this.handleSwap = function (indexA, indexB) {
      return function () {
        return _this.swap(indexA, indexB);
      };
    };

    _this.move = function (from, to) {
      return _this.updateArrayField(function (array) {
        return move(array, from, to);
      }, true, true);
    };

    _this.handleMove = function (from, to) {
      return function () {
        return _this.move(from, to);
      };
    };

    _this.insert = function (index, value) {
      return _this.updateArrayField(function (array) {
        return insert(array, index, value);
      }, function (array) {
        return insert(array, index, null);
      }, function (array) {
        return insert(array, index, null);
      });
    };

    _this.handleInsert = function (index, value) {
      return function () {
        return _this.insert(index, value);
      };
    };

    _this.replace = function (index, value) {
      return _this.updateArrayField(function (array) {
        return replace(array, index, value);
      }, false, false);
    };

    _this.handleReplace = function (index, value) {
      return function () {
        return _this.replace(index, value);
      };
    };

    _this.unshift = function (value) {
      var length = -1;

      _this.updateArrayField(function (array) {
        var arr = array ? [value].concat(array) : [value];

        if (length < 0) {
          length = arr.length;
        }

        return arr;
      }, function (array) {
        var arr = array ? [null].concat(array) : [null];
        if (length < 0) length = arr.length;
        return arr;
      }, function (array) {
        var arr = array ? [null].concat(array) : [null];
        if (length < 0) length = arr.length;
        return arr;
      });

      return length;
    };

    _this.handleUnshift = function (value) {
      return function () {
        return _this.unshift(value);
      };
    };

    _this.handleRemove = function (index) {
      return function () {
        return _this.remove(index);
      };
    };

    _this.handlePop = function () {
      return function () {
        return _this.pop();
      };
    };

    _this.remove = _this.remove.bind(_this);
    _this.pop = _this.pop.bind(_this);
    return _this;
  }

  FieldArrayInner.prototype.remove = function (index) {
    var result;
    this.updateArrayField(function (array) {
      var copy = array ? array.slice() : [];

      if (!result) {
        result = copy[index];
      }

      if (formik_esm_isFunction(copy.splice)) {
        copy.splice(index, 1);
      }

      return copy;
    }, true, true);
    return result;
  };

  FieldArrayInner.prototype.pop = function () {
    var result;
    this.updateArrayField(function (array) {
      var tmp = array;

      if (!result) {
        result = tmp && tmp.pop && tmp.pop();
      }

      return tmp;
    }, true, true);
    return result;
  };

  FieldArrayInner.prototype.render = function () {
    var arrayHelpers = {
      push: this.push,
      pop: this.pop,
      swap: this.swap,
      move: this.move,
      insert: this.insert,
      replace: this.replace,
      unshift: this.unshift,
      remove: this.remove,
      handlePush: this.handlePush,
      handlePop: this.handlePop,
      handleSwap: this.handleSwap,
      handleMove: this.handleMove,
      handleInsert: this.handleInsert,
      handleReplace: this.handleReplace,
      handleUnshift: this.handleUnshift,
      handleRemove: this.handleRemove
    };

    var _a = this.props,
        component = _a.component,
        render = _a.render,
        children = _a.children,
        name = _a.name,
        _b = _a.formik,
        _validate = _b.validate,
        _validationSchema = _b.validationSchema,
        restOfFormik = __rest(_b, ["validate", "validationSchema"]);

    var props = _assign({}, arrayHelpers, {
      form: restOfFormik,
      name: name
    });

    return component ? Object(react["createElement"])(component, props) : render ? render(props) : children ? typeof children === 'function' ? children(props) : !formik_esm_isEmptyChildren(children) ? react["Children"].only(children) : null : null;
  };

  FieldArrayInner.defaultProps = {
    validateOnChange: true
  };
  return FieldArrayInner;
}(react["Component"]);

var FieldArray =
/*#__PURE__*/
connect(formik_esm_FieldArrayInner);

var formik_esm_FastFieldInner =
/*#__PURE__*/
function (_super) {
  __extends(FastFieldInner, _super);

  function FastFieldInner(props) {
    var _this = _super.call(this, props) || this;

    var render = props.render,
        children = props.children,
        component = props.component;
     false ? undefined : void 0;
     false ? undefined : void 0;
     false ? undefined : void 0;
    return _this;
  }

  FastFieldInner.prototype.shouldComponentUpdate = function (props) {
    if (this.props.shouldUpdate) {
      return this.props.shouldUpdate(props, this.props);
    } else if (getIn(this.props.formik.values, this.props.name) !== getIn(props.formik.values, this.props.name) || getIn(this.props.formik.errors, this.props.name) !== getIn(props.formik.errors, this.props.name) || getIn(this.props.formik.touched, this.props.name) !== getIn(props.formik.touched, this.props.name) || Object.keys(this.props).length !== Object.keys(props).length || this.props.formik.isSubmitting !== props.formik.isSubmitting) {
      return true;
    } else {
      return false;
    }
  };

  FastFieldInner.prototype.componentDidMount = function () {
    this.props.formik.registerField(this.props.name, this);
  };

  FastFieldInner.prototype.componentDidUpdate = function (prevProps) {
    if (this.props.name !== prevProps.name) {
      this.props.formik.unregisterField(prevProps.name);
      this.props.formik.registerField(this.props.name, this);
    }

    if (this.props.validate !== prevProps.validate) {
      this.props.formik.registerField(this.props.name, this);
    }
  };

  FastFieldInner.prototype.componentWillUnmount = function () {
    this.props.formik.unregisterField(this.props.name);
  };

  FastFieldInner.prototype.render = function () {
    var _a = this.props,
        validate = _a.validate,
        name = _a.name,
        render = _a.render,
        children = _a.children,
        _b = _a.component,
        component = _b === void 0 ? 'input' : _b,
        formik = _a.formik,
        shouldUpdate = _a.shouldUpdate,
        props = __rest(_a, ["validate", "name", "render", "children", "component", "formik", "shouldUpdate"]);

    var _validate = formik.validate,
        _validationSchema = formik.validationSchema,
        restOfFormik = __rest(formik, ["validate", "validationSchema"]);

    var field = {
      value: props.type === 'radio' || props.type === 'checkbox' ? props.value : getIn(formik.values, name),
      name: name,
      onChange: formik.handleChange,
      onBlur: formik.handleBlur
    };
    var bag = {
      field: field,
      form: restOfFormik
    };

    if (render) {
      return render(bag);
    }

    if (formik_esm_isFunction(children)) {
      return children(bag);
    }

    if (typeof component === 'string') {
      var innerRef = props.innerRef,
          rest = __rest(props, ["innerRef"]);

      return Object(react["createElement"])(component, _assign({
        ref: innerRef
      }, field, rest, {
        children: children
      }));
    }

    return Object(react["createElement"])(component, _assign({}, bag, props, {
      children: children
    }));
  };

  return FastFieldInner;
}(react["Component"]);

var FastField =
/*#__PURE__*/
connect(formik_esm_FastFieldInner);

var formik_esm_ErrorMessageImpl =
/*#__PURE__*/
function (_super) {
  __extends(ErrorMessageImpl, _super);

  function ErrorMessageImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ErrorMessageImpl.prototype.shouldComponentUpdate = function (props) {
    if (getIn(this.props.formik.errors, this.props.name) !== getIn(props.formik.errors, this.props.name) || getIn(this.props.formik.touched, this.props.name) !== getIn(props.formik.touched, this.props.name) || Object.keys(this.props).length !== Object.keys(props).length) {
      return true;
    } else {
      return false;
    }
  };

  ErrorMessageImpl.prototype.render = function () {
    var _a = this.props,
        component = _a.component,
        formik = _a.formik,
        render = _a.render,
        children = _a.children,
        name = _a.name,
        rest = __rest(_a, ["component", "formik", "render", "children", "name"]);

    var touch = getIn(formik.touched, name);
    var error = getIn(formik.errors, name);
    return !!touch && !!error ? render ? formik_esm_isFunction(render) ? render(error) : null : children ? formik_esm_isFunction(children) ? children(error) : null : component ? Object(react["createElement"])(component, rest, error) : error : null;
  };

  return ErrorMessageImpl;
}(react["Component"]);

var ErrorMessage =
/*#__PURE__*/
connect(formik_esm_ErrorMessageImpl);


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var __param = this && this.__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var columnGroup_1 = __webpack_require__(58);

var column_1 = __webpack_require__(24);

var gridOptionsWrapper_1 = __webpack_require__(7);

var expressionService_1 = __webpack_require__(43);

var columnFactory_1 = __webpack_require__(84);

var displayedGroupCreator_1 = __webpack_require__(104);

var autoWidthCalculator_1 = __webpack_require__(85);

var eventService_1 = __webpack_require__(14);

var columnUtils_1 = __webpack_require__(69);

var logger_1 = __webpack_require__(30);

var events_1 = __webpack_require__(18);

var originalColumnGroup_1 = __webpack_require__(70);

var groupInstanceIdCreator_1 = __webpack_require__(157);

var context_1 = __webpack_require__(2);

var columnAnimationService_1 = __webpack_require__(107);

var autoGroupColService_1 = __webpack_require__(200);

var valueCache_1 = __webpack_require__(71);

var gridApi_1 = __webpack_require__(20);

var columnApi_1 = __webpack_require__(21);

var utils_1 = __webpack_require__(6);

var ColumnController =
/** @class */
function () {
  function ColumnController() {
    // header row count, based on user provided columns
    this.primaryHeaderRowCount = 0;
    this.secondaryHeaderRowCount = 0;
    this.secondaryColumnsPresent = false; // header row count, either above, or based on pivoting if we are pivoting

    this.gridHeaderRowCount = 0; // these are the lists used by the rowRenderer to render nodes. almost the leaf nodes of the above
    // displayed trees, however it also takes into account if the groups are open or not.

    this.displayedLeftColumns = [];
    this.displayedRightColumns = [];
    this.displayedCenterColumns = []; // all three lists above combined

    this.allDisplayedColumns = []; // same as above, except trimmed down to only columns within the viewport

    this.allDisplayedVirtualColumns = [];
    this.allDisplayedCenterVirtualColumns = [];
    this.rowGroupColumns = [];
    this.valueColumns = [];
    this.pivotColumns = [];
    this.ready = false;
    this.autoGroupsNeedBuilding = false;
    this.pivotMode = false;
    this.bodyWidth = 0;
    this.leftWidth = 0;
    this.rightWidth = 0;
    this.bodyWidthDirty = true;
  }

  ColumnController.prototype.init = function () {
    var pivotMode = this.gridOptionsWrapper.isPivotMode();
    this.suppressColumnVirtualisation = this.gridOptionsWrapper.isSuppressColumnVirtualisation();

    if (this.isPivotSettingAllowed(pivotMode)) {
      this.pivotMode = pivotMode;
    }

    this.usingTreeData = this.gridOptionsWrapper.isTreeData();
  };

  ColumnController.prototype.setColumnDefs = function (columnDefs, source) {
    if (source === void 0) {
      source = "api";
    }

    var colsPreviouslyExisted = !!this.columnDefs;
    this.columnDefs = columnDefs; // always invalidate cache on changing columns, as the column id's for the new columns
    // could overlap with the old id's, so the cache would return old values for new columns.

    this.valueCache.expire(); // NOTE ==================
    // we should be destroying the existing columns and groups if they exist, for example, the original column
    // group adds a listener to the columns, it should be also removing the listeners

    this.autoGroupsNeedBuilding = true;
    var oldPrimaryColumns = this.primaryColumns;
    var balancedTreeResult = this.columnFactory.createColumnTree(columnDefs, true, oldPrimaryColumns);
    this.primaryColumnTree = balancedTreeResult.columnTree;
    this.primaryHeaderRowCount = balancedTreeResult.treeDept + 1;
    this.primaryColumns = this.getColumnsFromTree(this.primaryColumnTree);
    this.extractRowGroupColumns(source, oldPrimaryColumns);
    this.extractPivotColumns(source, oldPrimaryColumns);
    this.createValueColumns(source, oldPrimaryColumns);
    this.ready = true;
    this.updateGridColumns();
    this.updateDisplayedColumns(source);
    this.checkDisplayedVirtualColumns();

    if (this.gridOptionsWrapper.isDeltaColumnMode() && colsPreviouslyExisted) {
      this.resetColumnState(true, source);
    }

    var eventEverythingChanged = {
      type: events_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi,
      source: source
    };
    this.eventService.dispatchEvent(eventEverythingChanged);
    var newColumnsLoadedEvent = {
      type: events_1.Events.EVENT_NEW_COLUMNS_LOADED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(newColumnsLoadedEvent);
  };

  ColumnController.prototype.isAutoRowHeightActive = function () {
    return this.autoRowHeightColumns && this.autoRowHeightColumns.length > 0;
  };

  ColumnController.prototype.getAllAutoRowHeightCols = function () {
    return this.autoRowHeightColumns;
  };

  ColumnController.prototype.setVirtualViewportLeftAndRight = function () {
    if (this.gridOptionsWrapper.isEnableRtl()) {
      this.viewportLeft = this.bodyWidth - this.scrollPosition - this.scrollWidth;
      this.viewportRight = this.bodyWidth - this.scrollPosition;
    } else {
      this.viewportLeft = this.scrollPosition;
      this.viewportRight = this.scrollWidth + this.scrollPosition;
    }
  }; // used by clipboard service, to know what columns to paste into


  ColumnController.prototype.getDisplayedColumnsStartingAt = function (column) {
    var currentColumn = column;
    var result = [];

    while (currentColumn && utils_1._.exists(currentColumn)) {
      result.push(currentColumn);
      currentColumn = this.getDisplayedColAfter(currentColumn);
    }

    return result;
  }; // checks what columns are currently displayed due to column virtualisation. fires an event
  // if the list of columns has changed.
  // + setColumnWidth(), setVirtualViewportPosition(), setColumnDefs(), sizeColumnsToFit()


  ColumnController.prototype.checkDisplayedVirtualColumns = function () {
    // check displayCenterColumnTree exists first, as it won't exist when grid is initialising
    if (utils_1._.exists(this.displayedCenterColumns)) {
      var hashBefore = this.allDisplayedVirtualColumns.map(function (column) {
        return column.getId();
      }).join('#');
      this.updateVirtualSets();
      var hashAfter = this.allDisplayedVirtualColumns.map(function (column) {
        return column.getId();
      }).join('#');

      if (hashBefore !== hashAfter) {
        var event_1 = {
          type: events_1.Events.EVENT_VIRTUAL_COLUMNS_CHANGED,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(event_1);
      }
    }
  };

  ColumnController.prototype.setVirtualViewportPosition = function (scrollWidth, scrollPosition) {
    if (scrollWidth !== this.scrollWidth || scrollPosition !== this.scrollPosition || this.bodyWidthDirty) {
      this.scrollWidth = scrollWidth;
      this.scrollPosition = scrollPosition; // we need to call setVirtualViewportLeftAndRight() at least once after the body width changes,
      // as the viewport can stay the same, but in RTL, if body width changes, we need to work out the
      // virtual columns again

      this.bodyWidthDirty = true;
      this.setVirtualViewportLeftAndRight();

      if (this.ready) {
        this.checkDisplayedVirtualColumns();
      }
    }
  };

  ColumnController.prototype.isPivotMode = function () {
    return this.pivotMode;
  };

  ColumnController.prototype.isPivotSettingAllowed = function (pivot) {
    if (pivot) {
      if (this.gridOptionsWrapper.isTreeData()) {
        console.warn("ag-Grid: Pivot mode not available in conjunction Tree Data i.e. 'gridOptions.treeData: true'");
        return false;
      } else {
        return true;
      }
    } else {
      return true;
    }
  };

  ColumnController.prototype.setPivotMode = function (pivotMode, source) {
    if (source === void 0) {
      source = "api";
    }

    if (pivotMode === this.pivotMode) {
      return;
    }

    if (!this.isPivotSettingAllowed(this.pivotMode)) {
      return;
    }

    this.pivotMode = pivotMode;
    this.updateDisplayedColumns(source);
    var event = {
      type: events_1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(event);
  };

  ColumnController.prototype.getSecondaryPivotColumn = function (pivotKeys, valueColKey) {
    if (!this.secondaryColumnsPresent) {
      return null;
    }

    var valueColumnToFind = this.getPrimaryColumn(valueColKey);
    var foundColumn = null;

    if (this.secondaryColumns) {
      this.secondaryColumns.forEach(function (column) {
        var thisPivotKeys = column.getColDef().pivotKeys;
        var pivotValueColumn = column.getColDef().pivotValueColumn;

        var pivotKeyMatches = utils_1._.compareArrays(thisPivotKeys, pivotKeys);

        var pivotValueMatches = pivotValueColumn === valueColumnToFind;

        if (pivotKeyMatches && pivotValueMatches) {
          foundColumn = column;
        }
      });
    }

    return foundColumn;
  };

  ColumnController.prototype.setBeans = function (loggerFactory) {
    this.logger = loggerFactory.create('ColumnController');
  };

  ColumnController.prototype.setFirstRightAndLastLeftPinned = function (source) {
    var lastLeft;
    var firstRight;

    if (this.gridOptionsWrapper.isEnableRtl()) {
      lastLeft = this.displayedLeftColumns ? this.displayedLeftColumns[0] : null;
      firstRight = this.displayedRightColumns ? this.displayedRightColumns[this.displayedRightColumns.length - 1] : null;
    } else {
      lastLeft = this.displayedLeftColumns ? this.displayedLeftColumns[this.displayedLeftColumns.length - 1] : null;
      firstRight = this.displayedRightColumns ? this.displayedRightColumns[0] : null;
    }

    this.gridColumns.forEach(function (column) {
      column.setLastLeftPinned(column === lastLeft, source);
      column.setFirstRightPinned(column === firstRight, source);
    });
  };

  ColumnController.prototype.autoSizeColumns = function (keys, source) {
    // because of column virtualisation, we can only do this function on columns that are
    // actually rendered, as non-rendered columns (outside the viewport and not rendered
    // due to column virtualisation) are not present. this can result in all rendered columns
    // getting narrowed, which in turn introduces more rendered columns on the RHS which
    // did not get autosized in the original run, leaving the visible grid with columns on
    // the LHS sized, but RHS no. so we keep looping through teh visible columns until
    // no more cols are available (rendered) to be resized
    var _this = this;

    if (source === void 0) {
      source = "api";
    } // keep track of which cols we have resized in here


    var columnsAutosized = []; // initialise with anything except 0 so that while loop executes at least once

    var changesThisTimeAround = -1;

    while (changesThisTimeAround !== 0) {
      changesThisTimeAround = 0;
      this.actionOnGridColumns(keys, function (column) {
        // if already autosized, skip it
        if (columnsAutosized.indexOf(column) >= 0) {
          return false;
        } // get how wide this col should be


        var preferredWidth = _this.autoWidthCalculator.getPreferredWidthForColumn(column); // preferredWidth = -1 if this col is not on the screen


        if (preferredWidth > 0) {
          var newWidth = _this.normaliseColumnWidth(column, preferredWidth);

          column.setActualWidth(newWidth, source);
          columnsAutosized.push(column);
          changesThisTimeAround++;
        }

        return true;
      }, source);
    }

    if (columnsAutosized.length > 0) {
      var event_2 = {
        type: events_1.Events.EVENT_COLUMN_RESIZED,
        columns: columnsAutosized,
        column: columnsAutosized.length === 1 ? columnsAutosized[0] : null,
        finished: true,
        api: this.gridApi,
        columnApi: this.columnApi,
        source: "autosizeColumns"
      };
      this.eventService.dispatchEvent(event_2);
    }
  };

  ColumnController.prototype.autoSizeColumn = function (key, source) {
    if (source === void 0) {
      source = "api";
    }

    if (key) {
      this.autoSizeColumns([key], source);
    }
  };

  ColumnController.prototype.autoSizeAllColumns = function (source) {
    if (source === void 0) {
      source = "api";
    }

    var allDisplayedColumns = this.getAllDisplayedColumns();
    this.autoSizeColumns(allDisplayedColumns, source);
  };

  ColumnController.prototype.getColumnsFromTree = function (rootColumns) {
    var result = [];
    recursiveFindColumns(rootColumns);
    return result;

    function recursiveFindColumns(childColumns) {
      for (var i = 0; i < childColumns.length; i++) {
        var child = childColumns[i];

        if (child instanceof column_1.Column) {
          result.push(child);
        } else if (child instanceof originalColumnGroup_1.OriginalColumnGroup) {
          recursiveFindColumns(child.getChildren());
        }
      }
    }
  };

  ColumnController.prototype.getAllDisplayedColumnGroups = function () {
    if (this.displayedLeftColumnTree && this.displayedRightColumnTree && this.displayedCentreColumnTree) {
      return this.displayedLeftColumnTree.concat(this.displayedCentreColumnTree).concat(this.displayedRightColumnTree);
    } else {
      return null;
    }
  }; // + columnSelectPanel


  ColumnController.prototype.getPrimaryColumnTree = function () {
    return this.primaryColumnTree;
  }; // + gridPanel -> for resizing the body and setting top margin


  ColumnController.prototype.getHeaderRowCount = function () {
    return this.gridHeaderRowCount;
  }; // + headerRenderer -> setting pinned body width


  ColumnController.prototype.getLeftDisplayedColumnGroups = function () {
    return this.displayedLeftColumnTree;
  }; // + headerRenderer -> setting pinned body width


  ColumnController.prototype.getRightDisplayedColumnGroups = function () {
    return this.displayedRightColumnTree;
  }; // + headerRenderer -> setting pinned body width


  ColumnController.prototype.getCenterDisplayedColumnGroups = function () {
    return this.displayedCentreColumnTree;
  };

  ColumnController.prototype.getDisplayedColumnGroups = function (type) {
    switch (type) {
      case column_1.Column.PINNED_LEFT:
        return this.getLeftDisplayedColumnGroups();

      case column_1.Column.PINNED_RIGHT:
        return this.getRightDisplayedColumnGroups();

      default:
        return this.getCenterDisplayedColumnGroups();
    }
  }; // gridPanel -> ensureColumnVisible


  ColumnController.prototype.isColumnDisplayed = function (column) {
    return this.getAllDisplayedColumns().indexOf(column) >= 0;
  }; // + csvCreator


  ColumnController.prototype.getAllDisplayedColumns = function () {
    return this.allDisplayedColumns;
  };

  ColumnController.prototype.getAllDisplayedVirtualColumns = function () {
    return this.allDisplayedVirtualColumns;
  };

  ColumnController.prototype.getDisplayedLeftColumnsForRow = function (rowNode) {
    if (!this.colSpanActive) {
      return this.displayedLeftColumns;
    } else {
      return this.getDisplayedColumnsForRow(rowNode, this.displayedLeftColumns);
    }
  };

  ColumnController.prototype.getDisplayedRightColumnsForRow = function (rowNode) {
    if (!this.colSpanActive) {
      return this.displayedRightColumns;
    } else {
      return this.getDisplayedColumnsForRow(rowNode, this.displayedRightColumns);
    }
  };

  ColumnController.prototype.getDisplayedColumnsForRow = function (rowNode, displayedColumns, filterCallback, emptySpaceBeforeColumn) {
    var result = [];
    var lastConsideredCol = null;

    var _loop_1 = function _loop_1(i) {
      var col = displayedColumns[i];
      var maxAllowedColSpan = displayedColumns.length - i;
      var colSpan = Math.min(col.getColSpan(rowNode), maxAllowedColSpan);
      var columnsToCheckFilter = [col];

      if (colSpan > 1) {
        var colsToRemove = colSpan - 1;

        for (var j = 1; j <= colsToRemove; j++) {
          columnsToCheckFilter.push(displayedColumns[i + j]);
        }

        i += colsToRemove;
      } // see which cols we should take out for column virtualisation


      var filterPasses;

      if (filterCallback) {
        // if user provided a callback, means some columns may not be in the viewport.
        // the user will NOT provide a callback if we are talking about pinned areas,
        // as pinned areas have no horizontal scroll and do not virtualise the columns.
        // if lots of columns, that means column spanning, and we set filterPasses = true
        // if one or more of the columns spanned pass the filter.
        filterPasses = false;
        columnsToCheckFilter.forEach(function (colForFilter) {
          if (filterCallback(colForFilter)) {
            filterPasses = true;
          }
        });
      } else {
        filterPasses = true;
      }

      if (filterPasses) {
        if (result.length === 0 && lastConsideredCol) {
          var gapBeforeColumn = emptySpaceBeforeColumn ? emptySpaceBeforeColumn(col) : false;

          if (gapBeforeColumn) {
            result.push(lastConsideredCol);
          }
        }

        result.push(col);
      }

      lastConsideredCol = col;
      out_i_1 = i;
    };

    var out_i_1;

    for (var i = 0; i < displayedColumns.length; i++) {
      _loop_1(i);

      i = out_i_1;
    }

    return result;
  }; // + rowRenderer
  // if we are not column spanning, this just returns back the virtual centre columns,
  // however if we are column spanning, then different rows can have different virtual
  // columns, so we have to work out the list for each individual row.


  ColumnController.prototype.getAllDisplayedCenterVirtualColumnsForRow = function (rowNode) {
    var _this = this;

    if (!this.colSpanActive) {
      return this.allDisplayedCenterVirtualColumns;
    }

    var emptySpaceBeforeColumn = function emptySpaceBeforeColumn(col) {
      return col.getLeft() > _this.viewportLeft;
    }; // if doing column virtualisation, then we filter based on the viewport.


    var filterCallback = this.suppressColumnVirtualisation ? null : this.isColumnInViewport.bind(this);
    return this.getDisplayedColumnsForRow(rowNode, this.displayedCenterColumns, filterCallback, emptySpaceBeforeColumn);
  };

  ColumnController.prototype.isColumnInViewport = function (col) {
    var columnLeft = col.getLeft();
    var columnRight = col.getLeft() + col.getActualWidth(); // adding 200 for buffer size, so some cols off viewport are rendered.
    // this helps horizontal scrolling so user rarely sees white space (unless
    // they scroll horizontally fast). however we are conservative, as the more
    // buffer the slower the vertical redraw speed

    var leftBounds = this.viewportLeft - 200;
    var rightBounds = this.viewportRight + 200;
    var columnToMuchLeft = columnLeft < leftBounds && columnRight < leftBounds;
    var columnToMuchRight = columnLeft > rightBounds && columnRight > rightBounds;
    return !columnToMuchLeft && !columnToMuchRight;
  }; // used by:
  // + angularGrid -> setting pinned body width
  // note: this should be cached


  ColumnController.prototype.getPinnedLeftContainerWidth = function () {
    return this.getWidthOfColsInList(this.displayedLeftColumns);
  }; // note: this should be cached


  ColumnController.prototype.getPinnedRightContainerWidth = function () {
    return this.getWidthOfColsInList(this.displayedRightColumns);
  };

  ColumnController.prototype.updatePrimaryColumnList = function (keys, masterList, actionIsAdd, columnCallback, eventType, source) {
    var _this = this;

    if (source === void 0) {
      source = "api";
    }

    if (!keys || utils_1._.missingOrEmpty(keys)) {
      return;
    }

    var atLeastOne = false;
    keys.forEach(function (key) {
      var columnToAdd = _this.getPrimaryColumn(key);

      if (!columnToAdd) {
        return;
      }

      if (actionIsAdd) {
        if (masterList.indexOf(columnToAdd) >= 0) {
          return;
        }

        masterList.push(columnToAdd);
      } else {
        if (masterList.indexOf(columnToAdd) < 0) {
          return;
        }

        utils_1._.removeFromArray(masterList, columnToAdd);
      }

      columnCallback(columnToAdd);
      atLeastOne = true;
    });

    if (!atLeastOne) {
      return;
    }

    if (this.autoGroupsNeedBuilding) {
      this.updateGridColumns();
    }

    this.updateDisplayedColumns(source);
    var event = {
      type: eventType,
      columns: masterList,
      column: masterList.length === 1 ? masterList[0] : null,
      api: this.gridApi,
      columnApi: this.columnApi,
      source: source
    };
    this.eventService.dispatchEvent(event);
  };

  ColumnController.prototype.setRowGroupColumns = function (colKeys, source) {
    if (source === void 0) {
      source = "api";
    }

    this.autoGroupsNeedBuilding = true;
    this.setPrimaryColumnList(colKeys, this.rowGroupColumns, events_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.setRowGroupActive.bind(this), source);
  };

  ColumnController.prototype.setRowGroupActive = function (active, column, source) {
    if (active === column.isRowGroupActive()) {
      return;
    }

    column.setRowGroupActive(active, source);

    if (!active && !this.gridOptionsWrapper.isSuppressMakeColumnVisibleAfterUnGroup()) {
      column.setVisible(true, source);
    }
  };

  ColumnController.prototype.addRowGroupColumn = function (key, source) {
    if (source === void 0) {
      source = "api";
    }

    if (key) {
      this.addRowGroupColumns([key], source);
    }
  };

  ColumnController.prototype.addRowGroupColumns = function (keys, source) {
    if (source === void 0) {
      source = "api";
    }

    this.autoGroupsNeedBuilding = true;
    this.updatePrimaryColumnList(keys, this.rowGroupColumns, true, this.setRowGroupActive.bind(this, true), events_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, source);
  };

  ColumnController.prototype.removeRowGroupColumns = function (keys, source) {
    if (source === void 0) {
      source = "api";
    }

    this.autoGroupsNeedBuilding = true;
    this.updatePrimaryColumnList(keys, this.rowGroupColumns, false, this.setRowGroupActive.bind(this, false), events_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, source);
  };

  ColumnController.prototype.removeRowGroupColumn = function (key, source) {
    if (source === void 0) {
      source = "api";
    }

    if (key) {
      this.removeRowGroupColumns([key], source);
    }
  };

  ColumnController.prototype.addPivotColumns = function (keys, source) {
    if (source === void 0) {
      source = "api";
    }

    this.updatePrimaryColumnList(keys, this.pivotColumns, true, function (column) {
      return column.setPivotActive(true, source);
    }, events_1.Events.EVENT_COLUMN_PIVOT_CHANGED, source);
  };

  ColumnController.prototype.setPivotColumns = function (colKeys, source) {
    if (source === void 0) {
      source = "api";
    }

    this.setPrimaryColumnList(colKeys, this.pivotColumns, events_1.Events.EVENT_COLUMN_PIVOT_CHANGED, function (added, column) {
      column.setPivotActive(added, source);
    }, source);
  };

  ColumnController.prototype.addPivotColumn = function (key, source) {
    if (source === void 0) {
      source = "api";
    }

    this.addPivotColumns([key], source);
  };

  ColumnController.prototype.removePivotColumns = function (keys, source) {
    if (source === void 0) {
      source = "api";
    }

    this.updatePrimaryColumnList(keys, this.pivotColumns, false, function (column) {
      return column.setPivotActive(false, source);
    }, events_1.Events.EVENT_COLUMN_PIVOT_CHANGED, source);
  };

  ColumnController.prototype.removePivotColumn = function (key, source) {
    if (source === void 0) {
      source = "api";
    }

    this.removePivotColumns([key], source);
  };

  ColumnController.prototype.setPrimaryColumnList = function (colKeys, masterList, eventName, columnCallback, source) {
    var _this = this;

    masterList.length = 0;

    if (utils_1._.exists(colKeys)) {
      colKeys.forEach(function (key) {
        var column = _this.getPrimaryColumn(key);

        if (column) {
          masterList.push(column);
        }
      });
    }

    this.primaryColumns.forEach(function (column) {
      var added = masterList.indexOf(column) >= 0;
      columnCallback(added, column);
    });

    if (this.autoGroupsNeedBuilding) {
      this.updateGridColumns();
    }

    this.updateDisplayedColumns(source);
    var event = {
      type: eventName,
      columns: masterList,
      column: masterList.length === 1 ? masterList[0] : null,
      api: this.gridApi,
      columnApi: this.columnApi,
      source: source
    };
    this.eventService.dispatchEvent(event);
  };

  ColumnController.prototype.setValueColumns = function (colKeys, source) {
    if (source === void 0) {
      source = "api";
    }

    this.setPrimaryColumnList(colKeys, this.valueColumns, events_1.Events.EVENT_COLUMN_VALUE_CHANGED, this.setValueActive.bind(this), source);
  };

  ColumnController.prototype.setValueActive = function (active, column, source) {
    if (active === column.isValueActive()) {
      return;
    }

    column.setValueActive(active, source);

    if (active && !column.getAggFunc()) {
      var defaultAggFunc = this.aggFuncService.getDefaultAggFunc(column);
      column.setAggFunc(defaultAggFunc);
    }
  };

  ColumnController.prototype.addValueColumns = function (keys, source) {
    if (source === void 0) {
      source = "api";
    }

    this.updatePrimaryColumnList(keys, this.valueColumns, true, this.setValueActive.bind(this, true), events_1.Events.EVENT_COLUMN_VALUE_CHANGED, source);
  };

  ColumnController.prototype.addValueColumn = function (colKey, source) {
    if (source === void 0) {
      source = "api";
    }

    if (colKey) {
      this.addValueColumns([colKey], source);
    }
  };

  ColumnController.prototype.removeValueColumn = function (colKey, source) {
    if (source === void 0) {
      source = "api";
    }

    this.removeValueColumns([colKey], source);
  };

  ColumnController.prototype.removeValueColumns = function (keys, source) {
    if (source === void 0) {
      source = "api";
    }

    this.updatePrimaryColumnList(keys, this.valueColumns, false, this.setValueActive.bind(this, false), events_1.Events.EVENT_COLUMN_VALUE_CHANGED, source);
  }; // returns the width we can set to this col, taking into consideration min and max widths


  ColumnController.prototype.normaliseColumnWidth = function (column, newWidth) {
    if (newWidth < column.getMinWidth()) {
      newWidth = column.getMinWidth();
    }

    if (column.isGreaterThanMax(newWidth)) {
      newWidth = column.getMaxWidth();
    }

    return newWidth;
  };

  ColumnController.prototype.getPrimaryOrGridColumn = function (key) {
    var column = this.getPrimaryColumn(key);

    if (column) {
      return column;
    } else {
      return this.getGridColumn(key);
    }
  };

  ColumnController.prototype.setColumnWidth = function (key, // @key - the column who's size we want to change
  newWidth, // @newWidth - width in pixels
  shiftKey, // @takeFromAdjacent - if user has 'shift' pressed, then pixels are taken from adjacent column
  finished, // @finished - ends up in the event, tells the user if more events are to come
  source) {
    if (source === void 0) {
      source = "api";
    }

    var col = this.getPrimaryOrGridColumn(key);

    if (!col) {
      return;
    }

    var sets = [];
    sets.push({
      width: newWidth,
      ratios: [1],
      columns: [col]
    }); // if user wants to do shift resize by default, then we invert the shift operation

    var defaultIsShift = this.gridOptionsWrapper.getColResizeDefault() === 'shift';

    if (defaultIsShift) {
      shiftKey = !shiftKey;
    }

    if (shiftKey) {
      var otherCol = this.getDisplayedColAfter(col);

      if (!otherCol) {
        return;
      }

      var widthDiff = col.getActualWidth() - newWidth;
      var otherColWidth = otherCol.getActualWidth() + widthDiff;
      sets.push({
        width: otherColWidth,
        ratios: [1],
        columns: [otherCol]
      });
    }

    this.resizeColumnSets(sets, finished, source);
  };

  ColumnController.prototype.checkMinAndMaxWidthsForSet = function (columnResizeSet) {
    var columns = columnResizeSet.columns,
        width = columnResizeSet.width; // every col has a min width, so sum them all up and see if we have enough room
    // for all the min widths

    var minWidthAccumulated = 0;
    var maxWidthAccumulated = 0;
    var maxWidthActive = true;
    columns.forEach(function (col) {
      minWidthAccumulated += col.getMinWidth();

      if (col.getMaxWidth() > 0) {
        maxWidthAccumulated += col.getMaxWidth();
      } else {
        // if at least one columns has no max width, it means the group of columns
        // then has no max width, as at least one column can take as much width as possible
        maxWidthActive = false;
      }
    });
    var minWidthPasses = width >= minWidthAccumulated;
    var maxWidthPasses = !maxWidthActive || width <= maxWidthAccumulated;
    return minWidthPasses && maxWidthPasses;
  }; // method takes sets of columns and resizes them. either all sets will be resized, or nothing
  // be resized. this is used for example when user tries to resize a group and holds shift key,
  // then both the current group (grows), and the adjacent group (shrinks), will get resized,
  // so that's two sets for this method.


  ColumnController.prototype.resizeColumnSets = function (resizeSets, finished, source) {
    var passMinMaxCheck = utils_1._.every(resizeSets, this.checkMinAndMaxWidthsForSet.bind(this));

    if (!passMinMaxCheck) {
      // even though we are not going to resize beyond min/max size, we still need to raise event when finished
      if (finished) {
        var columns = resizeSets && resizeSets.length > 0 ? resizeSets[0].columns : null;
        var event_3 = {
          type: events_1.Events.EVENT_COLUMN_RESIZED,
          columns: columns,
          column: columns && columns.length === 1 ? columns[0] : null,
          finished: finished,
          api: this.gridApi,
          columnApi: this.columnApi,
          source: source
        };
        this.eventService.dispatchEvent(event_3);
      }

      return; // don't resize!
    }

    var changedCols = [];
    var allCols = [];
    resizeSets.forEach(function (set) {
      var width = set.width,
          columns = set.columns,
          ratios = set.ratios; // keep track of pixels used, and last column gets the remaining,
      // to cater for rounding errors, and min width adjustments

      var newWidths = {};
      var finishedCols = {};
      columns.forEach(function (col) {
        return allCols.push(col);
      }); // the loop below goes through each col. if a col exceeds it's min/max width,
      // it then gets set to its min/max width and the column is removed marked as 'finished'
      // and the calculation is done again leaving this column out. take for example columns
      // {A, width: 50, maxWidth: 100}
      // {B, width: 50}
      // {C, width: 50}
      // and then the set is set to width 600 - on the first pass the grid tries to set each column
      // to 200. it checks A and sees 200 > 100 and so sets the width to 100. col A is then marked
      // as 'finished' and the calculation is done again with the remaining cols B and C, which end up
      // splitting the remaining 500 pixels.

      var finishedColsGrew = true;
      var loopCount = 0;

      var _loop_2 = function _loop_2() {
        loopCount++;

        if (loopCount > 1000) {
          // this should never happen, but in the future, someone might introduce a bug here,
          // so we stop the browser from hanging and report bug properly
          console.error('ag-Grid: infinite loop in resizeColumnSets');
          return "break";
        }

        finishedColsGrew = false;
        var subsetCols = [];
        var subsetRatios = [];
        var subsetRatioTotal = 0;
        var pixelsToDistribute = width;
        columns.forEach(function (col, index) {
          var thisColFinished = finishedCols[col.getId()];

          if (thisColFinished) {
            pixelsToDistribute -= newWidths[col.getId()];
          } else {
            subsetCols.push(col);
            var ratioThisCol = ratios[index];
            subsetRatioTotal += ratioThisCol;
            subsetRatios.push(ratioThisCol);
          }
        }); // because we are not using all of the ratios (cols can be missing),
        // we scale the ratio. if all columns are included, then subsetRatioTotal=1,
        // and so the ratioScale will be 1.

        var ratioScale = 1 / subsetRatioTotal;
        subsetCols.forEach(function (col, index) {
          var lastCol = index === subsetCols.length - 1;
          var colNewWidth;

          if (lastCol) {
            colNewWidth = pixelsToDistribute;
          } else {
            colNewWidth = Math.round(ratios[index] * width * ratioScale);
            pixelsToDistribute -= colNewWidth;
          }

          if (colNewWidth < col.getMinWidth()) {
            colNewWidth = col.getMinWidth();
            finishedCols[col.getId()] = true;
            finishedColsGrew = true;
          } else if (col.getMaxWidth() > 0 && colNewWidth > col.getMaxWidth()) {
            colNewWidth = col.getMaxWidth();
            finishedCols[col.getId()] = true;
            finishedColsGrew = true;
          }

          newWidths[col.getId()] = colNewWidth;
        });
      };

      while (finishedColsGrew) {
        var state_1 = _loop_2();

        if (state_1 === "break") break;
      }

      columns.forEach(function (col) {
        var newWidth = newWidths[col.getId()];

        if (col.getActualWidth() !== newWidth) {
          col.setActualWidth(newWidth);
          changedCols.push(col);
        }
      });
    }); // if no cols changed, then no need to update more or send event.

    var atLeastOneColChanged = changedCols.length > 0;

    if (atLeastOneColChanged) {
      this.setLeftValues(source);
      this.updateBodyWidths();
      this.checkDisplayedVirtualColumns();
    } // check for change first, to avoid unnecessary firing of events
    // however we always fire 'finished' events. this is important
    // when groups are resized, as if the group is changing slowly,
    // eg 1 pixel at a time, then each change will fire change events
    // in all the columns in the group, but only one with get the pixel.


    if (atLeastOneColChanged || finished) {
      var event_4 = {
        type: events_1.Events.EVENT_COLUMN_RESIZED,
        columns: allCols,
        column: allCols.length === 1 ? allCols[0] : null,
        finished: finished,
        api: this.gridApi,
        columnApi: this.columnApi,
        source: source
      };
      this.eventService.dispatchEvent(event_4);
    }
  };

  ColumnController.prototype.setColumnAggFunc = function (column, aggFunc, source) {
    if (source === void 0) {
      source = "api";
    }

    if (column) {
      column.setAggFunc(aggFunc);
      var event_5 = {
        type: events_1.Events.EVENT_COLUMN_VALUE_CHANGED,
        columns: [column],
        column: column,
        api: this.gridApi,
        columnApi: this.columnApi,
        source: source
      };
      this.eventService.dispatchEvent(event_5);
    }
  };

  ColumnController.prototype.moveRowGroupColumn = function (fromIndex, toIndex, source) {
    if (source === void 0) {
      source = "api";
    }

    var column = this.rowGroupColumns[fromIndex];
    this.rowGroupColumns.splice(fromIndex, 1);
    this.rowGroupColumns.splice(toIndex, 0, column);
    var event = {
      type: events_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED,
      columns: this.rowGroupColumns,
      column: this.rowGroupColumns.length === 1 ? this.rowGroupColumns[0] : null,
      api: this.gridApi,
      columnApi: this.columnApi,
      source: source
    };
    this.eventService.dispatchEvent(event);
  };

  ColumnController.prototype.moveColumns = function (columnsToMoveKeys, toIndex, source) {
    if (source === void 0) {
      source = "api";
    }

    this.columnAnimationService.start();

    if (toIndex > this.gridColumns.length - columnsToMoveKeys.length) {
      console.warn('ag-Grid: tried to insert columns in invalid location, toIndex = ' + toIndex);
      console.warn('ag-Grid: remember that you should not count the moving columns when calculating the new index');
      return;
    } // we want to pull all the columns out first and put them into an ordered list


    var columnsToMove = this.getGridColumns(columnsToMoveKeys);
    var failedRules = !this.doesMovePassRules(columnsToMove, toIndex);

    if (failedRules) {
      return;
    }

    utils_1._.moveInArray(this.gridColumns, columnsToMove, toIndex);

    this.updateDisplayedColumns(source);
    var event = {
      type: events_1.Events.EVENT_COLUMN_MOVED,
      columns: columnsToMove,
      column: columnsToMove.length === 1 ? columnsToMove[0] : null,
      toIndex: toIndex,
      api: this.gridApi,
      columnApi: this.columnApi,
      source: source
    };
    this.eventService.dispatchEvent(event);
    this.columnAnimationService.finish();
  };

  ColumnController.prototype.doesMovePassRules = function (columnsToMove, toIndex) {
    // make a copy of what the grid columns would look like after the move
    var proposedColumnOrder = this.gridColumns.slice();

    utils_1._.moveInArray(proposedColumnOrder, columnsToMove, toIndex); // then check that the new proposed order of the columns passes all rules


    if (!this.doesMovePassMarryChildren(proposedColumnOrder)) {
      return false;
    }

    if (!this.doesMovePassLockedPositions(proposedColumnOrder)) {
      return false;
    }

    return true;
  };

  ColumnController.prototype.doesMovePassLockedPositions = function (proposedColumnOrder) {
    var foundNonLocked = false;
    var rulePassed = true; // go though the cols, see if any non-locked appear before any locked

    proposedColumnOrder.forEach(function (col) {
      if (col.isLockPosition()) {
        if (foundNonLocked) {
          rulePassed = false;
        }
      } else {
        foundNonLocked = true;
      }
    });
    return rulePassed;
  };

  ColumnController.prototype.doesMovePassMarryChildren = function (allColumnsCopy) {
    var rulePassed = true;
    this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function (child) {
      if (!(child instanceof originalColumnGroup_1.OriginalColumnGroup)) {
        return;
      }

      var columnGroup = child;
      var marryChildren = columnGroup.getColGroupDef() && columnGroup.getColGroupDef().marryChildren;

      if (!marryChildren) {
        return;
      }

      var newIndexes = [];
      columnGroup.getLeafColumns().forEach(function (col) {
        var newColIndex = allColumnsCopy.indexOf(col);
        newIndexes.push(newColIndex);
      });
      var maxIndex = Math.max.apply(Math, newIndexes);
      var minIndex = Math.min.apply(Math, newIndexes); // spread is how far the first column in this group is away from the last column

      var spread = maxIndex - minIndex;
      var maxSpread = columnGroup.getLeafColumns().length - 1; // if the columns

      if (spread > maxSpread) {
        rulePassed = false;
      } // console.log(`maxIndex = ${maxIndex}, minIndex = ${minIndex}, spread = ${spread}, maxSpread = ${maxSpread}, fail = ${spread > (count-1)}`)
      // console.log(allColumnsCopy.map( col => col.getColDef().field).join(','));

    });
    return rulePassed;
  };

  ColumnController.prototype.moveColumn = function (key, toIndex, source) {
    if (source === void 0) {
      source = "api";
    }

    this.moveColumns([key], toIndex, source);
  };

  ColumnController.prototype.moveColumnByIndex = function (fromIndex, toIndex, source) {
    if (source === void 0) {
      source = "api";
    }

    var column = this.gridColumns[fromIndex];
    this.moveColumn(column, toIndex, source);
  }; // used by:
  // + angularGrid -> for setting body width
  // + rowController -> setting main row widths (when inserting and resizing)
  // need to cache this


  ColumnController.prototype.getBodyContainerWidth = function () {
    return this.bodyWidth;
  };

  ColumnController.prototype.getContainerWidth = function (pinned) {
    switch (pinned) {
      case column_1.Column.PINNED_LEFT:
        return this.leftWidth;

      case column_1.Column.PINNED_RIGHT:
        return this.rightWidth;

      default:
        return this.bodyWidth;
    }
  }; // after setColumnWidth or updateGroupsAndDisplayedColumns


  ColumnController.prototype.updateBodyWidths = function () {
    var newBodyWidth = this.getWidthOfColsInList(this.displayedCenterColumns);
    var newLeftWidth = this.getWidthOfColsInList(this.displayedLeftColumns);
    var newRightWidth = this.getWidthOfColsInList(this.displayedRightColumns); // this is used by virtual col calculation, for RTL only, as a change to body width can impact displayed
    // columns, due to RTL inverting the y coordinates

    this.bodyWidthDirty = this.bodyWidth !== newBodyWidth;
    var atLeastOneChanged = this.bodyWidth !== newBodyWidth || this.leftWidth !== newLeftWidth || this.rightWidth !== newRightWidth;

    if (atLeastOneChanged) {
      this.bodyWidth = newBodyWidth;
      this.leftWidth = newLeftWidth;
      this.rightWidth = newRightWidth; // when this fires, it is picked up by the gridPanel, which ends up in
      // gridPanel calling setWidthAndScrollPosition(), which in turn calls setVirtualViewportPosition()

      var event_6 = {
        type: events_1.Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(event_6);
    }
  }; // + rowController


  ColumnController.prototype.getValueColumns = function () {
    return this.valueColumns ? this.valueColumns : [];
  }; // + rowController


  ColumnController.prototype.getPivotColumns = function () {
    return this.pivotColumns ? this.pivotColumns : [];
  }; // + clientSideRowModel


  ColumnController.prototype.isPivotActive = function () {
    return this.pivotColumns && this.pivotColumns.length > 0 && this.pivotMode;
  }; // + toolPanel


  ColumnController.prototype.getRowGroupColumns = function () {
    return this.rowGroupColumns ? this.rowGroupColumns : [];
  }; // + rowController -> while inserting rows


  ColumnController.prototype.getDisplayedCenterColumns = function () {
    return this.displayedCenterColumns;
  }; // + rowController -> while inserting rows


  ColumnController.prototype.getDisplayedLeftColumns = function () {
    return this.displayedLeftColumns;
  };

  ColumnController.prototype.getDisplayedRightColumns = function () {
    return this.displayedRightColumns;
  };

  ColumnController.prototype.getDisplayedColumns = function (type) {
    switch (type) {
      case column_1.Column.PINNED_LEFT:
        return this.getDisplayedLeftColumns();

      case column_1.Column.PINNED_RIGHT:
        return this.getDisplayedRightColumns();

      default:
        return this.getDisplayedCenterColumns();
    }
  }; // used by:
  // + clientSideRowController -> sorting, building quick filter text
  // + headerRenderer -> sorting (clearing icon)


  ColumnController.prototype.getAllPrimaryColumns = function () {
    return this.primaryColumns ? this.primaryColumns.slice() : null;
  };

  ColumnController.prototype.getSecondaryColumns = function () {
    return this.secondaryColumns ? this.secondaryColumns.slice() : null;
  };

  ColumnController.prototype.getAllColumnsForQuickFilter = function () {
    return this.columnsForQuickFilter;
  }; // + moveColumnController


  ColumnController.prototype.getAllGridColumns = function () {
    return this.gridColumns;
  };

  ColumnController.prototype.isEmpty = function () {
    return utils_1._.missingOrEmpty(this.gridColumns);
  };

  ColumnController.prototype.isRowGroupEmpty = function () {
    return utils_1._.missingOrEmpty(this.rowGroupColumns);
  };

  ColumnController.prototype.setColumnVisible = function (key, visible, source) {
    if (source === void 0) {
      source = "api";
    }

    this.setColumnsVisible([key], visible, source);
  };

  ColumnController.prototype.setColumnsVisible = function (keys, visible, source) {
    var _this = this;

    if (source === void 0) {
      source = "api";
    }

    this.columnAnimationService.start();
    this.actionOnGridColumns(keys, function (column) {
      if (column.isVisible() !== visible) {
        column.setVisible(visible, source);
        return true;
      } else {
        return false;
      }
    }, source, function () {
      var event = {
        type: events_1.Events.EVENT_COLUMN_VISIBLE,
        visible: visible,
        column: null,
        columns: null,
        api: _this.gridApi,
        columnApi: _this.columnApi,
        source: source
      };
      return event;
    });
    this.columnAnimationService.finish();
  };

  ColumnController.prototype.setColumnPinned = function (key, pinned, source) {
    if (source === void 0) {
      source = "api";
    }

    if (key) {
      this.setColumnsPinned([key], pinned, source);
    }
  };

  ColumnController.prototype.setColumnsPinned = function (keys, pinned, source) {
    var _this = this;

    if (source === void 0) {
      source = "api";
    }

    if (this.gridOptionsWrapper.getDomLayout() === 'print') {
      console.warn("Changing the column pinning status is not allowed with domLayout='print'");
      return;
    }

    this.columnAnimationService.start();
    var actualPinned;

    if (pinned === true || pinned === column_1.Column.PINNED_LEFT) {
      actualPinned = column_1.Column.PINNED_LEFT;
    } else if (pinned === column_1.Column.PINNED_RIGHT) {
      actualPinned = column_1.Column.PINNED_RIGHT;
    } else {
      actualPinned = null;
    }

    this.actionOnGridColumns(keys, function (col) {
      if (col.getPinned() !== actualPinned) {
        col.setPinned(actualPinned);
        return true;
      } else {
        return false;
      }
    }, source, function () {
      var event = {
        type: events_1.Events.EVENT_COLUMN_PINNED,
        pinned: actualPinned,
        column: null,
        columns: null,
        api: _this.gridApi,
        columnApi: _this.columnApi,
        source: source
      };
      return event;
    });
    this.columnAnimationService.finish();
  }; // does an action on a set of columns. provides common functionality for looking up the
  // columns based on key, getting a list of effected columns, and then updated the event
  // with either one column (if it was just one col) or a list of columns
  // used by: autoResize, setVisible, setPinned


  ColumnController.prototype.actionOnGridColumns = function ( // the column keys this action will be on
  keys, // the action to do - if this returns false, the column was skipped
  // and won't be included in the event
  action, // should return back a column event of the right type
  source, createEvent) {
    var _this = this;

    if (utils_1._.missingOrEmpty(keys)) {
      return;
    }

    var updatedColumns = [];
    keys.forEach(function (key) {
      var column = _this.getGridColumn(key);

      if (!column) {
        return;
      } // need to check for false with type (ie !== instead of !=)
      // as not returning anything (undefined) would also be false


      var resultOfAction = action(column);

      if (resultOfAction !== false) {
        updatedColumns.push(column);
      }
    });

    if (updatedColumns.length === 0) {
      return;
    }

    this.updateDisplayedColumns(source);

    if (utils_1._.exists(createEvent) && createEvent) {
      var event_7 = createEvent();
      event_7.columns = updatedColumns;
      event_7.column = updatedColumns.length === 1 ? updatedColumns[0] : null;
      this.eventService.dispatchEvent(event_7);
    }
  };

  ColumnController.prototype.getDisplayedColBefore = function (col) {
    var allDisplayedColumns = this.getAllDisplayedColumns();
    var oldIndex = allDisplayedColumns.indexOf(col);

    if (oldIndex > 0) {
      return allDisplayedColumns[oldIndex - 1];
    } else {
      return null;
    }
  }; // used by:
  // + rowRenderer -> for navigation


  ColumnController.prototype.getDisplayedColAfter = function (col) {
    var allDisplayedColumns = this.getAllDisplayedColumns();
    var oldIndex = allDisplayedColumns.indexOf(col);

    if (oldIndex < allDisplayedColumns.length - 1) {
      return allDisplayedColumns[oldIndex + 1];
    } else {
      return null;
    }
  };

  ColumnController.prototype.getDisplayedGroupAfter = function (columnGroup) {
    // pick one col in this group at random
    var col = columnGroup.getDisplayedLeafColumns()[0];
    var requiredLevel = columnGroup.getOriginalColumnGroup().getLevel();

    while (true) {
      // keep moving to the next col, until we get to another group
      col = this.getDisplayedColAfter(col); // if no col after, means no group after

      if (!col) {
        return null;
      } // get group at same level as the one we are looking for


      var groupPointer = col.getParent();

      while (groupPointer.getOriginalColumnGroup().getLevel() !== requiredLevel) {
        groupPointer = groupPointer.getParent();
      }

      if (groupPointer !== columnGroup) {
        return groupPointer;
      }
    }
  };

  ColumnController.prototype.isPinningLeft = function () {
    return this.displayedLeftColumns.length > 0;
  };

  ColumnController.prototype.isPinningRight = function () {
    return this.displayedRightColumns.length > 0;
  };

  ColumnController.prototype.getPrimaryAndSecondaryAndAutoColumns = function () {
    var result = this.primaryColumns ? this.primaryColumns.slice(0) : [];

    if (this.groupAutoColumns && utils_1._.exists(this.groupAutoColumns)) {
      this.groupAutoColumns.forEach(function (col) {
        return result.push(col);
      });
    }

    if (this.secondaryColumnsPresent && this.secondaryColumns) {
      this.secondaryColumns.forEach(function (column) {
        return result.push(column);
      });
    }

    return result;
  };

  ColumnController.prototype.createStateItemFromColumn = function (column) {
    var rowGroupIndex = column.isRowGroupActive() ? this.rowGroupColumns.indexOf(column) : null;
    var pivotIndex = column.isPivotActive() ? this.pivotColumns.indexOf(column) : null;
    var aggFunc = column.isValueActive() ? column.getAggFunc() : null;
    return {
      colId: column.getColId(),
      hide: !column.isVisible(),
      aggFunc: aggFunc,
      width: column.getActualWidth(),
      pivotIndex: pivotIndex,
      pinned: column.getPinned(),
      rowGroupIndex: rowGroupIndex
    };
  };

  ColumnController.prototype.getColumnState = function () {
    if (utils_1._.missing(this.primaryColumns)) {
      return [];
    }

    var primaryColumnState = this.primaryColumns.map(this.createStateItemFromColumn.bind(this));
    var groupAutoColumnState = this.groupAutoColumns // if groupAutoCols, then include them
    ? this.groupAutoColumns.map(this.createStateItemFromColumn.bind(this)) // otherwise no
    : [];
    var columnStateList = groupAutoColumnState.concat(primaryColumnState);

    if (!this.pivotMode) {
      this.orderColumnStateList(columnStateList);
    }

    return columnStateList;
  };

  ColumnController.prototype.orderColumnStateList = function (columnStateList) {
    var gridColumnIds = this.gridColumns.map(function (column) {
      return column.getColId();
    });
    columnStateList.sort(function (itemA, itemB) {
      var posA = gridColumnIds.indexOf(itemA.colId);
      var posB = gridColumnIds.indexOf(itemB.colId);
      return posA - posB;
    });
  };

  ColumnController.prototype.resetColumnState = function (suppressEverythingEvent, source) {
    if (suppressEverythingEvent === void 0) {
      suppressEverythingEvent = false;
    }

    if (source === void 0) {
      source = "api";
    } // we can't use 'allColumns' as the order might of messed up, so get the primary ordered list


    var primaryColumns = this.getColumnsFromTree(this.primaryColumnTree);
    var columnStates = []; // we start at 1000, so if user has mix of rowGroup and group specified, it will work with both.
    // eg IF user has ColA.rowGroupIndex=0, ColB.rowGroupIndex=1, ColC.rowGroup=true,
    // THEN result will be ColA.rowGroupIndex=0, ColB.rowGroupIndex=1, ColC.rowGroup=-1000

    var letRowGroupIndex = 1000;
    var letPivotIndex = 1000;

    if (primaryColumns) {
      primaryColumns.forEach(function (column) {
        var rowGroupIndex = column.getColDef().rowGroupIndex;
        var rowGroup = column.getColDef().rowGroup;
        var pivotIndex = column.getColDef().pivotIndex;
        var pivot = column.getColDef().pivot;
        var stateItem = {
          colId: column.getColId(),
          aggFunc: column.getColDef().aggFunc,
          hide: column.getColDef().hide,
          pinned: column.getColDef().pinned,
          rowGroupIndex: rowGroupIndex,
          pivotIndex: column.getColDef().pivotIndex,
          width: column.getColDef().width
        };

        if (utils_1._.missing(rowGroupIndex) && rowGroup) {
          stateItem.rowGroupIndex = letRowGroupIndex++;
        }

        if (utils_1._.missing(pivotIndex) && pivot) {
          stateItem.pivotIndex = letPivotIndex++;
        }

        columnStates.push(stateItem);
      });
    }

    this.setColumnState(columnStates, suppressEverythingEvent, source);
  };

  ColumnController.prototype.setColumnState = function (columnState, suppressEverythingEvent, source) {
    var _this = this;

    if (suppressEverythingEvent === void 0) {
      suppressEverythingEvent = false;
    }

    if (source === void 0) {
      source = "api";
    }

    if (utils_1._.missingOrEmpty(this.primaryColumns)) {
      return false;
    }

    var columnStateBefore = this.getColumnState();
    this.autoGroupsNeedBuilding = true; // at the end below, this list will have all columns we got no state for

    var columnsWithNoState = this.primaryColumns.slice();
    this.rowGroupColumns = [];
    this.valueColumns = [];
    this.pivotColumns = [];
    var success = true;
    var rowGroupIndexes = {};
    var pivotIndexes = {};
    var autoGroupColumnStates = [];

    if (columnState) {
      columnState.forEach(function (stateItem) {
        // auto group columns are re-created so deferring syncing with ColumnState
        if (utils_1._.exists(_this.getAutoColumn(stateItem.colId))) {
          autoGroupColumnStates.push(stateItem);
          return;
        }

        var column = _this.getPrimaryColumn(stateItem.colId);

        if (!column) {
          console.warn('ag-grid: column ' + stateItem.colId + ' not found');
          success = false;
        } else {
          _this.syncColumnWithStateItem(column, stateItem, rowGroupIndexes, pivotIndexes, source);

          utils_1._.removeFromArray(columnsWithNoState, column);
        }
      });
    } // anything left over, we got no data for, so add in the column as non-value, non-rowGroup and hidden


    columnsWithNoState.forEach(this.syncColumnWithNoState.bind(this)); // sort the lists according to the indexes that were provided

    this.rowGroupColumns.sort(this.sortColumnListUsingIndexes.bind(this, rowGroupIndexes));
    this.pivotColumns.sort(this.sortColumnListUsingIndexes.bind(this, pivotIndexes));
    this.updateGridColumns(); // sync newly created auto group columns with ColumnState

    autoGroupColumnStates.forEach(function (stateItem) {
      var autoCol = _this.getAutoColumn(stateItem.colId);

      _this.syncColumnWithStateItem(autoCol, stateItem, rowGroupIndexes, pivotIndexes, source);
    });

    if (columnState) {
      var orderOfColIds_1 = columnState.map(function (stateItem) {
        return stateItem.colId;
      });
      this.gridColumns.sort(function (colA, colB) {
        var indexA = orderOfColIds_1.indexOf(colA.getId());
        var indexB = orderOfColIds_1.indexOf(colB.getId());
        return indexA - indexB;
      });
    }

    this.updateDisplayedColumns(source);

    if (!suppressEverythingEvent) {
      var event_8 = {
        type: events_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED,
        api: this.gridApi,
        columnApi: this.columnApi,
        source: source
      };
      this.eventService.dispatchEvent(event_8);
    }

    this.raiseColumnEvents(columnStateBefore, source);
    return success;
  };

  ColumnController.prototype.raiseColumnEvents = function (columnStateBefore, source) {
    var _this = this;

    if (this.gridOptionsWrapper.isSuppressSetColumnStateEvents()) {
      return;
    }

    var columnStateAfter = this.getColumnState(); // raises generic ColumnEvents where all columns are returned rather than what has changed

    var raiseEventWithAllColumns = function raiseEventWithAllColumns(eventType, idMapper, columns) {
      var unchanged = utils_1._.compareArrays(columnStateBefore.map(idMapper).sort(), columnStateAfter.map(idMapper).sort());

      if (unchanged) {
        return;
      } // returning all columns rather than what has changed!


      var event = {
        type: eventType,
        columns: columns,
        column: columns.length === 1 ? columns[0] : null,
        api: _this.gridApi,
        columnApi: _this.columnApi,
        source: source
      };

      _this.eventService.dispatchEvent(event);
    }; // determines which columns have changed according to supplied predicate


    var getChangedColumns = function getChangedColumns(changedPredicate) {
      var changedColumns = [];
      var columnStateBeforeMap = {};
      columnStateBefore.forEach(function (col) {
        columnStateBeforeMap[col.colId] = col;
      });

      _this.gridColumns.forEach(function (column) {
        var colStateBefore = columnStateBeforeMap[column.getColId()];

        if (!colStateBefore || changedPredicate(colStateBefore, column)) {
          changedColumns.push(column);
        }
      });

      return changedColumns;
    }; // generic ColumnEvents which return current column list


    var valueColumnIdMapper = function valueColumnIdMapper(cs) {
      return cs.colId + '-' + cs.aggFunc;
    };

    raiseEventWithAllColumns(events_1.Events.EVENT_COLUMN_VALUE_CHANGED, valueColumnIdMapper, this.valueColumns);

    var pivotColumnIdMapper = function pivotColumnIdMapper(cs) {
      return cs.colId + '-' + cs.pivotIndex;
    };

    raiseEventWithAllColumns(events_1.Events.EVENT_COLUMN_PIVOT_CHANGED, pivotColumnIdMapper, this.pivotColumns);

    var rowGroupColumnIdMapper = function rowGroupColumnIdMapper(cs) {
      return cs.colId + '-' + cs.rowGroupIndex;
    };

    raiseEventWithAllColumns(events_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, rowGroupColumnIdMapper, this.rowGroupColumns); // specific ColumnEvents which return what's changed

    var pinnedChangePredicate = function pinnedChangePredicate(cs, c) {
      return cs.pinned !== c.getPinned();
    };

    this.raiseColumnPinnedEvent(getChangedColumns(pinnedChangePredicate), source);

    var visibilityChangePredicate = function visibilityChangePredicate(cs, c) {
      return cs.hide === c.isVisible();
    };

    var cols = getChangedColumns(visibilityChangePredicate);
    this.raiseColumnVisibleEvent(cols, source);

    var resizeChangePredicate = function resizeChangePredicate(cs, c) {
      return cs.width !== c.getActualWidth();
    };

    this.raiseColumnResizeEvent(getChangedColumns(resizeChangePredicate), source); // special handling for moved column events

    this.raiseColumnMovedEvent(columnStateBefore, source);
  };

  ColumnController.prototype.raiseColumnPinnedEvent = function (changedColumns, source) {
    if (changedColumns.length > 0) {
      var event_9 = {
        type: events_1.Events.EVENT_COLUMN_PINNED,
        pinned: null,
        columns: changedColumns,
        column: null,
        api: this.gridApi,
        columnApi: this.columnApi,
        source: source
      };
      this.eventService.dispatchEvent(event_9);
    }
  };

  ColumnController.prototype.raiseColumnVisibleEvent = function (changedColumns, source) {
    if (changedColumns.length > 0) {
      var event_10 = {
        type: events_1.Events.EVENT_COLUMN_VISIBLE,
        visible: undefined,
        columns: changedColumns,
        column: null,
        api: this.gridApi,
        columnApi: this.columnApi,
        source: source
      };
      this.eventService.dispatchEvent(event_10);
    }
  };

  ColumnController.prototype.raiseColumnResizeEvent = function (changedColumns, source) {
    if (changedColumns.length > 0) {
      var event_11 = {
        type: events_1.Events.EVENT_COLUMN_RESIZED,
        columns: changedColumns,
        column: null,
        finished: true,
        api: this.gridApi,
        columnApi: this.columnApi,
        source: source
      };
      this.eventService.dispatchEvent(event_11);
    }
  };

  ColumnController.prototype.raiseColumnMovedEvent = function (columnStateBefore, source) {
    var movedColumns = [];
    var columnStateAfter = this.getColumnState();

    var _loop_3 = function _loop_3(i) {
      var before = columnStateBefore[i];
      var after = columnStateAfter[i]; // don't consider column if reintroduced or hidden

      if (!before || after.hide) {
        return "continue";
      }

      if (before.colId !== after.colId) {
        var predicate = function predicate(column) {
          return column.getColId() === after.colId;
        };

        var movedColumn = utils_1._.find(this_1.allDisplayedColumns, predicate);

        movedColumns.push(movedColumn);
      }
    };

    var this_1 = this;

    for (var i = 0; i < columnStateAfter.length; i++) {
      _loop_3(i);
    }

    if (movedColumns.length > 0) {
      var event_12 = {
        type: events_1.Events.EVENT_COLUMN_MOVED,
        columns: movedColumns,
        column: null,
        toIndex: undefined,
        api: this.gridApi,
        columnApi: this.columnApi,
        source: source
      };
      this.eventService.dispatchEvent(event_12);
    }
  };

  ColumnController.prototype.sortColumnListUsingIndexes = function (indexes, colA, colB) {
    var indexA = indexes[colA.getId()];
    var indexB = indexes[colB.getId()];
    return indexA - indexB;
  };

  ColumnController.prototype.syncColumnWithNoState = function (column, source) {
    column.setVisible(false, source);
    column.setAggFunc(null);
    column.setPinned(null);
    column.setRowGroupActive(false, source);
    column.setPivotActive(false, source);
    column.setValueActive(false, source);
  };

  ColumnController.prototype.syncColumnWithStateItem = function (column, stateItem, rowGroupIndexes, pivotIndexes, source) {
    if (!column) {
      return;
    } // following ensures we are left with boolean true or false, eg converts (null, undefined, 0) all to true


    column.setVisible(!stateItem.hide, source); // sets pinned to 'left' or 'right'

    column.setPinned(stateItem.pinned); // if width provided and valid, use it, otherwise stick with the old width

    var minColWidth = this.gridOptionsWrapper.getMinColWidth();

    if (stateItem.width && minColWidth && stateItem.width >= minColWidth) {
      column.setActualWidth(stateItem.width, source);
    }

    if (typeof stateItem.aggFunc === 'string') {
      column.setAggFunc(stateItem.aggFunc);
      column.setValueActive(true, source);
      this.valueColumns.push(column);
    } else {
      if (utils_1._.exists(stateItem.aggFunc)) {
        console.warn('ag-Grid: stateItem.aggFunc must be a string. if using your own aggregation ' + 'functions, register the functions first before using them in get/set state. This is because it is' + 'intended for the column state to be stored and retrieved as simple JSON.');
      }

      column.setAggFunc(null);
      column.setValueActive(false, source);
    }

    if (typeof stateItem.rowGroupIndex === 'number') {
      this.rowGroupColumns.push(column);
      column.setRowGroupActive(true, source);
      rowGroupIndexes[column.getId()] = stateItem.rowGroupIndex;
    } else {
      column.setRowGroupActive(false, source);
    }

    if (typeof stateItem.pivotIndex === 'number') {
      this.pivotColumns.push(column);
      column.setPivotActive(true, source);
      pivotIndexes[column.getId()] = stateItem.pivotIndex;
    } else {
      column.setPivotActive(false, source);
    }
  };

  ColumnController.prototype.getGridColumns = function (keys) {
    return this.getColumns(keys, this.getGridColumn.bind(this));
  };

  ColumnController.prototype.getColumns = function (keys, columnLookupCallback) {
    var foundColumns = [];

    if (keys) {
      keys.forEach(function (key) {
        var column = columnLookupCallback(key);

        if (column) {
          foundColumns.push(column);
        }
      });
    }

    return foundColumns;
  }; // used by growGroupPanel


  ColumnController.prototype.getColumnWithValidation = function (key) {
    var column = this.getPrimaryColumn(key);

    if (!column) {
      console.warn('ag-Grid: could not find column ' + column);
    }

    return column;
  };

  ColumnController.prototype.getPrimaryColumn = function (key) {
    return this.getColumn(key, this.primaryColumns);
  };

  ColumnController.prototype.getGridColumn = function (key) {
    return this.getColumn(key, this.gridColumns);
  };

  ColumnController.prototype.getColumn = function (key, columnList) {
    if (!key) {
      return null;
    }

    for (var i = 0; i < columnList.length; i++) {
      if (this.columnsMatch(columnList[i], key)) {
        return columnList[i];
      }
    }

    return this.getAutoColumn(key);
  };

  ColumnController.prototype.getAutoColumn = function (key) {
    var _this = this;

    if (!this.groupAutoColumns || !utils_1._.exists(this.groupAutoColumns) || utils_1._.missing(this.groupAutoColumns)) {
      return null;
    }

    return utils_1._.find(this.groupAutoColumns, function (groupCol) {
      return _this.columnsMatch(groupCol, key);
    });
  };

  ColumnController.prototype.columnsMatch = function (column, key) {
    var columnMatches = column === key;
    var colDefMatches = column.getColDef() === key;
    var idMatches = column.getColId() == key;
    return columnMatches || colDefMatches || idMatches;
  };

  ColumnController.prototype.getDisplayNameForColumn = function (column, location, includeAggFunc) {
    if (includeAggFunc === void 0) {
      includeAggFunc = false;
    }

    if (!column) {
      return null;
    }

    var headerName = this.getHeaderName(column.getColDef(), column, null, null, location);

    if (includeAggFunc) {
      return this.wrapHeaderNameWithAggFunc(column, headerName);
    } else {
      return headerName;
    }
  };

  ColumnController.prototype.getDisplayNameForOriginalColumnGroup = function (columnGroup, originalColumnGroup, location) {
    var colGroupDef = originalColumnGroup ? originalColumnGroup.getColGroupDef() : null;

    if (colGroupDef) {
      return this.getHeaderName(colGroupDef, null, columnGroup, originalColumnGroup, location);
    } else {
      return null;
    }
  };

  ColumnController.prototype.getDisplayNameForColumnGroup = function (columnGroup, location) {
    return this.getDisplayNameForOriginalColumnGroup(columnGroup, columnGroup.getOriginalColumnGroup(), location);
  }; // location is where the column is going to appear, ie who is calling us


  ColumnController.prototype.getHeaderName = function (colDef, column, columnGroup, originalColumnGroup, location) {
    var headerValueGetter = colDef.headerValueGetter;

    if (headerValueGetter) {
      var params = {
        colDef: colDef,
        column: column,
        columnGroup: columnGroup,
        originalColumnGroup: originalColumnGroup,
        location: location,
        api: this.gridOptionsWrapper.getApi(),
        context: this.gridOptionsWrapper.getContext()
      };

      if (typeof headerValueGetter === 'function') {
        // valueGetter is a function, so just call it
        return headerValueGetter(params);
      } else if (typeof headerValueGetter === 'string') {
        // valueGetter is an expression, so execute the expression
        return this.expressionService.evaluate(headerValueGetter, params);
      } else {
        console.warn('ag-grid: headerValueGetter must be a function or a string');
        return '';
      }
    } else if (colDef.headerName != null) {
      return colDef.headerName;
    } else if (colDef.field) {
      return utils_1._.camelCaseToHumanText(colDef.field);
    } else {
      return '';
    }
  };
  /*
      private getHeaderGroupName(columnGroup: ColumnGroup): string {
          let colGroupDef = columnGroup.getOriginalColumnGroup().getColGroupDef();
          let headerValueGetter = colGroupDef.headerValueGetter;
           if (headerValueGetter) {
              let params = {
                  columnGroup: columnGroup,
                  colDef: colGroupDef,
                  api: this.gridOptionsWrapper.getApi(),
                  context: this.gridOptionsWrapper.getContext()
              };
               if (typeof headerValueGetter === 'function') {
                  // valueGetter is a function, so just call it
                  return headerValueGetter(params);
              } else if (typeof headerValueGetter === 'string') {
                  // valueGetter is an expression, so execute the expression
                  return this.expressionService.evaluate(headerValueGetter, params);
              } else {
                  console.warn('ag-grid: headerValueGetter must be a function or a string');
                  return '';
              }
          } else {
              return colGroupDef.headerName;
          }
      }
  */


  ColumnController.prototype.wrapHeaderNameWithAggFunc = function (column, headerName) {
    if (this.gridOptionsWrapper.isSuppressAggFuncInHeader()) {
      return headerName;
    } // only columns with aggregation active can have aggregations


    var pivotValueColumn = column.getColDef().pivotValueColumn;

    var pivotActiveOnThisColumn = utils_1._.exists(pivotValueColumn);

    var aggFunc = null;
    var aggFuncFound; // otherwise we have a measure that is active, and we are doing aggregation on it

    if (pivotActiveOnThisColumn) {
      aggFunc = pivotValueColumn ? pivotValueColumn.getAggFunc() : null;
      aggFuncFound = true;
    } else {
      var measureActive = column.isValueActive();
      var aggregationPresent = this.pivotMode || !this.isRowGroupEmpty();

      if (measureActive && aggregationPresent) {
        aggFunc = column.getAggFunc();
        aggFuncFound = true;
      } else {
        aggFuncFound = false;
      }
    }

    if (aggFuncFound) {
      var aggFuncString = typeof aggFunc === 'string' ? aggFunc : 'func';
      var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
      var aggFuncStringTranslated = localeTextFunc(aggFuncString, aggFuncString);
      return aggFuncStringTranslated + "(" + headerName + ")";
    } else {
      return headerName;
    }
  }; // returns the group with matching colId and instanceId. If instanceId is missing,
  // matches only on the colId.


  ColumnController.prototype.getColumnGroup = function (colId, instanceId) {
    if (!colId) {
      return null;
    }

    if (colId instanceof columnGroup_1.ColumnGroup) {
      return colId;
    }

    var allColumnGroups = this.getAllDisplayedColumnGroups();
    var checkInstanceId = typeof instanceId === 'number';
    var result = null;
    this.columnUtils.depthFirstAllColumnTreeSearch(allColumnGroups, function (child) {
      if (child instanceof columnGroup_1.ColumnGroup) {
        var columnGroup = child;
        var matched = void 0;

        if (checkInstanceId) {
          matched = colId === columnGroup.getGroupId() && instanceId === columnGroup.getInstanceId();
        } else {
          matched = colId === columnGroup.getGroupId();
        }

        if (matched) {
          result = columnGroup;
        }
      }
    });
    return result;
  };

  ColumnController.prototype.isReady = function () {
    return this.ready;
  };

  ColumnController.prototype.createValueColumns = function (source, oldPrimaryColumns) {
    this.valueColumns = this.extractColumns(oldPrimaryColumns, this.valueColumns, function (col, flag) {
      return col.setValueActive(flag, source);
    }, // aggFunc doesn't have index variant, cos order of value cols doesn't matter, so always return null
    function () {
      return null;
    }, // aggFunc is a string, so return it's existence
    function (colDef) {
      return !!colDef.aggFunc;
    }); // all new columns added will have aggFunc missing, so set it to what is in the colDef

    this.valueColumns.forEach(function (col) {
      if (!col.getAggFunc()) {
        col.setAggFunc(col.getColDef().aggFunc);
      }
    });
  };

  ColumnController.prototype.extractRowGroupColumns = function (source, oldPrimaryColumns) {
    this.rowGroupColumns = this.extractColumns(oldPrimaryColumns, this.rowGroupColumns, function (col, flag) {
      return col.setRowGroupActive(flag, source);
    }, function (colDef) {
      return colDef.rowGroupIndex;
    }, function (colDef) {
      return colDef.rowGroup;
    });
  };

  ColumnController.prototype.extractColumns = function (oldPrimaryColumns, previousCols, setFlagFunc, getIndexFunc, getValueFunc) {
    var _this = this;

    if (!previousCols) {
      previousCols = [];
    } // remove cols that no longer exist


    var colPresentInPrimaryFunc = function colPresentInPrimaryFunc(col) {
      return _this.primaryColumns.indexOf(col) >= 0;
    };

    var colMissingFromPrimaryFunc = function colMissingFromPrimaryFunc(col) {
      return _this.primaryColumns.indexOf(col) < 0;
    };

    var colNewFunc = function colNewFunc(col) {
      return !oldPrimaryColumns || oldPrimaryColumns.indexOf(col) < 0;
    };

    var removedCols = previousCols.filter(colMissingFromPrimaryFunc);
    var existingCols = previousCols.filter(colPresentInPrimaryFunc);
    var newPrimaryCols = this.primaryColumns.filter(colNewFunc);
    removedCols.forEach(function (col) {
      return setFlagFunc(col, false);
    });
    var newCols = []; // we only want to work on new columns, as old columns already got processed first time around
    // pull out items with xxxIndex

    newPrimaryCols.forEach(function (col) {
      var index = getIndexFunc(col.getColDef());

      if (typeof index === 'number') {
        newCols.push(col);
      }
    }); // then sort them

    newCols.sort(function (colA, colB) {
      var indexA = getIndexFunc(colA.getColDef());
      var indexB = getIndexFunc(colB.getColDef());

      if (indexA === indexB) {
        return 0;
      } else if (indexA < indexB) {
        return -1;
      } else {
        return 1;
      }
    }); // now just pull out items xxx (boolean value), they will be added at the end
    // after the indexed ones, but in the order the columns appear

    newPrimaryCols.forEach(function (col) {
      var booleanValue = getValueFunc(col.getColDef());

      if (booleanValue) {
        // if user already specified xxxIndex then we skip it as this col already included
        if (newCols.indexOf(col) >= 0) {
          return;
        }

        newCols.push(col);
      }
    });
    newCols.forEach(function (col) {
      return setFlagFunc(col, true);
    });
    var res = existingCols.concat(newCols);
    return res;
  };

  ColumnController.prototype.extractPivotColumns = function (source, oldPrimaryColumns) {
    this.pivotColumns = this.extractColumns(oldPrimaryColumns, this.pivotColumns, function (col, flag) {
      return col.setPivotActive(flag, source);
    }, function (colDef) {
      return colDef.pivotIndex;
    }, function (colDef) {
      return colDef.pivot;
    });
  };

  ColumnController.prototype.resetColumnGroupState = function (source) {
    if (source === void 0) {
      source = "api";
    }

    var stateItems = [];
    this.columnUtils.depthFirstOriginalTreeSearch(null, this.primaryColumnTree, function (child) {
      if (child instanceof originalColumnGroup_1.OriginalColumnGroup) {
        var groupState = {
          groupId: child.getGroupId(),
          open: child.getColGroupDef().openByDefault
        };
        stateItems.push(groupState);
      }
    });
    this.setColumnGroupState(stateItems, source);
  };

  ColumnController.prototype.getColumnGroupState = function () {
    var columnGroupState = [];
    this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function (node) {
      if (node instanceof originalColumnGroup_1.OriginalColumnGroup) {
        var originalColumnGroup = node;
        columnGroupState.push({
          groupId: originalColumnGroup.getGroupId(),
          open: originalColumnGroup.isExpanded()
        });
      }
    });
    return columnGroupState;
  };

  ColumnController.prototype.setColumnGroupState = function (stateItems, source) {
    var _this = this;

    if (source === void 0) {
      source = "api";
    }

    this.columnAnimationService.start();
    var impactedGroups = [];
    stateItems.forEach(function (stateItem) {
      var groupKey = stateItem.groupId;
      var newValue = stateItem.open;

      var originalColumnGroup = _this.getOriginalColumnGroup(groupKey);

      if (!originalColumnGroup) {
        return;
      }

      if (originalColumnGroup.isExpanded() === newValue) {
        return;
      }

      _this.logger.log('columnGroupOpened(' + originalColumnGroup.getGroupId() + ',' + newValue + ')');

      originalColumnGroup.setExpanded(newValue);
      impactedGroups.push(originalColumnGroup);
    });
    this.updateGroupsAndDisplayedColumns(source);
    impactedGroups.forEach(function (originalColumnGroup) {
      var event = {
        type: events_1.Events.EVENT_COLUMN_GROUP_OPENED,
        columnGroup: originalColumnGroup,
        api: _this.gridApi,
        columnApi: _this.columnApi
      };

      _this.eventService.dispatchEvent(event);
    });
    this.columnAnimationService.finish();
  }; // called by headerRenderer - when a header is opened or closed


  ColumnController.prototype.setColumnGroupOpened = function (key, newValue, source) {
    if (source === void 0) {
      source = "api";
    }

    var keyAsString;

    if (key instanceof originalColumnGroup_1.OriginalColumnGroup) {
      keyAsString = key.getId();
    } else {
      keyAsString = key;
    }

    this.setColumnGroupState([{
      groupId: keyAsString,
      open: newValue
    }], source);
  };

  ColumnController.prototype.getOriginalColumnGroup = function (key) {
    if (key instanceof originalColumnGroup_1.OriginalColumnGroup) {
      return key;
    }

    if (typeof key !== 'string') {
      console.error('ag-Grid: group key must be a string');
    } // otherwise, search for the column group by id


    var res = null;
    this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function (node) {
      if (node instanceof originalColumnGroup_1.OriginalColumnGroup) {
        var originalColumnGroup = node;

        if (originalColumnGroup.getId() === key) {
          res = originalColumnGroup;
        }
      }
    });
    return res;
  };

  ColumnController.prototype.calculateColumnsForDisplay = function () {
    var _this = this;

    var columnsForDisplay;

    if (this.pivotMode && !this.secondaryColumnsPresent) {
      // pivot mode is on, but we are not pivoting, so we only
      // show columns we are aggregating on
      columnsForDisplay = utils_1._.filter(this.gridColumns, function (column) {
        var isAutoGroupCol = _this.groupAutoColumns && _this.groupAutoColumns.indexOf(column) >= 0;
        var isValueCol = _this.valueColumns && _this.valueColumns.indexOf(column) >= 0;
        return isAutoGroupCol || isValueCol;
      });
    } else {
      // otherwise continue as normal. this can be working on the primary
      // or secondary columns, whatever the gridColumns are set to
      columnsForDisplay = utils_1._.filter(this.gridColumns, function (column) {
        // keep col if a) it's auto-group or b) it's visible
        var isAutoGroupCol = _this.groupAutoColumns && _this.groupAutoColumns.indexOf(column) >= 0;
        return isAutoGroupCol || column.isVisible();
      });
    }

    return columnsForDisplay;
  };

  ColumnController.prototype.checkColSpanActiveInCols = function (columns) {
    var result = false;
    columns.forEach(function (col) {
      if (utils_1._.exists(col.getColDef().colSpan)) {
        result = true;
      }
    });
    return result;
  };

  ColumnController.prototype.calculateColumnsForGroupDisplay = function () {
    var _this = this;

    this.groupDisplayColumns = [];

    var checkFunc = function checkFunc(col) {
      var colDef = col.getColDef();

      if (colDef && utils_1._.exists(colDef.showRowGroup)) {
        _this.groupDisplayColumns.push(col);
      }
    };

    this.gridColumns.forEach(checkFunc);

    if (this.groupAutoColumns) {
      this.groupAutoColumns.forEach(checkFunc);
    }
  };

  ColumnController.prototype.getGroupDisplayColumns = function () {
    return this.groupDisplayColumns;
  };

  ColumnController.prototype.updateDisplayedColumns = function (source) {
    var columnsForDisplay = this.calculateColumnsForDisplay();
    this.buildDisplayedTrees(columnsForDisplay);
    this.calculateColumnsForGroupDisplay(); // this is also called when a group is opened or closed

    this.updateGroupsAndDisplayedColumns(source);
    this.setFirstRightAndLastLeftPinned(source);
  };

  ColumnController.prototype.isSecondaryColumnsPresent = function () {
    return this.secondaryColumnsPresent;
  };

  ColumnController.prototype.setSecondaryColumns = function (colDefs, source) {
    if (source === void 0) {
      source = "api";
    }

    var newColsPresent = colDefs && colDefs.length > 0; // if not cols passed, and we had to cols anyway, then do nothing

    if (!newColsPresent && !this.secondaryColumnsPresent) {
      return;
    }

    if (newColsPresent) {
      this.processSecondaryColumnDefinitions(colDefs);
      var balancedTreeResult = this.columnFactory.createColumnTree(colDefs, false);
      this.secondaryBalancedTree = balancedTreeResult.columnTree;
      this.secondaryHeaderRowCount = balancedTreeResult.treeDept + 1;
      this.secondaryColumns = this.getColumnsFromTree(this.secondaryBalancedTree);
      this.secondaryColumnsPresent = true;
    } else {
      this.secondaryBalancedTree = null;
      this.secondaryHeaderRowCount = -1;
      this.secondaryColumns = null;
      this.secondaryColumnsPresent = false;
    }

    this.updateGridColumns();
    this.updateDisplayedColumns(source);
  };

  ColumnController.prototype.processSecondaryColumnDefinitions = function (colDefs) {
    var columnCallback = this.gridOptionsWrapper.getProcessSecondaryColDefFunc();
    var groupCallback = this.gridOptionsWrapper.getProcessSecondaryColGroupDefFunc();

    if (!columnCallback && !groupCallback) {
      return undefined;
    }

    if (colDefs) {
      searchForColDefs(colDefs);
    }

    function searchForColDefs(colDefs2) {
      colDefs2.forEach(function (abstractColDef) {
        var isGroup = utils_1._.exists(abstractColDef.children);

        if (isGroup) {
          var colGroupDef = abstractColDef;

          if (groupCallback) {
            groupCallback(colGroupDef);
          }

          searchForColDefs(colGroupDef.children);
        } else {
          var colDef = abstractColDef;

          if (columnCallback) {
            columnCallback(colDef);
          }
        }
      });
    }
  }; // called from: setColumnState, setColumnDefs, setSecondaryColumns


  ColumnController.prototype.updateGridColumns = function () {
    if (this.gridColsArePrimary) {
      this.lastPrimaryOrder = this.gridColumns;
    }

    if (this.secondaryColumns && this.secondaryBalancedTree) {
      this.gridBalancedTree = this.secondaryBalancedTree.slice();
      this.gridHeaderRowCount = this.secondaryHeaderRowCount;
      this.gridColumns = this.secondaryColumns.slice();
      this.gridColsArePrimary = false;
    } else {
      this.gridBalancedTree = this.primaryColumnTree.slice();
      this.gridHeaderRowCount = this.primaryHeaderRowCount;
      this.gridColumns = this.primaryColumns.slice();
      this.gridColsArePrimary = true; // updateGridColumns gets called after user adds a row group. we want to maintain the order of the columns
      // when this happens (eg if user moved a column) rather than revert back to the original column order.
      // likewise if changing in/out of pivot mode, we want to maintain the order of the primary cols

      this.orderGridColsLikeLastPrimary();
    }

    this.addAutoGroupToGridColumns();
    this.autoRowHeightColumns = this.gridColumns.filter(function (col) {
      return col.getColDef().autoHeight;
    });
    this.putFixedColumnsFirst();
    this.setupQuickFilterColumns();
    this.clearDisplayedColumns();
    this.colSpanActive = this.checkColSpanActiveInCols(this.gridColumns);
    var event = {
      type: events_1.Events.EVENT_GRID_COLUMNS_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(event);
  };

  ColumnController.prototype.orderGridColsLikeLastPrimary = function () {
    var _this = this;

    if (utils_1._.missing(this.lastPrimaryOrder)) {
      return;
    } // only do the sort if at least one column is accounted for. columns will be not accounted for
    // if changing from secondary to primary columns


    var noColsFound = true;
    this.gridColumns.forEach(function (col) {
      if (_this.lastPrimaryOrder.indexOf(col) >= 0) {
        noColsFound = false;
      }
    });

    if (noColsFound) {
      return;
    } // order cols in the same order as before. we need to make sure that all
    // cols still exists, so filter out any that no longer exist.


    var oldColsOrdered = this.lastPrimaryOrder.filter(function (col) {
      return _this.gridColumns.indexOf(col) >= 0;
    });
    var newColsOrdered = this.gridColumns.filter(function (col) {
      return oldColsOrdered.indexOf(col) < 0;
    }); // add in the new columns, at the end (if no group), or at the end of the group (if a group)

    var newGridColumns = oldColsOrdered.slice();
    newColsOrdered.forEach(function (newCol) {
      var parent = newCol.getOriginalParent(); // if no parent, means we are not grouping, so just add the column to the end

      if (!parent) {
        newGridColumns.push(newCol);
        return;
      } // find the group the column belongs to. if no siblings at the current level (eg col in group on it's
      // own) then go up one level and look for siblings there.


      var siblings = [];

      while (!siblings.length && parent) {
        var leafCols = parent.getLeafColumns();
        leafCols.forEach(function (leafCol) {
          var presentInNewGriColumns = newGridColumns.indexOf(leafCol) >= 0;
          var noYetInSiblings = siblings.indexOf(leafCol) < 0;

          if (presentInNewGriColumns && noYetInSiblings) {
            siblings.push(leafCol);
          }
        });
        parent = parent.getOriginalParent();
      } // if no siblings exist at any level, this means the col is in a group (or parent groups) on it's own


      if (!siblings.length) {
        newGridColumns.push(newCol);
        return;
      } // find index of last column in the group


      var indexes = siblings.map(function (col) {
        return newGridColumns.indexOf(col);
      });
      var lastIndex = Math.max.apply(Math, indexes);

      utils_1._.insertIntoArray(newGridColumns, newCol, lastIndex + 1);
    });
    this.gridColumns = newGridColumns;
  };

  ColumnController.prototype.isPrimaryColumnGroupsPresent = function () {
    return this.primaryHeaderRowCount > 1;
  }; // if we are using autoGroupCols, then they should be included for quick filter. this covers the
  // following scenarios:
  // a) user provides 'field' into autoGroupCol of normal grid, so now because a valid col to filter leafs on
  // b) using tree data and user depends on autoGroupCol for first col, and we also want to filter on this
  //    (tree data is a bit different, as parent rows can be filtered on, unlike row grouping)


  ColumnController.prototype.setupQuickFilterColumns = function () {
    if (this.groupAutoColumns) {
      this.columnsForQuickFilter = this.primaryColumns.concat(this.groupAutoColumns);
    } else {
      this.columnsForQuickFilter = this.primaryColumns;
    }
  };

  ColumnController.prototype.putFixedColumnsFirst = function () {
    var locked = this.gridColumns.filter(function (c) {
      return c.isLockPosition();
    });
    var unlocked = this.gridColumns.filter(function (c) {
      return !c.isLockPosition();
    });
    this.gridColumns = locked.concat(unlocked);
  };

  ColumnController.prototype.addAutoGroupToGridColumns = function () {
    // add in auto-group here
    this.createGroupAutoColumnsIfNeeded();

    if (utils_1._.missing(this.groupAutoColumns)) {
      return;
    }

    this.gridColumns = this.groupAutoColumns ? this.groupAutoColumns.concat(this.gridColumns) : this.gridColumns;
    var autoColBalancedTree = this.columnFactory.createForAutoGroups(this.groupAutoColumns, this.gridBalancedTree);
    this.gridBalancedTree = autoColBalancedTree.concat(this.gridBalancedTree);
  }; // gets called after we copy down grid columns, to make sure any part of the gui
  // that tries to draw, eg the header, it will get empty lists of columns rather
  // than stale columns. for example, the header will received gridColumnsChanged
  // event, so will try and draw, but it will draw successfully when it acts on the
  // virtualColumnsChanged event


  ColumnController.prototype.clearDisplayedColumns = function () {
    this.displayedLeftColumnTree = [];
    this.displayedRightColumnTree = [];
    this.displayedCentreColumnTree = [];
    this.displayedLeftHeaderRows = {};
    this.displayedRightHeaderRows = {};
    this.displayedCentreHeaderRows = {};
    this.displayedLeftColumns = [];
    this.displayedRightColumns = [];
    this.displayedCenterColumns = [];
    this.allDisplayedColumns = [];
    this.allDisplayedVirtualColumns = [];
  };

  ColumnController.prototype.updateGroupsAndDisplayedColumns = function (source) {
    this.updateOpenClosedVisibilityInColumnGroups();
    this.updateDisplayedColumnsFromTrees(source);
    this.updateVirtualSets();
    this.updateBodyWidths(); // this event is picked up by the gui, headerRenderer and rowRenderer, to recalculate what columns to display

    var event = {
      type: events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(event);
  };

  ColumnController.prototype.updateDisplayedColumnsFromTrees = function (source) {
    this.addToDisplayedColumns(this.displayedLeftColumnTree, this.displayedLeftColumns);
    this.addToDisplayedColumns(this.displayedCentreColumnTree, this.displayedCenterColumns);
    this.addToDisplayedColumns(this.displayedRightColumnTree, this.displayedRightColumns);
    this.setupAllDisplayedColumns();
    this.setLeftValues(source);
  };

  ColumnController.prototype.setupAllDisplayedColumns = function () {
    if (this.gridOptionsWrapper.isEnableRtl()) {
      this.allDisplayedColumns = this.displayedRightColumns.concat(this.displayedCenterColumns).concat(this.displayedLeftColumns);
    } else {
      this.allDisplayedColumns = this.displayedLeftColumns.concat(this.displayedCenterColumns).concat(this.displayedRightColumns);
    }
  }; // sets the left pixel position of each column


  ColumnController.prototype.setLeftValues = function (source) {
    this.setLeftValuesOfColumns(source);
    this.setLeftValuesOfGroups();
  };

  ColumnController.prototype.setLeftValuesOfColumns = function (source) {
    var _this = this; // go through each list of displayed columns


    var allColumns = this.primaryColumns.slice(0); // let totalColumnWidth = this.getWidthOfColsInList()

    var doingRtl = this.gridOptionsWrapper.isEnableRtl();
    [this.displayedLeftColumns, this.displayedRightColumns, this.displayedCenterColumns].forEach(function (columns) {
      if (doingRtl) {
        // when doing RTL, we start at the top most pixel (ie RHS) and work backwards
        var left_1 = _this.getWidthOfColsInList(columns);

        columns.forEach(function (column) {
          left_1 -= column.getActualWidth();
          column.setLeft(left_1, source);
        });
      } else {
        // otherwise normal LTR, we start at zero
        var left_2 = 0;
        columns.forEach(function (column) {
          column.setLeft(left_2, source);
          left_2 += column.getActualWidth();
        });
      }

      utils_1._.removeAllFromArray(allColumns, columns);
    }); // items left in allColumns are columns not displayed, so remove the left position. this is
    // important for the rows, as if a col is made visible, then taken out, then made visible again,
    // we don't want the animation of the cell floating in from the old position, whatever that was.

    allColumns.forEach(function (column) {
      column.setLeft(null, source);
    });
  };

  ColumnController.prototype.setLeftValuesOfGroups = function () {
    // a groups left value is the lest left value of it's children
    [this.displayedLeftColumnTree, this.displayedRightColumnTree, this.displayedCentreColumnTree].forEach(function (columns) {
      columns.forEach(function (column) {
        if (column instanceof columnGroup_1.ColumnGroup) {
          var columnGroup = column;
          columnGroup.checkLeft();
        }
      });
    });
  };

  ColumnController.prototype.addToDisplayedColumns = function (displayedColumnTree, displayedColumns) {
    displayedColumns.length = 0;
    this.columnUtils.depthFirstDisplayedColumnTreeSearch(displayedColumnTree, function (child) {
      if (child instanceof column_1.Column) {
        displayedColumns.push(child);
      }
    });
  };

  ColumnController.prototype.updateDisplayedCenterVirtualColumns = function () {
    if (this.suppressColumnVirtualisation) {
      // no virtualisation, so don't filter
      this.allDisplayedCenterVirtualColumns = this.displayedCenterColumns;
    } else {
      // filter out what should be visible
      this.allDisplayedCenterVirtualColumns = this.filterOutColumnsWithinViewport();
    }

    this.allDisplayedVirtualColumns = this.allDisplayedCenterVirtualColumns.concat(this.displayedLeftColumns).concat(this.displayedRightColumns); // return map of virtual col id's, for easy lookup when building the groups.
    // the map will be colId=>true, ie col id's mapping to 'true'.

    var result = {};
    this.allDisplayedVirtualColumns.forEach(function (col) {
      result[col.getId()] = true;
    });
    return result;
  };

  ColumnController.prototype.getVirtualHeaderGroupRow = function (type, dept) {
    var result;

    switch (type) {
      case column_1.Column.PINNED_LEFT:
        result = this.displayedLeftHeaderRows[dept];
        break;

      case column_1.Column.PINNED_RIGHT:
        result = this.displayedRightHeaderRows[dept];
        break;

      default:
        result = this.displayedCentreHeaderRows[dept];
        break;
    }

    if (utils_1._.missing(result)) {
      result = [];
    }

    return result;
  };

  ColumnController.prototype.updateDisplayedVirtualGroups = function (virtualColIds) {
    // go through each group, see if any of it's cols are displayed, and if yes,
    // then this group is included
    this.displayedLeftHeaderRows = {};
    this.displayedRightHeaderRows = {};
    this.displayedCentreHeaderRows = {};
    testGroup(this.displayedLeftColumnTree, this.displayedLeftHeaderRows, 0);
    testGroup(this.displayedRightColumnTree, this.displayedRightHeaderRows, 0);
    testGroup(this.displayedCentreColumnTree, this.displayedCentreHeaderRows, 0);

    function testGroup(children, result, dept) {
      var returnValue = false;

      for (var i = 0; i < children.length; i++) {
        // see if this item is within viewport
        var child = children[i];
        var addThisItem = void 0;

        if (child instanceof column_1.Column) {
          // for column, test if column is included
          addThisItem = virtualColIds[child.getId()] === true;
        } else {
          // if group, base decision on children
          var columnGroup = child;
          addThisItem = testGroup(columnGroup.getDisplayedChildren(), result, dept + 1);
        }

        if (addThisItem) {
          returnValue = true;

          if (!result[dept]) {
            result[dept] = [];
          }

          result[dept].push(child);
        }
      }

      return returnValue;
    }
  };

  ColumnController.prototype.updateVirtualSets = function () {
    var virtualColIds = this.updateDisplayedCenterVirtualColumns();
    this.updateDisplayedVirtualGroups(virtualColIds);
  };

  ColumnController.prototype.filterOutColumnsWithinViewport = function () {
    return utils_1._.filter(this.displayedCenterColumns, this.isColumnInViewport.bind(this));
  }; // called from api


  ColumnController.prototype.sizeColumnsToFit = function (gridWidth, source) {
    var _this = this;

    if (source === void 0) {
      source = "api";
    } // avoid divide by zero


    var allDisplayedColumns = this.getAllDisplayedColumns();

    if (gridWidth <= 0 || allDisplayedColumns.length === 0) {
      return;
    }

    var colsToNotSpread = utils_1._.filter(allDisplayedColumns, function (column) {
      return column.getColDef().suppressSizeToFit === true;
    });

    var colsToSpread = utils_1._.filter(allDisplayedColumns, function (column) {
      return column.getColDef().suppressSizeToFit !== true;
    }); // make a copy of the cols that are going to be resized


    var colsToFireEventFor = colsToSpread.slice(0);
    var finishedResizing = false;

    while (!finishedResizing) {
      finishedResizing = true;
      var availablePixels = gridWidth - this.getWidthOfColsInList(colsToNotSpread);

      if (availablePixels <= 0) {
        // no width, set everything to minimum
        colsToSpread.forEach(function (column) {
          column.setMinimum(source);
        });
      } else {
        var scale = availablePixels / this.getWidthOfColsInList(colsToSpread); // we set the pixels for the last col based on what's left, as otherwise
        // we could be a pixel or two short or extra because of rounding errors.

        var pixelsForLastCol = availablePixels; // backwards through loop, as we are removing items as we go

        for (var i = colsToSpread.length - 1; i >= 0; i--) {
          var column = colsToSpread[i];
          var newWidth = Math.round(column.getActualWidth() * scale);

          if (newWidth < column.getMinWidth()) {
            column.setMinimum(source);
            moveToNotSpread(column);
            finishedResizing = false;
          } else if (column.isGreaterThanMax(newWidth)) {
            column.setActualWidth(column.getMaxWidth(), source);
            moveToNotSpread(column);
            finishedResizing = false;
          } else {
            var onLastCol = i === 0;

            if (onLastCol) {
              column.setActualWidth(pixelsForLastCol, source);
            } else {
              column.setActualWidth(newWidth, source);
            }
          }

          pixelsForLastCol -= newWidth;
        }
      }
    }

    this.setLeftValues(source);
    this.updateBodyWidths();
    colsToFireEventFor.forEach(function (column) {
      var event = {
        type: events_1.Events.EVENT_COLUMN_RESIZED,
        column: column,
        columns: [column],
        finished: true,
        api: _this.gridApi,
        columnApi: _this.columnApi,
        source: "sizeColumnsToFit"
      };

      _this.eventService.dispatchEvent(event);
    });

    function moveToNotSpread(column) {
      utils_1._.removeFromArray(colsToSpread, column);

      colsToNotSpread.push(column);
    }
  };

  ColumnController.prototype.buildDisplayedTrees = function (visibleColumns) {
    var leftVisibleColumns = utils_1._.filter(visibleColumns, function (column) {
      return column.getPinned() === 'left';
    });

    var rightVisibleColumns = utils_1._.filter(visibleColumns, function (column) {
      return column.getPinned() === 'right';
    });

    var centerVisibleColumns = utils_1._.filter(visibleColumns, function (column) {
      return column.getPinned() !== 'left' && column.getPinned() !== 'right';
    });

    var groupInstanceIdCreator = new groupInstanceIdCreator_1.GroupInstanceIdCreator();
    this.displayedLeftColumnTree = this.displayedGroupCreator.createDisplayedGroups(leftVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, column_1.Column.PINNED_LEFT, this.displayedLeftColumnTree);
    this.displayedRightColumnTree = this.displayedGroupCreator.createDisplayedGroups(rightVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, column_1.Column.PINNED_RIGHT, this.displayedRightColumnTree);
    this.displayedCentreColumnTree = this.displayedGroupCreator.createDisplayedGroups(centerVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, null, this.displayedCentreColumnTree);
  };

  ColumnController.prototype.updateOpenClosedVisibilityInColumnGroups = function () {
    var allColumnGroups = this.getAllDisplayedColumnGroups();
    this.columnUtils.depthFirstAllColumnTreeSearch(allColumnGroups, function (child) {
      if (child instanceof columnGroup_1.ColumnGroup) {
        var columnGroup = child;
        columnGroup.calculateDisplayedColumns();
      }
    });
  };

  ColumnController.prototype.getGroupAutoColumns = function () {
    return this.groupAutoColumns;
  };

  ColumnController.prototype.createGroupAutoColumnsIfNeeded = function () {
    if (!this.autoGroupsNeedBuilding) {
      return;
    }

    this.autoGroupsNeedBuilding = false; // see if we need to insert the default grouping column

    var needAutoColumns = (this.rowGroupColumns.length > 0 || this.usingTreeData) && !this.gridOptionsWrapper.isGroupSuppressAutoColumn() && !this.gridOptionsWrapper.isGroupUseEntireRow() && !this.gridOptionsWrapper.isGroupSuppressRow();

    if (needAutoColumns) {
      // this.groupAutoColumns = this.autoGroupColService.createAutoGroupColumns(this.rowGroupColumns);
      var newAutoGroupCols = this.autoGroupColService.createAutoGroupColumns(this.rowGroupColumns);
      var autoColsDifferent = !this.autoColsEqual(newAutoGroupCols, this.groupAutoColumns);

      if (autoColsDifferent) {
        this.groupAutoColumns = newAutoGroupCols;
      }
    } else {
      this.groupAutoColumns = null;
    }
  };

  ColumnController.prototype.autoColsEqual = function (colsA, colsB) {
    var bothMissing = !colsA && !colsB;

    if (bothMissing) {
      return true;
    }

    var atLeastOneListMissing = !colsA || !colsB;

    if (atLeastOneListMissing) {
      return false;
    }

    if (colsA.length !== colsB.length) {
      return false;
    }

    for (var i = 0; i < colsA.length; i++) {
      var colA = colsA[i];
      var colB = colsB[i];

      if (colA.getColId() !== colB.getColId()) {
        return false;
      }
    }

    return true;
  };

  ColumnController.prototype.getWidthOfColsInList = function (columnList) {
    var result = 0;

    for (var i = 0; i < columnList.length; i++) {
      result += columnList[i].getActualWidth();
    }

    return result;
  };

  ColumnController.prototype.getGridBalancedTree = function () {
    return this.gridBalancedTree;
  };

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], ColumnController.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('expressionService'), __metadata("design:type", expressionService_1.ExpressionService)], ColumnController.prototype, "expressionService", void 0);

  __decorate([context_1.Autowired('columnFactory'), __metadata("design:type", columnFactory_1.ColumnFactory)], ColumnController.prototype, "columnFactory", void 0);

  __decorate([context_1.Autowired('displayedGroupCreator'), __metadata("design:type", displayedGroupCreator_1.DisplayedGroupCreator)], ColumnController.prototype, "displayedGroupCreator", void 0);

  __decorate([context_1.Autowired('autoWidthCalculator'), __metadata("design:type", autoWidthCalculator_1.AutoWidthCalculator)], ColumnController.prototype, "autoWidthCalculator", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], ColumnController.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('columnUtils'), __metadata("design:type", columnUtils_1.ColumnUtils)], ColumnController.prototype, "columnUtils", void 0);

  __decorate([context_1.Autowired('context'), __metadata("design:type", context_1.Context)], ColumnController.prototype, "context", void 0);

  __decorate([context_1.Autowired('columnAnimationService'), __metadata("design:type", columnAnimationService_1.ColumnAnimationService)], ColumnController.prototype, "columnAnimationService", void 0);

  __decorate([context_1.Autowired('autoGroupColService'), __metadata("design:type", autoGroupColService_1.AutoGroupColService)], ColumnController.prototype, "autoGroupColService", void 0);

  __decorate([context_1.Optional('aggFuncService'), __metadata("design:type", Object)], ColumnController.prototype, "aggFuncService", void 0);

  __decorate([context_1.Optional('valueCache'), __metadata("design:type", valueCache_1.ValueCache)], ColumnController.prototype, "valueCache", void 0);

  __decorate([context_1.Autowired('columnApi'), __metadata("design:type", columnApi_1.ColumnApi)], ColumnController.prototype, "columnApi", void 0);

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], ColumnController.prototype, "gridApi", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], ColumnController.prototype, "init", null);

  __decorate([__param(0, context_1.Qualifier('loggerFactory')), __metadata("design:type", Function), __metadata("design:paramtypes", [logger_1.LoggerFactory]), __metadata("design:returntype", void 0)], ColumnController.prototype, "setBeans", null);

  ColumnController = __decorate([context_1.Bean('columnController')], ColumnController);
  return ColumnController;
}();

exports.ColumnController = ColumnController;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});

var eventKeys_1 = __webpack_require__(57);

exports.Events = eventKeys_1.Events;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});

var Constants =
/** @class */
function () {
  function Constants() {}

  Constants.STEP_EVERYTHING = 0;
  Constants.STEP_FILTER = 1;
  Constants.STEP_SORT = 2;
  Constants.STEP_MAP = 3;
  Constants.STEP_AGGREGATE = 4;
  Constants.STEP_PIVOT = 5;
  Constants.ROW_BUFFER_SIZE = 10;
  Constants.LAYOUT_INTERVAL = 500;
  Constants.BATCH_WAIT_MILLIS = 50;
  Constants.EXPORT_TYPE_DRAG_COPY = 'dragCopy';
  Constants.EXPORT_TYPE_CLIPBOARD = 'clipboard';
  Constants.EXPORT_TYPE_EXCEL = 'excel';
  Constants.EXPORT_TYPE_CSV = 'csv';
  Constants.KEY_BACKSPACE = 8;
  Constants.KEY_TAB = 9;
  Constants.KEY_NEW_LINE = 10;
  Constants.KEY_ENTER = 13;
  Constants.KEY_SHIFT = 16;
  Constants.KEY_ESCAPE = 27;
  Constants.KEY_SPACE = 32;
  Constants.KEY_LEFT = 37;
  Constants.KEY_UP = 38;
  Constants.KEY_RIGHT = 39;
  Constants.KEY_DOWN = 40;
  Constants.KEY_DELETE = 46;
  Constants.KEY_A = 65;
  Constants.KEY_C = 67;
  Constants.KEY_V = 86;
  Constants.KEY_D = 68;
  Constants.KEY_F2 = 113;
  Constants.KEY_PAGE_UP = 33;
  Constants.KEY_PAGE_DOWN = 34;
  Constants.KEY_PAGE_HOME = 36;
  Constants.KEY_PAGE_END = 35;
  Constants.ROW_MODEL_TYPE_INFINITE = 'infinite';
  Constants.ROW_MODEL_TYPE_VIEWPORT = 'viewport';
  Constants.ROW_MODEL_TYPE_CLIENT_SIDE = 'clientSide';
  Constants.ROW_MODEL_TYPE_SERVER_SIDE = 'serverSide';
  Constants.DEPRECATED_ROW_MODEL_TYPE_NORMAL = 'normal';
  Constants.ALWAYS = 'always';
  Constants.ONLY_WHEN_GROUPING = 'onlyWhenGrouping';
  Constants.PINNED_TOP = 'top';
  Constants.PINNED_BOTTOM = 'bottom';
  Constants.DOM_LAYOUT_NORMAL = 'normal';
  Constants.DOM_LAYOUT_PRINT = 'print';
  Constants.DOM_LAYOUT_AUTO_HEIGHT = 'autoHeight';
  Constants.GROUP_AUTO_COLUMN_ID = 'ag-Grid-AutoColumn';
  return Constants;
}();

exports.Constants = Constants;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var csvCreator_1 = __webpack_require__(138);

var rowRenderer_1 = __webpack_require__(37);

var filterManager_1 = __webpack_require__(40);

var columnController_1 = __webpack_require__(17);

var selectionController_1 = __webpack_require__(44);

var gridOptionsWrapper_1 = __webpack_require__(7);

var valueService_1 = __webpack_require__(38);

var eventService_1 = __webpack_require__(14);

var constants_1 = __webpack_require__(19);

var context_1 = __webpack_require__(2);

var sortController_1 = __webpack_require__(49);

var focusedCellController_1 = __webpack_require__(48);

var gridCell_1 = __webpack_require__(52);

var cellRendererFactory_1 = __webpack_require__(108);

var paginationProxy_1 = __webpack_require__(53);

var immutableService_1 = __webpack_require__(201);

var valueCache_1 = __webpack_require__(71);

var alignedGridsService_1 = __webpack_require__(114);

var pinnedRowModel_1 = __webpack_require__(59);

var animationFrameService_1 = __webpack_require__(73);

var utils_1 = __webpack_require__(6);

var GridApi =
/** @class */
function () {
  function GridApi() {
    this.detailGridInfoMap = {};
  }

  GridApi.prototype.registerGridComp = function (gridPanel) {
    this.gridPanel = gridPanel;
  };

  GridApi.prototype.registerGridCore = function (gridCore) {
    this.gridCore = gridCore;
  };

  GridApi.prototype.registerHeaderRootComp = function (headerRootComp) {
    this.headerRootComp = headerRootComp;
  };

  GridApi.prototype.init = function () {
    switch (this.rowModel.getType()) {
      case constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE:
        this.clientSideRowModel = this.rowModel;
        break;

      case constants_1.Constants.ROW_MODEL_TYPE_INFINITE:
        this.infinitePageRowModel = this.rowModel;
        break;

      case constants_1.Constants.ROW_MODEL_TYPE_SERVER_SIDE:
        this.serverSideRowModel = this.rowModel;
        break;
    }
  };
  /** Used internally by grid. Not intended to be used by the client. Interface may change between releases. */


  GridApi.prototype.__getAlignedGridService = function () {
    return this.alignedGridsService;
  };

  GridApi.prototype.addDetailGridInfo = function (id, gridInfo) {
    this.detailGridInfoMap[id] = gridInfo;
  };

  GridApi.prototype.removeDetailGridInfo = function (id) {
    this.detailGridInfoMap[id] = undefined;
  };

  GridApi.prototype.getDetailGridInfo = function (id) {
    return this.detailGridInfoMap[id];
  };

  GridApi.prototype.forEachDetailGridInfo = function (callback) {
    var index = 0;

    utils_1._.iterateObject(this.detailGridInfoMap, function (id, gridInfo) {
      // check for undefined, as old references will still be lying around
      if (utils_1._.exists(gridInfo)) {
        callback(gridInfo, index);
        index++;
      }
    });
  };

  GridApi.prototype.getDataAsCsv = function (params) {
    return this.csvCreator.getDataAsCsv(params);
  };

  GridApi.prototype.exportDataAsCsv = function (params) {
    this.csvCreator.exportDataAsCsv(params);
  };

  GridApi.prototype.getDataAsExcel = function (params) {
    if (!this.excelCreator) {
      console.warn('ag-Grid: Excel export is only available in ag-Grid Enterprise');
    }

    return this.excelCreator.getDataAsExcelXml(params);
  };

  GridApi.prototype.exportDataAsExcel = function (params) {
    if (!this.excelCreator) {
      console.warn('ag-Grid: Excel export is only available in ag-Grid Enterprise');
    }

    this.excelCreator.exportDataAsExcel(params);
  };
  /** @deprecated */


  GridApi.prototype.setEnterpriseDatasource = function (datasource) {
    console.warn("ag-grid: since version 18.x, api.setEnterpriseDatasource() should be replaced with api.setServerSideDatasource()");
    this.setServerSideDatasource(datasource);
  };

  GridApi.prototype.setServerSideDatasource = function (datasource) {
    if (this.gridOptionsWrapper.isRowModelServerSide()) {
      // should really have an IEnterpriseRowModel interface, so we are not casting to any
      this.rowModel.setDatasource(datasource);
    } else {
      console.warn("ag-Grid: you can only use an enterprise datasource when gridOptions.rowModelType is '" + constants_1.Constants.ROW_MODEL_TYPE_SERVER_SIDE + "'");
    }
  };

  GridApi.prototype.setDatasource = function (datasource) {
    if (this.gridOptionsWrapper.isRowModelInfinite()) {
      this.rowModel.setDatasource(datasource);
    } else {
      console.warn("ag-Grid: you can only use a datasource when gridOptions.rowModelType is '" + constants_1.Constants.ROW_MODEL_TYPE_INFINITE + "'");
    }
  };

  GridApi.prototype.setViewportDatasource = function (viewportDatasource) {
    if (this.gridOptionsWrapper.isRowModelViewport()) {
      // this is bad coding, because it's using an interface that's exposed in the enterprise.
      // really we should create an interface in the core for viewportDatasource and let
      // the enterprise implement it, rather than casting to 'any' here
      this.rowModel.setViewportDatasource(viewportDatasource);
    } else {
      console.warn("ag-Grid: you can only use a viewport datasource when gridOptions.rowModelType is '" + constants_1.Constants.ROW_MODEL_TYPE_VIEWPORT + "'");
    }
  };

  GridApi.prototype.setRowData = function (rowData) {
    if (this.gridOptionsWrapper.isRowModelDefault()) {
      if (this.gridOptionsWrapper.isDeltaRowDataMode()) {
        var _a = this.immutableService.createTransactionForRowData(rowData),
            transaction = _a[0],
            orderIdMap = _a[1];

        this.clientSideRowModel.updateRowData(transaction, orderIdMap); // need to force updating of full width rows - note this wouldn't be necessary the full width cell comp listened
        // to the data change event on the row node and refreshed itself.

        this.rowRenderer.refreshFullWidthRows();
      } else {
        this.selectionController.reset();
        this.clientSideRowModel.setRowData(rowData);
      }
    } else {
      console.warn('cannot call setRowData unless using normal row model');
    }
  };
  /** @deprecated */


  GridApi.prototype.setFloatingTopRowData = function (rows) {
    console.warn('ag-Grid: since v12, api.setFloatingTopRowData() is now api.setPinnedTopRowData()');
    this.setPinnedTopRowData(rows);
  };
  /** @deprecated */


  GridApi.prototype.setFloatingBottomRowData = function (rows) {
    console.warn('ag-Grid: since v12, api.setFloatingBottomRowData() is now api.setPinnedBottomRowData()');
    this.setPinnedBottomRowData(rows);
  };
  /** @deprecated */


  GridApi.prototype.getFloatingTopRowCount = function () {
    console.warn('ag-Grid: since v12, api.getFloatingTopRowCount() is now api.getPinnedTopRowCount()');
    return this.getPinnedTopRowCount();
  };
  /** @deprecated */


  GridApi.prototype.getFloatingBottomRowCount = function () {
    console.warn('ag-Grid: since v12, api.getFloatingBottomRowCount() is now api.getPinnedBottomRowCount()');
    return this.getPinnedBottomRowCount();
  };
  /** @deprecated */


  GridApi.prototype.getFloatingTopRow = function (index) {
    console.warn('ag-Grid: since v12, api.getFloatingTopRow() is now api.getPinnedTopRow()');
    return this.getPinnedTopRow(index);
  };
  /** @deprecated */


  GridApi.prototype.getFloatingBottomRow = function (index) {
    console.warn('ag-Grid: since v12, api.getFloatingBottomRow() is now api.getPinnedBottomRow()');
    return this.getPinnedBottomRow(index);
  };

  GridApi.prototype.setPinnedTopRowData = function (rows) {
    this.pinnedRowModel.setPinnedTopRowData(rows);
  };

  GridApi.prototype.setPinnedBottomRowData = function (rows) {
    this.pinnedRowModel.setPinnedBottomRowData(rows);
  };

  GridApi.prototype.getPinnedTopRowCount = function () {
    return this.pinnedRowModel.getPinnedTopRowCount();
  };

  GridApi.prototype.getPinnedBottomRowCount = function () {
    return this.pinnedRowModel.getPinnedBottomRowCount();
  };

  GridApi.prototype.getPinnedTopRow = function (index) {
    return this.pinnedRowModel.getPinnedTopRow(index);
  };

  GridApi.prototype.getPinnedBottomRow = function (index) {
    return this.pinnedRowModel.getPinnedBottomRow(index);
  };

  GridApi.prototype.setColumnDefs = function (colDefs, source) {
    if (source === void 0) {
      source = "api";
    }

    this.columnController.setColumnDefs(colDefs, source);
  };

  GridApi.prototype.expireValueCache = function () {
    this.valueCache.expire();
  };

  GridApi.prototype.getVerticalPixelRange = function () {
    return this.gridPanel.getVScrollPosition();
  };

  GridApi.prototype.getHorizontalPixelRange = function () {
    return this.gridPanel.getHScrollPosition();
  };

  GridApi.prototype.setAlwaysShowVerticalScroll = function (show) {
    this.gridOptionsWrapper.setProperty('alwaysShowVerticalScroll', show);
  };

  GridApi.prototype.refreshToolPanel = function () {
    this.gridCore.refreshSideBar();
  };

  GridApi.prototype.refreshCells = function (params) {
    if (params === void 0) {
      params = {};
    }

    if (Array.isArray(params)) {
      // the old version of refreshCells() took an array of rowNodes for the first argument
      console.warn('since ag-Grid v11.1, refreshCells() now takes parameters, please see the documentation.');
      return;
    }

    this.rowRenderer.refreshCells(params);
  };

  GridApi.prototype.flashCells = function (params) {
    if (params === void 0) {
      params = {};
    }

    this.rowRenderer.flashCells(params);
  };

  GridApi.prototype.redrawRows = function (params) {
    if (params === void 0) {
      params = {};
    }

    if (params && params.rowNodes) {
      this.rowRenderer.redrawRows(params.rowNodes);
    } else {
      this.rowRenderer.redrawAfterModelUpdate();
    }
  };

  GridApi.prototype.timeFullRedraw = function (count) {
    if (count === void 0) {
      count = 1;
    }

    var iterationCount = 0;
    var totalProcessing = 0;
    var totalReflow = 0;
    var that = this;
    doOneIteration();

    function doOneIteration() {
      var start = new Date().getTime();
      that.rowRenderer.redrawAfterModelUpdate();
      var endProcessing = new Date().getTime();
      window.setTimeout(function () {
        var endReflow = new Date().getTime();
        var durationProcessing = endProcessing - start;
        var durationReflow = endReflow - endProcessing; // tslint:disable-next-line

        console.log('duration:  processing = ' + durationProcessing + 'ms, reflow = ' + durationReflow + 'ms');
        iterationCount++;
        totalProcessing += durationProcessing;
        totalReflow += durationReflow;

        if (iterationCount < count) {
          // wait for 1s between tests
          window.setTimeout(doOneIteration, 1000);
        } else {
          finish();
        }
      }, 0);
    }

    function finish() {
      // tslint:disable-next-line
      console.log('tests complete. iteration count = ' + iterationCount); // tslint:disable-next-line

      console.log('average processing = ' + totalProcessing / iterationCount + 'ms'); // tslint:disable-next-line

      console.log('average reflow = ' + totalReflow / iterationCount + 'ms');
    }
  };
  /** @deprecated */


  GridApi.prototype.refreshView = function () {
    console.warn('ag-Grid: since v11.1, refreshView() is deprecated, please call refreshCells() or redrawRows() instead');
    this.redrawRows();
  }; //** @deprecated */


  GridApi.prototype.refreshRows = function (rowNodes) {
    console.warn('since ag-Grid v11.1, refreshRows() is deprecated, please use refreshCells({rowNodes: rows}) or redrawRows({rowNodes: rows}) instead');
    this.refreshCells({
      rowNodes: rowNodes
    });
  };
  /** @deprecated */


  GridApi.prototype.rowDataChanged = function (rows) {
    console.warn('ag-Grid: rowDataChanged is deprecated, either call refreshView() to refresh everything, or call rowNode.setRowData(newData) to set value on a particular node');
    this.redrawRows();
  };
  /** @deprecated */


  GridApi.prototype.softRefreshView = function () {
    console.error('ag-Grid: since v16, softRefreshView() is no longer supported. Please check the documentation on how to refresh.');
  };
  /** @deprecated */


  GridApi.prototype.refreshGroupRows = function () {
    console.warn('ag-Grid: since v11.1, refreshGroupRows() is no longer supported, call refreshCells() instead. ' + 'Because refreshCells() now does dirty checking, it will only refresh cells that have changed, so it should ' + 'not be necessary to only refresh the group rows.');
    this.refreshCells();
  };

  GridApi.prototype.setFunctionsReadOnly = function (readOnly) {
    this.gridOptionsWrapper.setProperty('functionsReadOnly', readOnly);
  };

  GridApi.prototype.refreshHeader = function () {
    this.headerRootComp.refreshHeader();
    this.gridPanel.setHeaderAndFloatingHeights();
  };

  GridApi.prototype.isAnyFilterPresent = function () {
    return this.filterManager.isAnyFilterPresent();
  };

  GridApi.prototype.isAdvancedFilterPresent = function () {
    console.warn('ag-Grid: isAdvancedFilterPresent() is deprecated, please use isColumnFilterPresent()');
    return this.isColumnFilterPresent();
  };

  GridApi.prototype.isColumnFilterPresent = function () {
    return this.filterManager.isAdvancedFilterPresent();
  };

  GridApi.prototype.isQuickFilterPresent = function () {
    return this.filterManager.isQuickFilterPresent();
  };

  GridApi.prototype.getModel = function () {
    return this.rowModel;
  };

  GridApi.prototype.onGroupExpandedOrCollapsed = function (deprecated_refreshFromIndex) {
    if (utils_1._.missing(this.clientSideRowModel)) {
      console.warn('ag-Grid: cannot call onGroupExpandedOrCollapsed unless using normal row model');
    }

    if (utils_1._.exists(deprecated_refreshFromIndex)) {
      console.warn('ag-Grid: api.onGroupExpandedOrCollapsed - refreshFromIndex parameter is no longer used, the grid will refresh all rows');
    } // we don't really want the user calling this if one one rowNode was expanded, instead they should be
    // calling rowNode.setExpanded(boolean) - this way we do a 'keepRenderedRows=false' so that the whole
    // grid gets refreshed again - otherwise the row with the rowNodes that were changed won't get updated,
    // and thus the expand icon in the group cell won't get 'opened' or 'closed'.


    this.clientSideRowModel.refreshModel({
      step: constants_1.Constants.STEP_MAP
    });
  };

  GridApi.prototype.refreshInMemoryRowModel = function (step) {
    console.warn("ag-grid: since version 18.x, api.refreshInMemoryRowModel() should be replaced with api.refreshClientSideRowModel()");
    this.refreshClientSideRowModel(step);
  };

  GridApi.prototype.refreshClientSideRowModel = function (step) {
    if (utils_1._.missing(this.clientSideRowModel)) {
      console.warn('cannot call refreshClientSideRowModel unless using normal row model');
    }

    var paramsStep = constants_1.Constants.STEP_EVERYTHING;
    var stepsMapped = {
      group: constants_1.Constants.STEP_EVERYTHING,
      filter: constants_1.Constants.STEP_FILTER,
      map: constants_1.Constants.STEP_MAP,
      aggregate: constants_1.Constants.STEP_AGGREGATE,
      sort: constants_1.Constants.STEP_SORT,
      pivot: constants_1.Constants.STEP_PIVOT
    };

    if (utils_1._.exists(step)) {
      paramsStep = stepsMapped[step];
    }

    if (utils_1._.missing(paramsStep)) {
      console.error("ag-Grid: invalid step " + step + ", available steps are " + Object.keys(stepsMapped).join(', '));
      return;
    }

    var modelParams = {
      step: paramsStep,
      keepRenderedRows: true,
      animate: true,
      keepEditingRows: true
    };
    this.clientSideRowModel.refreshModel(modelParams);
  };

  GridApi.prototype.isAnimationFrameQueueEmpty = function () {
    return this.animationFrameService.isQueueEmpty();
  };

  GridApi.prototype.getRowNode = function (id) {
    return this.rowModel.getRowNode(id);
  };

  GridApi.prototype.expandAll = function () {
    if (utils_1._.missing(this.clientSideRowModel)) {
      console.warn('ag-Grid: cannot call expandAll unless using normal row model');
      return;
    }

    this.clientSideRowModel.expandOrCollapseAll(true);
  };

  GridApi.prototype.collapseAll = function () {
    if (utils_1._.missing(this.clientSideRowModel)) {
      console.warn('ag-Grid: cannot call collapseAll unless using normal row model');
      return;
    }

    this.clientSideRowModel.expandOrCollapseAll(false);
  };

  GridApi.prototype.addVirtualRowListener = function (eventName, rowIndex, callback) {
    if (typeof eventName !== 'string') {
      console.warn('ag-Grid: addVirtualRowListener is deprecated, please use addRenderedRowListener.');
    }

    this.addRenderedRowListener(eventName, rowIndex, callback);
  };

  GridApi.prototype.addRenderedRowListener = function (eventName, rowIndex, callback) {
    if (eventName === 'virtualRowSelected') {
      console.warn("ag-Grid: event virtualRowSelected is deprecated, to register for individual row\n                selection events, add a listener directly to the row node.");
    }

    this.rowRenderer.addRenderedRowListener(eventName, rowIndex, callback);
  };

  GridApi.prototype.setQuickFilter = function (newFilter) {
    this.filterManager.setQuickFilter(newFilter);
  };

  GridApi.prototype.selectIndex = function (index, tryMulti, suppressEvents) {
    console.warn('ag-Grid: do not use api for selection, call node.setSelected(value) instead');

    if (suppressEvents) {
      console.warn('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');
    }

    this.selectionController.selectIndex(index, tryMulti);
  };

  GridApi.prototype.deselectIndex = function (index, suppressEvents) {
    if (suppressEvents === void 0) {
      suppressEvents = false;
    }

    console.warn('ag-Grid: do not use api for selection, call node.setSelected(value) instead');

    if (suppressEvents) {
      console.warn('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');
    }

    this.selectionController.deselectIndex(index);
  };

  GridApi.prototype.selectNode = function (node, tryMulti, suppressEvents) {
    if (tryMulti === void 0) {
      tryMulti = false;
    }

    if (suppressEvents === void 0) {
      suppressEvents = false;
    }

    console.warn('ag-Grid: API for selection is deprecated, call node.setSelected(value) instead');

    if (suppressEvents) {
      console.warn('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');
    }

    node.setSelectedParams({
      newValue: true,
      clearSelection: !tryMulti
    });
  };

  GridApi.prototype.deselectNode = function (node, suppressEvents) {
    if (suppressEvents === void 0) {
      suppressEvents = false;
    }

    console.warn('ag-Grid: API for selection is deprecated, call node.setSelected(value) instead');

    if (suppressEvents) {
      console.warn('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');
    }

    node.setSelectedParams({
      newValue: false
    });
  };

  GridApi.prototype.selectAll = function () {
    this.selectionController.selectAllRowNodes();
  };

  GridApi.prototype.deselectAll = function () {
    this.selectionController.deselectAllRowNodes();
  };

  GridApi.prototype.selectAllFiltered = function () {
    this.selectionController.selectAllRowNodes(true);
  };

  GridApi.prototype.deselectAllFiltered = function () {
    this.selectionController.deselectAllRowNodes(true);
  };

  GridApi.prototype.recomputeAggregates = function () {
    if (utils_1._.missing(this.clientSideRowModel)) {
      console.warn('cannot call recomputeAggregates unless using normal row model');
    }

    console.warn("recomputeAggregates is deprecated, please call api.refreshClientSideRowModel('aggregate') instead");
    this.clientSideRowModel.refreshModel({
      step: constants_1.Constants.STEP_AGGREGATE
    });
  };

  GridApi.prototype.sizeColumnsToFit = function () {
    this.gridPanel.sizeColumnsToFit();
  };

  GridApi.prototype.showLoadingOverlay = function () {
    this.gridPanel.showLoadingOverlay();
  };

  GridApi.prototype.showNoRowsOverlay = function () {
    this.gridPanel.showNoRowsOverlay();
  };

  GridApi.prototype.hideOverlay = function () {
    this.gridPanel.hideOverlay();
  };

  GridApi.prototype.isNodeSelected = function (node) {
    console.warn('ag-Grid: no need to call api.isNodeSelected(), just call node.isSelected() instead');
    return node.isSelected();
  };

  GridApi.prototype.getSelectedNodesById = function () {
    console.error('ag-Grid: since version 3.4, getSelectedNodesById no longer exists, use getSelectedNodes() instead');
    return null;
  };

  GridApi.prototype.getSelectedNodes = function () {
    return this.selectionController.getSelectedNodes();
  };

  GridApi.prototype.getSelectedRows = function () {
    return this.selectionController.getSelectedRows();
  };

  GridApi.prototype.getBestCostNodeSelection = function () {
    return this.selectionController.getBestCostNodeSelection();
  };

  GridApi.prototype.getRenderedNodes = function () {
    return this.rowRenderer.getRenderedNodes();
  };

  GridApi.prototype.ensureColIndexVisible = function (index) {
    console.warn('ag-Grid: ensureColIndexVisible(index) no longer supported, use ensureColumnVisible(colKey) instead.');
  };

  GridApi.prototype.ensureColumnVisible = function (key) {
    this.gridPanel.ensureColumnVisible(key);
  }; // Valid values for position are bottom, middle and top


  GridApi.prototype.ensureIndexVisible = function (index, position) {
    this.gridPanel.ensureIndexVisible(index, position);
  }; // Valid values for position are bottom, middle and top


  GridApi.prototype.ensureNodeVisible = function (comparator, position) {
    this.gridCore.ensureNodeVisible(comparator, position);
  };

  GridApi.prototype.forEachLeafNode = function (callback) {
    if (utils_1._.missing(this.clientSideRowModel)) {
      console.warn('cannot call forEachNode unless using normal row model');
    }

    this.clientSideRowModel.forEachLeafNode(callback);
  };

  GridApi.prototype.forEachNode = function (callback) {
    this.rowModel.forEachNode(callback);
  };

  GridApi.prototype.forEachNodeAfterFilter = function (callback) {
    if (utils_1._.missing(this.clientSideRowModel)) {
      console.warn('cannot call forEachNodeAfterFilter unless using normal row model');
    }

    this.clientSideRowModel.forEachNodeAfterFilter(callback);
  };

  GridApi.prototype.forEachNodeAfterFilterAndSort = function (callback) {
    if (utils_1._.missing(this.clientSideRowModel)) {
      console.warn('cannot call forEachNodeAfterFilterAndSort unless using normal row model');
    }

    this.clientSideRowModel.forEachNodeAfterFilterAndSort(callback);
  };

  GridApi.prototype.getFilterApiForColDef = function (colDef) {
    console.warn('ag-grid API method getFilterApiForColDef deprecated, use getFilterApi instead');
    return this.getFilterInstance(colDef);
  };

  GridApi.prototype.getFilterInstance = function (key) {
    var column = this.columnController.getPrimaryColumn(key);

    if (column) {
      return this.filterManager.getFilterComponent(column, 'NO_UI').resolveNow(null, function (filterComp) {
        return filterComp;
      });
    }
  };

  GridApi.prototype.getFilterApi = function (key) {
    console.warn('ag-Grid: getFilterApi is deprecated, use getFilterInstance instead');
    return this.getFilterInstance(key);
  };

  GridApi.prototype.destroyFilter = function (key) {
    var column = this.columnController.getPrimaryColumn(key);

    if (column) {
      return this.filterManager.destroyFilter(column, "filterDestroyed");
    }
  };

  GridApi.prototype.getStatusPanel = function (key) {
    if (this.statusBarService) {
      return this.statusBarService.getStatusPanel(key);
    }
  };

  GridApi.prototype.getColumnDef = function (key) {
    var column = this.columnController.getPrimaryColumn(key);

    if (column) {
      return column.getColDef();
    } else {
      return null;
    }
  };

  GridApi.prototype.onFilterChanged = function () {
    this.filterManager.onFilterChanged();
  };

  GridApi.prototype.onSortChanged = function () {
    this.sortController.onSortChanged();
  };

  GridApi.prototype.setSortModel = function (sortModel, source) {
    if (source === void 0) {
      source = "api";
    }

    this.sortController.setSortModel(sortModel, source);
  };

  GridApi.prototype.getSortModel = function () {
    return this.sortController.getSortModel();
  };

  GridApi.prototype.setFilterModel = function (model) {
    this.filterManager.setFilterModel(model);
  };

  GridApi.prototype.getFilterModel = function () {
    return this.filterManager.getFilterModel();
  };

  GridApi.prototype.getFocusedCell = function () {
    return this.focusedCellController.getFocusedCell();
  };

  GridApi.prototype.clearFocusedCell = function () {
    return this.focusedCellController.clearFocusedCell();
  };

  GridApi.prototype.setFocusedCell = function (rowIndex, colKey, floating) {
    this.focusedCellController.setFocusedCell(rowIndex, colKey, floating, true);
  };

  GridApi.prototype.setSuppressRowDrag = function (value) {
    this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_SUPPRESS_ROW_DRAG, value);
  };

  GridApi.prototype.setHeaderHeight = function (headerHeight) {
    this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_HEADER_HEIGHT, headerHeight);
    this.doLayout();
  };

  GridApi.prototype.setGridAutoHeight = function (gridAutoHeight) {
    console.warn('api.setGridAutoHeight(boolean) is deprecated, please use api.setDomLayout() instead');
    this.setDomLayout(gridAutoHeight ? 'autoHeight' : 'normal');
  };

  GridApi.prototype.setDomLayout = function (domLayout) {
    this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_DOM_LAYOUT, domLayout);
  };

  GridApi.prototype.setEnableCellTextSelection = function (selectable) {
    this.gridPanel.setCellTextSelection(selectable);
  };

  GridApi.prototype.setGroupHeaderHeight = function (headerHeight) {
    this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, headerHeight);
    this.doLayout();
  };

  GridApi.prototype.setFloatingFiltersHeight = function (headerHeight) {
    this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, headerHeight);
    this.doLayout();
  };

  GridApi.prototype.setPivotGroupHeaderHeight = function (headerHeight) {
    this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, headerHeight);
    this.doLayout();
  };

  GridApi.prototype.setPivotHeaderHeight = function (headerHeight) {
    this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, headerHeight);
    this.doLayout();
  };

  GridApi.prototype.isSideBarVisible = function () {
    return this.gridCore.isSideBarVisible();
  };

  GridApi.prototype.setSideBarVisible = function (show) {
    this.gridCore.setSideBarVisible(show);
  };

  GridApi.prototype.showToolPanel = function (show) {
    console.warn("ag-grid: from v19 api.showToolPanel has been deprecated in favour of api.setSideBarVisible");
    this.setSideBarVisible(show);
  };

  GridApi.prototype.openToolPanel = function (key) {
    this.gridCore.openToolPanel(key);
  };

  GridApi.prototype.closeToolPanel = function () {
    this.gridCore.closeToolPanel();
  };

  GridApi.prototype.getOpenedToolPanel = function () {
    return this.gridCore.getOpenedToolPanel();
  };

  GridApi.prototype.getSideBar = function () {
    return this.gridCore.getSideBar();
  };

  GridApi.prototype.setSideBar = function (def) {
    return this.gridCore.setSideBar(def);
  };

  GridApi.prototype.setSuppressClipboardPaste = function (value) {
    this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_SUPPRESS_CLIPBOARD_PASTE, value);
  };

  GridApi.prototype.isToolPanelShowing = function () {
    return this.gridCore.isToolPanelShowing();
  };

  GridApi.prototype.doLayout = function () {
    this.gridPanel.checkViewportAndScrolls();
  };

  GridApi.prototype.resetRowHeights = function () {
    if (utils_1._.exists(this.clientSideRowModel)) {
      this.clientSideRowModel.resetRowHeights();
    }
  };

  GridApi.prototype.setGroupRemoveSingleChildren = function (value) {
    this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, value);
  };

  GridApi.prototype.setGroupRemoveLowestSingleChildren = function (value) {
    this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, value);
  };

  GridApi.prototype.onRowHeightChanged = function () {
    if (utils_1._.exists(this.clientSideRowModel)) {
      this.clientSideRowModel.onRowHeightChanged();
    }
  };

  GridApi.prototype.getValue = function (colKey, rowNode) {
    var column = this.columnController.getPrimaryColumn(colKey);

    if (utils_1._.missing(column)) {
      column = this.columnController.getGridColumn(colKey);
    }

    if (utils_1._.missing(column)) {
      return null;
    } else {
      return this.valueService.getValue(column, rowNode);
    }
  };

  GridApi.prototype.addEventListener = function (eventType, listener) {
    var async = this.gridOptionsWrapper.useAsyncEvents();
    this.eventService.addEventListener(eventType, listener, async);
  };

  GridApi.prototype.addGlobalListener = function (listener) {
    var async = this.gridOptionsWrapper.useAsyncEvents();
    this.eventService.addGlobalListener(listener, async);
  };

  GridApi.prototype.removeEventListener = function (eventType, listener) {
    var async = this.gridOptionsWrapper.useAsyncEvents();
    this.eventService.removeEventListener(eventType, listener, async);
  };

  GridApi.prototype.removeGlobalListener = function (listener) {
    var async = this.gridOptionsWrapper.useAsyncEvents();
    this.eventService.removeGlobalListener(listener, async);
  };

  GridApi.prototype.dispatchEvent = function (event) {
    this.eventService.dispatchEvent(event);
  };

  GridApi.prototype.destroy = function () {
    // destroy the UI first (as they use the services)
    this.gridCore.destroy(); // destroy the services

    this.context.destroy();
  };

  GridApi.prototype.resetQuickFilter = function () {
    this.rowModel.forEachNode(function (node) {
      return node.quickFilterAggregateText = null;
    });
  };

  GridApi.prototype.getRangeSelections = function () {
    if (this.rangeController) {
      return this.rangeController.getCellRanges();
    } else {
      console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise');
      return null;
    }
  };

  GridApi.prototype.camelCaseToHumanReadable = function (camelCase) {
    return utils_1._.camelCaseToHumanText(camelCase);
  };

  GridApi.prototype.addRangeSelection = function (rangeSelection) {
    if (!this.rangeController) {
      console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise');
    }

    this.rangeController.addRange(rangeSelection);
  };

  GridApi.prototype.clearRangeSelection = function () {
    if (!this.rangeController) {
      console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise');
    }

    this.rangeController.clearSelection();
  };

  GridApi.prototype.copySelectedRowsToClipboard = function (includeHeader, columnKeys) {
    if (!this.clipboardService) {
      console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise');
    }

    this.clipboardService.copySelectedRowsToClipboard(includeHeader, columnKeys);
  };

  GridApi.prototype.copySelectedRangeToClipboard = function (includeHeader) {
    if (!this.clipboardService) {
      console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise');
    }

    this.clipboardService.copySelectedRangeToClipboard(includeHeader);
  };

  GridApi.prototype.copySelectedRangeDown = function () {
    if (!this.clipboardService) {
      console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise');
    }

    this.clipboardService.copyRangeDown();
  };

  GridApi.prototype.showColumnMenuAfterButtonClick = function (colKey, buttonElement) {
    var column = this.columnController.getPrimaryColumn(colKey);
    this.menuFactory.showMenuAfterButtonClick(column, buttonElement);
  };

  GridApi.prototype.showColumnMenuAfterMouseClick = function (colKey, mouseEvent) {
    var column = this.columnController.getPrimaryColumn(colKey);
    this.menuFactory.showMenuAfterMouseEvent(column, mouseEvent);
  };

  GridApi.prototype.hidePopupMenu = function () {
    // hide the context menu if in enterprise
    if (this.contextMenuFactory) {
      this.contextMenuFactory.hideActiveMenu();
    } // and hide the column menu always


    this.menuFactory.hideActiveMenu();
  };

  GridApi.prototype.setPopupParent = function (ePopupParent) {
    this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_POPUP_PARENT, ePopupParent);
  };

  GridApi.prototype.tabToNextCell = function () {
    return this.rowRenderer.tabToNextCell(false);
  };

  GridApi.prototype.tabToPreviousCell = function () {
    return this.rowRenderer.tabToNextCell(true);
  };

  GridApi.prototype.getCellRendererInstances = function (params) {
    if (params === void 0) {
      params = {};
    }

    return this.rowRenderer.getCellRendererInstances(params);
  };

  GridApi.prototype.getCellEditorInstances = function (params) {
    if (params === void 0) {
      params = {};
    }

    return this.rowRenderer.getCellEditorInstances(params);
  };

  GridApi.prototype.getEditingCells = function () {
    return this.rowRenderer.getEditingCells();
  };

  GridApi.prototype.stopEditing = function (cancel) {
    if (cancel === void 0) {
      cancel = false;
    }

    this.rowRenderer.stopEditing(cancel);
  };

  GridApi.prototype.startEditingCell = function (params) {
    var column = this.columnController.getGridColumn(params.colKey);

    if (!column) {
      console.warn("ag-Grid: no column found for " + params.colKey);
      return;
    }

    var gridCellDef = {
      rowIndex: params.rowIndex,
      floating: params.rowPinned,
      column: column
    };
    var gridCell = new gridCell_1.GridCell(gridCellDef);

    var notPinned = utils_1._.missing(params.rowPinned);

    if (notPinned) {
      this.gridPanel.ensureIndexVisible(params.rowIndex);
    }

    this.rowRenderer.startEditingCell(gridCell, params.keyPress, params.charPress);
  };

  GridApi.prototype.addAggFunc = function (key, aggFunc) {
    if (this.aggFuncService) {
      this.aggFuncService.addAggFunc(key, aggFunc);
    }
  };

  GridApi.prototype.addAggFuncs = function (aggFuncs) {
    if (this.aggFuncService) {
      this.aggFuncService.addAggFuncs(aggFuncs);
    }
  };

  GridApi.prototype.clearAggFuncs = function () {
    if (this.aggFuncService) {
      this.aggFuncService.clear();
    }
  };

  GridApi.prototype.updateRowData = function (rowDataTransaction) {
    var res = null;

    if (this.clientSideRowModel) {
      res = this.clientSideRowModel.updateRowData(rowDataTransaction);
    } else if (this.infinitePageRowModel) {
      this.infinitePageRowModel.updateRowData(rowDataTransaction);
    } else {
      console.error('ag-Grid: updateRowData() only works with ClientSideRowModel and InfiniteRowModel.');
    } // need to force updating of full width rows - note this wouldn't be necessary the full width cell comp listened
    // to the data change event on the row node and refreshed itself.


    this.rowRenderer.refreshFullWidthRows(); // do change detection for all present cells

    if (!this.gridOptionsWrapper.isSuppressChangeDetection()) {
      this.rowRenderer.refreshCells();
    }

    return res;
  };

  GridApi.prototype.batchUpdateRowData = function (rowDataTransaction, callback) {
    if (!this.clientSideRowModel) {
      console.error('ag-Grid: api.batchUpdateRowData() only works with ClientSideRowModel.');
      return;
    }

    this.clientSideRowModel.batchUpdateRowData(rowDataTransaction, callback);
  };

  GridApi.prototype.insertItemsAtIndex = function (index, items, skipRefresh) {
    if (skipRefresh === void 0) {
      skipRefresh = false;
    }

    console.warn('ag-Grid: insertItemsAtIndex() is deprecated, use updateRowData(transaction) instead.');
    this.updateRowData({
      add: items,
      addIndex: index,
      update: null,
      remove: null
    });
  };

  GridApi.prototype.removeItems = function (rowNodes, skipRefresh) {
    if (skipRefresh === void 0) {
      skipRefresh = false;
    }

    console.warn('ag-Grid: removeItems() is deprecated, use updateRowData(transaction) instead.');
    var dataToRemove = rowNodes.map(function (rowNode) {
      return rowNode.data;
    });
    this.updateRowData({
      add: null,
      addIndex: null,
      update: null,
      remove: dataToRemove
    });
  };

  GridApi.prototype.addItems = function (items, skipRefresh) {
    if (skipRefresh === void 0) {
      skipRefresh = false;
    }

    console.warn('ag-Grid: addItems() is deprecated, use updateRowData(transaction) instead.');
    this.updateRowData({
      add: items,
      addIndex: null,
      update: null,
      remove: null
    });
  };

  GridApi.prototype.refreshVirtualPageCache = function () {
    console.warn('ag-Grid: refreshVirtualPageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead');
    this.refreshInfiniteCache();
  };

  GridApi.prototype.refreshInfinitePageCache = function () {
    console.warn('ag-Grid: refreshInfinitePageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead');
    this.refreshInfiniteCache();
  };

  GridApi.prototype.refreshInfiniteCache = function () {
    if (this.infinitePageRowModel) {
      this.infinitePageRowModel.refreshCache();
    } else {
      console.warn("ag-Grid: api.refreshInfiniteCache is only available when rowModelType='infinite'.");
    }
  };

  GridApi.prototype.purgeVirtualPageCache = function () {
    console.warn('ag-Grid: purgeVirtualPageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead');
    this.purgeInfinitePageCache();
  };

  GridApi.prototype.purgeInfinitePageCache = function () {
    console.warn('ag-Grid: purgeInfinitePageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead');
    this.purgeInfiniteCache();
  };

  GridApi.prototype.purgeInfiniteCache = function () {
    if (this.infinitePageRowModel) {
      this.infinitePageRowModel.purgeCache();
    } else {
      console.warn("ag-Grid: api.purgeInfiniteCache is only available when rowModelType='infinite'.");
    }
  };
  /** @deprecated */


  GridApi.prototype.purgeEnterpriseCache = function (route) {
    console.warn("ag-grid: since version 18.x, api.purgeEnterpriseCache() should be replaced with api.purgeServerSideCache()");
    this.purgeServerSideCache(route);
  };

  GridApi.prototype.purgeServerSideCache = function (route) {
    if (this.serverSideRowModel) {
      this.serverSideRowModel.purgeCache(route);
    } else {
      console.warn("ag-Grid: api.purgeServerSideCache is only available when rowModelType='enterprise'.");
    }
  };

  GridApi.prototype.getVirtualRowCount = function () {
    console.warn('ag-Grid: getVirtualRowCount() is now called getInfiniteRowCount(), please call getInfiniteRowCount() instead');
    return this.getInfiniteRowCount();
  };

  GridApi.prototype.getInfiniteRowCount = function () {
    if (this.infinitePageRowModel) {
      return this.infinitePageRowModel.getVirtualRowCount();
    } else {
      console.warn("ag-Grid: api.getVirtualRowCount is only available when rowModelType='virtual'.");
    }
  };

  GridApi.prototype.isMaxRowFound = function () {
    if (this.infinitePageRowModel) {
      return this.infinitePageRowModel.isMaxRowFound();
    } else {
      console.warn("ag-Grid: api.isMaxRowFound is only available when rowModelType='virtual'.");
    }
  };

  GridApi.prototype.setVirtualRowCount = function (rowCount, maxRowFound) {
    console.warn('ag-Grid: setVirtualRowCount() is now called setInfiniteRowCount(), please call setInfiniteRowCount() instead');
    this.setInfiniteRowCount(rowCount, maxRowFound);
  };

  GridApi.prototype.setInfiniteRowCount = function (rowCount, maxRowFound) {
    if (this.infinitePageRowModel) {
      this.infinitePageRowModel.setVirtualRowCount(rowCount, maxRowFound);
    } else {
      console.warn("ag-Grid: api.setVirtualRowCount is only available when rowModelType='virtual'.");
    }
  };

  GridApi.prototype.getVirtualPageState = function () {
    console.warn('ag-Grid: getVirtualPageState() is now called getCacheBlockState(), please call getCacheBlockState() instead');
    return this.getCacheBlockState();
  };

  GridApi.prototype.getInfinitePageState = function () {
    console.warn('ag-Grid: getInfinitePageState() is now called getCacheBlockState(), please call getCacheBlockState() instead');
    return this.getCacheBlockState();
  };

  GridApi.prototype.getCacheBlockState = function () {
    if (this.infinitePageRowModel) {
      return this.infinitePageRowModel.getBlockState();
    } else if (this.serverSideRowModel) {
      return this.serverSideRowModel.getBlockState();
    } else {
      console.warn("ag-Grid: api.getCacheBlockState() is only available when rowModelType='infinite' or rowModelType='serverSide'.");
    }
  };

  GridApi.prototype.checkGridSize = function () {
    this.gridPanel.setHeaderAndFloatingHeights();
  };

  GridApi.prototype.getFirstRenderedRow = function () {
    console.warn('in ag-Grid v12, getFirstRenderedRow() was renamed to getFirstDisplayedRow()');
    return this.getFirstDisplayedRow();
  };

  GridApi.prototype.getFirstDisplayedRow = function () {
    return this.rowRenderer.getFirstVirtualRenderedRow();
  };

  GridApi.prototype.getLastRenderedRow = function () {
    console.warn('in ag-Grid v12, getLastRenderedRow() was renamed to getLastDisplayedRow()');
    return this.getLastDisplayedRow();
  };

  GridApi.prototype.getLastDisplayedRow = function () {
    return this.rowRenderer.getLastVirtualRenderedRow();
  };

  GridApi.prototype.getDisplayedRowAtIndex = function (index) {
    return this.rowModel.getRow(index);
  };

  GridApi.prototype.getDisplayedRowCount = function () {
    return this.rowModel.getRowCount();
  };

  GridApi.prototype.paginationIsLastPageFound = function () {
    return this.paginationProxy.isLastPageFound();
  };

  GridApi.prototype.paginationGetPageSize = function () {
    return this.paginationProxy.getPageSize();
  };

  GridApi.prototype.paginationSetPageSize = function (size) {
    this.gridOptionsWrapper.setProperty('paginationPageSize', size);
  };

  GridApi.prototype.paginationGetCurrentPage = function () {
    return this.paginationProxy.getCurrentPage();
  };

  GridApi.prototype.paginationGetTotalPages = function () {
    return this.paginationProxy.getTotalPages();
  };

  GridApi.prototype.paginationGetRowCount = function () {
    return this.paginationProxy.getTotalRowCount();
  };

  GridApi.prototype.paginationGoToNextPage = function () {
    this.paginationProxy.goToNextPage();
  };

  GridApi.prototype.paginationGoToPreviousPage = function () {
    this.paginationProxy.goToPreviousPage();
  };

  GridApi.prototype.paginationGoToFirstPage = function () {
    this.paginationProxy.goToFirstPage();
  };

  GridApi.prototype.paginationGoToLastPage = function () {
    this.paginationProxy.goToLastPage();
  };

  GridApi.prototype.paginationGoToPage = function (page) {
    this.paginationProxy.goToPage(page);
  };

  __decorate([context_1.Autowired('immutableService'), __metadata("design:type", immutableService_1.ImmutableService)], GridApi.prototype, "immutableService", void 0);

  __decorate([context_1.Autowired('csvCreator'), __metadata("design:type", csvCreator_1.CsvCreator)], GridApi.prototype, "csvCreator", void 0);

  __decorate([context_1.Optional('excelCreator'), __metadata("design:type", Object)], GridApi.prototype, "excelCreator", void 0);

  __decorate([context_1.Autowired('rowRenderer'), __metadata("design:type", rowRenderer_1.RowRenderer)], GridApi.prototype, "rowRenderer", void 0);

  __decorate([context_1.Autowired('filterManager'), __metadata("design:type", filterManager_1.FilterManager)], GridApi.prototype, "filterManager", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], GridApi.prototype, "columnController", void 0);

  __decorate([context_1.Autowired('selectionController'), __metadata("design:type", selectionController_1.SelectionController)], GridApi.prototype, "selectionController", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], GridApi.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('valueService'), __metadata("design:type", valueService_1.ValueService)], GridApi.prototype, "valueService", void 0);

  __decorate([context_1.Autowired('alignedGridsService'), __metadata("design:type", alignedGridsService_1.AlignedGridsService)], GridApi.prototype, "alignedGridsService", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], GridApi.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('pinnedRowModel'), __metadata("design:type", pinnedRowModel_1.PinnedRowModel)], GridApi.prototype, "pinnedRowModel", void 0);

  __decorate([context_1.Autowired('context'), __metadata("design:type", context_1.Context)], GridApi.prototype, "context", void 0);

  __decorate([context_1.Autowired('rowModel'), __metadata("design:type", Object)], GridApi.prototype, "rowModel", void 0);

  __decorate([context_1.Autowired('sortController'), __metadata("design:type", sortController_1.SortController)], GridApi.prototype, "sortController", void 0);

  __decorate([context_1.Autowired('paginationProxy'), __metadata("design:type", paginationProxy_1.PaginationProxy)], GridApi.prototype, "paginationProxy", void 0);

  __decorate([context_1.Autowired('focusedCellController'), __metadata("design:type", focusedCellController_1.FocusedCellController)], GridApi.prototype, "focusedCellController", void 0);

  __decorate([context_1.Optional('rangeController'), __metadata("design:type", Object)], GridApi.prototype, "rangeController", void 0);

  __decorate([context_1.Optional('clipboardService'), __metadata("design:type", Object)], GridApi.prototype, "clipboardService", void 0);

  __decorate([context_1.Optional('aggFuncService'), __metadata("design:type", Object)], GridApi.prototype, "aggFuncService", void 0);

  __decorate([context_1.Autowired('menuFactory'), __metadata("design:type", Object)], GridApi.prototype, "menuFactory", void 0);

  __decorate([context_1.Optional('contextMenuFactory'), __metadata("design:type", Object)], GridApi.prototype, "contextMenuFactory", void 0);

  __decorate([context_1.Autowired('cellRendererFactory'), __metadata("design:type", cellRendererFactory_1.CellRendererFactory)], GridApi.prototype, "cellRendererFactory", void 0);

  __decorate([context_1.Autowired('valueCache'), __metadata("design:type", valueCache_1.ValueCache)], GridApi.prototype, "valueCache", void 0);

  __decorate([context_1.Optional('sideBarComp'), __metadata("design:type", Object)], GridApi.prototype, "sideBarComp", void 0);

  __decorate([context_1.Autowired('animationFrameService'), __metadata("design:type", animationFrameService_1.AnimationFrameService)], GridApi.prototype, "animationFrameService", void 0);

  __decorate([context_1.Optional('statusBarService'), __metadata("design:type", Object)], GridApi.prototype, "statusBarService", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], GridApi.prototype, "init", null);

  GridApi = __decorate([context_1.Bean('gridApi')], GridApi);
  return GridApi;
}();

exports.GridApi = GridApi;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var columnController_1 = __webpack_require__(17);

var context_1 = __webpack_require__(2);

var ColumnApi =
/** @class */
function () {
  function ColumnApi() {}

  ColumnApi.prototype.sizeColumnsToFit = function (gridWidth) {
    this.columnController.sizeColumnsToFit(gridWidth, 'api');
  };

  ColumnApi.prototype.setColumnGroupOpened = function (group, newValue) {
    this.columnController.setColumnGroupOpened(group, newValue, 'api');
  };

  ColumnApi.prototype.getColumnGroup = function (name, instanceId) {
    return this.columnController.getColumnGroup(name, instanceId);
  };

  ColumnApi.prototype.getOriginalColumnGroup = function (name) {
    return this.columnController.getOriginalColumnGroup(name);
  };

  ColumnApi.prototype.getDisplayNameForColumn = function (column, location) {
    return this.columnController.getDisplayNameForColumn(column, location);
  };

  ColumnApi.prototype.getDisplayNameForColumnGroup = function (columnGroup, location) {
    return this.columnController.getDisplayNameForColumnGroup(columnGroup, location);
  };

  ColumnApi.prototype.getColumn = function (key) {
    return this.columnController.getPrimaryColumn(key);
  };

  ColumnApi.prototype.setColumnState = function (columnState) {
    return this.columnController.setColumnState(columnState, false, 'api');
  };

  ColumnApi.prototype.getColumnState = function () {
    return this.columnController.getColumnState();
  };

  ColumnApi.prototype.resetColumnState = function () {
    this.columnController.resetColumnState(false, 'api');
  };

  ColumnApi.prototype.getColumnGroupState = function () {
    return this.columnController.getColumnGroupState();
  };

  ColumnApi.prototype.setColumnGroupState = function (stateItems) {
    this.columnController.setColumnGroupState(stateItems, 'api');
  };

  ColumnApi.prototype.resetColumnGroupState = function () {
    this.columnController.resetColumnGroupState('api');
  };

  ColumnApi.prototype.isPinning = function () {
    return this.columnController.isPinningLeft() || this.columnController.isPinningRight();
  };

  ColumnApi.prototype.isPinningLeft = function () {
    return this.columnController.isPinningLeft();
  };

  ColumnApi.prototype.isPinningRight = function () {
    return this.columnController.isPinningRight();
  };

  ColumnApi.prototype.getDisplayedColAfter = function (col) {
    return this.columnController.getDisplayedColAfter(col);
  };

  ColumnApi.prototype.getDisplayedColBefore = function (col) {
    return this.columnController.getDisplayedColBefore(col);
  };

  ColumnApi.prototype.setColumnVisible = function (key, visible) {
    this.columnController.setColumnVisible(key, visible, 'api');
  };

  ColumnApi.prototype.setColumnsVisible = function (keys, visible) {
    this.columnController.setColumnsVisible(keys, visible, 'api');
  };

  ColumnApi.prototype.setColumnPinned = function (key, pinned) {
    this.columnController.setColumnPinned(key, pinned, 'api');
  };

  ColumnApi.prototype.setColumnsPinned = function (keys, pinned) {
    this.columnController.setColumnsPinned(keys, pinned, 'api');
  };

  ColumnApi.prototype.getAllColumns = function () {
    return this.columnController.getAllPrimaryColumns();
  };

  ColumnApi.prototype.getAllGridColumns = function () {
    return this.columnController.getAllGridColumns();
  };

  ColumnApi.prototype.getDisplayedLeftColumns = function () {
    return this.columnController.getDisplayedLeftColumns();
  };

  ColumnApi.prototype.getDisplayedCenterColumns = function () {
    return this.columnController.getDisplayedCenterColumns();
  };

  ColumnApi.prototype.getDisplayedRightColumns = function () {
    return this.columnController.getDisplayedRightColumns();
  };

  ColumnApi.prototype.getAllDisplayedColumns = function () {
    return this.columnController.getAllDisplayedColumns();
  };

  ColumnApi.prototype.getAllDisplayedVirtualColumns = function () {
    return this.columnController.getAllDisplayedVirtualColumns();
  };

  ColumnApi.prototype.moveColumn = function (key, toIndex) {
    if (typeof key === 'number') {
      // moveColumn used to take indexes, so this is advising user who hasn't moved to new method name
      console.warn('ag-Grid: you are using moveColumn(fromIndex, toIndex) - moveColumn takes a column key and a destination index, not two indexes, to move with indexes use moveColumnByIndex(from,to) instead');
      this.columnController.moveColumnByIndex(key, toIndex, 'api');
    } else {
      this.columnController.moveColumn(key, toIndex, 'api');
    }
  };

  ColumnApi.prototype.moveColumnByIndex = function (fromIndex, toIndex) {
    this.columnController.moveColumnByIndex(fromIndex, toIndex, 'api');
  };

  ColumnApi.prototype.moveColumns = function (columnsToMoveKeys, toIndex) {
    this.columnController.moveColumns(columnsToMoveKeys, toIndex, 'api');
  };

  ColumnApi.prototype.moveRowGroupColumn = function (fromIndex, toIndex) {
    this.columnController.moveRowGroupColumn(fromIndex, toIndex);
  };

  ColumnApi.prototype.setColumnAggFunc = function (column, aggFunc) {
    this.columnController.setColumnAggFunc(column, aggFunc);
  };

  ColumnApi.prototype.setColumnWidth = function (key, newWidth, finished) {
    if (finished === void 0) {
      finished = true;
    }

    this.columnController.setColumnWidth(key, newWidth, false, finished);
  };

  ColumnApi.prototype.setPivotMode = function (pivotMode) {
    this.columnController.setPivotMode(pivotMode);
  };

  ColumnApi.prototype.isPivotMode = function () {
    return this.columnController.isPivotMode();
  };

  ColumnApi.prototype.getSecondaryPivotColumn = function (pivotKeys, valueColKey) {
    return this.columnController.getSecondaryPivotColumn(pivotKeys, valueColKey);
  };

  ColumnApi.prototype.setValueColumns = function (colKeys) {
    this.columnController.setValueColumns(colKeys, 'api');
  };

  ColumnApi.prototype.getValueColumns = function () {
    return this.columnController.getValueColumns();
  };

  ColumnApi.prototype.removeValueColumn = function (colKey) {
    this.columnController.removeValueColumn(colKey, 'api');
  };

  ColumnApi.prototype.removeValueColumns = function (colKeys) {
    this.columnController.removeValueColumns(colKeys, 'api');
  };

  ColumnApi.prototype.addValueColumn = function (colKey) {
    this.columnController.addValueColumn(colKey, 'api');
  };

  ColumnApi.prototype.addValueColumns = function (colKeys) {
    this.columnController.addValueColumns(colKeys, 'api');
  };

  ColumnApi.prototype.setRowGroupColumns = function (colKeys) {
    this.columnController.setRowGroupColumns(colKeys, 'api');
  };

  ColumnApi.prototype.removeRowGroupColumn = function (colKey) {
    this.columnController.removeRowGroupColumn(colKey, 'api');
  };

  ColumnApi.prototype.removeRowGroupColumns = function (colKeys) {
    this.columnController.removeRowGroupColumns(colKeys, 'api');
  };

  ColumnApi.prototype.addRowGroupColumn = function (colKey) {
    this.columnController.addRowGroupColumn(colKey, 'api');
  };

  ColumnApi.prototype.addRowGroupColumns = function (colKeys) {
    this.columnController.addRowGroupColumns(colKeys, 'api');
  };

  ColumnApi.prototype.getRowGroupColumns = function () {
    return this.columnController.getRowGroupColumns();
  };

  ColumnApi.prototype.setPivotColumns = function (colKeys) {
    this.columnController.setPivotColumns(colKeys, 'api');
  };

  ColumnApi.prototype.removePivotColumn = function (colKey) {
    this.columnController.removePivotColumn(colKey, 'api');
  };

  ColumnApi.prototype.removePivotColumns = function (colKeys) {
    this.columnController.removePivotColumns(colKeys, 'api');
  };

  ColumnApi.prototype.addPivotColumn = function (colKey) {
    this.columnController.addPivotColumn(colKey, 'api');
  };

  ColumnApi.prototype.addPivotColumns = function (colKeys) {
    this.columnController.addPivotColumns(colKeys, 'api');
  };

  ColumnApi.prototype.getPivotColumns = function () {
    return this.columnController.getPivotColumns();
  };

  ColumnApi.prototype.getLeftDisplayedColumnGroups = function () {
    return this.columnController.getLeftDisplayedColumnGroups();
  };

  ColumnApi.prototype.getCenterDisplayedColumnGroups = function () {
    return this.columnController.getCenterDisplayedColumnGroups();
  };

  ColumnApi.prototype.getRightDisplayedColumnGroups = function () {
    return this.columnController.getRightDisplayedColumnGroups();
  };

  ColumnApi.prototype.getAllDisplayedColumnGroups = function () {
    return this.columnController.getAllDisplayedColumnGroups();
  };

  ColumnApi.prototype.autoSizeColumn = function (key) {
    return this.columnController.autoSizeColumn(key, 'api');
  };

  ColumnApi.prototype.autoSizeColumns = function (keys) {
    return this.columnController.autoSizeColumns(keys, 'api');
  };

  ColumnApi.prototype.autoSizeAllColumns = function () {
    this.columnController.autoSizeAllColumns('api');
  };

  ColumnApi.prototype.setSecondaryColumns = function (colDefs) {
    this.columnController.setSecondaryColumns(colDefs, 'api');
  };

  ColumnApi.prototype.getSecondaryColumns = function () {
    return this.columnController.getSecondaryColumns();
  };

  ColumnApi.prototype.getPrimaryColumns = function () {
    return this.columnController.getAllPrimaryColumns();
  }; // below goes through deprecated items, prints message to user, then calls the new version of the same method


  ColumnApi.prototype.columnGroupOpened = function (group, newValue) {
    console.error('ag-Grid: columnGroupOpened no longer exists, use setColumnGroupOpened');
    this.setColumnGroupOpened(group, newValue);
  };

  ColumnApi.prototype.hideColumns = function (colIds, hide) {
    console.error('ag-Grid: hideColumns is deprecated, use setColumnsVisible');
    this.columnController.setColumnsVisible(colIds, !hide, 'api');
  };

  ColumnApi.prototype.hideColumn = function (colId, hide) {
    console.error('ag-Grid: hideColumn is deprecated, use setColumnVisible');
    this.columnController.setColumnVisible(colId, !hide, 'api');
  };

  ColumnApi.prototype.setState = function (columnState) {
    console.error('ag-Grid: setState is deprecated, use setColumnState');
    return this.setColumnState(columnState);
  };

  ColumnApi.prototype.getState = function () {
    console.error('ag-Grid: getState is deprecated, use getColumnState');
    return this.getColumnState();
  };

  ColumnApi.prototype.resetState = function () {
    console.error('ag-Grid: resetState is deprecated, use resetColumnState');
    this.resetColumnState();
  };

  ColumnApi.prototype.getAggregationColumns = function () {
    console.error('ag-Grid: getAggregationColumns is deprecated, use getValueColumns');
    return this.columnController.getValueColumns();
  };

  ColumnApi.prototype.removeAggregationColumn = function (colKey) {
    console.error('ag-Grid: removeAggregationColumn is deprecated, use removeValueColumn');
    this.columnController.removeValueColumn(colKey, 'api');
  };

  ColumnApi.prototype.removeAggregationColumns = function (colKeys) {
    console.error('ag-Grid: removeAggregationColumns is deprecated, use removeValueColumns');
    this.columnController.removeValueColumns(colKeys, 'api');
  };

  ColumnApi.prototype.addAggregationColumn = function (colKey) {
    console.error('ag-Grid: addAggregationColumn is deprecated, use addValueColumn');
    this.columnController.addValueColumn(colKey, 'api');
  };

  ColumnApi.prototype.addAggregationColumns = function (colKeys) {
    console.error('ag-Grid: addAggregationColumns is deprecated, use addValueColumns');
    this.columnController.addValueColumns(colKeys, 'api');
  };

  ColumnApi.prototype.setColumnAggFunction = function (column, aggFunc) {
    console.error('ag-Grid: setColumnAggFunction is deprecated, use setColumnAggFunc');
    this.columnController.setColumnAggFunc(column, aggFunc, 'api');
  };

  ColumnApi.prototype.getDisplayNameForCol = function (column) {
    console.error('ag-Grid: getDisplayNameForCol is deprecated, use getDisplayNameForColumn');
    return this.getDisplayNameForColumn(column, null);
  };

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], ColumnApi.prototype, "columnController", void 0);

  ColumnApi = __decorate([context_1.Bean('columnApi')], ColumnApi);
  return ColumnApi;
}();

exports.ColumnApi = ColumnApi;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var beanStub_1 = __webpack_require__(32);

var utils_1 = __webpack_require__(6);

var compIdSequence = new utils_1.NumberSequence();

var Component =
/** @class */
function (_super) {
  __extends(Component, _super);

  function Component(template) {
    var _this = _super.call(this) || this;

    _this.childComponents = [];
    _this.annotatedEventListeners = [];
    _this.visible = true; // unique id for this row component. this is used for getting a reference to the HTML dom.
    // we cannot use the RowNode id as this is not unique (due to animation, old rows can be lying
    // around as we create a new rowComp instance for the same row node).

    _this.compId = compIdSequence.next();

    if (template) {
      _this.setTemplate(template);
    }

    return _this;
  }

  Component.prototype.getCompId = function () {
    return this.compId;
  }; // for registered components only, eg creates AgCheckbox instance from ag-checkbox HTML tag


  Component.prototype.createChildComponentsFromTags = function (parentNode) {
    var _this = this; // we MUST take a copy of the list first, as the 'swapComponentForNode' adds comments into the DOM
    // which messes up the traversal order of the children.


    var childNodeList = utils_1._.copyNodeList(parentNode.childNodes);

    childNodeList.forEach(function (childNode) {
      var childComp = _this.getContext().createComponentFromElement(childNode, function (childComp) {
        // copy over all attributes, including css classes, so any attributes user put on the tag
        // wll be carried across
        _this.copyAttributesFromNode(childNode, childComp.getGui());
      });

      if (childComp) {
        // replace the tag (eg ag-checkbox) with the proper HTMLElement (eg 'div') in the dom
        _this.swapComponentForNode(childComp, parentNode, childNode);
      } else if (childNode.childNodes) {
        _this.createChildComponentsFromTags(childNode);
      }
    });
  };

  Component.prototype.copyAttributesFromNode = function (source, dest) {
    utils_1._.iterateNamedNodeMap(source.attributes, function (name, value) {
      dest.setAttribute(name, value);
    });
  };

  Component.prototype.swapComponentForNode = function (newComponent, parentNode, childNode) {
    var eComponent = newComponent.getGui();
    parentNode.replaceChild(eComponent, childNode);
    parentNode.insertBefore(document.createComment(childNode.nodeName), eComponent);
    this.childComponents.push(newComponent);
    this.swapInComponentForQuerySelectors(newComponent, childNode);
  };

  Component.prototype.swapInComponentForQuerySelectors = function (newComponent, childNode) {
    var thisProto = Object.getPrototypeOf(this);
    var thisNoType = this;

    while (thisProto != null) {
      var metaData = thisProto.__agComponentMetaData;
      var currentProtoName = thisProto.constructor.name;

      if (metaData && metaData[currentProtoName] && metaData[currentProtoName].querySelectors) {
        metaData[currentProtoName].querySelectors.forEach(function (querySelector) {
          if (thisNoType[querySelector.attributeName] === childNode) {
            thisNoType[querySelector.attributeName] = newComponent;
          }
        });
      }

      thisProto = Object.getPrototypeOf(thisProto);
    }
  };

  Component.prototype.setTemplate = function (template) {
    var eGui = utils_1._.loadTemplate(template);

    this.setTemplateFromElement(eGui);
  };

  Component.prototype.setTemplateFromElement = function (element) {
    this.eGui = element;
    this.eGui.__agComponent = this;
    this.addAnnotatedEventListeners();
    this.wireQuerySelectors(); // context will not be available when user sets template in constructor

    var contextIsAvailable = !!this.getContext();

    if (contextIsAvailable) {
      this.createChildComponentsFromTags(this.getGui());
    }
  };

  Component.prototype.createChildComponentsPreConstruct = function () {
    // ui exists if user sets template in constructor. when this happens, we have to wait for the context
    // to be autoWired first before we can create child components.
    var uiExists = !!this.getGui();

    if (uiExists) {
      this.createChildComponentsFromTags(this.getGui());
    }
  };

  Component.prototype.wireQuerySelectors = function () {
    var _this = this;

    if (!this.eGui) {
      return;
    }

    var thisProto = Object.getPrototypeOf(this);

    var _loop_1 = function _loop_1() {
      var metaData = thisProto.__agComponentMetaData;
      var currentProtoName = thisProto.constructor.name;

      if (metaData && metaData[currentProtoName] && metaData[currentProtoName].querySelectors) {
        var thisNoType_1 = this_1;
        metaData[currentProtoName].querySelectors.forEach(function (querySelector) {
          var resultOfQuery = _this.eGui.querySelector(querySelector.querySelector);

          if (resultOfQuery) {
            var backingComponent = resultOfQuery.__agComponent;

            if (backingComponent) {
              thisNoType_1[querySelector.attributeName] = backingComponent;
            } else {
              thisNoType_1[querySelector.attributeName] = resultOfQuery;
            }
          } else {// put debug msg in here if query selector fails???
          }
        });
      }

      thisProto = Object.getPrototypeOf(thisProto);
    };

    var this_1 = this;

    while (thisProto != null) {
      _loop_1();
    }
  };

  Component.prototype.addAnnotatedEventListeners = function () {
    var _this = this;

    this.removeAnnotatedEventListeners();

    if (!this.eGui) {
      return;
    }

    var listenerMethods = this.getAgComponentMetaData('listenerMethods');

    if (utils_1._.missingOrEmpty(listenerMethods)) {
      return;
    }

    if (!this.annotatedEventListeners) {
      this.annotatedEventListeners = [];
    }

    listenerMethods.forEach(function (eventListener) {
      var listener = _this[eventListener.methodName].bind(_this);

      _this.eGui.addEventListener(eventListener.eventName, listener);

      _this.annotatedEventListeners.push({
        eventName: eventListener.eventName,
        listener: listener
      });
    });
  };

  Component.prototype.getAgComponentMetaData = function (key) {
    var res = [];
    var thisProto = Object.getPrototypeOf(this);

    while (thisProto != null) {
      var metaData = thisProto.__agComponentMetaData;
      var currentProtoName = thisProto.constructor.name;

      if (metaData && metaData[currentProtoName] && metaData[currentProtoName][key]) {
        res = res.concat(metaData[currentProtoName][key]);
      }

      thisProto = Object.getPrototypeOf(thisProto);
    }

    return res;
  };

  Component.prototype.removeAnnotatedEventListeners = function () {
    var _this = this;

    if (!this.annotatedEventListeners || !this.eGui) {
      return;
    }

    this.annotatedEventListeners.forEach(function (eventListener) {
      _this.eGui.removeEventListener(eventListener.eventName, eventListener.listener);
    });
    this.annotatedEventListeners = [];
  };

  Component.prototype.getGui = function () {
    return this.eGui;
  }; // this method is for older code, that wants to provide the gui element,
  // it is not intended for this to be in ag-Stack


  Component.prototype.setGui = function (eGui) {
    this.eGui = eGui;
  };

  Component.prototype.queryForHtmlElement = function (cssSelector) {
    return this.eGui.querySelector(cssSelector);
  };

  Component.prototype.queryForHtmlInputElement = function (cssSelector) {
    return this.eGui.querySelector(cssSelector);
  };

  Component.prototype.appendChild = function (newChild) {
    if (utils_1._.isNodeOrElement(newChild)) {
      this.eGui.appendChild(newChild);
    } else {
      var childComponent = newChild;
      this.eGui.appendChild(childComponent.getGui());
      this.childComponents.push(childComponent);
    }
  };

  Component.prototype.addFeature = function (context, feature) {
    context.wireBean(feature);

    if (feature.destroy) {
      this.addDestroyFunc(feature.destroy.bind(feature));
    }
  };

  Component.prototype.isVisible = function () {
    return this.visible;
  };

  Component.prototype.setVisible = function (visible, visibilityMode) {
    var isDisplay = visibilityMode !== 'visibility';

    if (visible !== this.visible) {
      this.visible = visible;

      utils_1._.addOrRemoveCssClass(this.eGui, isDisplay ? 'ag-hidden' : 'ag-invisible', !visible);

      var event_1 = {
        type: Component.EVENT_VISIBLE_CHANGED,
        visible: this.visible
      };
      this.dispatchEvent(event_1);
    }
  };

  Component.prototype.addOrRemoveCssClass = function (className, addOrRemove) {
    utils_1._.addOrRemoveCssClass(this.eGui, className, addOrRemove);
  };

  Component.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this.childComponents.forEach(function (childComponent) {
      if (childComponent && childComponent.destroy) {
        childComponent.destroy();
      }
    });
    this.childComponents.length = 0;
    this.removeAnnotatedEventListeners();
  };

  Component.prototype.addGuiEventListener = function (event, listener) {
    var _this = this;

    this.getGui().addEventListener(event, listener);
    this.addDestroyFunc(function () {
      return _this.getGui().removeEventListener(event, listener);
    });
  };

  Component.prototype.addCssClass = function (className) {
    utils_1._.addCssClass(this.getGui(), className);
  };

  Component.prototype.removeCssClass = function (className) {
    utils_1._.removeCssClass(this.getGui(), className);
  };

  Component.prototype.getAttribute = function (key) {
    var eGui = this.getGui();
    return eGui ? eGui.getAttribute(key) : null;
  };

  Component.prototype.getRefElement = function (refName) {
    return this.queryForHtmlElement('[ref="' + refName + '"]');
  };

  Component.EVENT_VISIBLE_CHANGED = 'visibleChanged';

  __decorate([context_1.PreConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], Component.prototype, "createChildComponentsPreConstruct", null);

  return Component;
}(beanStub_1.BeanStub);

exports.Component = Component;

/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}
// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js
function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}
// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}
// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _toConsumableArray; });



function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var eventService_1 = __webpack_require__(14);

var utils_1 = __webpack_require__(6);

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var columnUtils_1 = __webpack_require__(69);

var columnApi_1 = __webpack_require__(21);

var gridApi_1 = __webpack_require__(20); // Wrapper around a user provide column definition. The grid treats the column definition as ready only.
// This class contains all the runtime information about a column, plus some logic (the definition has no logic).
// This class implements both interfaces ColumnGroupChild and OriginalColumnGroupChild as the class can
// appear as a child of either the original tree or the displayed tree. However the relevant group classes
// for each type only implements one, as each group can only appear in it's associated tree (eg OriginalColumnGroup
// can only appear in OriginalColumn tree).


var Column =
/** @class */
function () {
  function Column(colDef, userProvidedColDef, colId, primary) {
    this.moving = false;
    this.menuVisible = false;
    this.filterActive = false;
    this.eventService = new eventService_1.EventService();
    this.rowGroupActive = false;
    this.pivotActive = false;
    this.aggregationActive = false;
    this.colDef = colDef;
    this.userProvidedColDef = userProvidedColDef;
    this.visible = !colDef.hide;
    this.sort = colDef.sort;
    this.sortedAt = colDef.sortedAt;
    this.colId = colId;
    this.primary = primary;
    this.lockPosition = colDef.lockPosition === true;
    this.lockPinned = colDef.lockPinned === true;
    this.lockVisible = colDef.lockVisible === true;
  } // gets called when user provides an alternative colDef, eg


  Column.prototype.setColDef = function (colDef, userProvidedColDef) {
    this.colDef = colDef;
    this.userProvidedColDef = userProvidedColDef;
  };

  Column.prototype.getUserProvidedColDef = function () {
    return this.userProvidedColDef;
  };

  Column.prototype.isLockPosition = function () {
    return this.lockPosition;
  };

  Column.prototype.isLockVisible = function () {
    return this.lockVisible;
  };

  Column.prototype.isLockPinned = function () {
    return this.lockPinned;
  };

  Column.prototype.setParent = function (parent) {
    this.parent = parent;
  };

  Column.prototype.getParent = function () {
    return this.parent;
  };

  Column.prototype.setOriginalParent = function (originalParent) {
    this.originalParent = originalParent;
  };

  Column.prototype.getOriginalParent = function () {
    return this.originalParent;
  }; // this is done after constructor as it uses gridOptionsWrapper


  Column.prototype.initialise = function () {
    this.setPinned(this.colDef.pinned);
    var minColWidth = this.gridOptionsWrapper.getMinColWidth();
    var maxColWidth = this.gridOptionsWrapper.getMaxColWidth();

    if (this.colDef.minWidth) {
      this.minWidth = this.colDef.minWidth;
    } else {
      this.minWidth = minColWidth;
    }

    if (this.colDef.maxWidth) {
      this.maxWidth = this.colDef.maxWidth;
    } else {
      this.maxWidth = maxColWidth;
    }

    this.actualWidth = this.columnUtils.calculateColInitialWidth(this.colDef);
    var suppressDotNotation = this.gridOptionsWrapper.isSuppressFieldDotNotation();
    this.fieldContainsDots = utils_1._.exists(this.colDef.field) && this.colDef.field.indexOf('.') >= 0 && !suppressDotNotation;
    this.tooltipFieldContainsDots = utils_1._.exists(this.colDef.tooltipField) && this.colDef.tooltipField.indexOf('.') >= 0 && !suppressDotNotation;
    this.validate();
  };

  Column.prototype.isEmptyGroup = function () {
    return false;
  };

  Column.prototype.isRowGroupDisplayed = function (colId) {
    if (utils_1._.missing(this.colDef) || utils_1._.missing(this.colDef.showRowGroup)) {
      return false;
    }

    var showingAllGroups = this.colDef.showRowGroup === true;
    var showingThisGroup = this.colDef.showRowGroup === colId;
    return showingAllGroups || showingThisGroup;
  };

  Column.prototype.getUniqueId = function () {
    return this.getId();
  };

  Column.prototype.isPrimary = function () {
    return this.primary;
  };

  Column.prototype.isFilterAllowed = function () {
    // filter defined means it's a string, class or true.
    // if its false, null or undefined then it's false.
    var filterDefined = !!this.colDef.filter || !!this.colDef.filterFramework;
    return this.primary && filterDefined;
  };

  Column.prototype.isFieldContainsDots = function () {
    return this.fieldContainsDots;
  };

  Column.prototype.isTooltipFieldContainsDots = function () {
    return this.tooltipFieldContainsDots;
  };

  Column.prototype.validate = function () {
    var colDefAny = this.colDef;

    if (!this.gridOptionsWrapper.isEnterprise()) {
      var itemsNotAllowedWithoutEnterprise = ['enableRowGroup', 'rowGroup', 'rowGroupIndex', 'enablePivot', 'pivot', 'pivotIndex', 'aggFunc'];
      itemsNotAllowedWithoutEnterprise.forEach(function (item) {
        if (utils_1._.exists(colDefAny[item])) {
          console.warn("ag-Grid: " + item + " is only valid in ag-Grid-Enterprise, your column definition should not have " + item);
        }
      });
    }

    if (this.gridOptionsWrapper.isTreeData()) {
      var itemsNotAllowedWithTreeData = ['rowGroup', 'rowGroupIndex', 'pivot', 'pivotIndex'];
      itemsNotAllowedWithTreeData.forEach(function (item) {
        if (utils_1._.exists(colDefAny[item])) {
          console.warn("ag-Grid: " + item + " is not possible when doing tree data, your column definition should not have " + item);
        }
      });
    }

    if (utils_1._.exists(this.colDef.width) && typeof this.colDef.width !== 'number') {
      console.warn('ag-Grid: colDef.width should be a number, not ' + typeof this.colDef.width);
    }

    if (utils_1._.get(this, 'colDef.cellRendererParams.restrictToOneGroup', null)) {
      console.warn('ag-Grid: Since ag-grid 11.0.0 cellRendererParams.restrictToOneGroup is deprecated. You should use showRowGroup');
    }

    if (utils_1._.get(this, 'colDef.cellRendererParams.keyMap', null)) {
      console.warn('ag-Grid: Since ag-grid 11.0.0 cellRendererParams.keyMap is deprecated. You should use colDef.keyCreator');
    }

    if (utils_1._.get(this, 'colDef.cellRendererParams.keyMap', null)) {
      console.warn('ag-Grid: Since ag-grid 11.0.0 cellRendererParams.keyMap is deprecated. You should use colDef.keyCreator');
    }

    if (colDefAny.floatingCellRenderer) {
      console.warn('ag-Grid: since v11, floatingCellRenderer is now pinnedRowCellRenderer');
      this.colDef.pinnedRowCellRenderer = colDefAny.floatingCellRenderer;
    }

    if (colDefAny.floatingRendererFramework) {
      console.warn('ag-Grid: since v11, floatingRendererFramework is now pinnedRowCellRendererFramework');
      this.colDef.pinnedRowCellRendererFramework = colDefAny.floatingRendererFramework;
    }

    if (colDefAny.floatingRendererParams) {
      console.warn('ag-Grid: since v11, floatingRendererParams is now pinnedRowCellRendererParams');
      this.colDef.pinnedRowCellRendererParams = colDefAny.floatingRendererParams;
    }

    if (colDefAny.floatingValueFormatter) {
      console.warn('ag-Grid: since v11, floatingValueFormatter is now pinnedRowValueFormatter');
      this.colDef.pinnedRowValueFormatter = colDefAny.floatingValueFormatter;
    }

    if (colDefAny.cellFormatter) {
      console.warn('ag-Grid: since v12, cellFormatter is now valueFormatter');

      if (utils_1._.missing(this.colDef.valueFormatter)) {
        this.colDef.valueFormatter = colDefAny.cellFormatter;
      }
    }

    if (colDefAny.headerCellTemplate) {
      console.warn('ag-Grid: since v15, headerCellTemplate is gone, use header component instead.');
    }

    if (colDefAny.headerCellRenderer) {
      console.warn('ag-Grid: since v15, headerCellRenderer is gone, use header component instead.');
    }

    if (colDefAny.volatile) {
      console.warn('ag-Grid: since v16, colDef.volatile is gone, please check refresh docs on how to refresh specific cells.');
    }

    if (colDefAny.suppressSorting) {
      console.warn("ag-Grid: since v20, colDef.suppressSorting is gone, instead use colDef.sortable=false.", this.colDef);
      this.colDef.sortable = false;
    }

    if (colDefAny.suppressFilter) {
      console.warn("ag-Grid: since v20, colDef.suppressFilter is gone, instead use colDef.filter=false.", this.colDef);
      this.colDef.filter = false;
    }

    if (colDefAny.suppressResize) {
      console.warn("ag-Grid: since v20, colDef.suppressResize is gone, instead use colDef.resizable=false.", this.colDef);
      this.colDef.resizable = false;
    }

    if (colDefAny.tooltip) {
      console.warn("ag-Grid: since v20.1, colDef.tooltip is gone, instead use colDef.tooltipValueGetter.", this.colDef);
      this.colDef.tooltipValueGetter = colDefAny.tooltip;
    }
  };

  Column.prototype.addEventListener = function (eventType, listener) {
    this.eventService.addEventListener(eventType, listener);
  };

  Column.prototype.removeEventListener = function (eventType, listener) {
    this.eventService.removeEventListener(eventType, listener);
  };

  Column.prototype.createIsColumnFuncParams = function (rowNode) {
    return {
      node: rowNode,
      data: rowNode.data,
      column: this,
      colDef: this.colDef,
      context: this.gridOptionsWrapper.getContext(),
      api: this.gridOptionsWrapper.getApi(),
      columnApi: this.gridOptionsWrapper.getColumnApi()
    };
  };

  Column.prototype.isSuppressNavigable = function (rowNode) {
    // if boolean set, then just use it
    if (typeof this.colDef.suppressNavigable === 'boolean') {
      return this.colDef.suppressNavigable;
    } // if function, then call the function to find out


    if (typeof this.colDef.suppressNavigable === 'function') {
      var params = this.createIsColumnFuncParams(rowNode);
      var userFunc = this.colDef.suppressNavigable;
      return userFunc(params);
    }

    return false;
  };

  Column.prototype.isCellEditable = function (rowNode) {
    // only allow editing of groups if the user has this option enabled
    if (rowNode.group && !this.gridOptionsWrapper.isEnableGroupEdit()) {
      return false;
    }

    return this.isColumnFunc(rowNode, this.colDef.editable);
  };

  Column.prototype.isRowDrag = function (rowNode) {
    return this.isColumnFunc(rowNode, this.colDef.rowDrag);
  };

  Column.prototype.isCellCheckboxSelection = function (rowNode) {
    return this.isColumnFunc(rowNode, this.colDef.checkboxSelection);
  };

  Column.prototype.isSuppressPaste = function (rowNode) {
    return this.isColumnFunc(rowNode, this.colDef ? this.colDef.suppressPaste : null);
  };

  Column.prototype.isResizable = function () {
    return this.colDef.resizable === true;
  };

  Column.prototype.isColumnFunc = function (rowNode, value) {
    // if boolean set, then just use it
    if (typeof value === 'boolean') {
      return value;
    } // if function, then call the function to find out


    if (typeof value === 'function') {
      var params = this.createIsColumnFuncParams(rowNode);
      var editableFunc = value;
      return editableFunc(params);
    }

    return false;
  };

  Column.prototype.setMoving = function (moving, source) {
    if (source === void 0) {
      source = "api";
    }

    this.moving = moving;
    this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_MOVING_CHANGED, source));
  };

  Column.prototype.createColumnEvent = function (type, source) {
    return {
      api: this.gridApi,
      columnApi: this.columnApi,
      type: type,
      column: this,
      columns: [this],
      source: source
    };
  };

  Column.prototype.isMoving = function () {
    return this.moving;
  };

  Column.prototype.getSort = function () {
    return this.sort;
  };

  Column.prototype.setSort = function (sort, source) {
    if (source === void 0) {
      source = "api";
    }

    if (this.sort !== sort) {
      this.sort = sort;
      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_SORT_CHANGED, source));
    }
  };

  Column.prototype.setMenuVisible = function (visible, source) {
    if (source === void 0) {
      source = "api";
    }

    if (this.menuVisible !== visible) {
      this.menuVisible = visible;
      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_MENU_VISIBLE_CHANGED, source));
    }
  };

  Column.prototype.isMenuVisible = function () {
    return this.menuVisible;
  };

  Column.prototype.isSortAscending = function () {
    return this.sort === Column.SORT_ASC;
  };

  Column.prototype.isSortDescending = function () {
    return this.sort === Column.SORT_DESC;
  };

  Column.prototype.isSortNone = function () {
    return utils_1._.missing(this.sort);
  };

  Column.prototype.isSorting = function () {
    return utils_1._.exists(this.sort);
  };

  Column.prototype.getSortedAt = function () {
    return this.sortedAt;
  };

  Column.prototype.setSortedAt = function (sortedAt) {
    this.sortedAt = sortedAt;
  };

  Column.prototype.setAggFunc = function (aggFunc) {
    this.aggFunc = aggFunc;
  };

  Column.prototype.getAggFunc = function () {
    return this.aggFunc;
  };

  Column.prototype.getLeft = function () {
    return this.left;
  };

  Column.prototype.getOldLeft = function () {
    return this.oldLeft;
  };

  Column.prototype.getRight = function () {
    return this.left + this.actualWidth;
  };

  Column.prototype.setLeft = function (left, source) {
    if (source === void 0) {
      source = "api";
    }

    this.oldLeft = this.left;

    if (this.left !== left) {
      this.left = left;
      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_LEFT_CHANGED, source));
    }
  };

  Column.prototype.isFilterActive = function () {
    return this.filterActive;
  };

  Column.prototype.setFilterActive = function (active, source) {
    if (source === void 0) {
      source = "api";
    }

    if (this.filterActive !== active) {
      this.filterActive = active;
      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_FILTER_ACTIVE_CHANGED, source));
    }

    this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_FILTER_CHANGED, source));
  };

  Column.prototype.setPinned = function (pinned) {
    if (pinned === true || pinned === Column.PINNED_LEFT) {
      this.pinned = Column.PINNED_LEFT;
    } else if (pinned === Column.PINNED_RIGHT) {
      this.pinned = Column.PINNED_RIGHT;
    } else {
      this.pinned = null;
    }
  };

  Column.prototype.setFirstRightPinned = function (firstRightPinned, source) {
    if (source === void 0) {
      source = "api";
    }

    if (this.firstRightPinned !== firstRightPinned) {
      this.firstRightPinned = firstRightPinned;
      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_FIRST_RIGHT_PINNED_CHANGED, source));
    }
  };

  Column.prototype.setLastLeftPinned = function (lastLeftPinned, source) {
    if (source === void 0) {
      source = "api";
    }

    if (this.lastLeftPinned !== lastLeftPinned) {
      this.lastLeftPinned = lastLeftPinned;
      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_LAST_LEFT_PINNED_CHANGED, source));
    }
  };

  Column.prototype.isFirstRightPinned = function () {
    return this.firstRightPinned;
  };

  Column.prototype.isLastLeftPinned = function () {
    return this.lastLeftPinned;
  };

  Column.prototype.isPinned = function () {
    return this.pinned === Column.PINNED_LEFT || this.pinned === Column.PINNED_RIGHT;
  };

  Column.prototype.isPinnedLeft = function () {
    return this.pinned === Column.PINNED_LEFT;
  };

  Column.prototype.isPinnedRight = function () {
    return this.pinned === Column.PINNED_RIGHT;
  };

  Column.prototype.getPinned = function () {
    return this.pinned;
  };

  Column.prototype.setVisible = function (visible, source) {
    if (source === void 0) {
      source = "api";
    }

    var newValue = visible === true;

    if (this.visible !== newValue) {
      this.visible = newValue;
      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_VISIBLE_CHANGED, source));
    }
  };

  Column.prototype.isVisible = function () {
    return this.visible;
  };

  Column.prototype.getColDef = function () {
    return this.colDef;
  };

  Column.prototype.getColumnGroupShow = function () {
    return this.colDef.columnGroupShow;
  };

  Column.prototype.getColId = function () {
    return this.colId;
  };

  Column.prototype.getId = function () {
    return this.getColId();
  };

  Column.prototype.getDefinition = function () {
    return this.colDef;
  };

  Column.prototype.getActualWidth = function () {
    return this.actualWidth;
  };

  Column.prototype.createBaseColDefParams = function (rowNode) {
    var params = {
      node: rowNode,
      data: rowNode.data,
      colDef: this.colDef,
      column: this,
      api: this.gridOptionsWrapper.getApi(),
      columnApi: this.gridOptionsWrapper.getColumnApi(),
      context: this.gridOptionsWrapper.getContext()
    };
    return params;
  };

  Column.prototype.getColSpan = function (rowNode) {
    if (utils_1._.missing(this.colDef.colSpan)) {
      return 1;
    }

    var params = this.createBaseColDefParams(rowNode);
    var colSpan = this.colDef.colSpan(params); // colSpan must be number equal to or greater than 1

    return Math.max(colSpan, 1);
  };

  Column.prototype.getRowSpan = function (rowNode) {
    if (utils_1._.missing(this.colDef.rowSpan)) {
      return 1;
    }

    var params = this.createBaseColDefParams(rowNode);
    var rowSpan = this.colDef.rowSpan(params); // rowSpan must be number equal to or greater than 1

    return Math.max(rowSpan, 1);
  };

  Column.prototype.setActualWidth = function (actualWidth, source) {
    if (source === void 0) {
      source = "api";
    }

    if (this.actualWidth !== actualWidth) {
      this.actualWidth = actualWidth;
      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_WIDTH_CHANGED, source));
    }
  };

  Column.prototype.isGreaterThanMax = function (width) {
    if (this.maxWidth) {
      return width > this.maxWidth;
    }

    return false;
  };

  Column.prototype.getMinWidth = function () {
    return this.minWidth;
  };

  Column.prototype.getMaxWidth = function () {
    return this.maxWidth;
  };

  Column.prototype.setMinimum = function (source) {
    if (source === void 0) {
      source = "api";
    }

    this.setActualWidth(this.minWidth, source);
  };

  Column.prototype.setRowGroupActive = function (rowGroup, source) {
    if (source === void 0) {
      source = "api";
    }

    if (this.rowGroupActive !== rowGroup) {
      this.rowGroupActive = rowGroup;
      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_ROW_GROUP_CHANGED, source));
    }
  };

  Column.prototype.isRowGroupActive = function () {
    return this.rowGroupActive;
  };

  Column.prototype.setPivotActive = function (pivot, source) {
    if (source === void 0) {
      source = "api";
    }

    if (this.pivotActive !== pivot) {
      this.pivotActive = pivot;
      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_PIVOT_CHANGED, source));
    }
  };

  Column.prototype.isPivotActive = function () {
    return this.pivotActive;
  };

  Column.prototype.isAnyFunctionActive = function () {
    return this.isPivotActive() || this.isRowGroupActive() || this.isValueActive();
  };

  Column.prototype.isAnyFunctionAllowed = function () {
    return this.isAllowPivot() || this.isAllowRowGroup() || this.isAllowValue();
  };

  Column.prototype.setValueActive = function (value, source) {
    if (source === void 0) {
      source = "api";
    }

    if (this.aggregationActive !== value) {
      this.aggregationActive = value;
      this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_VALUE_CHANGED, source));
    }
  };

  Column.prototype.isValueActive = function () {
    return this.aggregationActive;
  };

  Column.prototype.isAllowPivot = function () {
    return this.colDef.enablePivot === true;
  };

  Column.prototype.isAllowValue = function () {
    return this.colDef.enableValue === true;
  };

  Column.prototype.isAllowRowGroup = function () {
    return this.colDef.enableRowGroup === true;
  };

  Column.prototype.getMenuTabs = function (defaultValues) {
    var menuTabs = this.getColDef().menuTabs;

    if (menuTabs == null) {
      menuTabs = defaultValues;
    }

    return menuTabs;
  }; // + renderedHeaderCell - for making header cell transparent when moving


  Column.EVENT_MOVING_CHANGED = 'movingChanged'; // + renderedCell - changing left position

  Column.EVENT_LEFT_CHANGED = 'leftChanged'; // + renderedCell - changing width

  Column.EVENT_WIDTH_CHANGED = 'widthChanged'; // + renderedCell - for changing pinned classes

  Column.EVENT_LAST_LEFT_PINNED_CHANGED = 'lastLeftPinnedChanged';
  Column.EVENT_FIRST_RIGHT_PINNED_CHANGED = 'firstRightPinnedChanged'; // + renderedColumn - for changing visibility icon

  Column.EVENT_VISIBLE_CHANGED = 'visibleChanged'; // + every time the filter changes, used in the floating filters

  Column.EVENT_FILTER_CHANGED = 'filterChanged'; // + renderedHeaderCell - marks the header with filter icon

  Column.EVENT_FILTER_ACTIVE_CHANGED = 'filterActiveChanged'; // + renderedHeaderCell - marks the header with sort icon

  Column.EVENT_SORT_CHANGED = 'sortChanged';
  Column.EVENT_MENU_VISIBLE_CHANGED = 'menuVisibleChanged'; // + toolpanel, for gui updates

  Column.EVENT_ROW_GROUP_CHANGED = 'columnRowGroupChanged'; // + toolpanel, for gui updates

  Column.EVENT_PIVOT_CHANGED = 'columnPivotChanged'; // + toolpanel, for gui updates

  Column.EVENT_VALUE_CHANGED = 'columnValueChanged';
  Column.PINNED_RIGHT = 'right';
  Column.PINNED_LEFT = 'left';
  Column.SORT_ASC = 'asc';
  Column.SORT_DESC = 'desc';

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], Column.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('columnUtils'), __metadata("design:type", columnUtils_1.ColumnUtils)], Column.prototype, "columnUtils", void 0);

  __decorate([context_1.Autowired('frameworkFactory'), __metadata("design:type", Object)], Column.prototype, "frameworkFactory", void 0);

  __decorate([context_1.Autowired('columnApi'), __metadata("design:type", columnApi_1.ColumnApi)], Column.prototype, "columnApi", void 0);

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], Column.prototype, "gridApi", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], Column.prototype, "initialise", null);

  return Column;
}();

exports.Column = Column;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});

function QuerySelector(selector) {
  return querySelectorFunc.bind(this, selector);
}

exports.QuerySelector = QuerySelector;

function RefSelector(ref) {
  return querySelectorFunc.bind(this, "[ref=" + ref + "]");
}

exports.RefSelector = RefSelector;

function querySelectorFunc(selector, classPrototype, methodOrAttributeName, index) {
  if (selector === null) {
    console.error("ag-Grid: QuerySelector selector should not be null");
    return;
  }

  if (typeof index === "number") {
    console.error("ag-Grid: QuerySelector should be on an attribute");
    return;
  }

  addToObjectProps(classPrototype, 'querySelectors', {
    attributeName: methodOrAttributeName,
    querySelector: selector
  });
} // think we should take this out, put property bindings on the


function Listener(eventName) {
  return listenerFunc.bind(this, eventName);
}

exports.Listener = Listener;

function listenerFunc(eventName, target, methodName) {
  if (eventName === null) {
    console.error("ag-Grid: EventListener eventName should not be null");
    return;
  }

  addToObjectProps(target, 'listenerMethods', {
    methodName: methodName,
    eventName: eventName
  });
} // think we should take this out, put property bindings on the


function Method(eventName) {
  return methodFunc.bind(this, eventName);
}

exports.Method = Method;

function methodFunc(alias, target, methodName) {
  if (alias === null) {
    console.error("ag-Grid: EventListener eventName should not be null");
    return;
  }

  addToObjectProps(target, 'methods', {
    methodName: methodName,
    alias: alias
  });
}

function addToObjectProps(target, key, value) {
  // it's an attribute on the class
  var props = getOrCreateProps(target, target.constructor.name);

  if (!props[key]) {
    props[key] = [];
  }

  props[key].push(value);
}

function getOrCreateProps(target, instanceName) {
  if (!target.__agComponentMetaData) {
    target.__agComponentMetaData = {};
  }

  if (!target.__agComponentMetaData[instanceName]) {
    target.__agComponentMetaData[instanceName] = {};
  }

  return target.__agComponentMetaData[instanceName];
}

/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(127);

/** Detect free variable `self`. */

var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */

var root = _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] || freeSelf || Function('return this')();
/* harmony default export */ __webpack_exports__["a"] = (root);

/***/ }),
/* 27 */
/***/ (function(module, exports) {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

module.exports = _interopRequireDefault;

/***/ }),
/* 28 */,
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _objectSpread; });

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var __param = this && this.__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var gridOptionsWrapper_1 = __webpack_require__(7);

var context_1 = __webpack_require__(2);

var context_2 = __webpack_require__(2);

var LoggerFactory =
/** @class */
function () {
  function LoggerFactory() {}

  LoggerFactory.prototype.setBeans = function (gridOptionsWrapper) {
    this.logging = gridOptionsWrapper.isDebug();
  };

  LoggerFactory.prototype.create = function (name) {
    return new Logger(name, this.isLogging.bind(this));
  };

  LoggerFactory.prototype.isLogging = function () {
    return this.logging;
  };

  __decorate([__param(0, context_2.Qualifier('gridOptionsWrapper')), __metadata("design:type", Function), __metadata("design:paramtypes", [gridOptionsWrapper_1.GridOptionsWrapper]), __metadata("design:returntype", void 0)], LoggerFactory.prototype, "setBeans", null);

  LoggerFactory = __decorate([context_1.Bean('loggerFactory')], LoggerFactory);
  return LoggerFactory;
}();

exports.LoggerFactory = LoggerFactory;

var Logger =
/** @class */
function () {
  function Logger(name, isLoggingFunc) {
    this.name = name;
    this.isLoggingFunc = isLoggingFunc;
  }

  Logger.prototype.isLogging = function () {
    return this.isLoggingFunc();
  };

  Logger.prototype.log = function (message) {
    if (this.isLoggingFunc()) {
      // tslint:disable-next-line
      console.log('ag-Grid.' + this.name + ': ' + message);
    }
  };

  return Logger;
}();

exports.Logger = Logger;

/***/ }),
/* 31 */,
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var eventService_1 = __webpack_require__(14);

var gridOptionsWrapper_1 = __webpack_require__(7);

var context_1 = __webpack_require__(2);

var utils_1 = __webpack_require__(6);

var BeanStub =
/** @class */
function () {
  function BeanStub() {
    this.destroyFunctions = [];
    this.destroyed = false;
  } // this was a test constructor niall built, when active, it prints after 5 seconds all beans/components that are
  // not destroyed. to use, create a new grid, then api.destroy() before 5 seconds. then anything that gets printed
  // points to a bean or component that was not properly disposed of.
  // constructor() {
  //     setTimeout(()=> {
  //         if (this.isAlive()) {
  //             let prototype: any = Object.getPrototypeOf(this);
  //             const constructor: any = prototype.constructor;
  //             const constructorString = constructor.toString();
  //             const beanName = constructorString.substring(9, constructorString.indexOf("("));
  //             console.log('is alive ' + beanName);
  //         }
  //     }, 5000);
  // }


  BeanStub.prototype.getContext = function () {
    return this.context;
  };

  BeanStub.prototype.destroy = function () {
    // let prototype: any = Object.getPrototypeOf(this);
    // const constructor: any = prototype.constructor;
    // const constructorString = constructor.toString();
    // const beanName = constructorString.substring(9, constructorString.indexOf("("));
    this.destroyFunctions.forEach(function (func) {
      return func();
    });
    this.destroyFunctions.length = 0;
    this.destroyed = true;
    this.dispatchEvent({
      type: BeanStub.EVENT_DESTROYED
    });
  };

  BeanStub.prototype.addEventListener = function (eventType, listener) {
    if (!this.localEventService) {
      this.localEventService = new eventService_1.EventService();
    }

    this.localEventService.addEventListener(eventType, listener);
  };

  BeanStub.prototype.removeEventListener = function (eventType, listener) {
    if (this.localEventService) {
      this.localEventService.removeEventListener(eventType, listener);
    }
  };

  BeanStub.prototype.dispatchEventAsync = function (event) {
    var _this = this;

    window.setTimeout(function () {
      return _this.dispatchEvent(event);
    }, 0);
  };

  BeanStub.prototype.dispatchEvent = function (event) {
    if (this.localEventService) {
      this.localEventService.dispatchEvent(event);
    }
  };

  BeanStub.prototype.addDestroyableEventListener = function (eElement, event, listener, options) {
    if (this.destroyed) {
      return;
    }

    if (eElement instanceof HTMLElement) {
      utils_1._.addSafePassiveEventListener(eElement, event, listener, options);
    } else if (eElement instanceof Window) {
      eElement.addEventListener(event, listener);
    } else if (eElement instanceof gridOptionsWrapper_1.GridOptionsWrapper) {
      eElement.addEventListener(event, listener);
    } else {
      eElement.addEventListener(event, listener);
    }

    this.destroyFunctions.push(function () {
      if (eElement instanceof HTMLElement) {
        eElement.removeEventListener(event, listener);
      } else if (eElement instanceof Window) {
        eElement.removeEventListener(event, listener);
      } else if (eElement instanceof gridOptionsWrapper_1.GridOptionsWrapper) {
        eElement.removeEventListener(event, listener);
      } else {
        eElement.removeEventListener(event, listener);
      }
    });
  };

  BeanStub.prototype.isAlive = function () {
    return !this.destroyed;
  };

  BeanStub.prototype.addDestroyFunc = function (func) {
    // if we are already destroyed, we execute the func now
    if (this.isAlive()) {
      this.destroyFunctions.push(func);
    } else {
      func();
    }
  };

  BeanStub.EVENT_DESTROYED = 'destroyed';

  __decorate([context_1.Autowired('context'), __metadata("design:type", context_1.Context)], BeanStub.prototype, "context", void 0);

  __decorate([context_1.PreDestroy, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], BeanStub.prototype, "destroy", null);

  return BeanStub;
}();

exports.BeanStub = BeanStub;

/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return useIsomorphicLayoutEffect; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
 // suppress the useLayoutEffect warning on server side.

var useIsomorphicLayoutEffect = typeof window !== 'undefined' ? react__WEBPACK_IMPORTED_MODULE_0__["useLayoutEffect"] : react__WEBPACK_IMPORTED_MODULE_0__["useEffect"];

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var __param = this && this.__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var logger_1 = __webpack_require__(30);

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var dragService_1 = __webpack_require__(87);

var columnController_1 = __webpack_require__(17);

var environment_1 = __webpack_require__(88);

var utils_1 = __webpack_require__(6);

var DragSourceType;

(function (DragSourceType) {
  DragSourceType[DragSourceType["ToolPanel"] = 0] = "ToolPanel";
  DragSourceType[DragSourceType["HeaderCell"] = 1] = "HeaderCell";
  DragSourceType[DragSourceType["RowDrag"] = 2] = "RowDrag";
})(DragSourceType = exports.DragSourceType || (exports.DragSourceType = {}));

var VDirection;

(function (VDirection) {
  VDirection[VDirection["Up"] = 0] = "Up";
  VDirection[VDirection["Down"] = 1] = "Down";
})(VDirection = exports.VDirection || (exports.VDirection = {}));

var HDirection;

(function (HDirection) {
  HDirection[HDirection["Left"] = 0] = "Left";
  HDirection[HDirection["Right"] = 1] = "Right";
})(HDirection = exports.HDirection || (exports.HDirection = {}));

var DragAndDropService =
/** @class */
function () {
  function DragAndDropService() {
    this.dragSourceAndParamsList = [];
    this.dropTargets = [];
  }

  DragAndDropService_1 = DragAndDropService;

  DragAndDropService.prototype.init = function () {
    this.ePinnedIcon = utils_1._.createIcon('columnMovePin', this.gridOptionsWrapper, null);
    this.ePlusIcon = utils_1._.createIcon('columnMoveAdd', this.gridOptionsWrapper, null);
    this.eHiddenIcon = utils_1._.createIcon('columnMoveHide', this.gridOptionsWrapper, null);
    this.eMoveIcon = utils_1._.createIcon('columnMoveMove', this.gridOptionsWrapper, null);
    this.eLeftIcon = utils_1._.createIcon('columnMoveLeft', this.gridOptionsWrapper, null);
    this.eRightIcon = utils_1._.createIcon('columnMoveRight', this.gridOptionsWrapper, null);
    this.eGroupIcon = utils_1._.createIcon('columnMoveGroup', this.gridOptionsWrapper, null);
    this.eAggregateIcon = utils_1._.createIcon('columnMoveValue', this.gridOptionsWrapper, null);
    this.ePivotIcon = utils_1._.createIcon('columnMovePivot', this.gridOptionsWrapper, null);
    this.eDropNotAllowedIcon = utils_1._.createIcon('dropNotAllowed', this.gridOptionsWrapper, null);
  };

  DragAndDropService.prototype.setBeans = function (loggerFactory) {
    this.logger = loggerFactory.create('OldToolPanelDragAndDropService');
  };

  DragAndDropService.prototype.getStringType = function (type) {
    switch (type) {
      case DragSourceType.RowDrag:
        return 'row';

      case DragSourceType.HeaderCell:
        return 'headerCell';

      case DragSourceType.ToolPanel:
        return 'toolPanel';

      default:
        console.warn("ag-Grid: bug - unknown drag type " + type);
        return null;
    }
  };

  DragAndDropService.prototype.addDragSource = function (dragSource, allowTouch) {
    if (allowTouch === void 0) {
      allowTouch = false;
    }

    var params = {
      eElement: dragSource.eElement,
      dragStartPixels: dragSource.dragStartPixels,
      onDragStart: this.onDragStart.bind(this, dragSource),
      onDragStop: this.onDragStop.bind(this),
      onDragging: this.onDragging.bind(this)
    };
    this.dragSourceAndParamsList.push({
      params: params,
      dragSource: dragSource
    });
    this.dragService.addDragSource(params, allowTouch);
  };

  DragAndDropService.prototype.removeDragSource = function (dragSource) {
    var sourceAndParams = utils_1._.find(this.dragSourceAndParamsList, function (item) {
      return item.dragSource === dragSource;
    });

    if (sourceAndParams) {
      this.dragService.removeDragSource(sourceAndParams.params);

      utils_1._.removeFromArray(this.dragSourceAndParamsList, sourceAndParams);
    }
  };

  DragAndDropService.prototype.destroy = function () {
    var _this = this;

    this.dragSourceAndParamsList.forEach(function (sourceAndParams) {
      _this.dragService.removeDragSource(sourceAndParams.params);
    });
    this.dragSourceAndParamsList.length = 0;
  };

  DragAndDropService.prototype.nudge = function () {
    if (this.dragging) {
      this.onDragging(this.eventLastTime, true);
    }
  };

  DragAndDropService.prototype.onDragStart = function (dragSource, mouseEvent) {
    this.dragging = true;
    this.dragSource = dragSource;
    this.eventLastTime = mouseEvent;
    this.dragItem = this.dragSource.dragItemCallback();
    this.lastDropTarget = this.dragSource.dragSourceDropTarget;

    if (this.dragSource.dragStarted) {
      this.dragSource.dragStarted();
    }

    this.createGhost();
  };

  DragAndDropService.prototype.onDragStop = function (mouseEvent) {
    this.eventLastTime = null;
    this.dragging = false;

    if (this.dragSource.dragStopped) {
      this.dragSource.dragStopped();
    }

    if (this.lastDropTarget && this.lastDropTarget.onDragStop) {
      var draggingEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, null, null, false);
      this.lastDropTarget.onDragStop(draggingEvent);
    }

    this.lastDropTarget = null;
    this.dragItem = null;
    this.removeGhost();
  };

  DragAndDropService.prototype.onDragging = function (mouseEvent, fromNudge) {
    var hDirection = this.workOutHDirection(mouseEvent);
    var vDirection = this.workOutVDirection(mouseEvent);
    this.eventLastTime = mouseEvent;
    this.positionGhost(mouseEvent); // check if mouseEvent intersects with any of the drop targets

    var dropTarget = utils_1._.find(this.dropTargets, this.isMouseOnDropTarget.bind(this, mouseEvent));

    if (dropTarget !== this.lastDropTarget) {
      this.leaveLastTargetIfExists(mouseEvent, hDirection, vDirection, fromNudge);
      this.enterDragTargetIfExists(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
      this.lastDropTarget = dropTarget;
    } else if (dropTarget) {
      var draggingEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
      dropTarget.onDragging(draggingEvent);
    }
  };

  DragAndDropService.prototype.enterDragTargetIfExists = function (dropTarget, mouseEvent, hDirection, vDirection, fromNudge) {
    if (!dropTarget) {
      return;
    }

    var dragEnterEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
    dropTarget.onDragEnter(dragEnterEvent);
    this.setGhostIcon(dropTarget.getIconName ? dropTarget.getIconName() : null);
  };

  DragAndDropService.prototype.leaveLastTargetIfExists = function (mouseEvent, hDirection, vDirection, fromNudge) {
    if (!this.lastDropTarget) {
      return;
    }

    var dragLeaveEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, hDirection, vDirection, fromNudge);
    this.lastDropTarget.onDragLeave(dragLeaveEvent);
    this.setGhostIcon(null);
  };

  DragAndDropService.prototype.getAllContainersFromDropTarget = function (dropTarget) {
    var containers = [dropTarget.getContainer()];
    var secondaryContainers = dropTarget.getSecondaryContainers ? dropTarget.getSecondaryContainers() : null;

    if (secondaryContainers) {
      containers = containers.concat(secondaryContainers);
    }

    return containers;
  }; // checks if the mouse is on the drop target. it checks eContainer and eSecondaryContainers


  DragAndDropService.prototype.isMouseOnDropTarget = function (mouseEvent, dropTarget) {
    var allContainers = this.getAllContainersFromDropTarget(dropTarget);
    var mouseOverTarget = false;
    allContainers.forEach(function (eContainer) {
      if (!eContainer) {
        return;
      } // secondary can be missing


      var rect = eContainer.getBoundingClientRect(); // if element is not visible, then width and height are zero

      if (rect.width === 0 || rect.height === 0) {
        return;
      }

      var horizontalFit = mouseEvent.clientX >= rect.left && mouseEvent.clientX <= rect.right;
      var verticalFit = mouseEvent.clientY >= rect.top && mouseEvent.clientY <= rect.bottom; //console.log(`rect.width = ${rect.width} || rect.height = ${rect.height} ## verticalFit = ${verticalFit}, horizontalFit = ${horizontalFit}, `);

      if (horizontalFit && verticalFit) {
        mouseOverTarget = true;
      }
    });

    if (mouseOverTarget) {
      var mouseOverTargetAndInterested = dropTarget.isInterestedIn(this.dragSource.type);
      return mouseOverTargetAndInterested;
    } else {
      return false;
    }
  };

  DragAndDropService.prototype.addDropTarget = function (dropTarget) {
    this.dropTargets.push(dropTarget);
  };

  DragAndDropService.prototype.workOutHDirection = function (event) {
    if (this.eventLastTime.clientX > event.clientX) {
      return HDirection.Left;
    } else if (this.eventLastTime.clientX < event.clientX) {
      return HDirection.Right;
    } else {
      return null;
    }
  };

  DragAndDropService.prototype.workOutVDirection = function (event) {
    if (this.eventLastTime.clientY > event.clientY) {
      return VDirection.Up;
    } else if (this.eventLastTime.clientY < event.clientY) {
      return VDirection.Down;
    } else {
      return null;
    }
  };

  DragAndDropService.prototype.createDropTargetEvent = function (dropTarget, event, hDirection, vDirection, fromNudge) {
    // localise x and y to the target component
    var rect = dropTarget.getContainer().getBoundingClientRect();
    var x = event.clientX - rect.left;
    var y = event.clientY - rect.top;
    var dropTargetEvent = {
      event: event,
      x: x,
      y: y,
      vDirection: vDirection,
      hDirection: hDirection,
      dragSource: this.dragSource,
      fromNudge: fromNudge,
      dragItem: this.dragItem
    };
    return dropTargetEvent;
  };

  DragAndDropService.prototype.positionGhost = function (event) {
    var ghostRect = this.eGhost.getBoundingClientRect();
    var ghostHeight = ghostRect.height; // for some reason, without the '-2', it still overlapped by 1 or 2 pixels, which
    // then brought in scrollbars to the browser. no idea why, but putting in -2 here
    // works around it which is good enough for me.

    var browserWidth = utils_1._.getBodyWidth() - 2;
    var browserHeight = utils_1._.getBodyHeight() - 2; // put ghost vertically in middle of cursor

    var top = event.pageY - ghostHeight / 2; // horizontally, place cursor just right of icon

    var left = event.pageX - 30;
    var usrDocument = this.gridOptionsWrapper.getDocument();
    var windowScrollY = window.pageYOffset || usrDocument.documentElement.scrollTop;
    var windowScrollX = window.pageXOffset || usrDocument.documentElement.scrollLeft; // check ghost is not positioned outside of the browser

    if (browserWidth > 0) {
      if (left + this.eGhost.clientWidth > browserWidth + windowScrollX) {
        left = browserWidth + windowScrollX - this.eGhost.clientWidth;
      }
    }

    if (left < 0) {
      left = 0;
    }

    if (browserHeight > 0) {
      if (top + this.eGhost.clientHeight > browserHeight + windowScrollY) {
        top = browserHeight + windowScrollY - this.eGhost.clientHeight;
      }
    }

    if (top < 0) {
      top = 0;
    }

    this.eGhost.style.left = left + 'px';
    this.eGhost.style.top = top + 'px';
  };

  DragAndDropService.prototype.removeGhost = function () {
    if (this.eGhost && this.eGhostParent) {
      this.eGhostParent.removeChild(this.eGhost);
    }

    this.eGhost = null;
  };

  DragAndDropService.prototype.createGhost = function () {
    this.eGhost = utils_1._.loadTemplate(DragAndDropService_1.GHOST_TEMPLATE);
    var theme = this.environment.getTheme();

    if (theme) {
      utils_1._.addCssClass(this.eGhost, theme);
    }

    this.eGhostIcon = this.eGhost.querySelector('.ag-dnd-ghost-icon');
    this.setGhostIcon(null);
    var eText = this.eGhost.querySelector('.ag-dnd-ghost-label');
    eText.innerHTML = utils_1._.escape(this.dragSource.dragItemName);
    this.eGhost.style.height = '25px';
    this.eGhost.style.top = '20px';
    this.eGhost.style.left = '20px';
    var usrDocument = this.gridOptionsWrapper.getDocument();
    this.eGhostParent = usrDocument.querySelector('body');

    if (!this.eGhostParent) {
      console.warn('ag-Grid: could not find document body, it is needed for dragging columns');
    } else {
      this.eGhostParent.appendChild(this.eGhost);
    }
  };

  DragAndDropService.prototype.setGhostIcon = function (iconName, shake) {
    if (shake === void 0) {
      shake = false;
    }

    utils_1._.clearElement(this.eGhostIcon);

    var eIcon;

    switch (iconName) {
      case DragAndDropService_1.ICON_ADD:
        eIcon = this.ePlusIcon;
        break;

      case DragAndDropService_1.ICON_PINNED:
        eIcon = this.ePinnedIcon;
        break;

      case DragAndDropService_1.ICON_MOVE:
        eIcon = this.eMoveIcon;
        break;

      case DragAndDropService_1.ICON_LEFT:
        eIcon = this.eLeftIcon;
        break;

      case DragAndDropService_1.ICON_RIGHT:
        eIcon = this.eRightIcon;
        break;

      case DragAndDropService_1.ICON_GROUP:
        eIcon = this.eGroupIcon;
        break;

      case DragAndDropService_1.ICON_AGGREGATE:
        eIcon = this.eAggregateIcon;
        break;

      case DragAndDropService_1.ICON_PIVOT:
        eIcon = this.ePivotIcon;
        break;

      case DragAndDropService_1.ICON_NOT_ALLOWED:
        eIcon = this.eDropNotAllowedIcon;
        break;

      default:
        eIcon = this.eHiddenIcon;
        break;
    }

    this.eGhostIcon.appendChild(eIcon);

    utils_1._.addOrRemoveCssClass(this.eGhostIcon, 'ag-shake-left-to-right', shake);
  };

  var DragAndDropService_1;
  DragAndDropService.ICON_PINNED = 'pinned';
  DragAndDropService.ICON_ADD = 'add';
  DragAndDropService.ICON_MOVE = 'move';
  DragAndDropService.ICON_LEFT = 'left';
  DragAndDropService.ICON_RIGHT = 'right';
  DragAndDropService.ICON_GROUP = 'group';
  DragAndDropService.ICON_AGGREGATE = 'aggregate';
  DragAndDropService.ICON_PIVOT = 'pivot';
  DragAndDropService.ICON_NOT_ALLOWED = 'notAllowed';
  DragAndDropService.GHOST_TEMPLATE = '<div class="ag-dnd-ghost">' + '  <span class="ag-dnd-ghost-icon ag-shake-left-to-right"></span>' + '  <div class="ag-dnd-ghost-label">' + '  </div>' + '</div>';

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], DragAndDropService.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('dragService'), __metadata("design:type", dragService_1.DragService)], DragAndDropService.prototype, "dragService", void 0);

  __decorate([context_1.Autowired('environment'), __metadata("design:type", environment_1.Environment)], DragAndDropService.prototype, "environment", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], DragAndDropService.prototype, "columnController", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], DragAndDropService.prototype, "init", null);

  __decorate([__param(0, context_1.Qualifier('loggerFactory')), __metadata("design:type", Function), __metadata("design:paramtypes", [logger_1.LoggerFactory]), __metadata("design:returntype", void 0)], DragAndDropService.prototype, "setBeans", null);

  __decorate([context_1.PreDestroy, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], DragAndDropService.prototype, "destroy", null);

  DragAndDropService = DragAndDropService_1 = __decorate([context_1.Bean('dragAndDropService')], DragAndDropService);
  return DragAndDropService;
}();

exports.DragAndDropService = DragAndDropService;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var userComponentRegistry_1 = __webpack_require__(147);

var agComponentUtils_1 = __webpack_require__(151);

var componentMetadataProvider_1 = __webpack_require__(152);

var utils_1 = __webpack_require__(6);

var ComponentSource;

(function (ComponentSource) {
  ComponentSource[ComponentSource["DEFAULT"] = 0] = "DEFAULT";
  ComponentSource[ComponentSource["REGISTERED_BY_NAME"] = 1] = "REGISTERED_BY_NAME";
  ComponentSource[ComponentSource["HARDCODED"] = 2] = "HARDCODED";
})(ComponentSource = exports.ComponentSource || (exports.ComponentSource = {}));

var UserComponentFactory =
/** @class */
function () {
  function UserComponentFactory() {}

  UserComponentFactory.prototype.newDateComponent = function (params) {
    return this.createAndInitUserComponent(this.gridOptions, params, "dateComponent", "agDateInput");
  };

  UserComponentFactory.prototype.newHeaderComponent = function (params) {
    return this.createAndInitUserComponent(params.column.getColDef(), params, "headerComponent", "agColumnHeader");
  };

  UserComponentFactory.prototype.newHeaderGroupComponent = function (params) {
    return this.createAndInitUserComponent(params.columnGroup.getColGroupDef(), params, "headerGroupComponent", "agColumnGroupHeader");
  };

  UserComponentFactory.prototype.newFullWidthGroupRowInnerCellRenderer = function (params) {
    return this.createAndInitUserComponent(this.gridOptions, params, "groupRowInnerRenderer", null, true);
  }; // this one is unusual, as it can be LoadingCellRenderer, DetailCellRenderer, FullWidthCellRenderer or GroupRowRenderer.
  // so we have to pass the type in.


  UserComponentFactory.prototype.newFullWidthCellRenderer = function (params, cellRendererType, cellRendererName) {
    return this.createAndInitUserComponent(null, params, cellRendererType, cellRendererName);
  };

  UserComponentFactory.prototype.newCellRenderer = function (target, params) {
    return this.createAndInitUserComponent(target, params, "cellRenderer", null, true);
  };

  UserComponentFactory.prototype.newPinnedRowCellRenderer = function (target, params) {
    return this.createAndInitUserComponent(target, params, "pinnedRowCellRenderer", null, true);
  };

  UserComponentFactory.prototype.newCellEditor = function (colDef, params) {
    return this.createAndInitUserComponent(colDef, params, 'cellEditor', 'agCellEditor');
  };

  UserComponentFactory.prototype.newInnerCellRenderer = function (target, params) {
    return this.createAndInitUserComponent(target, params, "innerRenderer", null);
  };

  UserComponentFactory.prototype.newLoadingOverlayComponent = function (params) {
    return this.createAndInitUserComponent(this.gridOptions, params, "loadingOverlayComponent", "agLoadingOverlay");
  };

  UserComponentFactory.prototype.newNoRowsOverlayComponent = function (params) {
    return this.createAndInitUserComponent(this.gridOptions, params, "noRowsOverlayComponent", "agNoRowsOverlay");
  };

  UserComponentFactory.prototype.newTooltipComponent = function (params) {
    var colDef = params.column && params.column.getColDef();
    return this.createAndInitUserComponent(colDef, params, "tooltipComponent", 'agTooltipComponent');
  };

  UserComponentFactory.prototype.newFilterComponent = function (colDef, params, defaultFilter, modifyParamsCallback) {
    return this.createAndInitUserComponent(colDef, params, 'filter', defaultFilter, false, modifyParamsCallback);
  };

  UserComponentFactory.prototype.newFloatingFilterComponent = function (colDef, params, defaultFloatingFilter) {
    return this.createAndInitUserComponent(colDef, params, "floatingFilterComponent", defaultFloatingFilter, true);
  };

  UserComponentFactory.prototype.newToolPanelComponent = function (toolPanelDef, params) {
    return this.createAndInitUserComponent(toolPanelDef, params, 'toolPanel');
  };

  UserComponentFactory.prototype.newStatusPanelComponent = function (def, params) {
    return this.createAndInitUserComponent(def, params, 'statusPanel');
  };
  /**
   * This method creates a component given everything needed to guess what sort of component needs to be instantiated
   * It takes
   *  @param definitionObject: This is the context for which this component needs to be created, it can be gridOptions
   *      (global) or columnDef mostly.
   *  @param paramsFromGrid: Params to be passed to the component and passed by ag-Grid. This will get merged with any params
   *      specified by the user in the configuration
   *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:
   *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component
   *  @param defaultComponentName: The actual name of the component to instantiate, this is usually the same as propertyName, but in
   *      some cases is not, like floatingFilter, if it is the same is not necessary to specify
   *  @param optional: Handy method to tell if this should return a component ALWAYS. if that is the case, but there is no
   *      component found, it throws an error, by default all components are MANDATORY
   *  @param modifyParamsCallback: A chance to customise the params passed to the init method. It receives what the current
   *  params are and the component that init is about to get called for
   */


  UserComponentFactory.prototype.createAndInitUserComponent = function (definitionObject, paramsFromGrid, propertyName, defaultComponentName, // optional items are: FloatingFilter, CellComp (for cellRenderer)
  optional, // used by FilterManager only
  modifyParamsCallback) {
    if (optional === void 0) {
      optional = false;
    }

    if (!definitionObject) {
      definitionObject = this.gridOptions;
    } // Create the component instance


    var componentAndParams = this.createComponentInstance(definitionObject, propertyName, paramsFromGrid, defaultComponentName, optional);

    if (!componentAndParams) {
      return null;
    }

    var componentInstance = componentAndParams.componentInstance; // Wire the component and call the init method with the correct params

    var params = this.createFinalParams(definitionObject, propertyName, paramsFromGrid, componentAndParams.paramsFromSelector);
    this.addReactHacks(params); // give caller chance to set any params that depend on the componentInstance (need here as the
    // componentInstance was not available when createUserComponent was called)

    var paramsAfterCallback = modifyParamsCallback ? modifyParamsCallback(params, componentInstance) : params;
    var deferredInit = this.initComponent(componentInstance, paramsAfterCallback);

    if (deferredInit == null) {
      return utils_1.Promise.resolve(componentInstance);
    } else {
      var asPromise = deferredInit;
      return asPromise.map(function (notRelevant) {
        return componentInstance;
      });
    }
  };

  UserComponentFactory.prototype.addReactHacks = function (params) {
    // a temporary fix for AG-1574
    // AG-1715 raised to do a wider ranging refactor to improve this
    var agGridReact = this.context.getBean('agGridReact');

    if (agGridReact) {
      params.agGridReact = utils_1._.cloneObject(agGridReact);
    } // AG-1716 - directly related to AG-1574 and AG-1715


    var frameworkComponentWrapper = this.context.getBean('frameworkComponentWrapper');

    if (frameworkComponentWrapper) {
      params.frameworkComponentWrapper = frameworkComponentWrapper;
    }
  };
  /**
   * This method creates a component given everything needed to guess what sort of component needs to be instantiated
   * It takes
   *  @param clazz: The class to instantiate,
   *  @param agGridParams: Params to be passed to the component and passed by ag-Grid. This will get merged with any params
   *      specified by the user in the configuration
   *  @param modifyParamsCallback: A chance to customise the params passed to the init method. It receives what the current
   *  params are and the component that init is about to get called for
   */


  UserComponentFactory.prototype.createUserComponentFromConcreteClass = function (clazz, agGridParams) {
    var internalComponent = new clazz();
    this.initComponent(internalComponent, agGridParams);
    return internalComponent;
  };
  /**
   * This method returns the underlying representation of the component to be created. ie for Javascript the
   * underlying function where we should be calling new into. In case of the frameworks, the framework class
   * object that represents the component to be created.
   *
   * This method is handy for different reasons, for example if you want to check if a component has a particular
   * method implemented without having to create the component, just by inspecting the source component
   *
   * It takes
   *  @param definitionObject: This is the context for which this component needs to be created, it can be gridOptions
   *      (global) or columnDef mostly.
   *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:
   *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component
   *  @param params: Params to be passed to the dynamic component function in case it needs to be
   *      invoked
   *  @param defaultComponentName: The name of the component to load if there is no component specified
   */


  UserComponentFactory.prototype.lookupComponentClassDef = function (definitionObject, propertyName, params, defaultComponentName) {
    if (params === void 0) {
      params = null;
    }
    /**
     * There are five things that can happen when resolving a component.
     *  a) HardcodedFwComponent: That holder[propertyName]Framework has associated a Framework native component
     *  b) HardcodedJsComponent: That holder[propertyName] has associate a JS component
     *  c) hardcodedJsFunction: That holder[propertyName] has associate a JS function
     *  d) hardcodedNameComponent: That holder[propertyName] has associate a string that represents a component to load
     *  e) That none of the three previous are specified, then we need to use the DefaultRegisteredComponent
     */


    var hardcodedNameComponent = null;
    var HardcodedJsComponent = null;
    var hardcodedJsFunction = null;
    var HardcodedFwComponent = null;
    var componentSelectorFunc;

    if (definitionObject != null) {
      var componentPropertyValue = definitionObject[propertyName]; // for filters only, we allow 'true' for the component, which means default filter to be used

      var usingDefaultComponent = componentPropertyValue === true;

      if (componentPropertyValue != null && !usingDefaultComponent) {
        if (typeof componentPropertyValue === 'string') {
          hardcodedNameComponent = componentPropertyValue;
        } else if (typeof componentPropertyValue === 'boolean') {// never happens, as we test for usingDefaultComponent above,
          // however it's needed for the next block to compile
        } else if (this.agComponentUtils.doesImplementIComponent(componentPropertyValue)) {
          HardcodedJsComponent = componentPropertyValue;
        } else {
          hardcodedJsFunction = componentPropertyValue;
        }
      }

      HardcodedFwComponent = definitionObject[propertyName + "Framework"];
      componentSelectorFunc = definitionObject[propertyName + "Selector"];
    }
    /**
     * Since we allow many types of flavors for specifying the components, let's make sure this is not an illegal
     * combination
     */


    if (HardcodedJsComponent && HardcodedFwComponent || hardcodedNameComponent && HardcodedFwComponent || hardcodedJsFunction && HardcodedFwComponent) {
      throw Error("ag-grid: you are trying to specify: " + propertyName + " twice as a component.");
    }

    if (HardcodedFwComponent && !this.frameworkComponentWrapper) {
      throw Error("ag-grid: you are specifying a framework component but you are not using a framework version of ag-grid for : " + propertyName);
    }

    if (componentSelectorFunc && (hardcodedNameComponent || HardcodedJsComponent || hardcodedJsFunction || HardcodedFwComponent)) {
      throw Error("ag-grid: you can't specify both, the selector and the component of ag-grid for : " + propertyName);
    }
    /**
     * At this stage we are guaranteed to either have,
     * DEPRECATED
     * - A unique HardcodedFwComponent
     * - A unique HardcodedJsComponent
     * - A unique hardcodedJsFunction
     * BY NAME- FAVOURED APPROACH
     * - A unique hardcodedNameComponent
     * - None of the previous, hence we revert to: RegisteredComponent
     */


    if (HardcodedFwComponent) {
      // console.warn(`ag-grid: Since version 12.1.0 specifying a component directly is deprecated, you should register the component by name`);
      // console.warn(`${HardcodedFwComponent}`);
      return {
        componentFromFramework: true,
        component: HardcodedFwComponent,
        source: ComponentSource.HARDCODED,
        paramsFromSelector: null
      };
    }

    if (HardcodedJsComponent) {
      // console.warn(`ag-grid: Since version 12.1.0 specifying a component directly is deprecated, you should register the component by name`);
      // console.warn(`${HardcodedJsComponent}`);
      return {
        componentFromFramework: false,
        component: HardcodedJsComponent,
        source: ComponentSource.HARDCODED,
        paramsFromSelector: null
      };
    }

    if (hardcodedJsFunction) {
      // console.warn(`ag-grid: Since version 12.1.0 specifying a function directly is deprecated, you should register the component by name`);
      // console.warn(`${hardcodedJsFunction}`);
      return this.agComponentUtils.adaptFunction(propertyName, hardcodedJsFunction, false, ComponentSource.HARDCODED);
    }

    var selectorResult = componentSelectorFunc ? componentSelectorFunc(params) : null;
    var componentNameToUse;

    if (selectorResult && selectorResult.component) {
      componentNameToUse = selectorResult.component;
    } else if (hardcodedNameComponent) {
      componentNameToUse = hardcodedNameComponent;
    } else {
      componentNameToUse = defaultComponentName;
    }

    if (!componentNameToUse) {
      return null;
    }

    var registeredCompClassDef = this.lookupFromRegisteredComponents(propertyName, componentNameToUse);
    return {
      componentFromFramework: registeredCompClassDef.componentFromFramework,
      component: registeredCompClassDef.component,
      source: registeredCompClassDef.source,
      paramsFromSelector: selectorResult ? selectorResult.params : null
    };
  };

  UserComponentFactory.prototype.lookupFromRegisteredComponents = function (propertyName, componentNameOpt) {
    var componentName = componentNameOpt != null ? componentNameOpt : propertyName;
    var registeredComponent = this.userComponentRegistry.retrieve(componentName);

    if (registeredComponent == null) {
      return null;
    } //If it is a FW it has to be registered as a component


    if (registeredComponent.componentFromFramework) {
      return {
        component: registeredComponent.component,
        componentFromFramework: true,
        source: ComponentSource.REGISTERED_BY_NAME,
        paramsFromSelector: null
      };
    } //If it is JS it may be a function or a component


    if (this.agComponentUtils.doesImplementIComponent(registeredComponent.component)) {
      return {
        component: registeredComponent.component,
        componentFromFramework: false,
        source: registeredComponent.source == userComponentRegistry_1.RegisteredComponentSource.REGISTERED ? ComponentSource.REGISTERED_BY_NAME : ComponentSource.DEFAULT,
        paramsFromSelector: null
      };
    } // This is a function


    return this.agComponentUtils.adaptFunction(propertyName, registeredComponent.component, registeredComponent.componentFromFramework, registeredComponent.source == userComponentRegistry_1.RegisteredComponentSource.REGISTERED ? ComponentSource.REGISTERED_BY_NAME : ComponentSource.DEFAULT);
  };
  /**
   * Useful to check what would be the resultant params for a given object
   *  @param definitionObject: This is the context for which this component needs to be created, it can be gridOptions
   *      (global) or columnDef mostly.
   *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:
   *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component
   *  @param paramsFromGrid: Params to be passed to the component and passed by ag-Grid. This will get merged with any params
   *      specified by the user in the configuration
   * @returns {any} It merges the user agGridParams with the actual params specified by the user.
   */


  UserComponentFactory.prototype.createFinalParams = function (definitionObject, propertyName, paramsFromGrid, paramsFromSelector) {
    if (paramsFromSelector === void 0) {
      paramsFromSelector = null;
    }

    var res = {};

    utils_1._.mergeDeep(res, paramsFromGrid);

    var userParams = definitionObject ? definitionObject[propertyName + "Params"] : null;

    if (userParams != null) {
      if (typeof userParams === 'function') {
        utils_1._.mergeDeep(res, userParams(paramsFromGrid));
      } else if (typeof userParams === 'object') {
        utils_1._.mergeDeep(res, userParams);
      }
    }

    utils_1._.mergeDeep(res, paramsFromSelector);

    return res;
  };

  UserComponentFactory.prototype.createComponentInstance = function (holder, propertyName, paramsForSelector, defaultComponentName, optional) {
    var componentToUse = this.lookupComponentClassDef(holder, propertyName, paramsForSelector, defaultComponentName);
    var missing = !componentToUse || !componentToUse.component;

    if (missing) {
      if (!optional) {
        console.error("Error creating component " + propertyName + "=>" + defaultComponentName);
      }

      return null;
    }

    var componentInstance;

    if (componentToUse.componentFromFramework) {
      // Using framework component
      var FrameworkComponentRaw = componentToUse.component;
      var thisComponentConfig = this.componentMetadataProvider.retrieve(propertyName);
      componentInstance = this.frameworkComponentWrapper.wrap(FrameworkComponentRaw, thisComponentConfig.mandatoryMethodList, thisComponentConfig.optionalMethodList, defaultComponentName);
    } else {
      // Using plain JavaScript component
      componentInstance = new componentToUse.component();
    }

    return {
      componentInstance: componentInstance,
      paramsFromSelector: componentToUse.paramsFromSelector
    };
  };

  UserComponentFactory.prototype.initComponent = function (component, finalParams) {
    this.context.wireBean(component);

    if (component.init == null) {
      return;
    } else {
      return component.init(finalParams);
    }
  };

  __decorate([context_1.Autowired("gridOptions"), __metadata("design:type", Object)], UserComponentFactory.prototype, "gridOptions", void 0);

  __decorate([context_1.Autowired("gridOptionsWrapper"), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], UserComponentFactory.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired("context"), __metadata("design:type", context_1.Context)], UserComponentFactory.prototype, "context", void 0);

  __decorate([context_1.Autowired("agComponentUtils"), __metadata("design:type", agComponentUtils_1.AgComponentUtils)], UserComponentFactory.prototype, "agComponentUtils", void 0);

  __decorate([context_1.Autowired("componentMetadataProvider"), __metadata("design:type", componentMetadataProvider_1.ComponentMetadataProvider)], UserComponentFactory.prototype, "componentMetadataProvider", void 0);

  __decorate([context_1.Autowired("userComponentRegistry"), __metadata("design:type", userComponentRegistry_1.UserComponentRegistry)], UserComponentFactory.prototype, "userComponentRegistry", void 0);

  __decorate([context_1.Optional("frameworkComponentWrapper"), __metadata("design:type", Object)], UserComponentFactory.prototype, "frameworkComponentWrapper", void 0);

  UserComponentFactory = __decorate([context_1.Bean('userComponentFactory')], UserComponentFactory);
  return UserComponentFactory;
}();

exports.UserComponentFactory = UserComponentFactory;

/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _assertThisInitialized; });
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var __param = this && this.__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var gridOptionsWrapper_1 = __webpack_require__(7);

var expressionService_1 = __webpack_require__(43);

var templateService_1 = __webpack_require__(105);

var valueService_1 = __webpack_require__(38);

var eventService_1 = __webpack_require__(14);

var rowComp_1 = __webpack_require__(139);

var events_1 = __webpack_require__(18);

var constants_1 = __webpack_require__(19);

var cellComp_1 = __webpack_require__(86);

var context_1 = __webpack_require__(2);

var columnApi_1 = __webpack_require__(21);

var columnController_1 = __webpack_require__(17);

var logger_1 = __webpack_require__(30);

var focusedCellController_1 = __webpack_require__(48);

var cellNavigationService_1 = __webpack_require__(143);

var gridCell_1 = __webpack_require__(52);

var beanStub_1 = __webpack_require__(32);

var paginationProxy_1 = __webpack_require__(53);

var gridApi_1 = __webpack_require__(20);

var pinnedRowModel_1 = __webpack_require__(59);

var beans_1 = __webpack_require__(60);

var animationFrameService_1 = __webpack_require__(73);

var maxDivHeightScaler_1 = __webpack_require__(110);

var utils_1 = __webpack_require__(6);

var RowRenderer =
/** @class */
function (_super) {
  __extends(RowRenderer, _super);

  function RowRenderer() {
    var _this = _super !== null && _super.apply(this, arguments) || this; // map of row ids to row objects. keeps track of which elements
    // are rendered for which rows in the dom.


    _this.rowCompsByIndex = {};
    _this.floatingTopRowComps = [];
    _this.floatingBottomRowComps = []; // we only allow one refresh at a time, otherwise the internal memory structure here
    // will get messed up. this can happen if the user has a cellRenderer, and inside the
    // renderer they call an API method that results in another pass of the refresh,
    // then it will be trying to draw rows in the middle of a refresh.

    _this.refreshInProgress = false;
    return _this;
  }

  RowRenderer.prototype.registerGridCore = function (gridCore) {
    this.gridCore = gridCore;
  };

  RowRenderer.prototype.agWire = function (loggerFactory) {
    this.logger = loggerFactory.create("RowRenderer");
  };

  RowRenderer.prototype.registerGridComp = function (gridPanel) {
    this.gridPanel = gridPanel;
    this.rowContainers = this.gridPanel.getRowContainers();
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_PAGINATION_CHANGED, this.onPageLoaded.bind(this));
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_BODY_SCROLL, this.redrawAfterScroll.bind(this));
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_BODY_HEIGHT_CHANGED, this.redrawAfterScroll.bind(this));
    this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_DOM_LAYOUT, this.onDomLayoutChanged.bind(this));
    this.printLayout = this.gridOptionsWrapper.getDomLayout() === constants_1.Constants.DOM_LAYOUT_PRINT;
    this.embedFullWidthRows = this.printLayout || this.gridOptionsWrapper.isEmbedFullWidthRows();
    this.redrawAfterModelUpdate();
  };

  RowRenderer.prototype.onDomLayoutChanged = function () {
    var printLayout = this.gridOptionsWrapper.getDomLayout() === constants_1.Constants.DOM_LAYOUT_PRINT;
    var embedFullWidthRows = printLayout || this.gridOptionsWrapper.isEmbedFullWidthRows(); // if moving towards or away from print layout, means we need to destroy all rows, as rows are not laid
    // out using absolute positioning when doing print layout

    var destroyRows = embedFullWidthRows !== this.embedFullWidthRows || this.printLayout !== printLayout;
    this.printLayout = printLayout;
    this.embedFullWidthRows = embedFullWidthRows;

    if (destroyRows) {
      this.redrawAfterModelUpdate();
    }
  }; // for row models that have datasources, when we update the datasource, we need to force the rowRenderer
  // to redraw all rows. otherwise the old rows from the old datasource will stay displayed.


  RowRenderer.prototype.datasourceChanged = function () {
    this.firstRenderedRow = 0;
    this.lastRenderedRow = -1;
    var rowIndexesToRemove = Object.keys(this.rowCompsByIndex);
    this.removeRowComps(rowIndexesToRemove);
  };

  RowRenderer.prototype.onPageLoaded = function (refreshEvent) {
    if (utils_1._.missing(refreshEvent)) {
      refreshEvent = {
        type: events_1.Events.EVENT_MODEL_UPDATED,
        api: this.gridApi,
        columnApi: this.columnApi,
        animate: false,
        keepRenderedRows: false,
        newData: false,
        newPage: false
      };
    }

    this.onModelUpdated(refreshEvent);
  };

  RowRenderer.prototype.getAllCellsForColumn = function (column) {
    var eCells = [];

    utils_1._.iterateObject(this.rowCompsByIndex, callback);

    utils_1._.iterateObject(this.floatingBottomRowComps, callback);

    utils_1._.iterateObject(this.floatingTopRowComps, callback);

    function callback(key, rowComp) {
      var eCell = rowComp.getCellForCol(column);

      if (eCell) {
        eCells.push(eCell);
      }
    }

    return eCells;
  };

  RowRenderer.prototype.refreshFloatingRowComps = function () {
    this.refreshFloatingRows(this.floatingTopRowComps, this.pinnedRowModel.getPinnedTopRowData(), this.rowContainers.floatingTopPinnedLeft, this.rowContainers.floatingTopPinnedRight, this.rowContainers.floatingTop, this.rowContainers.floatingTopFullWidth);
    this.refreshFloatingRows(this.floatingBottomRowComps, this.pinnedRowModel.getPinnedBottomRowData(), this.rowContainers.floatingBottomPinnedLeft, this.rowContainers.floatingBottomPinnedRight, this.rowContainers.floatingBottom, this.rowContainers.floatingBottomFullWith);
  };

  RowRenderer.prototype.refreshFloatingRows = function (rowComps, rowNodes, pinnedLeftContainerComp, pinnedRightContainerComp, bodyContainerComp, fullWidthContainerComp) {
    var _this = this;

    rowComps.forEach(function (row) {
      row.destroy();
    });
    rowComps.length = 0;

    if (rowNodes) {
      rowNodes.forEach(function (node) {
        var rowComp = new rowComp_1.RowComp(_this.$scope, bodyContainerComp, pinnedLeftContainerComp, pinnedRightContainerComp, fullWidthContainerComp, node, _this.beans, false, false, _this.printLayout, _this.embedFullWidthRows);
        rowComp.init();
        rowComps.push(rowComp);
      });
    }

    this.flushContainers(rowComps);
  };

  RowRenderer.prototype.onPinnedRowDataChanged = function () {
    // recycling rows in order to ensure cell editing is not cancelled
    var params = {
      recycleRows: true
    };
    this.redrawAfterModelUpdate(params);
  };

  RowRenderer.prototype.onModelUpdated = function (refreshEvent) {
    var params = {
      recycleRows: refreshEvent.keepRenderedRows,
      animate: refreshEvent.animate,
      newData: refreshEvent.newData,
      newPage: refreshEvent.newPage,
      // because this is a model updated event (not pinned rows), we
      // can skip updating the pinned rows. this is needed so that if user
      // is doing transaction updates, the pinned rows are not getting constantly
      // trashed - or editing cells in pinned rows are not refreshed and put into read mode
      onlyBody: true
    };
    this.redrawAfterModelUpdate(params);
  }; // if the row nodes are not rendered, no index is returned


  RowRenderer.prototype.getRenderedIndexesForRowNodes = function (rowNodes) {
    var result = [];

    if (utils_1._.missing(rowNodes)) {
      return result;
    }

    utils_1._.iterateObject(this.rowCompsByIndex, function (index, renderedRow) {
      var rowNode = renderedRow.getRowNode();

      if (rowNodes.indexOf(rowNode) >= 0) {
        result.push(index);
      }
    });

    return result;
  };

  RowRenderer.prototype.redrawRows = function (rowNodes) {
    if (!rowNodes || rowNodes.length == 0) {
      return;
    } // we only need to be worried about rendered rows, as this method is
    // called to what's rendered. if the row isn't rendered, we don't care


    var indexesToRemove = this.getRenderedIndexesForRowNodes(rowNodes); // remove the rows

    this.removeRowComps(indexesToRemove); // add draw them again

    this.redrawAfterModelUpdate({
      recycleRows: true
    });
  };

  RowRenderer.prototype.getCellToRestoreFocusToAfterRefresh = function (params) {
    var focusedCell = params.suppressKeepFocus ? null : this.focusedCellController.getFocusCellToUseAfterRefresh();

    if (utils_1._.missing(focusedCell)) {
      return null;
    } // if the dom is not actually focused on a cell, then we don't try to refocus. the problem this
    // solves is with editing - if the user is editing, eg focus is on a text field, and not on the
    // cell itself, then the cell can be registered as having focus, however it's the text field that
    // has the focus and not the cell div. therefore, when the refresh is finished, the grid will focus
    // the cell, and not the textfield. that means if the user is in a text field, and the grid refreshes,
    // the focus is lost from the text field. we do not want this.


    var activeElement = document.activeElement;
    var domData = this.gridOptionsWrapper.getDomData(activeElement, cellComp_1.CellComp.DOM_DATA_KEY_CELL_COMP);

    var elementIsNotACellDev = utils_1._.missing(domData);

    if (elementIsNotACellDev) {
      return null;
    }

    return focusedCell;
  }; // gets called after changes to the model.


  RowRenderer.prototype.redrawAfterModelUpdate = function (params) {
    if (params === void 0) {
      params = {};
    }

    this.getLockOnRefresh();
    var focusedCell = this.getCellToRestoreFocusToAfterRefresh(params);
    this.sizeContainerToPageHeight();
    this.scrollToTopIfNewData(params); // never recycle rows when print layout, we draw each row again from scratch. this is because print layout
    // uses normal dom layout to put cells into dom - it doesn't allow reordering rows.

    var recycleRows = !this.printLayout && params.recycleRows;
    var animate = params.animate && this.gridOptionsWrapper.isAnimateRows();
    var rowsToRecycle = this.binRowComps(recycleRows);
    this.redraw(rowsToRecycle, animate);

    if (!params.onlyBody) {
      this.refreshFloatingRowComps();
    }

    this.restoreFocusedCell(focusedCell);
    this.releaseLockOnRefresh();
  };

  RowRenderer.prototype.scrollToTopIfNewData = function (params) {
    var scrollToTop = params.newData || params.newPage;
    var suppressScrollToTop = this.gridOptionsWrapper.isSuppressScrollOnNewData();

    if (scrollToTop && !suppressScrollToTop) {
      this.gridPanel.scrollToTop();
    }
  };

  RowRenderer.prototype.sizeContainerToPageHeight = function () {
    var containers = [this.rowContainers.body, this.rowContainers.fullWidth, this.rowContainers.pinnedLeft, this.rowContainers.pinnedRight];

    if (this.printLayout) {
      containers.forEach(function (container) {
        return container.setHeight(null);
      });
      return;
    }

    var containerHeight = this.paginationProxy.getCurrentPageHeight(); // we need at least 1 pixel for the horizontal scroll to work. so if there are now rows,
    // we still want the scroll to be present, otherwise there would be no way to scroll the header
    // which might be needed us user wants to access columns
    // on the RHS - and if that was where the filter was that cause no rows to be presented, there
    // is no way to remove the filter.

    if (containerHeight === 0) {
      containerHeight = 1;
    }

    this.maxDivHeightScaler.setModelHeight(containerHeight);
    var realHeight = this.maxDivHeightScaler.getUiContainerHeight();
    containers.forEach(function (container) {
      return container.setHeight(realHeight);
    });
  };

  RowRenderer.prototype.getLockOnRefresh = function () {
    if (this.refreshInProgress) {
      throw new Error("ag-Grid: cannot get grid to draw rows when it is in the middle of drawing rows. " + "Your code probably called a grid API method while the grid was in the render stage. To overcome " + "this, put the API call into a timeout, eg instead of api.refreshView(), " + "call setTimeout(function(){api.refreshView(),0}). To see what part of your code " + "that caused the refresh check this stacktrace.");
    }

    this.refreshInProgress = true;
  };

  RowRenderer.prototype.releaseLockOnRefresh = function () {
    this.refreshInProgress = false;
  }; // sets the focus to the provided cell, if the cell is provided. this way, the user can call refresh without
  // worry about the focus been lost. this is important when the user is using keyboard navigation to do edits
  // and the cellEditor is calling 'refresh' to get other cells to update (as other cells might depend on the
  // edited cell).


  RowRenderer.prototype.restoreFocusedCell = function (gridCell) {
    if (gridCell) {
      this.focusedCellController.setFocusedCell(gridCell.rowIndex, gridCell.column, gridCell.floating, true);
    }
  };

  RowRenderer.prototype.stopEditing = function (cancel) {
    if (cancel === void 0) {
      cancel = false;
    }

    this.forEachRowComp(function (key, rowComp) {
      rowComp.stopEditing(cancel);
    });
  };

  RowRenderer.prototype.forEachCellComp = function (callback) {
    this.forEachRowComp(function (key, rowComp) {
      return rowComp.forEachCellComp(callback);
    });
  };

  RowRenderer.prototype.forEachRowComp = function (callback) {
    utils_1._.iterateObject(this.rowCompsByIndex, callback);

    utils_1._.iterateObject(this.floatingTopRowComps, callback);

    utils_1._.iterateObject(this.floatingBottomRowComps, callback);
  };

  RowRenderer.prototype.addRenderedRowListener = function (eventName, rowIndex, callback) {
    var rowComp = this.rowCompsByIndex[rowIndex];

    if (rowComp) {
      rowComp.addEventListener(eventName, callback);
    }
  };

  RowRenderer.prototype.flashCells = function (params) {
    if (params === void 0) {
      params = {};
    }

    this.forEachCellCompFiltered(params.rowNodes, params.columns, function (cellComp) {
      return cellComp.flashCell();
    });
  };

  RowRenderer.prototype.refreshCells = function (params) {
    if (params === void 0) {
      params = {};
    }

    var refreshCellParams = {
      forceRefresh: params.force,
      newData: false
    };
    this.forEachCellCompFiltered(params.rowNodes, params.columns, function (cellComp) {
      return cellComp.refreshCell(refreshCellParams);
    });
  };

  RowRenderer.prototype.getCellRendererInstances = function (params) {
    var res = [];
    this.forEachCellCompFiltered(params.rowNodes, params.columns, function (cellComp) {
      var cellRenderer = cellComp.getCellRenderer();

      if (cellRenderer) {
        res.push(cellRenderer);
      }
    });
    return res;
  };

  RowRenderer.prototype.getCellEditorInstances = function (params) {
    var res = [];
    this.forEachCellCompFiltered(params.rowNodes, params.columns, function (cellComp) {
      var cellEditor = cellComp.getCellEditor();

      if (cellEditor) {
        res.push(cellEditor);
      }
    });
    return res;
  };

  RowRenderer.prototype.getEditingCells = function () {
    var res = [];
    this.forEachCellComp(function (cellComp) {
      if (cellComp.isEditing()) {
        var gridCellDef = cellComp.getGridCell().getGridCellDef();
        res.push(gridCellDef);
      }
    });
    return res;
  }; // calls the callback for each cellComp that match the provided rowNodes and columns. eg if one row node
  // and two columns provided, that identifies 4 cells, so callback gets called 4 times, once for each cell.


  RowRenderer.prototype.forEachCellCompFiltered = function (rowNodes, columns, callback) {
    var _this = this;

    var rowIdsMap;

    if (utils_1._.exists(rowNodes)) {
      rowIdsMap = {
        top: {},
        bottom: {},
        normal: {}
      };
      rowNodes.forEach(function (rowNode) {
        if (rowNode.rowPinned === constants_1.Constants.PINNED_TOP) {
          rowIdsMap.top[rowNode.id] = true;
        } else if (rowNode.rowPinned === constants_1.Constants.PINNED_BOTTOM) {
          rowIdsMap.bottom[rowNode.id] = true;
        } else {
          rowIdsMap.normal[rowNode.id] = true;
        }
      });
    }

    var colIdsMap;

    if (utils_1._.exists(columns)) {
      colIdsMap = {};
      columns.forEach(function (colKey) {
        var column = _this.columnController.getGridColumn(colKey);

        if (utils_1._.exists(column)) {
          colIdsMap[column.getId()] = true;
        }
      });
    }

    var processRow = function processRow(rowComp) {
      var rowNode = rowComp.getRowNode();
      var id = rowNode.id;
      var floating = rowNode.rowPinned; // skip this row if it is missing from the provided list

      if (utils_1._.exists(rowIdsMap)) {
        if (floating === constants_1.Constants.PINNED_BOTTOM) {
          if (!rowIdsMap.bottom[id]) {
            return;
          }
        } else if (floating === constants_1.Constants.PINNED_TOP) {
          if (!rowIdsMap.top[id]) {
            return;
          }
        } else {
          if (!rowIdsMap.normal[id]) {
            return;
          }
        }
      }

      rowComp.forEachCellComp(function (cellComp) {
        var colId = cellComp.getColumn().getId();
        var excludeColFromRefresh = colIdsMap && !colIdsMap[colId];

        if (excludeColFromRefresh) {
          return;
        }

        callback(cellComp);
      });
    };

    utils_1._.iterateObject(this.rowCompsByIndex, function (index, rowComp) {
      processRow(rowComp);
    });

    if (this.floatingTopRowComps) {
      this.floatingTopRowComps.forEach(processRow);
    }

    if (this.floatingBottomRowComps) {
      this.floatingBottomRowComps.forEach(processRow);
    }
  };

  RowRenderer.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    var rowIndexesToRemove = Object.keys(this.rowCompsByIndex);
    this.removeRowComps(rowIndexesToRemove);
  };

  RowRenderer.prototype.binRowComps = function (recycleRows) {
    var _this = this;

    var indexesToRemove;
    var rowsToRecycle = {};

    if (recycleRows) {
      indexesToRemove = [];

      utils_1._.iterateObject(this.rowCompsByIndex, function (index, rowComp) {
        var rowNode = rowComp.getRowNode();

        if (utils_1._.exists(rowNode.id)) {
          rowsToRecycle[rowNode.id] = rowComp;
          delete _this.rowCompsByIndex[index];
        } else {
          indexesToRemove.push(index);
        }
      });
    } else {
      indexesToRemove = Object.keys(this.rowCompsByIndex);
    }

    this.removeRowComps(indexesToRemove);
    return rowsToRecycle;
  }; // takes array of row indexes


  RowRenderer.prototype.removeRowComps = function (rowsToRemove) {
    var _this = this; // if no fromIndex then set to -1, which will refresh everything
    // let realFromIndex = -1;


    rowsToRemove.forEach(function (indexToRemove) {
      var renderedRow = _this.rowCompsByIndex[indexToRemove];
      renderedRow.destroy();
      delete _this.rowCompsByIndex[indexToRemove];
    });
  }; // gets called when rows don't change, but viewport does, so after:
  // 1) height of grid body changes, ie number of displayed rows has changed
  // 2) grid scrolled to new position
  // 3) ensure index visible (which is a scroll)


  RowRenderer.prototype.redrawAfterScroll = function () {
    this.getLockOnRefresh();
    this.redraw(null, false, true);
    this.releaseLockOnRefresh();
  };

  RowRenderer.prototype.removeRowCompsNotToDraw = function (indexesToDraw) {
    // for speedy lookup, dump into map
    var indexesToDrawMap = {};
    indexesToDraw.forEach(function (index) {
      return indexesToDrawMap[index] = true;
    });
    var existingIndexes = Object.keys(this.rowCompsByIndex);

    var indexesNotToDraw = utils_1._.filter(existingIndexes, function (index) {
      return !indexesToDrawMap[index];
    });

    this.removeRowComps(indexesNotToDraw);
  };

  RowRenderer.prototype.calculateIndexesToDraw = function () {
    var _this = this; // all in all indexes in the viewport


    var indexesToDraw = utils_1._.createArrayOfNumbers(this.firstRenderedRow, this.lastRenderedRow); // add in indexes of rows we want to keep, because they are currently editing


    utils_1._.iterateObject(this.rowCompsByIndex, function (indexStr, rowComp) {
      var index = Number(indexStr);

      if (index < _this.firstRenderedRow || index > _this.lastRenderedRow) {
        if (_this.keepRowBecauseEditingOrFocused(rowComp)) {
          indexesToDraw.push(index);
        }
      }
    });

    indexesToDraw.sort(function (a, b) {
      return a - b;
    });
    return indexesToDraw;
  };

  RowRenderer.prototype.redraw = function (rowsToRecycle, animate, afterScroll) {
    var _this = this;

    if (animate === void 0) {
      animate = false;
    }

    if (afterScroll === void 0) {
      afterScroll = false;
    }

    this.maxDivHeightScaler.updateOffset();
    this.workOutFirstAndLastRowsToRender(); // the row can already exist and be in the following:
    // rowsToRecycle -> if model change, then the index may be different, however row may
    //                         exist here from previous time (mapped by id).
    // this.rowCompsByIndex -> if just a scroll, then this will contain what is currently in the viewport
    // this is all the indexes we want, including those that already exist, so this method
    // will end up going through each index and drawing only if the row doesn't already exist

    var indexesToDraw = this.calculateIndexesToDraw();
    this.removeRowCompsNotToDraw(indexesToDraw); // never animate when doing print layout - as we want to get things ready to print as quickly as possible,
    // otherwise we risk the printer printing a row that's half faded (half way through fading in)

    if (this.printLayout) {
      animate = false;
    } // add in new rows


    var nextVmTurnFunctions = [];
    var rowComps = [];
    indexesToDraw.forEach(function (rowIndex) {
      var rowComp = _this.createOrUpdateRowComp(rowIndex, rowsToRecycle, animate, afterScroll);

      if (utils_1._.exists(rowComp)) {
        rowComps.push(rowComp);

        utils_1._.pushAll(nextVmTurnFunctions, rowComp.getAndClearNextVMTurnFunctions());
      }
    });
    this.flushContainers(rowComps);

    utils_1._.executeNextVMTurn(nextVmTurnFunctions);

    var useAnimationFrame = afterScroll && !this.gridOptionsWrapper.isSuppressAnimationFrame() && !this.printLayout;

    if (useAnimationFrame) {
      this.beans.taskQueue.addP2Task(this.destroyRowComps.bind(this, rowsToRecycle, animate));
    } else {
      this.destroyRowComps(rowsToRecycle, animate);
    }

    this.checkAngularCompile();
  };

  RowRenderer.prototype.flushContainers = function (rowComps) {
    utils_1._.iterateObject(this.rowContainers, function (key, rowContainerComp) {
      if (rowContainerComp) {
        rowContainerComp.flushRowTemplates();
      }
    });

    rowComps.forEach(function (rowComp) {
      return rowComp.afterFlush();
    });
  };

  RowRenderer.prototype.onDisplayedColumnsChanged = function () {
    var pinningLeft = this.columnController.isPinningLeft();
    var pinningRight = this.columnController.isPinningRight();
    var atLeastOneChanged = this.pinningLeft !== pinningLeft || pinningRight !== this.pinningRight;

    if (atLeastOneChanged) {
      this.pinningLeft = pinningLeft;
      this.pinningRight = pinningRight;

      if (this.embedFullWidthRows) {
        this.redrawFullWidthEmbeddedRows();
      }
    }
  }; // when embedding, what gets showed in each section depends on what is pinned. eg if embedding group expand / collapse,
  // then it should go into the pinned left area if pinning left, or the center area if not pinning.


  RowRenderer.prototype.redrawFullWidthEmbeddedRows = function () {
    // if either of the pinned panels has shown / hidden, then need to redraw the fullWidth bits when
    // embedded, as what appears in each section depends on whether we are pinned or not
    var rowsToRemove = [];

    utils_1._.iterateObject(this.rowCompsByIndex, function (id, rowComp) {
      if (rowComp.isFullWidth()) {
        var rowIndex = rowComp.getRowNode().rowIndex;
        rowsToRemove.push(rowIndex.toString());
      }
    });

    this.refreshFloatingRowComps();
    this.removeRowComps(rowsToRemove);
    this.redrawAfterScroll();
  };

  RowRenderer.prototype.refreshFullWidthRows = function () {
    var rowsToRemove = [];

    utils_1._.iterateObject(this.rowCompsByIndex, function (id, rowComp) {
      if (rowComp.isFullWidth()) {
        var rowIndex = rowComp.getRowNode().rowIndex;
        rowsToRemove.push(rowIndex.toString());
      }
    });

    this.removeRowComps(rowsToRemove);
    this.redrawAfterScroll();
  };

  RowRenderer.prototype.createOrUpdateRowComp = function (rowIndex, rowsToRecycle, animate, afterScroll) {
    var rowNode;
    var rowComp = this.rowCompsByIndex[rowIndex]; // if no row comp, see if we can get it from the previous rowComps

    if (!rowComp) {
      rowNode = this.paginationProxy.getRow(rowIndex);

      if (utils_1._.exists(rowNode) && utils_1._.exists(rowsToRecycle) && rowsToRecycle[rowNode.id] && rowNode.alreadyRendered) {
        rowComp = rowsToRecycle[rowNode.id];
        rowsToRecycle[rowNode.id] = null;
      }
    }

    var creatingNewRowComp = !rowComp;

    if (creatingNewRowComp) {
      // create a new one
      if (!rowNode) {
        rowNode = this.paginationProxy.getRow(rowIndex);
      }

      if (utils_1._.exists(rowNode)) {
        rowComp = this.createRowComp(rowNode, animate, afterScroll);
      } else {
        // this should never happen - if somehow we are trying to create
        // a row for a rowNode that does not exist.
        return;
      }
    } else {
      // ensure row comp is in right position in DOM
      rowComp.ensureDomOrder();
    }

    if (rowNode) {
      // set node as 'alreadyRendered' to ensure we only recycle rowComps that have been rendered, this ensures
      // we don't reuse rowComps that have been removed and then re-added in the same batch transaction.
      rowNode.alreadyRendered = true;
    }

    this.rowCompsByIndex[rowIndex] = rowComp;
    return rowComp;
  };

  RowRenderer.prototype.destroyRowComps = function (rowCompsMap, animate) {
    var delayedFuncs = [];

    utils_1._.iterateObject(rowCompsMap, function (nodeId, rowComp) {
      // if row was used, then it's null
      if (!rowComp) {
        return;
      }

      rowComp.destroy(animate);

      utils_1._.pushAll(delayedFuncs, rowComp.getAndClearDelayedDestroyFunctions());
    });

    utils_1._.executeInAWhile(delayedFuncs);
  };

  RowRenderer.prototype.checkAngularCompile = function () {
    var _this = this; // if we are doing angular compiling, then do digest the scope here


    if (this.gridOptionsWrapper.isAngularCompileRows()) {
      // we do it in a timeout, in case we are already in an apply
      window.setTimeout(function () {
        _this.$scope.$apply();
      }, 0);
    }
  };

  RowRenderer.prototype.workOutFirstAndLastRowsToRender = function () {
    var newFirst;
    var newLast;

    if (!this.paginationProxy.isRowsToRender()) {
      newFirst = 0;
      newLast = -1; // setting to -1 means nothing in range
    } else if (this.printLayout) {
      newFirst = this.paginationProxy.getPageFirstRow();
      newLast = this.paginationProxy.getPageLastRow();
    } else {
      var paginationOffset = this.paginationProxy ? this.paginationProxy.getPixelOffset() : 0;
      var maxDivHeightScaler = this.maxDivHeightScaler.getOffset();
      var bodyVRange = this.gridPanel.getVScrollPosition();
      var bodyTopPixel = bodyVRange.top;
      var bodyBottomPixel = bodyVRange.bottom;
      var bufferPixels = this.gridOptionsWrapper.getRowBufferInPixels();
      var firstPixel = bodyTopPixel + paginationOffset + maxDivHeightScaler - bufferPixels;
      var lastPixel = bodyBottomPixel + paginationOffset + maxDivHeightScaler + bufferPixels;
      this.ensureAllRowsInRangeHaveHeightsCalculated(firstPixel, lastPixel);
      var firstRowIndex = this.paginationProxy.getRowIndexAtPixel(firstPixel);
      var lastRowIndex = this.paginationProxy.getRowIndexAtPixel(lastPixel);
      var pageFirstRow = this.paginationProxy.getPageFirstRow();
      var pageLastRow = this.paginationProxy.getPageLastRow(); // adjust, in case buffer extended actual size

      if (firstRowIndex < pageFirstRow) {
        firstRowIndex = pageFirstRow;
      }

      if (lastRowIndex > pageLastRow) {
        lastRowIndex = pageLastRow;
      }

      newFirst = firstRowIndex;
      newLast = lastRowIndex;
    } // sometimes user doesn't set CSS right and ends up with grid with no height and grid ends up
    // trying to render all the rows, eg 10,000+ rows. this will kill the browser. so instead of
    // killing the browser, we limit the number of rows. just in case some use case we didn't think
    // of, we also have a property to not do this operation.


    var rowLayoutNormal = this.gridOptionsWrapper.getDomLayout() === constants_1.Constants.DOM_LAYOUT_NORMAL;
    var suppressRowCountRestriction = this.gridOptionsWrapper.isSuppressMaxRenderedRowRestriction();

    if (rowLayoutNormal && !suppressRowCountRestriction) {
      if (newLast - newFirst > 500) {
        newLast = newFirst + 500;
      }
    }

    var firstDiffers = newFirst !== this.firstRenderedRow;
    var lastDiffers = newLast !== this.lastRenderedRow;

    if (firstDiffers || lastDiffers) {
      this.firstRenderedRow = newFirst;
      this.lastRenderedRow = newLast;
      var event_1 = {
        type: events_1.Events.EVENT_VIEWPORT_CHANGED,
        firstRow: newFirst,
        lastRow: newLast,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(event_1);
    }

    if (this.paginationProxy.isRowsToRender()) {
      var event_2 = {
        type: events_1.Events.EVENT_FIRST_DATA_RENDERED,
        firstRow: newFirst,
        lastRow: newLast,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEventOnce(event_2);
    }
  };

  RowRenderer.prototype.ensureAllRowsInRangeHaveHeightsCalculated = function (topPixel, bottomPixel) {
    // ensureRowHeightsVisible only works with CSRM, as it's the only row model that allows lazy row height calcs.
    // all the other row models just hard code so the method just returns back false
    var rowHeightsChanged = this.paginationProxy.ensureRowHeightsValid(topPixel, bottomPixel, -1, -1);

    if (rowHeightsChanged) {
      // if row heights have changed, we need to resize the containers the rows sit it
      this.sizeContainerToPageHeight(); // we also need to update heightScaler as this has dependency of row container height

      this.maxDivHeightScaler.updateOffset();
    }
  };

  RowRenderer.prototype.getFirstVirtualRenderedRow = function () {
    return this.firstRenderedRow;
  };

  RowRenderer.prototype.getLastVirtualRenderedRow = function () {
    return this.lastRenderedRow;
  }; // check that none of the rows to remove are editing or focused as:
  // a) if editing, we want to keep them, otherwise the user will loose the context of the edit,
  //    eg user starts editing, enters some text, then scrolls down and then up, next time row rendered
  //    the edit is reset - so we want to keep it rendered.
  // b) if focused, we want ot keep keyboard focus, so if user ctrl+c, it goes to clipboard,
  //    otherwise the user can range select and drag (with focus cell going out of the viewport)
  //    and then ctrl+c, nothing will happen if cell is removed from dom.


  RowRenderer.prototype.keepRowBecauseEditingOrFocused = function (rowComp) {
    var REMOVE_ROW = false;
    var KEEP_ROW = true;
    var rowNode = rowComp.getRowNode();
    var rowHasFocus = this.focusedCellController.isRowNodeFocused(rowNode);
    var rowIsEditing = rowComp.isEditing();
    var mightWantToKeepRow = rowHasFocus || rowIsEditing; // if we deffo don't want to keep it,

    if (!mightWantToKeepRow) {
      return REMOVE_ROW;
    } // editing row, only remove if it is no longer rendered, eg filtered out or new data set.
    // the reason we want to keep is if user is scrolling up and down, we don't want to loose
    // the context of the editing in process.


    var rowNodePresent = this.paginationProxy.isRowPresent(rowNode);
    return rowNodePresent ? KEEP_ROW : REMOVE_ROW;
  };

  RowRenderer.prototype.createRowComp = function (rowNode, animate, afterScroll) {
    var suppressAnimationFrame = this.gridOptionsWrapper.isSuppressAnimationFrame(); // we don't use animations frames for printing, so the user can put the grid into print mode
    // and immediately print - otherwise the user would have to wait for the rows to draw in the background
    // (via the animation frames) which is awkward to do from code.
    // we only do the animation frames after scrolling, as this is where we want the smooth user experience.
    // having animation frames for other times makes the grid look 'jumpy'.

    var useAnimationFrameForCreate = afterScroll && !suppressAnimationFrame && !this.printLayout;
    var rowComp = new rowComp_1.RowComp(this.$scope, this.rowContainers.body, this.rowContainers.pinnedLeft, this.rowContainers.pinnedRight, this.rowContainers.fullWidth, rowNode, this.beans, animate, useAnimationFrameForCreate, this.printLayout, this.embedFullWidthRows);
    rowComp.init();
    return rowComp;
  };

  RowRenderer.prototype.getRenderedNodes = function () {
    var renderedRows = this.rowCompsByIndex;
    return Object.keys(renderedRows).map(function (key) {
      return renderedRows[key].getRowNode();
    });
  }; // we use index for rows, but column object for columns, as the next column (by index) might not
  // be visible (header grouping) so it's not reliable, so using the column object instead.


  RowRenderer.prototype.navigateToNextCell = function (event, key, currentCell, allowUserOverride) {
    var nextCell; // we keep searching for a next cell until we find one. this is how the group rows get skipped

    while (true) {
      var cellComp = this.getComponentForCell(currentCell);
      var colSpanningList = cellComp.getColSpanningList(); // if the current cell is spanning across multiple columns, we need to move
      // our current position to be the last cell on the right before finding the
      // the next target.

      if (key === constants_1.Constants.KEY_RIGHT && colSpanningList.length > 1) {
        currentCell = new gridCell_1.GridCell({
          rowIndex: currentCell.rowIndex,
          column: colSpanningList[colSpanningList.length - 1],
          floating: currentCell.floating
        });
      }

      nextCell = this.cellNavigationService.getNextCellToFocus(key, currentCell);

      if (utils_1._.missing(nextCell)) {
        break;
      }

      var skipGroupRows = this.gridOptionsWrapper.isGroupUseEntireRow();

      if (!skipGroupRows) {
        break;
      }

      var rowNode = this.paginationProxy.getRow(nextCell.rowIndex);

      if (!rowNode.group) {
        break;
      }
    }

    if (nextCell) {
      var cellComp = this.getComponentForCell(nextCell);
      nextCell = cellComp.getGridCell();
    } // allow user to override what cell to go to next. when doing normal cell navigation (with keys)
    // we allow this, however if processing 'enter after edit' we don't allow override


    if (allowUserOverride) {
      var userFunc = this.gridOptionsWrapper.getNavigateToNextCellFunc();

      if (utils_1._.exists(userFunc)) {
        var params = {
          key: key,
          previousCellDef: currentCell.getGridCellDef(),
          nextCellDef: nextCell ? nextCell.getGridCellDef() : null,
          event: event
        };
        var nextCellDef = userFunc(params);

        if (utils_1._.exists(nextCellDef)) {
          nextCell = new gridCell_1.GridCell(nextCellDef);
        } else {
          nextCell = null;
        }
      }
    } // no next cell means we have reached a grid boundary, eg left, right, top or bottom of grid


    if (!nextCell) {
      return;
    }

    this.ensureCellVisible(nextCell);
    this.focusedCellController.setFocusedCell(nextCell.rowIndex, nextCell.column, nextCell.floating, true);

    if (this.rangeController) {
      var gridCell = new gridCell_1.GridCell({
        rowIndex: nextCell.rowIndex,
        floating: nextCell.floating,
        column: nextCell.column
      });
      this.rangeController.setRangeToCell(gridCell);
    }
  };

  RowRenderer.prototype.ensureCellVisible = function (gridCell) {
    // this scrolls the row into view
    if (utils_1._.missing(gridCell.floating)) {
      this.gridPanel.ensureIndexVisible(gridCell.rowIndex);
    }

    if (!gridCell.column.isPinned()) {
      this.gridPanel.ensureColumnVisible(gridCell.column);
    } // need to nudge the scrolls for the floating items. otherwise when we set focus on a non-visible
    // floating cell, the scrolls get out of sync


    this.gridPanel.horizontallyScrollHeaderCenterAndFloatingCenter(); // need to flush frames, to make sure the correct cells are rendered

    this.animationFrameService.flushAllFrames();
  };

  RowRenderer.prototype.startEditingCell = function (gridCell, keyPress, charPress) {
    var cell = this.getComponentForCell(gridCell);

    if (cell) {
      cell.startRowOrCellEdit(keyPress, charPress);
    }
  };

  RowRenderer.prototype.getComponentForCell = function (gridCell) {
    var rowComponent;

    switch (gridCell.floating) {
      case constants_1.Constants.PINNED_TOP:
        rowComponent = this.floatingTopRowComps[gridCell.rowIndex];
        break;

      case constants_1.Constants.PINNED_BOTTOM:
        rowComponent = this.floatingBottomRowComps[gridCell.rowIndex];
        break;

      default:
        rowComponent = this.rowCompsByIndex[gridCell.rowIndex];
        break;
    }

    if (!rowComponent) {
      return null;
    }

    var cellComponent = rowComponent.getRenderedCellForColumn(gridCell.column);
    return cellComponent;
  };

  RowRenderer.prototype.onTabKeyDown = function (previousRenderedCell, keyboardEvent) {
    var backwards = keyboardEvent.shiftKey;
    var success = this.moveToCellAfter(previousRenderedCell, backwards);

    if (success) {
      keyboardEvent.preventDefault();
    }
  };

  RowRenderer.prototype.tabToNextCell = function (backwards) {
    var focusedCell = this.focusedCellController.getFocusedCell(); // if no focus, then cannot navigate

    if (utils_1._.missing(focusedCell)) {
      return false;
    }

    var renderedCell = this.getComponentForCell(focusedCell); // if cell is not rendered, means user has scrolled away from the cell

    if (utils_1._.missing(renderedCell)) {
      return false;
    }

    var result = this.moveToCellAfter(renderedCell, backwards);
    return result;
  };

  RowRenderer.prototype.moveToCellAfter = function (previousRenderedCell, backwards) {
    var editing = previousRenderedCell.isEditing();
    var res;

    if (editing) {
      if (this.gridOptionsWrapper.isFullRowEdit()) {
        res = this.moveToNextEditingRow(previousRenderedCell, backwards);
      } else {
        res = this.moveToNextEditingCell(previousRenderedCell, backwards);
      }
    } else {
      res = this.moveToNextCellNotEditing(previousRenderedCell, backwards);
    }

    return res;
  };

  RowRenderer.prototype.moveToNextEditingCell = function (previousRenderedCell, backwards) {
    var gridCell = previousRenderedCell.getGridCell(); // need to do this before getting next cell to edit, in case the next cell
    // has editable function (eg colDef.editable=func() ) and it depends on the
    // result of this cell, so need to save updates from the first edit, in case
    // the value is referenced in the function.

    previousRenderedCell.stopEditing(); // find the next cell to start editing

    var nextRenderedCell = this.findNextCellToFocusOn(gridCell, backwards, true);

    var foundCell = utils_1._.exists(nextRenderedCell); // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default
    // to the normal tabbing so user can exit the grid.


    if (foundCell) {
      nextRenderedCell.startEditingIfEnabled(null, null, true);
      nextRenderedCell.focusCell(false);
    }

    return foundCell;
  };

  RowRenderer.prototype.moveToNextEditingRow = function (previousRenderedCell, backwards) {
    var gridCell = previousRenderedCell.getGridCell(); // find the next cell to start editing

    var nextRenderedCell = this.findNextCellToFocusOn(gridCell, backwards, true);

    var foundCell = utils_1._.exists(nextRenderedCell); // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default
    // to the normal tabbing so user can exit the grid.


    if (foundCell) {
      this.moveEditToNextCellOrRow(previousRenderedCell, nextRenderedCell);
    }

    return foundCell;
  };

  RowRenderer.prototype.moveToNextCellNotEditing = function (previousRenderedCell, backwards) {
    var gridCell = previousRenderedCell.getGridCell(); // find the next cell to start editing

    var nextRenderedCell = this.findNextCellToFocusOn(gridCell, backwards, false);

    var foundCell = utils_1._.exists(nextRenderedCell); // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default
    // to the normal tabbing so user can exit the grid.


    if (foundCell) {
      nextRenderedCell.focusCell(true);
    }

    return foundCell;
  };

  RowRenderer.prototype.moveEditToNextCellOrRow = function (previousRenderedCell, nextRenderedCell) {
    var pGridCell = previousRenderedCell.getGridCell();
    var nGridCell = nextRenderedCell.getGridCell();
    var rowsMatch = pGridCell.rowIndex === nGridCell.rowIndex && pGridCell.floating === nGridCell.floating;

    if (rowsMatch) {
      // same row, so we don't start / stop editing, we just move the focus along
      previousRenderedCell.setFocusOutOnEditor();
      nextRenderedCell.setFocusInOnEditor();
    } else {
      var pRow = previousRenderedCell.getRenderedRow();
      var nRow = nextRenderedCell.getRenderedRow();
      previousRenderedCell.setFocusOutOnEditor();
      pRow.stopEditing();
      nRow.startRowEditing();
      nextRenderedCell.setFocusInOnEditor();
    }

    nextRenderedCell.focusCell();
  }; // called by the cell, when tab is pressed while editing.
  // @return: RenderedCell when navigation successful, otherwise null


  RowRenderer.prototype.findNextCellToFocusOn = function (gridCell, backwards, startEditing) {
    var nextCell = gridCell;

    while (true) {
      nextCell = this.cellNavigationService.getNextTabbedCell(nextCell, backwards); // allow user to override what cell to go to next

      var userFunc = this.gridOptionsWrapper.getTabToNextCellFunc();

      if (utils_1._.exists(userFunc)) {
        var params = {
          backwards: backwards,
          editing: startEditing,
          previousCellDef: gridCell.getGridCellDef(),
          nextCellDef: nextCell ? nextCell.getGridCellDef() : null
        };
        var nextCellDef = userFunc(params);

        if (utils_1._.exists(nextCellDef)) {
          nextCell = new gridCell_1.GridCell(nextCellDef);
        } else {
          nextCell = null;
        }
      } // if no 'next cell', means we have got to last cell of grid, so nothing to move to,
      // so bottom right cell going forwards, or top left going backwards


      if (!nextCell) {
        return null;
      } // if editing, but cell not editable, skip cell. we do this before we do all of
      // the 'ensure index visible' and 'flush all frames', otherwise if we are skipping
      // a bunch of cells (eg 10 rows) then all the work on ensuring cell visible is useless
      // (except for the last one) which causes grid to stall for a while.


      if (startEditing) {
        var rowNode = this.lookupRowNodeForCell(nextCell);
        var cellIsEditable = nextCell.column.isCellEditable(rowNode);

        if (!cellIsEditable) {
          continue;
        }
      } // this scrolls the row into view


      var cellIsNotFloating = utils_1._.missing(nextCell.floating);

      if (cellIsNotFloating) {
        this.gridPanel.ensureIndexVisible(nextCell.rowIndex);
      } // pinned columns don't scroll, so no need to ensure index visible


      if (!nextCell.column.isPinned()) {
        this.gridPanel.ensureColumnVisible(nextCell.column);
      } // need to nudge the scrolls for the floating items. otherwise when we set focus on a non-visible
      // floating cell, the scrolls get out of sync


      this.gridPanel.horizontallyScrollHeaderCenterAndFloatingCenter(); // get the grid panel to flush all animation frames - otherwise the call below to get the cellComp
      // could fail, if we just scrolled the grid (to make a cell visible) and the rendering hasn't finished.

      this.animationFrameService.flushAllFrames(); // we have to call this after ensureColumnVisible - otherwise it could be a virtual column
      // or row that is not currently in view, hence the renderedCell would not exist

      var nextCellComp = this.getComponentForCell(nextCell); // if next cell is fullWidth row, then no rendered cell,
      // as fullWidth rows have no cells, so we skip it

      if (utils_1._.missing(nextCellComp)) {
        continue;
      }

      if (nextCellComp.isSuppressNavigable()) {
        continue;
      } // by default, when we click a cell, it gets selected into a range, so to keep keyboard navigation
      // consistent, we set into range here also.


      if (this.rangeController) {
        gridCell = new gridCell_1.GridCell({
          rowIndex: nextCell.rowIndex,
          floating: nextCell.floating,
          column: nextCell.column
        });
        this.rangeController.setRangeToCell(gridCell);
      } // we successfully tabbed onto a grid cell, so return true


      return nextCellComp;
    }
  };

  RowRenderer.prototype.lookupRowNodeForCell = function (cell) {
    if (cell.floating === constants_1.Constants.PINNED_TOP) {
      return this.pinnedRowModel.getPinnedTopRow(cell.rowIndex);
    }

    if (cell.floating === constants_1.Constants.PINNED_BOTTOM) {
      return this.pinnedRowModel.getPinnedBottomRow(cell.rowIndex);
    }

    return this.paginationProxy.getRow(cell.rowIndex);
  };

  __decorate([context_1.Autowired("paginationProxy"), __metadata("design:type", paginationProxy_1.PaginationProxy)], RowRenderer.prototype, "paginationProxy", void 0);

  __decorate([context_1.Autowired("columnController"), __metadata("design:type", columnController_1.ColumnController)], RowRenderer.prototype, "columnController", void 0);

  __decorate([context_1.Autowired("gridOptionsWrapper"), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], RowRenderer.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired("$scope"), __metadata("design:type", Object)], RowRenderer.prototype, "$scope", void 0);

  __decorate([context_1.Autowired("expressionService"), __metadata("design:type", expressionService_1.ExpressionService)], RowRenderer.prototype, "expressionService", void 0);

  __decorate([context_1.Autowired("templateService"), __metadata("design:type", templateService_1.TemplateService)], RowRenderer.prototype, "templateService", void 0);

  __decorate([context_1.Autowired("valueService"), __metadata("design:type", valueService_1.ValueService)], RowRenderer.prototype, "valueService", void 0);

  __decorate([context_1.Autowired("eventService"), __metadata("design:type", eventService_1.EventService)], RowRenderer.prototype, "eventService", void 0);

  __decorate([context_1.Autowired("pinnedRowModel"), __metadata("design:type", pinnedRowModel_1.PinnedRowModel)], RowRenderer.prototype, "pinnedRowModel", void 0);

  __decorate([context_1.Autowired("loggerFactory"), __metadata("design:type", logger_1.LoggerFactory)], RowRenderer.prototype, "loggerFactory", void 0);

  __decorate([context_1.Autowired("focusedCellController"), __metadata("design:type", focusedCellController_1.FocusedCellController)], RowRenderer.prototype, "focusedCellController", void 0);

  __decorate([context_1.Autowired("cellNavigationService"), __metadata("design:type", cellNavigationService_1.CellNavigationService)], RowRenderer.prototype, "cellNavigationService", void 0);

  __decorate([context_1.Autowired("columnApi"), __metadata("design:type", columnApi_1.ColumnApi)], RowRenderer.prototype, "columnApi", void 0);

  __decorate([context_1.Autowired("gridApi"), __metadata("design:type", gridApi_1.GridApi)], RowRenderer.prototype, "gridApi", void 0);

  __decorate([context_1.Autowired("beans"), __metadata("design:type", beans_1.Beans)], RowRenderer.prototype, "beans", void 0);

  __decorate([context_1.Autowired("maxDivHeightScaler"), __metadata("design:type", maxDivHeightScaler_1.MaxDivHeightScaler)], RowRenderer.prototype, "maxDivHeightScaler", void 0);

  __decorate([context_1.Autowired("animationFrameService"), __metadata("design:type", animationFrameService_1.AnimationFrameService)], RowRenderer.prototype, "animationFrameService", void 0);

  __decorate([context_1.Optional("rangeController"), __metadata("design:type", Object)], RowRenderer.prototype, "rangeController", void 0);

  __decorate([__param(0, context_1.Qualifier("loggerFactory")), __metadata("design:type", Function), __metadata("design:paramtypes", [logger_1.LoggerFactory]), __metadata("design:returntype", void 0)], RowRenderer.prototype, "agWire", null);

  RowRenderer = __decorate([context_1.Bean("rowRenderer")], RowRenderer);
  return RowRenderer;
}(beanStub_1.BeanStub);

exports.RowRenderer = RowRenderer;

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var gridOptionsWrapper_1 = __webpack_require__(7);

var expressionService_1 = __webpack_require__(43);

var columnController_1 = __webpack_require__(17);

var context_1 = __webpack_require__(2);

var events_1 = __webpack_require__(18);

var eventService_1 = __webpack_require__(14);

var valueCache_1 = __webpack_require__(71);

var utils_1 = __webpack_require__(6);

var ValueService =
/** @class */
function () {
  function ValueService() {
    this.initialised = false;
  }

  ValueService.prototype.init = function () {
    this.cellExpressions = this.gridOptionsWrapper.isEnableCellExpressions();
    this.initialised = true;
  };

  ValueService.prototype.getValue = function (column, rowNode, forFilter, ignoreAggData) {
    // console.log(`turnActive = ${this.turnActive}`);
    if (forFilter === void 0) {
      forFilter = false;
    }

    if (ignoreAggData === void 0) {
      ignoreAggData = false;
    } // hack - the grid is getting refreshed before this bean gets initialised, race condition.
    // really should have a way so they get initialised in the right order???


    if (!this.initialised) {
      this.init();
    }

    if (!rowNode) {
      return;
    } // pull these out to make code below easier to read


    var colDef = column.getColDef();
    var field = colDef.field;
    var colId = column.getId();
    var data = rowNode.data;
    var result; // if there is a value getter, this gets precedence over a field

    var groupDataExists = rowNode.groupData && rowNode.groupData[colId] !== undefined;
    var aggDataExists = !ignoreAggData && rowNode.aggData && rowNode.aggData[colId] !== undefined;

    if (forFilter && colDef.filterValueGetter) {
      result = this.executeFilterValueGetter(colDef.filterValueGetter, data, column, rowNode);
    } else if (this.gridOptionsWrapper.isTreeData() && aggDataExists) {
      result = rowNode.aggData[colId];
    } else if (this.gridOptionsWrapper.isTreeData() && colDef.valueGetter) {
      result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);
    } else if (this.gridOptionsWrapper.isTreeData() && field && data) {
      result = utils_1._.getValueUsingField(data, field, column.isFieldContainsDots());
    } else if (groupDataExists) {
      result = rowNode.groupData[colId];
    } else if (aggDataExists) {
      result = rowNode.aggData[colId];
    } else if (colDef.valueGetter) {
      result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);
    } else if (field && data) {
      result = utils_1._.getValueUsingField(data, field, column.isFieldContainsDots());
    } // the result could be an expression itself, if we are allowing cell values to be expressions


    if (this.cellExpressions && typeof result === 'string' && result.indexOf('=') === 0) {
      var cellValueGetter = result.substring(1);
      result = this.executeValueGetter(cellValueGetter, data, column, rowNode);
    }

    return result;
  };

  ValueService.prototype.setValue = function (rowNode, colKey, newValue) {
    var column = this.columnController.getPrimaryColumn(colKey);

    if (!rowNode || !column) {
      return;
    } // this will only happen if user is trying to paste into a group row, which doesn't make sense
    // the user should not be trying to paste into group rows


    var data = rowNode.data;

    if (utils_1._.missing(data)) {
      rowNode.data = {};
    } // for backwards compatibility we are also retrieving the newValueHandler as well as the valueSetter


    var _a = column.getColDef(),
        field = _a.field,
        newValueHandler = _a.newValueHandler,
        valueSetter = _a.valueSetter; // need either a field or a newValueHandler for this to work


    if (utils_1._.missing(field) && utils_1._.missing(newValueHandler) && utils_1._.missing(valueSetter)) {
      // we don't tell user about newValueHandler, as that is deprecated
      console.warn("ag-Grid: you need either field or valueSetter set on colDef for editing to work");
      return;
    }

    var params = {
      node: rowNode,
      data: rowNode.data,
      oldValue: this.getValue(column, rowNode),
      newValue: newValue,
      colDef: column.getColDef(),
      column: column,
      api: this.gridOptionsWrapper.getApi(),
      columnApi: this.gridOptionsWrapper.getColumnApi(),
      context: this.gridOptionsWrapper.getContext()
    };
    params.newValue = newValue;
    var valueWasDifferent;

    if (newValueHandler && utils_1._.exists(newValueHandler)) {
      valueWasDifferent = newValueHandler(params);
    } else if (utils_1._.exists(valueSetter)) {
      valueWasDifferent = this.expressionService.evaluate(valueSetter, params);
    } else {
      valueWasDifferent = this.setValueUsingField(data, field, newValue, column.isFieldContainsDots());
    } // in case user forgot to return something (possible if they are not using TypeScript
    // and just forgot, or using an old newValueHandler we didn't always expect a return
    // value here), we default the return value to true, so we always refresh.


    if (valueWasDifferent === undefined) {
      valueWasDifferent = true;
    } // if no change to the value, then no need to do the updating, or notifying via events.
    // otherwise the user could be tabbing around the grid, and cellValueChange would get called
    // all the time.


    if (!valueWasDifferent) {
      return;
    } // reset quick filter on this row


    rowNode.resetQuickFilterAggregateText();
    this.valueCache.onDataChanged();
    params.newValue = this.getValue(column, rowNode);
    var onCellValueChanged = column.getColDef().onCellValueChanged;

    if (typeof onCellValueChanged === 'function') {
      // to make callback async, do in a timeout
      setTimeout(function () {
        return onCellValueChanged(params);
      }, 0);
    }

    var event = {
      type: events_1.Events.EVENT_CELL_VALUE_CHANGED,
      event: null,
      rowIndex: rowNode.rowIndex,
      rowPinned: rowNode.rowPinned,
      column: params.column,
      api: params.api,
      colDef: params.colDef,
      columnApi: params.columnApi,
      context: params.context,
      data: rowNode.data,
      node: rowNode,
      oldValue: params.oldValue,
      newValue: params.newValue,
      value: params.newValue
    };
    this.eventService.dispatchEvent(event);
  };

  ValueService.prototype.setValueUsingField = function (data, field, newValue, isFieldContainsDots) {
    if (!field) {
      return false;
    } // if no '.', then it's not a deep value


    var valuesAreSame = false;

    if (!isFieldContainsDots) {
      data[field] = newValue;
    } else {
      // otherwise it is a deep value, so need to dig for it
      var fieldPieces = field.split('.');
      var currentObject = data;

      while (fieldPieces.length > 0 && currentObject) {
        var fieldPiece = fieldPieces.shift();

        if (fieldPieces.length === 0) {
          currentObject[fieldPiece] = newValue;
        } else {
          currentObject = currentObject[fieldPiece];
        }
      }
    }

    return !valuesAreSame;
  };

  ValueService.prototype.executeFilterValueGetter = function (valueGetter, data, column, rowNode) {
    var params = {
      data: data,
      node: rowNode,
      column: column,
      colDef: column.getColDef(),
      api: this.gridOptionsWrapper.getApi(),
      columnApi: this.gridOptionsWrapper.getColumnApi(),
      context: this.gridOptionsWrapper.getContext(),
      getValue: this.getValueCallback.bind(this, rowNode)
    };
    return this.expressionService.evaluate(valueGetter, params);
  };

  ValueService.prototype.executeValueGetter = function (valueGetter, data, column, rowNode) {
    var colId = column.getId(); // if inside the same turn, just return back the value we got last time

    var valueFromCache = this.valueCache.getValue(rowNode, colId);

    if (valueFromCache !== undefined) {
      return valueFromCache;
    }

    var params = {
      data: data,
      node: rowNode,
      column: column,
      colDef: column.getColDef(),
      api: this.gridOptionsWrapper.getApi(),
      columnApi: this.gridOptionsWrapper.getColumnApi(),
      context: this.gridOptionsWrapper.getContext(),
      getValue: this.getValueCallback.bind(this, rowNode)
    };
    var result = this.expressionService.evaluate(valueGetter, params); // if a turn is active, store the value in case the grid asks for it again

    this.valueCache.setValue(rowNode, colId, result);
    return result;
  };

  ValueService.prototype.getValueCallback = function (node, field) {
    var otherColumn = this.columnController.getPrimaryColumn(field);

    if (otherColumn) {
      return this.getValue(otherColumn, node);
    }

    return null;
  }; // used by row grouping and pivot, to get key for a row. col can be a pivot col or a row grouping col


  ValueService.prototype.getKeyForNode = function (col, rowNode) {
    var value = this.getValue(col, rowNode);
    var keyCreator = col.getColDef().keyCreator;
    var result = keyCreator ? keyCreator({
      value: value
    }) : value; // if already a string, or missing, just return it

    if (typeof result === 'string' || result == null) {
      return result;
    }

    result = String(result);

    if (result === '[object Object]') {
      utils_1._.doOnce(function () {
        console.warn('ag-Grid: a column you are grouping or pivoting by has objects as values. If you want to group by complex objects then either a) use a colDef.keyCreator (se ag-Grid docs) or b) to toString() on the object to return a key');
      }, 'getKeyForNode - warn about [object,object]');
    }

    return result;
  };

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], ValueService.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('expressionService'), __metadata("design:type", expressionService_1.ExpressionService)], ValueService.prototype, "expressionService", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], ValueService.prototype, "columnController", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], ValueService.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('valueCache'), __metadata("design:type", valueCache_1.ValueCache)], ValueService.prototype, "valueCache", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], ValueService.prototype, "init", null);

  ValueService = __decorate([context_1.Bean('valueService')], ValueService);
  return ValueService;
}();

exports.ValueService = ValueService;

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var eventService_1 = __webpack_require__(14);

var events_1 = __webpack_require__(18);

var gridOptionsWrapper_1 = __webpack_require__(7);

var selectionController_1 = __webpack_require__(44);

var valueService_1 = __webpack_require__(38);

var columnController_1 = __webpack_require__(17);

var columnApi_1 = __webpack_require__(21);

var context_1 = __webpack_require__(2);

var constants_1 = __webpack_require__(19);

var valueCache_1 = __webpack_require__(71);

var gridApi_1 = __webpack_require__(20);

var utils_1 = __webpack_require__(6);

var RowNode =
/** @class */
function () {
  function RowNode() {
    /** Children mapped by the pivot columns */
    this.childrenMapped = {};
    /** True by default - can be overridden via gridOptions.isRowSelectable(rowNode) */

    this.selectable = true;
    /** Used by sorting service - to give deterministic sort to groups. Previously we
     * just id for this, however id is a string and had slower sorting compared to numbers. */

    this.__objectId = RowNode.OBJECT_ID_SEQUENCE++;
    /** True when nodes with the same id are being removed and added as part of the same batch transaction */

    this.alreadyRendered = false;
    this.selected = false;
  }

  RowNode.prototype.setData = function (data) {
    var oldData = this.data;
    this.data = data;
    this.valueCache.onDataChanged();
    this.updateDataOnDetailNode();
    this.checkRowSelectable();
    var event = this.createDataChangedEvent(data, oldData, false);
    this.dispatchLocalEvent(event);
  }; // when we are doing master / detail, the detail node is lazy created, but then kept around.
  // so if we show / hide the detail, the same detail rowNode is used. so we need to keep the data
  // in sync, otherwise expand/collapse of the detail would still show the old values.


  RowNode.prototype.updateDataOnDetailNode = function () {
    if (this.detailNode) {
      this.detailNode.data = this.data;
    }
  };

  RowNode.prototype.createDataChangedEvent = function (newData, oldData, update) {
    return {
      type: RowNode.EVENT_DATA_CHANGED,
      node: this,
      oldData: oldData,
      newData: newData,
      update: update
    };
  };

  RowNode.prototype.createLocalRowEvent = function (type) {
    return {
      type: type,
      node: this
    };
  }; // similar to setRowData, however it is expected that the data is the same data item. this
  // is intended to be used with Redux type stores, where the whole data can be changed. we are
  // guaranteed that the data is the same entity (so grid doesn't need to worry about the id of the
  // underlying data changing, hence doesn't need to worry about selection). the grid, upon receiving
  // dataChanged event, will refresh the cells rather than rip them all out (so user can show transitions).


  RowNode.prototype.updateData = function (data) {
    var oldData = this.data;
    this.data = data;
    this.updateDataOnDetailNode();
    this.checkRowSelectable();
    this.updateDataOnDetailNode();
    var event = this.createDataChangedEvent(data, oldData, true);
    this.dispatchLocalEvent(event);
  };

  RowNode.prototype.getRowIndexString = function () {
    if (this.rowPinned === constants_1.Constants.PINNED_TOP) {
      return 't-' + this.rowIndex;
    } else if (this.rowPinned === constants_1.Constants.PINNED_BOTTOM) {
      return 'b-' + this.rowIndex;
    } else {
      return this.rowIndex.toString();
    }
  };

  RowNode.prototype.createDaemonNode = function () {
    var oldNode = new RowNode();
    this.context.wireBean(oldNode); // just copy the id and data, this is enough for the node to be used
    // in the selection controller (the selection controller is the only
    // place where daemon nodes can live).

    oldNode.id = this.id;
    oldNode.data = this.data;
    oldNode.daemon = true;
    oldNode.selected = this.selected;
    oldNode.level = this.level;
    return oldNode;
  };

  RowNode.prototype.setDataAndId = function (data, id) {
    var oldNode = utils_1._.exists(this.id) ? this.createDaemonNode() : null;
    var oldData = this.data;
    this.data = data;
    this.updateDataOnDetailNode();
    this.setId(id);
    this.selectionController.syncInRowNode(this, oldNode);
    this.checkRowSelectable();
    var event = this.createDataChangedEvent(data, oldData, false);
    this.dispatchLocalEvent(event);
  };

  RowNode.prototype.checkRowSelectable = function () {
    var isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();

    var shouldInvokeIsRowSelectable = isRowSelectableFunc && utils_1._.exists(this);

    this.setRowSelectable(shouldInvokeIsRowSelectable ? isRowSelectableFunc(this) : true);
  };

  RowNode.prototype.setRowSelectable = function (newVal) {
    if (this.selectable !== newVal) {
      this.selectable = newVal;

      if (this.eventService) {
        this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_SELECTABLE_CHANGED));
      }
    }
  };

  RowNode.prototype.setId = function (id) {
    // see if user is providing the id's
    var getRowNodeId = this.gridOptionsWrapper.getRowNodeIdFunc();

    if (getRowNodeId) {
      // if user is providing the id's, then we set the id only after the data has been set.
      // this is important for virtual pagination and viewport, where empty rows exist.
      if (this.data) {
        this.id = getRowNodeId(this.data);
      } else {
        // this can happen if user has set blank into the rowNode after the row previously
        // having data. this happens in virtual page row model, when data is delete and
        // the page is refreshed.
        this.id = undefined;
      }
    } else {
      this.id = id;
    }
  };

  RowNode.prototype.isPixelInRange = function (pixel) {
    return pixel >= this.rowTop && pixel < this.rowTop + this.rowHeight;
  };

  RowNode.prototype.clearRowTop = function () {
    this.oldRowTop = this.rowTop;
    this.setRowTop(null);
  };

  RowNode.prototype.setFirstChild = function (firstChild) {
    if (this.firstChild === firstChild) {
      return;
    }

    this.firstChild = firstChild;

    if (this.eventService) {
      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_FIRST_CHILD_CHANGED));
    }
  };

  RowNode.prototype.setLastChild = function (lastChild) {
    if (this.lastChild === lastChild) {
      return;
    }

    this.lastChild = lastChild;

    if (this.eventService) {
      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_LAST_CHILD_CHANGED));
    }
  };

  RowNode.prototype.setChildIndex = function (childIndex) {
    if (this.childIndex === childIndex) {
      return;
    }

    this.childIndex = childIndex;

    if (this.eventService) {
      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_CHILD_INDEX_CHANGED));
    }
  };

  RowNode.prototype.setRowTop = function (rowTop) {
    if (this.rowTop === rowTop) {
      return;
    }

    this.rowTop = rowTop;

    if (this.eventService) {
      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_TOP_CHANGED));
    }
  };

  RowNode.prototype.setDragging = function (dragging) {
    if (this.dragging === dragging) {
      return;
    }

    this.dragging = dragging;

    if (this.eventService) {
      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_DRAGGING_CHANGED));
    }
  };

  RowNode.prototype.setAllChildrenCount = function (allChildrenCount) {
    if (this.allChildrenCount === allChildrenCount) {
      return;
    }

    this.allChildrenCount = allChildrenCount;

    if (this.eventService) {
      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED));
    }
  };

  RowNode.prototype.setRowHeight = function (rowHeight, estimated) {
    if (estimated === void 0) {
      estimated = false;
    }

    this.rowHeight = rowHeight;
    this.rowHeightEstimated = estimated;

    if (this.eventService) {
      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HEIGHT_CHANGED));
    }
  };

  RowNode.prototype.setRowIndex = function (rowIndex) {
    this.rowIndex = rowIndex;

    if (this.eventService) {
      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_INDEX_CHANGED));
    }
  };

  RowNode.prototype.setUiLevel = function (uiLevel) {
    if (this.uiLevel === uiLevel) {
      return;
    }

    this.uiLevel = uiLevel;

    if (this.eventService) {
      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_UI_LEVEL_CHANGED));
    }
  };

  RowNode.prototype.setExpanded = function (expanded) {
    if (this.expanded === expanded) {
      return;
    }

    this.expanded = expanded;

    if (this.eventService) {
      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_EXPANDED_CHANGED));
    }

    var event = this.createGlobalRowEvent(events_1.Events.EVENT_ROW_GROUP_OPENED);
    this.mainEventService.dispatchEvent(event);

    if (this.gridOptionsWrapper.isGroupIncludeFooter()) {
      this.gridApi.redrawRows({
        rowNodes: [this]
      });
    }
  };

  RowNode.prototype.createGlobalRowEvent = function (type) {
    var event = {
      type: type,
      node: this,
      data: this.data,
      rowIndex: this.rowIndex,
      rowPinned: this.rowPinned,
      context: this.gridOptionsWrapper.getContext(),
      api: this.gridOptionsWrapper.getApi(),
      columnApi: this.gridOptionsWrapper.getColumnApi()
    };
    return event;
  };

  RowNode.prototype.dispatchLocalEvent = function (event) {
    if (this.eventService) {
      this.eventService.dispatchEvent(event);
    }
  }; // we also allow editing the value via the editors. when it is done via
  // the editors, no 'cell changed' event gets fired, as it's assumed that
  // the cell knows about the change given it's in charge of the editing.
  // this method is for the client to call, so the cell listens for the change
  // event, and also flashes the cell when the change occurs.


  RowNode.prototype.setDataValue = function (colKey, newValue) {
    var column = this.columnController.getPrimaryColumn(colKey);
    this.valueService.setValue(this, column, newValue);
    this.dispatchCellChangedEvent(column, newValue);
  };

  RowNode.prototype.setGroupValue = function (colKey, newValue) {
    var column = this.columnController.getGridColumn(colKey);

    if (utils_1._.missing(this.groupData)) {
      this.groupData = {};
    }

    this.groupData[column.getColId()] = newValue;
    this.dispatchCellChangedEvent(column, newValue);
  }; // sets the data for an aggregation


  RowNode.prototype.setAggData = function (newAggData) {
    var _this = this; // find out all keys that could potentially change


    var colIds = utils_1._.getAllKeysInObjects([this.aggData, newAggData]);

    this.aggData = newAggData; // if no event service, nobody has registered for events, so no need fire event

    if (this.eventService) {
      colIds.forEach(function (colId) {
        var column = _this.columnController.getGridColumn(colId);

        var value = _this.aggData ? _this.aggData[colId] : undefined;

        _this.dispatchCellChangedEvent(column, value);
      });
    }
  };

  RowNode.prototype.hasChildren = function () {
    // we need to return true when this.group=true, as this is used by server side row model
    // (as children are lazy loaded and stored in a cache anyway). otherwise we return true
    // if children exist.
    return this.group || this.childrenAfterGroup && this.childrenAfterGroup.length > 0;
  };

  RowNode.prototype.isEmptyFillerNode = function () {
    return this.group && utils_1._.missingOrEmpty(this.childrenAfterGroup);
  };

  RowNode.prototype.dispatchCellChangedEvent = function (column, newValue) {
    var cellChangedEvent = {
      type: RowNode.EVENT_CELL_CHANGED,
      node: this,
      column: column,
      newValue: newValue
    };
    this.dispatchLocalEvent(cellChangedEvent);
  };

  RowNode.prototype.resetQuickFilterAggregateText = function () {
    this.quickFilterAggregateText = null;
  };

  RowNode.prototype.isExpandable = function () {
    return this.hasChildren() || this.master;
  };

  RowNode.prototype.isSelected = function () {
    // for footers, we just return what our sibling selected state is, as cannot select a footer
    if (this.footer) {
      return this.sibling.isSelected();
    }

    return this.selected;
  };

  RowNode.prototype.depthFirstSearch = function (callback) {
    if (this.childrenAfterGroup) {
      this.childrenAfterGroup.forEach(function (child) {
        return child.depthFirstSearch(callback);
      });
    }

    callback(this);
  }; // + rowController.updateGroupsInSelection()
  // + selectionController.calculatedSelectedForAllGroupNodes()


  RowNode.prototype.calculateSelectedFromChildren = function () {
    var atLeastOneSelected = false;
    var atLeastOneDeSelected = false;
    var atLeastOneMixed = false;
    var newSelectedValue;

    if (this.childrenAfterGroup) {
      for (var i = 0; i < this.childrenAfterGroup.length; i++) {
        var child = this.childrenAfterGroup[i]; // skip non-selectable nodes to prevent inconsistent selection values

        if (!child.selectable) {
          continue;
        }

        var childState = child.isSelected();

        switch (childState) {
          case true:
            atLeastOneSelected = true;
            break;

          case false:
            atLeastOneDeSelected = true;
            break;

          default:
            atLeastOneMixed = true;
            break;
        }
      }
    }

    if (atLeastOneMixed) {
      newSelectedValue = undefined;
    } else if (atLeastOneSelected && !atLeastOneDeSelected) {
      newSelectedValue = true;
    } else if (!atLeastOneSelected && atLeastOneDeSelected) {
      newSelectedValue = false;
    } else {
      newSelectedValue = undefined;
    }

    this.selectThisNode(newSelectedValue);
  };

  RowNode.prototype.setSelectedInitialValue = function (selected) {
    this.selected = selected;
  };

  RowNode.prototype.setSelected = function (newValue, clearSelection, suppressFinishActions) {
    if (clearSelection === void 0) {
      clearSelection = false;
    }

    if (suppressFinishActions === void 0) {
      suppressFinishActions = false;
    }

    this.setSelectedParams({
      newValue: newValue,
      clearSelection: clearSelection,
      suppressFinishActions: suppressFinishActions,
      rangeSelect: false
    });
  };

  RowNode.prototype.isRowPinned = function () {
    return this.rowPinned === constants_1.Constants.PINNED_TOP || this.rowPinned === constants_1.Constants.PINNED_BOTTOM;
  }; // to make calling code more readable, this is the same method as setSelected except it takes names parameters


  RowNode.prototype.setSelectedParams = function (params) {
    var groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
    var newValue = params.newValue === true;
    var clearSelection = params.clearSelection === true;
    var suppressFinishActions = params.suppressFinishActions === true;
    var rangeSelect = params.rangeSelect === true; // groupSelectsFiltered only makes sense when group selects children

    var groupSelectsFiltered = groupSelectsChildren && params.groupSelectsFiltered === true;

    if (this.id === undefined) {
      console.warn('ag-Grid: cannot select node until id for node is known');
      return 0;
    }

    if (this.rowPinned) {
      console.warn('ag-Grid: cannot select pinned rows');
      return 0;
    } // if we are a footer, we don't do selection, just pass the info
    // to the sibling (the parent of the group)


    if (this.footer) {
      var count = this.sibling.setSelectedParams(params);
      return count;
    }

    if (rangeSelect) {
      var newRowClicked = this.selectionController.getLastSelectedNode() !== this;
      var allowMultiSelect = this.gridOptionsWrapper.isRowSelectionMulti();

      if (newRowClicked && allowMultiSelect) {
        return this.doRowRangeSelection();
      }
    }

    var updatedCount = 0; // when groupSelectsFiltered, then this node may end up intermediate despite
    // trying to set it to true / false. this group will be calculated further on
    // down when we call calculatedSelectedForAllGroupNodes(). we need to skip it
    // here, otherwise the updatedCount would include it.

    var skipThisNode = groupSelectsFiltered && this.group;

    if (!skipThisNode) {
      var thisNodeWasSelected = this.selectThisNode(newValue);

      if (thisNodeWasSelected) {
        updatedCount++;
      }
    }

    if (groupSelectsChildren && this.group) {
      updatedCount += this.selectChildNodes(newValue, groupSelectsFiltered);
    } // clear other nodes if not doing multi select


    if (!suppressFinishActions) {
      var clearOtherNodes = newValue && (clearSelection || !this.gridOptionsWrapper.isRowSelectionMulti());

      if (clearOtherNodes) {
        updatedCount += this.selectionController.clearOtherNodes(this);
      } // only if we selected something, then update groups and fire events


      if (updatedCount > 0) {
        this.selectionController.updateGroupsFromChildrenSelections(); // this is the very end of the 'action node', so we are finished all the updates,
        // include any parent / child changes that this method caused

        var event_1 = {
          type: events_1.Events.EVENT_SELECTION_CHANGED,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.mainEventService.dispatchEvent(event_1);
      } // so if user next does shift-select, we know where to start the selection from


      if (newValue) {
        this.selectionController.setLastSelectedNode(this);
      }
    }

    return updatedCount;
  }; // selects all rows between this node and the last selected node (or the top if this is the first selection).
  // not to be mixed up with 'cell range selection' where you drag the mouse, this is row range selection, by
  // holding down 'shift'.


  RowNode.prototype.doRowRangeSelection = function () {
    var updatedCount = 0;
    var groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
    var lastSelectedNode = this.selectionController.getLastSelectedNode();
    var nodesToSelect = this.rowModel.getNodesInRangeForSelection(this, lastSelectedNode);
    nodesToSelect.forEach(function (rowNode) {
      if (rowNode.group && groupsSelectChildren) {
        return;
      }

      var nodeWasSelected = rowNode.selectThisNode(true);

      if (nodeWasSelected) {
        updatedCount++;
      }
    });
    this.selectionController.updateGroupsFromChildrenSelections();
    var event = {
      type: events_1.Events.EVENT_SELECTION_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.mainEventService.dispatchEvent(event);
    return updatedCount;
  };

  RowNode.prototype.isParentOfNode = function (potentialParent) {
    var parentNode = this.parent;

    while (parentNode) {
      if (parentNode === potentialParent) {
        return true;
      }

      parentNode = parentNode.parent;
    }

    return false;
  };

  RowNode.prototype.selectThisNode = function (newValue) {
    if (!this.selectable || this.selected === newValue) {
      return false;
    }

    this.selected = newValue;

    if (this.eventService) {
      this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_SELECTED));
    }

    var event = this.createGlobalRowEvent(events_1.Events.EVENT_ROW_SELECTED);
    this.mainEventService.dispatchEvent(event);
    return true;
  };

  RowNode.prototype.selectChildNodes = function (newValue, groupSelectsFiltered) {
    var children = groupSelectsFiltered ? this.childrenAfterFilter : this.childrenAfterGroup;
    var updatedCount = 0;

    if (utils_1._.missing(children)) {
      return;
    }

    for (var i = 0; i < children.length; i++) {
      updatedCount += children[i].setSelectedParams({
        newValue: newValue,
        clearSelection: false,
        suppressFinishActions: true,
        groupSelectsFiltered: groupSelectsFiltered
      });
    }

    return updatedCount;
  };

  RowNode.prototype.addEventListener = function (eventType, listener) {
    if (!this.eventService) {
      this.eventService = new eventService_1.EventService();
    }

    this.eventService.addEventListener(eventType, listener);
  };

  RowNode.prototype.removeEventListener = function (eventType, listener) {
    this.eventService.removeEventListener(eventType, listener);
  };

  RowNode.prototype.onMouseEnter = function () {
    this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_ENTER));
  };

  RowNode.prototype.onMouseLeave = function () {
    this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_LEAVE));
  };

  RowNode.prototype.getFirstChildOfFirstChild = function (rowGroupColumn) {
    var currentRowNode = this; // if we are hiding groups, then if we are the first child, of the first child,
    // all the way up to the column we are interested in, then we show the group cell.

    var isCandidate = true;
    var foundFirstChildPath = false;
    var nodeToSwapIn;

    while (isCandidate && !foundFirstChildPath) {
      var parentRowNode = currentRowNode.parent;
      var firstChild = utils_1._.exists(parentRowNode) && currentRowNode.firstChild;

      if (firstChild) {
        if (parentRowNode.rowGroupColumn === rowGroupColumn) {
          foundFirstChildPath = true;
          nodeToSwapIn = parentRowNode;
        }
      } else {
        isCandidate = false;
      }

      currentRowNode = parentRowNode;
    }

    return foundFirstChildPath ? nodeToSwapIn : null;
  };

  RowNode.OBJECT_ID_SEQUENCE = 0;
  RowNode.EVENT_ROW_SELECTED = 'rowSelected';
  RowNode.EVENT_DATA_CHANGED = 'dataChanged';
  RowNode.EVENT_CELL_CHANGED = 'cellChanged';
  RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED = 'allChildrenCountChanged';
  RowNode.EVENT_MOUSE_ENTER = 'mouseEnter';
  RowNode.EVENT_MOUSE_LEAVE = 'mouseLeave';
  RowNode.EVENT_HEIGHT_CHANGED = 'heightChanged';
  RowNode.EVENT_TOP_CHANGED = 'topChanged';
  RowNode.EVENT_FIRST_CHILD_CHANGED = 'firstChildChanged';
  RowNode.EVENT_LAST_CHILD_CHANGED = 'lastChildChanged';
  RowNode.EVENT_CHILD_INDEX_CHANGED = 'childIndexChanged';
  RowNode.EVENT_ROW_INDEX_CHANGED = 'rowIndexChanged';
  RowNode.EVENT_EXPANDED_CHANGED = 'expandedChanged';
  RowNode.EVENT_SELECTABLE_CHANGED = 'selectableChanged';
  RowNode.EVENT_UI_LEVEL_CHANGED = 'uiLevelChanged';
  RowNode.EVENT_DRAGGING_CHANGED = 'draggingChanged';

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], RowNode.prototype, "mainEventService", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], RowNode.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('selectionController'), __metadata("design:type", selectionController_1.SelectionController)], RowNode.prototype, "selectionController", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], RowNode.prototype, "columnController", void 0);

  __decorate([context_1.Autowired('valueService'), __metadata("design:type", valueService_1.ValueService)], RowNode.prototype, "valueService", void 0);

  __decorate([context_1.Autowired('rowModel'), __metadata("design:type", Object)], RowNode.prototype, "rowModel", void 0);

  __decorate([context_1.Autowired('context'), __metadata("design:type", context_1.Context)], RowNode.prototype, "context", void 0);

  __decorate([context_1.Autowired('valueCache'), __metadata("design:type", valueCache_1.ValueCache)], RowNode.prototype, "valueCache", void 0);

  __decorate([context_1.Autowired('columnApi'), __metadata("design:type", columnApi_1.ColumnApi)], RowNode.prototype, "columnApi", void 0);

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], RowNode.prototype, "gridApi", void 0);

  return RowNode;
}();

exports.RowNode = RowNode;

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var utils_1 = __webpack_require__(6);

var gridOptionsWrapper_1 = __webpack_require__(7);

var popupService_1 = __webpack_require__(54);

var valueService_1 = __webpack_require__(38);

var columnController_1 = __webpack_require__(17);

var columnApi_1 = __webpack_require__(21);

var context_1 = __webpack_require__(2);

var eventService_1 = __webpack_require__(14);

var events_1 = __webpack_require__(18);

var gridApi_1 = __webpack_require__(20);

var userComponentFactory_1 = __webpack_require__(35);

var FilterManager =
/** @class */
function () {
  function FilterManager() {
    this.allFilters = {};
    this.quickFilter = null;
    this.quickFilterParts = null;
  }

  FilterManager_1 = FilterManager;

  FilterManager.prototype.registerGridCore = function (gridCore) {
    this.gridCore = gridCore;
  };

  FilterManager.prototype.init = function () {
    this.eventService.addEventListener(events_1.Events.EVENT_ROW_DATA_CHANGED, this.onNewRowsLoaded.bind(this));
    this.eventService.addEventListener(events_1.Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));
    this.quickFilter = this.parseQuickFilter(this.gridOptionsWrapper.getQuickFilterText());
    this.setQuickFilterParts(); // check this here, in case there is a filter from the start

    this.checkExternalFilter();
  };

  FilterManager.prototype.setQuickFilterParts = function () {
    if (this.quickFilter) {
      this.quickFilterParts = this.quickFilter.split(' ');
    } else {
      this.quickFilterParts = null;
    }
  };

  FilterManager.prototype.setFilterModel = function (model) {
    var _this = this;

    var allPromises = [];

    if (model) {
      // mark the filters as we set them, so any active filters left over we stop
      var modelKeys_1 = Object.keys(model);

      utils_1._.iterateObject(this.allFilters, function (colId, filterWrapper) {
        utils_1._.removeFromArray(modelKeys_1, colId);

        var newModel = model[colId];

        _this.setModelOnFilterWrapper(filterWrapper.filterPromise, newModel);

        allPromises.push(filterWrapper.filterPromise);
      }); // at this point, processedFields contains data for which we don't have a filter working yet


      utils_1._.iterateArray(modelKeys_1, function (colId) {
        var column = _this.columnController.getPrimaryColumn(colId);

        if (!column) {
          console.warn('Warning ag-grid setFilterModel - no column found for colId ' + colId);
          return;
        }

        var filterWrapper = _this.getOrCreateFilterWrapper(column, 'NO_UI');

        _this.setModelOnFilterWrapper(filterWrapper.filterPromise, model[colId]);

        allPromises.push(filterWrapper.filterPromise);
      });
    } else {
      utils_1._.iterateObject(this.allFilters, function (key, filterWrapper) {
        _this.setModelOnFilterWrapper(filterWrapper.filterPromise, null);

        allPromises.push(filterWrapper.filterPromise);
      });
    }

    utils_1.Promise.all(allPromises).then(function (whatever) {
      _this.onFilterChanged();
    });
  };

  FilterManager.prototype.setModelOnFilterWrapper = function (filterPromise, newModel) {
    filterPromise.then(function (filter) {
      if (typeof filter.setModel !== 'function') {
        console.warn('Warning ag-grid - filter missing setModel method, which is needed for setFilterModel');
        return;
      }

      filter.setModel(newModel);
    });
  };

  FilterManager.prototype.getFilterModel = function () {
    var result = {};

    utils_1._.iterateObject(this.allFilters, function (key, filterWrapper) {
      // because user can provide filters, we provide useful error checking and messages
      var filterPromise = filterWrapper.filterPromise;
      var filter = filterPromise.resolveNow(null, function (filter) {
        return filter;
      });

      if (filter == null) {
        return null;
      }

      if (typeof filter.getModel !== 'function') {
        console.warn('Warning ag-grid - filter API missing getModel method, which is needed for getFilterModel');
        return;
      }

      var model = filter.getModel();

      if (utils_1._.exists(model)) {
        result[key] = model;
      }
    });

    return result;
  }; // returns true if any advanced filter (ie not quick filter) active


  FilterManager.prototype.isAdvancedFilterPresent = function () {
    return this.advancedFilterPresent;
  }; // called by:
  // 1) onFilterChanged()
  // 2) onNewRowsLoaded()


  FilterManager.prototype.setAdvancedFilterPresent = function () {
    var atLeastOneActive = false;

    utils_1._.iterateObject(this.allFilters, function (key, filterWrapper) {
      if (filterWrapper.filterPromise.resolveNow(false, function (filter) {
        return filter.isFilterActive();
      })) {
        atLeastOneActive = true;
      }
    });

    this.advancedFilterPresent = atLeastOneActive;
  };

  FilterManager.prototype.updateFilterFlagInColumns = function (source) {
    utils_1._.iterateObject(this.allFilters, function (key, filterWrapper) {
      var filterActive = filterWrapper.filterPromise.resolveNow(false, function (filter) {
        return filter.isFilterActive();
      });
      filterWrapper.column.setFilterActive(filterActive, source);
    });
  }; // returns true if quickFilter or advancedFilter


  FilterManager.prototype.isAnyFilterPresent = function () {
    return this.isQuickFilterPresent() || this.advancedFilterPresent || this.externalFilterPresent;
  };

  FilterManager.prototype.doesFilterPass = function (node, filterToSkip) {
    var data = node.data;
    var colKeys = Object.keys(this.allFilters);

    for (var i = 0, l = colKeys.length; i < l; i++) {
      // critical code, don't use functional programming
      var colId = colKeys[i];
      var filterWrapper = this.allFilters[colId]; // if no filter, always pass

      if (filterWrapper === undefined) {
        continue;
      }

      var filter = filterWrapper.filterPromise.resolveNow(undefined, function (filter) {
        return filter;
      }); // if filter not yet there, continue

      if (filter === undefined) {
        continue;
      }

      if (filter === filterToSkip) {
        continue;
      } // don't bother with filters that are not active


      if (!filter.isFilterActive()) {
        continue;
      }

      if (!filter.doesFilterPass) {
        // because users can do custom filters, give nice error message
        console.error('Filter is missing method doesFilterPass');
      }

      var params = {
        node: node,
        data: data
      };

      if (!filter.doesFilterPass(params)) {
        return false;
      }
    } // all filters passed


    return true;
  };

  FilterManager.prototype.parseQuickFilter = function (newFilter) {
    if (utils_1._.missing(newFilter) || newFilter === "") {
      return null;
    }

    if (!this.gridOptionsWrapper.isRowModelDefault()) {
      console.warn('ag-grid: quick filtering only works with the Client-side Row Model');
      return null;
    }

    return newFilter.toUpperCase();
  }; // returns true if it has changed (not just same value again)


  FilterManager.prototype.setQuickFilter = function (newFilter) {
    var parsedFilter = this.parseQuickFilter(newFilter);

    if (this.quickFilter !== parsedFilter) {
      this.quickFilter = parsedFilter;
      this.setQuickFilterParts();
      this.onFilterChanged();
    }
  };

  FilterManager.prototype.checkExternalFilter = function () {
    this.externalFilterPresent = this.gridOptionsWrapper.isExternalFilterPresent();
  };

  FilterManager.prototype.onFilterChanged = function () {
    this.setAdvancedFilterPresent();
    this.updateFilterFlagInColumns("filterChanged");
    this.checkExternalFilter();

    utils_1._.iterateObject(this.allFilters, function (key, filterWrapper) {
      filterWrapper.filterPromise.then(function (filter) {
        if (filter.onAnyFilterChanged) {
          filter.onAnyFilterChanged();
        }
      });
    });

    var event = {
      type: events_1.Events.EVENT_FILTER_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(event);
  };

  FilterManager.prototype.isQuickFilterPresent = function () {
    return this.quickFilter !== null;
  };

  FilterManager.prototype.doesRowPassOtherFilters = function (filterToSkip, node) {
    return this.doesRowPassFilter(node, filterToSkip);
  };

  FilterManager.prototype.doesRowPassQuickFilterNoCache = function (node, filterPart) {
    var _this = this;

    var columns = this.columnController.getAllColumnsForQuickFilter();
    var filterPasses = false;
    columns.forEach(function (column) {
      if (filterPasses) {
        return;
      }

      var part = _this.getQuickFilterTextForColumn(column, node);

      if (utils_1._.exists(part)) {
        if (part.indexOf(filterPart) >= 0) {
          filterPasses = true;
        }
      }
    });
    return filterPasses;
  };

  FilterManager.prototype.doesRowPassQuickFilterCache = function (node, filterPart) {
    if (!node.quickFilterAggregateText) {
      this.aggregateRowForQuickFilter(node);
    }

    var filterPasses = node.quickFilterAggregateText.indexOf(filterPart) >= 0;
    return filterPasses;
  };

  FilterManager.prototype.doesRowPassQuickFilter = function (node) {
    var _this = this;

    var filterPasses = true;
    var usingCache = this.gridOptionsWrapper.isCacheQuickFilter();
    this.quickFilterParts.forEach(function (filterPart) {
      var partPasses = usingCache ? _this.doesRowPassQuickFilterCache(node, filterPart) : _this.doesRowPassQuickFilterNoCache(node, filterPart); // each part must pass, if any fails, then the whole filter fails

      if (!partPasses) {
        filterPasses = false;
      }
    });
    return filterPasses;
  };

  FilterManager.prototype.doesRowPassFilter = function (node, filterToSkip) {
    // the row must pass ALL of the filters, so if any of them fail,
    // we return true. that means if a row passes the quick filter,
    // but fails the column filter, it fails overall
    // first up, check quick filter
    if (this.isQuickFilterPresent()) {
      if (!this.doesRowPassQuickFilter(node)) {
        return false;
      }
    } // secondly, give the client a chance to reject this row


    if (this.externalFilterPresent) {
      if (!this.gridOptionsWrapper.doesExternalFilterPass(node)) {
        return false;
      }
    } // lastly, check our internal advanced filter


    if (this.advancedFilterPresent) {
      if (!this.doesFilterPass(node, filterToSkip)) {
        return false;
      }
    } // got this far, all filters pass


    return true;
  };

  FilterManager.prototype.getQuickFilterTextForColumn = function (column, rowNode) {
    var value = this.valueService.getValue(column, rowNode, true);
    var valueAfterCallback;
    var colDef = column.getColDef();

    if (column.getColDef().getQuickFilterText) {
      var params = {
        value: value,
        node: rowNode,
        data: rowNode.data,
        column: column,
        colDef: colDef
      };
      valueAfterCallback = column.getColDef().getQuickFilterText(params);
    } else {
      valueAfterCallback = value;
    }

    if (utils_1._.exists(valueAfterCallback)) {
      return valueAfterCallback.toString().toUpperCase();
    } else {
      return null;
    }
  };

  FilterManager.prototype.aggregateRowForQuickFilter = function (node) {
    var _this = this;

    var stringParts = [];
    var columns = this.columnController.getAllColumnsForQuickFilter();
    columns.forEach(function (column) {
      var part = _this.getQuickFilterTextForColumn(column, node);

      if (utils_1._.exists(part)) {
        stringParts.push(part);
      }
    });
    node.quickFilterAggregateText = stringParts.join(FilterManager_1.QUICK_FILTER_SEPARATOR);
  };

  FilterManager.prototype.onNewRowsLoaded = function (source) {
    utils_1._.iterateObject(this.allFilters, function (key, filterWrapper) {
      filterWrapper.filterPromise.then(function (filter) {
        if (filter.onNewRowsLoaded) {
          filter.onNewRowsLoaded();
        }
      });
    });

    this.updateFilterFlagInColumns(source);
    this.setAdvancedFilterPresent();
  };

  FilterManager.prototype.createValueGetter = function (column) {
    var _this = this;

    return function (node) {
      return _this.valueService.getValue(column, node, true);
    };
  };

  FilterManager.prototype.getFilterComponent = function (column, source) {
    var filterWrapper = this.getOrCreateFilterWrapper(column, source);
    return filterWrapper.filterPromise;
  };

  FilterManager.prototype.isFilterActive = function (column) {
    var filterWrapper = this.cachedFilter(column);

    if (filterWrapper) {
      return filterWrapper.filterPromise.resolveNow(false, function (filter) {
        return filter.isFilterActive();
      });
    } else {
      return false;
    }
  };

  FilterManager.prototype.getOrCreateFilterWrapper = function (column, source) {
    var filterWrapper = this.cachedFilter(column);

    if (!filterWrapper) {
      filterWrapper = this.createFilterWrapper(column, source);
      this.allFilters[column.getColId()] = filterWrapper;
    } else {
      if (source !== 'NO_UI') {
        this.putIntoGui(filterWrapper, source);
      }
    }

    return filterWrapper;
  };

  FilterManager.prototype.cachedFilter = function (column) {
    return this.allFilters[column.getColId()];
  };

  FilterManager.prototype.createFilterInstance = function (column, $scope) {
    var _this = this;

    var defaultFilter = 'agTextColumnFilter';

    if (this.gridOptionsWrapper.isEnterprise()) {
      defaultFilter = 'agSetColumnFilter';
    }

    var sanitisedColDef = utils_1._.cloneObject(column.getColDef());

    var event = {
      type: events_1.Events.EVENT_FILTER_MODIFIED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    var filterChangedCallback = this.onFilterChanged.bind(this);

    var filterModifiedCallback = function filterModifiedCallback() {
      return _this.eventService.dispatchEvent(event);
    };

    var params = {
      api: this.gridOptionsWrapper.getApi(),
      column: column,
      colDef: sanitisedColDef,
      rowModel: this.rowModel,
      filterChangedCallback: filterChangedCallback,
      filterModifiedCallback: filterModifiedCallback,
      valueGetter: this.createValueGetter(column),
      context: this.gridOptionsWrapper.getContext(),
      doesRowPassOtherFilter: null,
      $scope: $scope
    }; // we modify params in a callback as we need the filter instance, and this isn't available
    // when creating the params above

    var modifyParamsCallback = function modifyParamsCallback(params, filter) {
      return utils_1._.assign(params, {
        doesRowPassOtherFilter: _this.doesRowPassOtherFilters.bind(_this, filter)
      });
    };

    return this.userComponentFactory.newFilterComponent(sanitisedColDef, params, defaultFilter, modifyParamsCallback);
  };

  FilterManager.prototype.createFilterWrapper = function (column, source) {
    var filterWrapper = {
      column: column,
      filterPromise: null,
      scope: null,
      compiledElement: null,
      guiPromise: utils_1.Promise.external()
    };
    filterWrapper.scope = this.gridOptionsWrapper.isAngularCompileFilters() ? this.$scope.$new() : null;
    filterWrapper.filterPromise = this.createFilterInstance(column, filterWrapper.scope);
    this.putIntoGui(filterWrapper, source);
    return filterWrapper;
  };

  FilterManager.prototype.putIntoGui = function (filterWrapper, source) {
    var _this = this;

    var eFilterGui = document.createElement('div');
    eFilterGui.className = 'ag-filter';
    filterWrapper.filterPromise.then(function (filter) {
      var guiFromFilter = filter.getGui();

      if (utils_1._.missing(guiFromFilter)) {
        console.warn("getGui method from filter returned " + guiFromFilter + ", it should be a DOM element or an HTML template string.");
      } // for backwards compatibility with Angular 1 - we
      // used to allow providing back HTML from getGui().
      // once we move away from supporting Angular 1
      // directly, we can change this.


      if (typeof guiFromFilter === 'string') {
        guiFromFilter = utils_1._.loadTemplate(guiFromFilter);
      }

      eFilterGui.appendChild(guiFromFilter);

      if (filterWrapper.scope) {
        var compiledElement = _this.$compile(eFilterGui)(filterWrapper.scope);

        filterWrapper.compiledElement = compiledElement;
        window.setTimeout(function () {
          return filterWrapper.scope.$apply();
        }, 0);
      }

      filterWrapper.guiPromise.resolve(eFilterGui);

      _this.eventService.dispatchEvent({
        type: events_1.Events.EVENT_FILTER_OPENED,
        column: filterWrapper.column,
        source: source,
        eGui: eFilterGui,
        api: _this.gridApi,
        columnApi: _this.columnApi
      });
    });
  };

  FilterManager.prototype.onNewColumnsLoaded = function () {
    var _this = this;

    var atLeastOneFilterGone = false;

    utils_1._.iterateObject(this.allFilters, function (key, filterWrapper) {
      var oldColumn = !_this.columnController.getPrimaryColumn(filterWrapper.column);

      if (oldColumn) {
        atLeastOneFilterGone = true;

        _this.disposeFilterWrapper(filterWrapper, "filterDestroyed");
      }
    });

    if (atLeastOneFilterGone) {
      this.onFilterChanged();
    }
  }; // destroys the filter, so it not longer takes part


  FilterManager.prototype.destroyFilter = function (column, source) {
    if (source === void 0) {
      source = "api";
    }

    var filterWrapper = this.allFilters[column.getColId()];

    if (filterWrapper) {
      this.disposeFilterWrapper(filterWrapper, source);
      this.onFilterChanged();
    }
  };

  FilterManager.prototype.disposeFilterWrapper = function (filterWrapper, source) {
    var _this = this;

    filterWrapper.filterPromise.then(function (filter) {
      filter.setModel(null);

      if (filter.destroy) {
        filter.destroy();
      }

      filterWrapper.column.setFilterActive(false, source);

      if (filterWrapper.scope) {
        if (filterWrapper.compiledElement) {
          filterWrapper.compiledElement.remove();
        }

        filterWrapper.scope.$destroy();
      }

      delete _this.allFilters[filterWrapper.column.getColId()];
    });
  };

  FilterManager.prototype.destroy = function () {
    var _this = this;

    utils_1._.iterateObject(this.allFilters, function (key, filterWrapper) {
      _this.disposeFilterWrapper(filterWrapper, "filterDestroyed");
    });
  };

  var FilterManager_1;
  FilterManager.QUICK_FILTER_SEPARATOR = '\n';

  __decorate([context_1.Autowired('$compile'), __metadata("design:type", Object)], FilterManager.prototype, "$compile", void 0);

  __decorate([context_1.Autowired('$scope'), __metadata("design:type", Object)], FilterManager.prototype, "$scope", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], FilterManager.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('popupService'), __metadata("design:type", popupService_1.PopupService)], FilterManager.prototype, "popupService", void 0);

  __decorate([context_1.Autowired('valueService'), __metadata("design:type", valueService_1.ValueService)], FilterManager.prototype, "valueService", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], FilterManager.prototype, "columnController", void 0);

  __decorate([context_1.Autowired('rowModel'), __metadata("design:type", Object)], FilterManager.prototype, "rowModel", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], FilterManager.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('enterprise'), __metadata("design:type", Boolean)], FilterManager.prototype, "enterprise", void 0);

  __decorate([context_1.Autowired('context'), __metadata("design:type", context_1.Context)], FilterManager.prototype, "context", void 0);

  __decorate([context_1.Autowired('columnApi'), __metadata("design:type", columnApi_1.ColumnApi)], FilterManager.prototype, "columnApi", void 0);

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], FilterManager.prototype, "gridApi", void 0);

  __decorate([context_1.Autowired('userComponentFactory'), __metadata("design:type", userComponentFactory_1.UserComponentFactory)], FilterManager.prototype, "userComponentFactory", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], FilterManager.prototype, "init", null);

  __decorate([context_1.PreDestroy, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], FilterManager.prototype, "destroy", null);

  FilterManager = FilterManager_1 = __decorate([context_1.Bean('filterManager')], FilterManager);
  return FilterManager;
}();

exports.FilterManager = FilterManager;

/***/ }),
/* 41 */,
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
if (false) { var throwOnDirectAccess, ReactIs; } else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = __webpack_require__(281)();
}

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var __param = this && this.__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var logger_1 = __webpack_require__(30);

var context_1 = __webpack_require__(2);

var context_2 = __webpack_require__(2);

var ExpressionService =
/** @class */
function () {
  function ExpressionService() {
    this.expressionToFunctionCache = {};
  }

  ExpressionService.prototype.setBeans = function (loggerFactory) {
    this.logger = loggerFactory.create('ExpressionService');
  };

  ExpressionService.prototype.evaluate = function (expressionOrFunc, params) {
    if (typeof expressionOrFunc === 'function') {
      // valueGetter is a function, so just call it
      var func = expressionOrFunc;
      return func(params);
    } else if (typeof expressionOrFunc === 'string') {
      // valueGetter is an expression, so execute the expression
      var expression = expressionOrFunc;
      return this.evaluateExpression(expression, params);
    } else {
      console.error('ag-Grid: value should be either a string or a function', expressionOrFunc);
    }
  };

  ExpressionService.prototype.evaluateExpression = function (expression, params) {
    try {
      var javaScriptFunction = this.createExpressionFunction(expression); // the params don't have all these values, rather we add every possible
      // value a params can have, which makes whatever is in the params available.

      var result = javaScriptFunction(params.value, params.context, params.oldValue, params.newValue, params.value, params.node, params.data, params.colDef, params.rowIndex, params.api, params.columnApi, params.getValue, params.column, params.columnGroup);
      return result;
    } catch (e) {
      // the expression failed, which can happen, as it's the client that
      // provides the expression. so print a nice message
      // tslint:disable-next-line
      console.log('Processing of the expression failed'); // tslint:disable-next-line

      console.log('Expression = ' + expression); // tslint:disable-next-line

      console.log('Exception = ' + e);
      return null;
    }
  };

  ExpressionService.prototype.createExpressionFunction = function (expression) {
    // check cache first
    if (this.expressionToFunctionCache[expression]) {
      return this.expressionToFunctionCache[expression];
    } // if not found in cache, return the function


    var functionBody = this.createFunctionBody(expression);
    var theFunction = new Function('x, ctx, oldValue, newValue, value, node, data, colDef, rowIndex, api, columnApi, getValue, column, columnGroup', functionBody); // store in cache

    this.expressionToFunctionCache[expression] = theFunction;
    return theFunction;
  };

  ExpressionService.prototype.createFunctionBody = function (expression) {
    // if the expression has the 'return' word in it, then use as is,
    // if not, then wrap it with return and ';' to make a function
    if (expression.indexOf('return') >= 0) {
      return expression;
    } else {
      return 'return ' + expression + ';';
    }
  };

  __decorate([__param(0, context_2.Qualifier('loggerFactory')), __metadata("design:type", Function), __metadata("design:paramtypes", [logger_1.LoggerFactory]), __metadata("design:returntype", void 0)], ExpressionService.prototype, "setBeans", null);

  ExpressionService = __decorate([context_1.Bean('expressionService')], ExpressionService);
  return ExpressionService;
}();

exports.ExpressionService = ExpressionService;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var __param = this && this.__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var context_2 = __webpack_require__(2);

var logger_1 = __webpack_require__(30);

var eventService_1 = __webpack_require__(14);

var events_1 = __webpack_require__(18);

var context_3 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var context_4 = __webpack_require__(2);

var constants_1 = __webpack_require__(19);

var columnApi_1 = __webpack_require__(21);

var gridApi_1 = __webpack_require__(20);

var utils_1 = __webpack_require__(6);

var changedPath_1 = __webpack_require__(106);

var SelectionController =
/** @class */
function () {
  function SelectionController() {}

  SelectionController.prototype.setBeans = function (loggerFactory) {
    this.logger = loggerFactory.create('SelectionController');
    this.reset();

    if (this.gridOptionsWrapper.isRowModelDefault()) {
      this.eventService.addEventListener(events_1.Events.EVENT_ROW_DATA_CHANGED, this.reset.bind(this));
    } else {
      this.logger.log('dont know what to do here');
    }
  };

  SelectionController.prototype.init = function () {
    this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
    this.eventService.addEventListener(events_1.Events.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));
  };

  SelectionController.prototype.setLastSelectedNode = function (rowNode) {
    this.lastSelectedNode = rowNode;
  };

  SelectionController.prototype.getLastSelectedNode = function () {
    return this.lastSelectedNode;
  };

  SelectionController.prototype.getSelectedNodes = function () {
    var selectedNodes = [];

    utils_1._.iterateObject(this.selectedNodes, function (key, rowNode) {
      if (rowNode) {
        selectedNodes.push(rowNode);
      }
    });

    return selectedNodes;
  };

  SelectionController.prototype.getSelectedRows = function () {
    var selectedRows = [];

    utils_1._.iterateObject(this.selectedNodes, function (key, rowNode) {
      if (rowNode && rowNode.data) {
        selectedRows.push(rowNode.data);
      }
    });

    return selectedRows;
  };

  SelectionController.prototype.removeGroupsFromSelection = function () {
    var _this = this;

    utils_1._.iterateObject(this.selectedNodes, function (key, rowNode) {
      if (rowNode && rowNode.group) {
        _this.selectedNodes[rowNode.id] = undefined;
      }
    });
  }; // should only be called if groupSelectsChildren=true


  SelectionController.prototype.updateGroupsFromChildrenSelections = function (changedPath) {
    // we only do this when group selection state depends on selected children
    if (!this.gridOptionsWrapper.isGroupSelectsChildren()) {
      return;
    } // also only do it if CSRM (code should never allow this anyway)


    if (this.rowModel.getType() !== constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
      return;
    }

    var clientSideRowModel = this.rowModel;
    var rootNode = clientSideRowModel.getRootNode();

    if (!changedPath) {
      changedPath = new changedPath_1.ChangedPath(true, rootNode);
      changedPath.setInactive();
    }

    changedPath.forEachChangedNodeDepthFirst(function (rowNode) {
      if (rowNode !== rootNode) {
        rowNode.calculateSelectedFromChildren();
      }
    }); // clientSideRowModel.getTopLevelNodes()!.forEach((rowNode: RowNode) => {
    //     rowNode.depthFirstSearch((node) => {
    //         if (node.group) {
    //         }
    //     });
    // });
  };

  SelectionController.prototype.getNodeForIdIfSelected = function (id) {
    return this.selectedNodes[id];
  };

  SelectionController.prototype.clearOtherNodes = function (rowNodeToKeepSelected) {
    var _this = this;

    var groupsToRefresh = {};
    var updatedCount = 0;

    utils_1._.iterateObject(this.selectedNodes, function (key, otherRowNode) {
      if (otherRowNode && otherRowNode.id !== rowNodeToKeepSelected.id) {
        var rowNode = _this.selectedNodes[otherRowNode.id];
        updatedCount += rowNode.setSelectedParams({
          newValue: false,
          clearSelection: false,
          suppressFinishActions: true
        });

        if (_this.groupSelectsChildren && otherRowNode.parent) {
          groupsToRefresh[otherRowNode.parent.id] = otherRowNode.parent;
        }
      }
    });

    utils_1._.iterateObject(groupsToRefresh, function (key, group) {
      group.calculateSelectedFromChildren();
    });

    return updatedCount;
  };

  SelectionController.prototype.onRowSelected = function (event) {
    var rowNode = event.node; // we do not store the group rows when the groups select children

    if (this.groupSelectsChildren && rowNode.group) {
      return;
    }

    if (rowNode.isSelected()) {
      this.selectedNodes[rowNode.id] = rowNode;
    } else {
      this.selectedNodes[rowNode.id] = undefined;
    }
  };

  SelectionController.prototype.syncInRowNode = function (rowNode, oldNode) {
    this.syncInOldRowNode(rowNode, oldNode);
    this.syncInNewRowNode(rowNode);
  }; // if the id has changed for the node, then this means the rowNode
  // is getting used for a different data item, which breaks
  // our selectedNodes, as the node now is mapped by the old id
  // which is inconsistent. so to keep the old node as selected,
  // we swap in the clone (with the old id and old data). this means
  // the oldNode is effectively a daemon we keep a reference to,
  // so if client calls api.getSelectedNodes(), it gets the daemon
  // in the result. when the client un-selects, the reference to the
  // daemon is removed. the daemon, because it's an oldNode, is not
  // used by the grid for rendering, it's a copy of what the node used
  // to be like before the id was changed.


  SelectionController.prototype.syncInOldRowNode = function (rowNode, oldNode) {
    var oldNodeHasDifferentId = utils_1._.exists(oldNode) && rowNode.id !== oldNode.id;

    if (oldNodeHasDifferentId) {
      var oldNodeSelected = utils_1._.exists(this.selectedNodes[oldNode.id]);

      if (oldNodeSelected) {
        this.selectedNodes[oldNode.id] = oldNode;
      }
    }
  };

  SelectionController.prototype.syncInNewRowNode = function (rowNode) {
    if (utils_1._.exists(this.selectedNodes[rowNode.id])) {
      rowNode.setSelectedInitialValue(true);
      this.selectedNodes[rowNode.id] = rowNode;
    } else {
      rowNode.setSelectedInitialValue(false);
    }
  };

  SelectionController.prototype.reset = function () {
    this.logger.log('reset');
    this.selectedNodes = {};
    this.lastSelectedNode = null;
  }; // returns a list of all nodes at 'best cost' - a feature to be used
  // with groups / trees. if a group has all it's children selected,
  // then the group appears in the result, but not the children.
  // Designed for use with 'children' as the group selection type,
  // where groups don't actually appear in the selection normally.


  SelectionController.prototype.getBestCostNodeSelection = function () {
    if (this.rowModel.getType() !== constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
      console.warn('getBestCostNodeSelection is only available when using normal row model');
    }

    var clientSideRowModel = this.rowModel;
    var topLevelNodes = clientSideRowModel.getTopLevelNodes();

    if (topLevelNodes === null) {
      console.warn('selectAll not available doing rowModel=virtual');
      return;
    }

    var result = []; // recursive function, to find the selected nodes

    function traverse(nodes) {
      for (var i = 0, l = nodes.length; i < l; i++) {
        var node = nodes[i];

        if (node.isSelected()) {
          result.push(node);
        } else {
          // if not selected, then if it's a group, and the group
          // has children, continue to search for selections
          if (node.group && node.children) {
            traverse(node.children);
          }
        }
      }
    }

    traverse(topLevelNodes);
    return result;
  };

  SelectionController.prototype.setRowModel = function (rowModel) {
    this.rowModel = rowModel;
  };

  SelectionController.prototype.isEmpty = function () {
    var count = 0;

    utils_1._.iterateObject(this.selectedNodes, function (nodeId, rowNode) {
      if (rowNode) {
        count++;
      }
    });

    return count === 0;
  };

  SelectionController.prototype.deselectAllRowNodes = function (justFiltered) {
    if (justFiltered === void 0) {
      justFiltered = false;
    }

    var callback = function callback(rowNode) {
      return rowNode.selectThisNode(false);
    };

    var rowModelClientSide = this.rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE;

    if (justFiltered) {
      if (!rowModelClientSide) {
        console.error('ag-Grid: selecting just filtered only works with In Memory Row Model');
        return;
      }

      var clientSideRowModel = this.rowModel;
      clientSideRowModel.forEachNodeAfterFilter(callback);
    } else {
      utils_1._.iterateObject(this.selectedNodes, function (id, rowNode) {
        // remember the reference can be to null, as we never 'delete' from the map
        if (rowNode) {
          callback(rowNode);
        }
      }); // this clears down the map (whereas above only sets the items in map to 'undefined')


      this.reset();
    } // the above does not clean up the parent rows if they are selected


    if (rowModelClientSide && this.groupSelectsChildren) {
      this.updateGroupsFromChildrenSelections();
    }

    var event = {
      type: events_1.Events.EVENT_SELECTION_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(event);
  };

  SelectionController.prototype.selectAllRowNodes = function (justFiltered) {
    if (justFiltered === void 0) {
      justFiltered = false;
    }

    if (this.rowModel.getType() !== constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
      throw new Error("selectAll only available with normal row model, ie not " + this.rowModel.getType());
    }

    var clientSideRowModel = this.rowModel;

    var callback = function callback(rowNode) {
      return rowNode.selectThisNode(true);
    };

    if (justFiltered) {
      clientSideRowModel.forEachNodeAfterFilter(callback);
    } else {
      clientSideRowModel.forEachNode(callback);
    } // the above does not clean up the parent rows if they are selected


    if (this.rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE && this.groupSelectsChildren) {
      this.updateGroupsFromChildrenSelections();
    }

    var event = {
      type: events_1.Events.EVENT_SELECTION_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(event);
  };
  /**
   * @method
   * @deprecated
   */


  SelectionController.prototype.selectNode = function (rowNode, tryMulti) {
    if (rowNode) {
      rowNode.setSelectedParams({
        newValue: true,
        clearSelection: !tryMulti
      });
    }
  };
  /**
   * @method
   * @deprecated
   */


  SelectionController.prototype.deselectIndex = function (rowIndex) {
    var node = this.rowModel.getRow(rowIndex);
    this.deselectNode(node);
  };
  /**
   * @method
   * @deprecated
   */


  SelectionController.prototype.deselectNode = function (rowNode) {
    if (rowNode) {
      rowNode.setSelectedParams({
        newValue: false,
        clearSelection: false
      });
    }
  };
  /**
   * @method
   * @deprecated
   */


  SelectionController.prototype.selectIndex = function (index, tryMulti) {
    var node = this.rowModel.getRow(index);
    this.selectNode(node, tryMulti);
  };

  __decorate([context_3.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], SelectionController.prototype, "eventService", void 0);

  __decorate([context_3.Autowired('rowModel'), __metadata("design:type", Object)], SelectionController.prototype, "rowModel", void 0);

  __decorate([context_3.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], SelectionController.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_3.Autowired('columnApi'), __metadata("design:type", columnApi_1.ColumnApi)], SelectionController.prototype, "columnApi", void 0);

  __decorate([context_3.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], SelectionController.prototype, "gridApi", void 0);

  __decorate([__param(0, context_2.Qualifier('loggerFactory')), __metadata("design:type", Function), __metadata("design:paramtypes", [logger_1.LoggerFactory]), __metadata("design:returntype", void 0)], SelectionController.prototype, "setBeans", null);

  __decorate([context_4.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], SelectionController.prototype, "init", null);

  SelectionController = __decorate([context_1.Bean('selectionController')], SelectionController);
  return SelectionController;
}();

exports.SelectionController = SelectionController;

/***/ }),
/* 45 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;
module.exports = isArray;

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

var freeGlobal = __webpack_require__(231);
/** Detect free variable `self`. */


var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */

var root = freeGlobal || freeSelf || Function('return this')();
module.exports = root;

/***/ }),
/* 47 */,
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var eventService_1 = __webpack_require__(14);

var events_1 = __webpack_require__(18);

var gridOptionsWrapper_1 = __webpack_require__(7);

var columnApi_1 = __webpack_require__(21);

var columnController_1 = __webpack_require__(17);

var gridCell_1 = __webpack_require__(52);

var gridApi_1 = __webpack_require__(20);

var cellComp_1 = __webpack_require__(86);

var utils_1 = __webpack_require__(6);

var FocusedCellController =
/** @class */
function () {
  function FocusedCellController() {}

  FocusedCellController.prototype.init = function () {
    this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.clearFocusedCell.bind(this));
    this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.clearFocusedCell.bind(this));
    this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_GROUP_OPENED, this.clearFocusedCell.bind(this));
    this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_MOVED, this.clearFocusedCell.bind(this));
    this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_PINNED, this.clearFocusedCell.bind(this));
    this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.clearFocusedCell.bind(this));
    this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_VISIBLE, this.clearFocusedCell.bind(this));
  };

  FocusedCellController.prototype.clearFocusedCell = function () {
    this.focusedCell = null;
    this.onCellFocused(false);
  };

  FocusedCellController.prototype.getFocusedCell = function () {
    return this.focusedCell;
  }; // we check if the browser is focusing something, and if it is, and
  // it's the cell we think is focused, then return the cell. so this
  // methods returns the cell if a) we think it has focus and b) the
  // browser thinks it has focus. this then returns nothing if we
  // first focus a cell, then second click outside the grid, as then the
  // grid cell will still be focused as far as the grid is concerned,
  // however the browser focus will have moved somewhere else.


  FocusedCellController.prototype.getFocusCellToUseAfterRefresh = function () {
    if (this.gridOptionsWrapper.isSuppressFocusAfterRefresh()) {
      return null;
    }

    if (!this.focusedCell) {
      return null;
    } // we check that the browser is actually focusing on the grid, if it is not, then
    // we have nothing to worry about


    var browserFocusedCell = this.getGridCellForDomElement(document.activeElement);

    if (!browserFocusedCell) {
      return null;
    }

    return this.focusedCell;
  };

  FocusedCellController.prototype.getGridCellForDomElement = function (eBrowserCell) {
    var ePointer = eBrowserCell;

    while (ePointer) {
      var cellComp = this.gridOptionsWrapper.getDomData(ePointer, cellComp_1.CellComp.DOM_DATA_KEY_CELL_COMP);

      if (cellComp) {
        return cellComp.getGridCell();
      }

      ePointer = ePointer.parentNode;
    }

    return null;
  };

  FocusedCellController.prototype.setFocusedCell = function (rowIndex, colKey, floating, forceBrowserFocus) {
    if (forceBrowserFocus === void 0) {
      forceBrowserFocus = false;
    }

    var column = utils_1._.makeNull(this.columnController.getGridColumn(colKey));

    this.focusedCell = new gridCell_1.GridCell({
      rowIndex: rowIndex,
      floating: utils_1._.makeNull(floating),
      column: column
    });
    this.onCellFocused(forceBrowserFocus);
  };

  FocusedCellController.prototype.isCellFocused = function (gridCell) {
    if (utils_1._.missing(this.focusedCell)) {
      return false;
    }

    return this.focusedCell.column === gridCell.column && this.isRowFocused(gridCell.rowIndex, gridCell.floating);
  };

  FocusedCellController.prototype.isRowNodeFocused = function (rowNode) {
    return this.isRowFocused(rowNode.rowIndex, rowNode.rowPinned);
  };

  FocusedCellController.prototype.isAnyCellFocused = function () {
    return !!this.focusedCell;
  };

  FocusedCellController.prototype.isRowFocused = function (rowIndex, floating) {
    if (utils_1._.missing(this.focusedCell)) {
      return false;
    }

    var floatingOrNull = utils_1._.makeNull(floating);

    return this.focusedCell.rowIndex === rowIndex && this.focusedCell.floating === floatingOrNull;
  };

  FocusedCellController.prototype.onCellFocused = function (forceBrowserFocus) {
    var event = {
      type: events_1.Events.EVENT_CELL_FOCUSED,
      forceBrowserFocus: forceBrowserFocus,
      rowIndex: null,
      column: null,
      floating: null,
      api: this.gridApi,
      columnApi: this.columnApi,
      rowPinned: null
    };

    if (this.focusedCell) {
      event.rowIndex = this.focusedCell.rowIndex;
      event.column = this.focusedCell.column;
      event.rowPinned = this.focusedCell.floating;
    }

    this.eventService.dispatchEvent(event);
  };

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], FocusedCellController.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], FocusedCellController.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], FocusedCellController.prototype, "columnController", void 0);

  __decorate([context_1.Autowired('columnApi'), __metadata("design:type", columnApi_1.ColumnApi)], FocusedCellController.prototype, "columnApi", void 0);

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], FocusedCellController.prototype, "gridApi", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], FocusedCellController.prototype, "init", null);

  FocusedCellController = __decorate([context_1.Bean('focusedCellController')], FocusedCellController);
  return FocusedCellController;
}();

exports.FocusedCellController = FocusedCellController;

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var column_1 = __webpack_require__(24);

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var columnApi_1 = __webpack_require__(21);

var columnController_1 = __webpack_require__(17);

var eventService_1 = __webpack_require__(14);

var events_1 = __webpack_require__(18);

var gridApi_1 = __webpack_require__(20);

var utils_1 = __webpack_require__(6);

var SortController =
/** @class */
function () {
  function SortController() {}

  SortController_1 = SortController;

  SortController.prototype.progressSort = function (column, multiSort, source) {
    if (source === void 0) {
      source = "api";
    }

    var nextDirection = this.getNextSortDirection(column);
    this.setSortForColumn(column, nextDirection, multiSort, source);
  };

  SortController.prototype.setSortForColumn = function (column, sort, multiSort, source) {
    if (source === void 0) {
      source = "api";
    } // auto correct - if sort not legal value, then set it to 'no sort' (which is null)


    if (sort !== column_1.Column.SORT_ASC && sort !== column_1.Column.SORT_DESC) {
      sort = null;
    } // update sort on current col


    column.setSort(sort, source); // sortedAt used for knowing order of cols when multi-col sort

    if (column.getSort()) {
      var sortedAt = Number(new Date().valueOf());
      column.setSortedAt(sortedAt);
    } else {
      column.setSortedAt(null);
    }

    var doingMultiSort = multiSort && !this.gridOptionsWrapper.isSuppressMultiSort(); // clear sort on all columns except this one, and update the icons

    if (!doingMultiSort) {
      this.clearSortBarThisColumn(column, source);
    }

    this.dispatchSortChangedEvents();
  }; // gets called by API, so if data changes, use can call this, which will end up
  // working out the sort order again of the rows.


  SortController.prototype.onSortChanged = function () {
    this.dispatchSortChangedEvents();
  };

  SortController.prototype.dispatchSortChangedEvents = function () {
    var event = {
      type: events_1.Events.EVENT_SORT_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(event);
  };

  SortController.prototype.clearSortBarThisColumn = function (columnToSkip, source) {
    this.columnController.getPrimaryAndSecondaryAndAutoColumns().forEach(function (columnToClear) {
      // Do not clear if either holding shift, or if column in question was clicked
      if (!(columnToClear === columnToSkip)) {
        // setting to 'undefined' as null means 'none' rather than cleared, otherwise issue will arise
        // if sort order is: ['desc', null , 'asc'], as it will start at null rather than 'desc'.
        columnToClear.setSort(undefined, source);
      }
    });
  };

  SortController.prototype.getNextSortDirection = function (column) {
    var sortingOrder;

    if (column.getColDef().sortingOrder) {
      sortingOrder = column.getColDef().sortingOrder;
    } else if (this.gridOptionsWrapper.getSortingOrder()) {
      sortingOrder = this.gridOptionsWrapper.getSortingOrder();
    } else {
      sortingOrder = SortController_1.DEFAULT_SORTING_ORDER;
    }

    if (!Array.isArray(sortingOrder) || sortingOrder.length <= 0) {
      console.warn("ag-grid: sortingOrder must be an array with at least one element, currently it's " + sortingOrder);
      return null;
    }

    var currentIndex = sortingOrder.indexOf(column.getSort());
    var notInArray = currentIndex < 0;
    var lastItemInArray = currentIndex == sortingOrder.length - 1;
    var result;

    if (notInArray || lastItemInArray) {
      result = sortingOrder[0];
    } else {
      result = sortingOrder[currentIndex + 1];
    } // verify the sort type exists, as the user could provide the sortingOrder, need to make sure it's valid


    if (SortController_1.DEFAULT_SORTING_ORDER.indexOf(result) < 0) {
      console.warn('ag-grid: invalid sort type ' + result);
      return null;
    }

    return result;
  }; // used by the public api, for saving the sort model


  SortController.prototype.getSortModel = function () {
    var columnsWithSorting = this.getColumnsWithSortingOrdered();
    return utils_1._.map(columnsWithSorting, function (column) {
      return {
        colId: column.getColId(),
        sort: column.getSort()
      };
    });
  };

  SortController.prototype.setSortModel = function (sortModel, source) {
    var _this = this;

    if (source === void 0) {
      source = "api";
    } // first up, clear any previous sort


    var sortModelProvided = sortModel && sortModel.length > 0;
    var allColumnsIncludingAuto = this.columnController.getPrimaryAndSecondaryAndAutoColumns();
    allColumnsIncludingAuto.forEach(function (column) {
      var sortForCol = null;
      var sortedAt = -1;

      if (sortModelProvided && column.getColDef().sortable) {
        for (var j = 0; j < sortModel.length; j++) {
          var sortModelEntry = sortModel[j];

          if (typeof sortModelEntry.colId === 'string' && typeof column.getColId() === 'string' && _this.compareColIds(sortModelEntry, column)) {
            sortForCol = sortModelEntry.sort;
            sortedAt = j;
          }
        }
      }

      if (sortForCol) {
        column.setSort(sortForCol, source);
        column.setSortedAt(sortedAt);
      } else {
        column.setSort(null, source);
        column.setSortedAt(null);
      }
    });
    this.dispatchSortChangedEvents();
  };

  SortController.prototype.compareColIds = function (sortModelEntry, column) {
    return sortModelEntry.colId === column.getColId();
  };

  SortController.prototype.getColumnsWithSortingOrdered = function () {
    // pull out all the columns that have sorting set
    var allColumnsIncludingAuto = this.columnController.getPrimaryAndSecondaryAndAutoColumns();

    var columnsWithSorting = utils_1._.filter(allColumnsIncludingAuto, function (column) {
      return !!column.getSort();
    }); // put the columns in order of which one got sorted first


    columnsWithSorting.sort(function (a, b) {
      return a.sortedAt - b.sortedAt;
    });
    return columnsWithSorting;
  }; // used by row controller, when doing the sorting


  SortController.prototype.getSortForRowController = function () {
    var columnsWithSorting = this.getColumnsWithSortingOrdered();
    return utils_1._.map(columnsWithSorting, function (column) {
      var ascending = column.getSort() === column_1.Column.SORT_ASC;
      return {
        inverter: ascending ? 1 : -1,
        column: column
      };
    });
  };

  var SortController_1;
  SortController.DEFAULT_SORTING_ORDER = [column_1.Column.SORT_ASC, column_1.Column.SORT_DESC, null];

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], SortController.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], SortController.prototype, "columnController", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], SortController.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('columnApi'), __metadata("design:type", columnApi_1.ColumnApi)], SortController.prototype, "columnApi", void 0);

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], SortController.prototype, "gridApi", void 0);

  SortController = SortController_1 = __decorate([context_1.Bean('sortController')], SortController);
  return SortController;
}();

exports.SortController = SortController;

/***/ }),
/* 50 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(127);

/** Detect free variable `exports`. */

var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */

var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */

var moduleExports = freeModule && freeModule.exports === freeExports;
/** Detect free variable `process` from Node.js. */

var freeProcess = moduleExports && _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].process;
/** Used to access faster Node.js helpers. */

var nodeUtil = function () {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    } // Legacy `process.binding('util')` for Node.js < 10.


    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}();

/* harmony default export */ __webpack_exports__["a"] = (nodeUtil);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(116)(module)))

/***/ }),
/* 51 */
/***/ (function(module, exports) {

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if (typeof window === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});

var gridRow_1 = __webpack_require__(140);

var utils_1 = __webpack_require__(6);

var GridCell =
/** @class */
function () {
  function GridCell(gridCellDef) {
    this.rowIndex = gridCellDef.rowIndex;
    this.column = gridCellDef.column;
    this.floating = utils_1._.makeNull(gridCellDef.floating);
  }

  GridCell.prototype.getGridCellDef = function () {
    return {
      rowIndex: this.rowIndex,
      column: this.column,
      floating: this.floating
    };
  };

  GridCell.prototype.getGridRow = function () {
    return new gridRow_1.GridRow(this.rowIndex, this.floating);
  };

  GridCell.prototype.toString = function () {
    return "rowIndex = " + this.rowIndex + ", floating = " + this.floating + ", column = " + (this.column ? this.column.getId() : null);
  };

  GridCell.prototype.createId = function () {
    return this.rowIndex + "." + this.floating + "." + this.column.getId();
  };

  GridCell.prototype.equals = function (other) {
    var colsMatch = this.column === other.column;
    var floatingMatch = this.floating === other.floating;
    var indexMatch = this.rowIndex === other.rowIndex;
    return colsMatch && floatingMatch && indexMatch;
  };

  return GridCell;
}();

exports.GridCell = GridCell;

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var beanStub_1 = __webpack_require__(32);

var eventService_1 = __webpack_require__(14);

var events_1 = __webpack_require__(18);

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var scrollVisibleService_1 = __webpack_require__(89);

var selectionController_1 = __webpack_require__(44);

var columnApi_1 = __webpack_require__(21);

var gridApi_1 = __webpack_require__(20);

var utils_1 = __webpack_require__(6);

var PaginationAutoPageSizeService =
/** @class */
function (_super) {
  __extends(PaginationAutoPageSizeService, _super);

  function PaginationAutoPageSizeService() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  PaginationAutoPageSizeService.prototype.registerGridComp = function (gridPanel) {
    this.gridPanel = gridPanel;
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_BODY_HEIGHT_CHANGED, this.onBodyHeightChanged.bind(this));
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
    this.checkPageSize();
  };

  PaginationAutoPageSizeService.prototype.notActive = function () {
    return !this.gridOptionsWrapper.isPaginationAutoPageSize();
  };

  PaginationAutoPageSizeService.prototype.onScrollVisibilityChanged = function () {
    this.checkPageSize();
  };

  PaginationAutoPageSizeService.prototype.onBodyHeightChanged = function () {
    this.checkPageSize();
  };

  PaginationAutoPageSizeService.prototype.checkPageSize = function () {
    if (this.notActive()) {
      return;
    }

    var rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();
    var bodyHeight = this.gridPanel.getBodyHeight();

    if (bodyHeight > 0) {
      var newPageSize = Math.floor(bodyHeight / rowHeight);
      this.gridOptionsWrapper.setProperty('paginationPageSize', newPageSize);
    }
  };

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], PaginationAutoPageSizeService.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], PaginationAutoPageSizeService.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('scrollVisibleService'), __metadata("design:type", scrollVisibleService_1.ScrollVisibleService)], PaginationAutoPageSizeService.prototype, "scrollVisibleService", void 0);

  PaginationAutoPageSizeService = __decorate([context_1.Bean('paginationAutoPageSizeService')], PaginationAutoPageSizeService);
  return PaginationAutoPageSizeService;
}(beanStub_1.BeanStub);

exports.PaginationAutoPageSizeService = PaginationAutoPageSizeService;

var PaginationProxy =
/** @class */
function (_super) {
  __extends(PaginationProxy, _super);

  function PaginationProxy() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.currentPage = 0;
    _this.topRowIndex = 0;
    _this.bottomRowIndex = 0;
    _this.pixelOffset = 0;
    return _this;
  }

  PaginationProxy.prototype.postConstruct = function () {
    this.active = this.gridOptionsWrapper.isPagination();
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));
    this.addDestroyableEventListener(this.gridOptionsWrapper, 'paginationPageSize', this.onModelUpdated.bind(this));
    this.onModelUpdated();
  };

  PaginationProxy.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) {
    var res = this.rowModel.ensureRowHeightsValid(startPixel, endPixel, this.getPageFirstRow(), this.getPageLastRow());

    if (res) {
      this.setIndexesAndBounds();
    }

    return res;
  };

  PaginationProxy.prototype.isLastRowFound = function () {
    return this.rowModel.isLastRowFound();
  };

  PaginationProxy.prototype.onModelUpdated = function (modelUpdatedEvent) {
    this.setIndexesAndBounds();
    var paginationChangedEvent = {
      type: events_1.Events.EVENT_PAGINATION_CHANGED,
      animate: modelUpdatedEvent ? modelUpdatedEvent.animate : false,
      newData: modelUpdatedEvent ? modelUpdatedEvent.newData : false,
      newPage: modelUpdatedEvent ? modelUpdatedEvent.newPage : false,
      keepRenderedRows: modelUpdatedEvent ? modelUpdatedEvent.keepRenderedRows : false,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(paginationChangedEvent);
  };

  PaginationProxy.prototype.goToPage = function (page) {
    if (!this.active) {
      return;
    }

    if (this.currentPage === page) {
      return;
    }

    this.currentPage = page;
    var event = {
      type: events_1.Events.EVENT_MODEL_UPDATED,
      animate: false,
      keepRenderedRows: false,
      newData: false,
      newPage: true,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.onModelUpdated(event);
  };

  PaginationProxy.prototype.getPixelOffset = function () {
    return this.pixelOffset;
  };

  PaginationProxy.prototype.getRow = function (index) {
    return this.rowModel.getRow(index);
  };

  PaginationProxy.prototype.getRowNode = function (id) {
    return this.rowModel.getRowNode(id);
  };

  PaginationProxy.prototype.getRowIndexAtPixel = function (pixel) {
    return this.rowModel.getRowIndexAtPixel(pixel);
  };

  PaginationProxy.prototype.getCurrentPageHeight = function () {
    if (utils_1._.missing(this.topRowBounds) || utils_1._.missing(this.bottomRowBounds)) {
      return 0;
    }

    return this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight - this.topRowBounds.rowTop;
  };

  PaginationProxy.prototype.isRowPresent = function (rowNode) {
    if (!this.rowModel.isRowPresent(rowNode)) {
      return false;
    }

    var nodeIsInPage = rowNode.rowIndex >= this.topRowIndex && rowNode.rowIndex <= this.bottomRowIndex;
    return nodeIsInPage;
  };

  PaginationProxy.prototype.isEmpty = function () {
    return this.rowModel.isEmpty();
  };

  PaginationProxy.prototype.isRowsToRender = function () {
    return this.rowModel.isRowsToRender();
  };

  PaginationProxy.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {
    return this.rowModel.getNodesInRangeForSelection(firstInRange, lastInRange);
  };

  PaginationProxy.prototype.forEachNode = function (callback) {
    return this.rowModel.forEachNode(callback);
  };

  PaginationProxy.prototype.getType = function () {
    return this.rowModel.getType();
  };

  PaginationProxy.prototype.getRowBounds = function (index) {
    return this.rowModel.getRowBounds(index);
  };

  PaginationProxy.prototype.getPageFirstRow = function () {
    return this.pageSize * this.currentPage;
  };

  PaginationProxy.prototype.getPageLastRow = function () {
    var totalLastRow = this.pageSize * (this.currentPage + 1) - 1;
    var pageLastRow = this.rowModel.getPageLastRow();

    if (pageLastRow > totalLastRow) {
      return totalLastRow;
    } else {
      return pageLastRow;
    }
  };

  PaginationProxy.prototype.getRowCount = function () {
    return this.rowModel.getRowCount();
  };

  PaginationProxy.prototype.goToPageWithIndex = function (index) {
    if (!this.active) {
      return;
    }

    var pageNumber = Math.floor(index / this.pageSize);
    this.goToPage(pageNumber);
  };

  PaginationProxy.prototype.getTotalRowCount = function () {
    return this.rowModel.getPageLastRow() + 1;
  };

  PaginationProxy.prototype.isLastPageFound = function () {
    return this.rowModel.isLastRowFound();
  };

  PaginationProxy.prototype.getCurrentPage = function () {
    return this.currentPage;
  };

  PaginationProxy.prototype.goToNextPage = function () {
    this.goToPage(this.currentPage + 1);
  };

  PaginationProxy.prototype.goToPreviousPage = function () {
    this.goToPage(this.currentPage - 1);
  };

  PaginationProxy.prototype.goToFirstPage = function () {
    this.goToPage(0);
  };

  PaginationProxy.prototype.goToLastPage = function () {
    var rowCount = this.rowModel.getPageLastRow() + 1;
    var lastPage = Math.floor(rowCount / this.pageSize);
    this.goToPage(lastPage);
  };

  PaginationProxy.prototype.getPageSize = function () {
    return this.pageSize;
  };

  PaginationProxy.prototype.getTotalPages = function () {
    return this.totalPages;
  };

  PaginationProxy.prototype.setPageSize = function () {
    // show put this into super class
    this.pageSize = this.gridOptionsWrapper.getPaginationPageSize();

    if (!(this.pageSize >= 1)) {
      this.pageSize = 100;
    }
  };

  PaginationProxy.prototype.setIndexesAndBounds = function () {
    if (this.active) {
      this.setPageSize();
      var totalRowCount = this.getTotalRowCount();
      this.totalPages = Math.floor((totalRowCount - 1) / this.pageSize) + 1;

      if (this.currentPage >= this.totalPages) {
        this.currentPage = this.totalPages - 1;
      }

      if (!utils_1._.isNumeric(this.currentPage) || this.currentPage < 0) {
        this.currentPage = 0;
      }

      this.topRowIndex = this.pageSize * this.currentPage;
      this.bottomRowIndex = this.pageSize * (this.currentPage + 1) - 1;
      var maxRowAllowed = this.rowModel.getPageLastRow();

      if (this.bottomRowIndex > maxRowAllowed) {
        this.bottomRowIndex = maxRowAllowed;
      }
    } else {
      this.pageSize = this.rowModel.getPageLastRow() + 1;
      this.totalPages = 1;
      this.currentPage = 0;
      this.topRowIndex = 0;
      this.bottomRowIndex = this.rowModel.getPageLastRow();
    }

    this.topRowBounds = this.rowModel.getRowBounds(this.topRowIndex);
    this.bottomRowBounds = this.rowModel.getRowBounds(this.bottomRowIndex);
    this.pixelOffset = utils_1._.exists(this.topRowBounds) ? this.topRowBounds.rowTop : 0;
  };

  __decorate([context_1.Autowired('rowModel'), __metadata("design:type", Object)], PaginationProxy.prototype, "rowModel", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], PaginationProxy.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], PaginationProxy.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('selectionController'), __metadata("design:type", selectionController_1.SelectionController)], PaginationProxy.prototype, "selectionController", void 0);

  __decorate([context_1.Autowired('columnApi'), __metadata("design:type", columnApi_1.ColumnApi)], PaginationProxy.prototype, "columnApi", void 0);

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], PaginationProxy.prototype, "gridApi", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], PaginationProxy.prototype, "postConstruct", null);

  PaginationProxy = __decorate([context_1.Bean('paginationProxy')], PaginationProxy);
  return PaginationProxy;
}(beanStub_1.BeanStub);

exports.PaginationProxy = PaginationProxy;

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var constants_1 = __webpack_require__(19);

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var environment_1 = __webpack_require__(88);

var eventService_1 = __webpack_require__(14);

var events_1 = __webpack_require__(18);

var utils_1 = __webpack_require__(6);

var PopupService =
/** @class */
function () {
  function PopupService() {
    this.activePopupElements = [];
  }

  PopupService.prototype.registerGridCore = function (gridCore) {
    this.gridCore = gridCore;
  };

  PopupService.prototype.getDocument = function () {
    return this.gridOptionsWrapper.getDocument();
  };

  PopupService.prototype.getPopupParent = function () {
    var ePopupParent = this.gridOptionsWrapper.getPopupParent();

    if (ePopupParent) {
      // user provided popup parent, may not have the right theme applied
      return ePopupParent;
    }

    return this.gridCore.getRootGui();
  };

  PopupService.prototype.positionPopupForMenu = function (params) {
    var sourceRect = params.eventSource.getBoundingClientRect();
    var eDocument = this.getDocument();
    var popupParent = this.getPopupParent();
    var parentRect;

    if (popupParent === eDocument.body) {
      parentRect = eDocument.documentElement.getBoundingClientRect();
    } else {
      parentRect = popupParent.getBoundingClientRect();
    }

    var y = sourceRect.top - parentRect.top;
    y = this.keepYWithinBounds(params, y);
    var minWidth = params.ePopup.clientWidth > 0 ? params.ePopup.clientWidth : 200;
    params.ePopup.style.minWidth = minWidth + "px";
    var widthOfParent = parentRect.right - parentRect.left;
    var maxX = widthOfParent - minWidth; // the x position of the popup depends on RTL or LTR. for normal cases, LTR, we put the child popup
    // to the right, unless it doesn't fit and we then put it to the left. for RTL it's the other way around,
    // we try place it first to the left, and then if not to the right.

    var x;

    if (this.gridOptionsWrapper.isEnableRtl()) {
      // for RTL, try left first
      x = xLeftPosition();

      if (x < 0) {
        x = xRightPosition();
      }

      if (x > maxX) {
        x = 0;
      }
    } else {
      // for LTR, try right first
      x = xRightPosition();

      if (x > maxX) {
        x = xLeftPosition();
      }

      if (x < 0) {
        x = 0;
      }
    }

    params.ePopup.style.left = x + "px";
    params.ePopup.style.top = y + "px";

    function xRightPosition() {
      return sourceRect.right - parentRect.left - 2;
    }

    function xLeftPosition() {
      return sourceRect.left - parentRect.left - minWidth;
    }
  };

  PopupService.prototype.positionPopupUnderMouseEvent = function (params) {
    var _a = this.calculatePointerAlign(params.mouseEvent),
        x = _a.x,
        y = _a.y;

    var ePopup = params.ePopup,
        nudgeX = params.nudgeX,
        nudgeY = params.nudgeY;
    this.positionPopup({
      ePopup: ePopup,
      x: x,
      y: y,
      nudgeX: nudgeX,
      nudgeY: nudgeY,
      keepWithinBounds: true
    });
    this.callPostProcessPopup(params.ePopup, null, params.mouseEvent, params.type, params.column, params.rowNode);
  };

  PopupService.prototype.calculatePointerAlign = function (e) {
    var eDocument = this.getDocument();
    var popupParent = this.getPopupParent();
    var parentRect = popupParent.getBoundingClientRect();
    var documentRect = eDocument.documentElement.getBoundingClientRect();
    return {
      x: e.clientX - (popupParent === eDocument.body ? documentRect.left : parentRect.left),
      y: e.clientY - (popupParent === eDocument.body ? documentRect.top : parentRect.top)
    };
  };

  PopupService.prototype.positionPopupUnderComponent = function (params) {
    var sourceRect = params.eventSource.getBoundingClientRect();
    var eDocument = this.getDocument();
    var popupParent = this.getPopupParent();
    var parentRect;

    if (popupParent === eDocument.body) {
      parentRect = eDocument.documentElement.getBoundingClientRect();
    } else {
      parentRect = popupParent.getBoundingClientRect();
    }

    this.positionPopup({
      ePopup: params.ePopup,
      minWidth: params.minWidth,
      minHeight: params.minHeight,
      nudgeX: params.nudgeX,
      nudgeY: params.nudgeY,
      x: sourceRect.left - parentRect.left,
      y: sourceRect.top - parentRect.top + sourceRect.height,
      keepWithinBounds: params.keepWithinBounds
    });
    this.callPostProcessPopup(params.ePopup, params.eventSource, null, params.type, params.column, params.rowNode);
  };

  PopupService.prototype.callPostProcessPopup = function (ePopup, eventSource, mouseEvent, type, column, rowNode) {
    var callback = this.gridOptionsWrapper.getPostProcessPopupFunc();

    if (callback) {
      var params = {
        column: column,
        rowNode: rowNode,
        ePopup: ePopup,
        type: type,
        eventSource: eventSource,
        mouseEvent: mouseEvent
      };
      callback(params);
    }
  };

  PopupService.prototype.positionPopupOverComponent = function (params) {
    var sourceRect = params.eventSource.getBoundingClientRect();
    var eDocument = this.getDocument();
    var popupParent = this.getPopupParent();
    var parentRect;

    if (popupParent === eDocument.body) {
      parentRect = eDocument.documentElement.getBoundingClientRect();
    } else {
      parentRect = popupParent.getBoundingClientRect();
    }

    this.positionPopup({
      ePopup: params.ePopup,
      minWidth: params.minWidth,
      nudgeX: params.nudgeX,
      nudgeY: params.nudgeY,
      x: sourceRect.left - parentRect.left,
      y: sourceRect.top - parentRect.top,
      keepWithinBounds: params.keepWithinBounds
    });
    this.callPostProcessPopup(params.ePopup, params.eventSource, null, params.type, params.column, params.rowNode);
  };

  PopupService.prototype.positionPopup = function (params) {
    var x = params.x;
    var y = params.y;

    if (params.nudgeX) {
      x += params.nudgeX;
    }

    if (params.nudgeY) {
      y += params.nudgeY;
    } // if popup is overflowing to the bottom, move it up


    if (params.keepWithinBounds) {
      x = this.keepXWithinBounds(params, x);
      y = this.keepYWithinBounds(params, y);
    }

    params.ePopup.style.left = x + "px";
    params.ePopup.style.top = y + "px";
  };

  PopupService.prototype.keepYWithinBounds = function (params, y) {
    var eDocument = this.gridOptionsWrapper.getDocument();
    var docElement = eDocument.documentElement;
    var popupParent = this.getPopupParent();
    var parentRect = popupParent.getBoundingClientRect();
    var documentRect = eDocument.documentElement.getBoundingClientRect();
    var isBody = popupParent === eDocument.body;
    var defaultPadding = 3;
    var minHeight = Math.min(200, parentRect.height);
    var diff = 0;

    if (params.minHeight && params.minHeight < minHeight) {
      minHeight = params.minHeight;
    } else if (params.ePopup.offsetHeight > 0) {
      minHeight = params.ePopup.clientHeight;
      diff = utils_1._.getAbsoluteHeight(params.ePopup) - minHeight;
    }

    var heightOfParent = isBody ? utils_1._.getAbsoluteHeight(docElement) + docElement.scrollTop : parentRect.height;

    if (isBody) {
      heightOfParent -= Math.abs(documentRect.top - parentRect.top);
    }

    var maxY = heightOfParent - minHeight - diff - defaultPadding;
    return Math.min(Math.max(y, 0), Math.abs(maxY));
  };

  PopupService.prototype.keepXWithinBounds = function (params, x) {
    var eDocument = this.gridOptionsWrapper.getDocument();
    var docElement = eDocument.documentElement;
    var popupParent = this.getPopupParent();
    var parentRect = popupParent.getBoundingClientRect();
    var documentRect = eDocument.documentElement.getBoundingClientRect();
    var isBody = popupParent === eDocument.body;
    var defaultPadding = 3;
    var minWidth = Math.min(200, parentRect.width);
    var diff = 0;

    if (params.minWidth && params.minWidth < minWidth) {
      minWidth = params.minWidth;
    } else if (params.ePopup.clientWidth > 0) {
      minWidth = params.ePopup.clientWidth;
      params.ePopup.style.minWidth = minWidth + "px";
      diff = utils_1._.getAbsoluteWidth(params.ePopup) - minWidth;
    }

    var widthOfParent = isBody ? utils_1._.getAbsoluteWidth(docElement) + docElement.scrollLeft : parentRect.width;

    if (isBody) {
      widthOfParent -= Math.abs(documentRect.left - parentRect.left);
    }

    var maxX = widthOfParent - minWidth - diff - defaultPadding;
    return Math.min(Math.max(x, 0), Math.abs(maxX));
  }; //adds an element to a div, but also listens to background checking for clicks,
  //so that when the background is clicked, the child is removed again, giving
  //a model look to popups.


  PopupService.prototype.addAsModalPopup = function (eChild, closeOnEsc, closedCallback, click) {
    return this.addPopup(true, eChild, closeOnEsc, closedCallback, click);
  };

  PopupService.prototype.addPopup = function (modal, eChild, closeOnEsc, closedCallback, click) {
    var _this = this;

    var eDocument = this.gridOptionsWrapper.getDocument();

    if (!eDocument) {
      console.warn('ag-grid: could not find the document, document is empty');
      return function () {};
    }

    eChild.style.top = '0px';
    eChild.style.left = '0px';
    var ePopupParent = this.getPopupParent();

    var popupAlreadyShown = utils_1._.isVisible(eChild);

    if (popupAlreadyShown && ePopupParent.contains(eChild)) {
      return function () {};
    } // add env CSS class to child, in case user provided a popup parent, which means
    // theme class may be missing


    var eWrapper = document.createElement('div');
    var theme = this.environment.getTheme();

    if (theme) {
      utils_1._.addCssClass(eWrapper, theme);
    }

    eWrapper.appendChild(eChild);
    ePopupParent.appendChild(eWrapper);
    this.activePopupElements.push(eChild);
    var popupHidden = false;

    var hidePopupOnKeyboardEvent = function hidePopupOnKeyboardEvent(event) {
      var key = event.which || event.keyCode;

      if (key === constants_1.Constants.KEY_ESCAPE) {
        hidePopup(null);
      }
    };

    var hidePopupOnMouseEvent = function hidePopupOnMouseEvent(event) {
      hidePopup(event);
    };

    var hidePopupOnTouchEvent = function hidePopupOnTouchEvent(event) {
      hidePopup(null, event);
    };

    var hidePopup = function hidePopup(mouseEvent, touchEvent) {
      // we don't hide popup if the event was on the child, or any
      // children of this child
      if (_this.isEventFromCurrentPopup(mouseEvent, touchEvent, eChild)) {
        return;
      } // if the event to close is actually the open event, then ignore it


      if (_this.isEventSameChainAsOriginalEvent(click, mouseEvent, touchEvent)) {
        return;
      } // this method should only be called once. the client can have different
      // paths, each one wanting to close, so this method may be called multiple times.


      if (popupHidden) {
        return;
      }

      popupHidden = true;
      ePopupParent.removeChild(eWrapper);

      utils_1._.removeFromArray(_this.activePopupElements, eChild);

      eDocument.removeEventListener('keydown', hidePopupOnKeyboardEvent);
      eDocument.removeEventListener('click', hidePopupOnMouseEvent);
      eDocument.removeEventListener('touchstart', hidePopupOnTouchEvent);
      eDocument.removeEventListener('contextmenu', hidePopupOnMouseEvent);

      _this.eventService.removeEventListener(events_1.Events.EVENT_DRAG_STARTED, hidePopupOnMouseEvent);

      if (closedCallback) {
        closedCallback();
      }
    }; // if we add these listeners now, then the current mouse
    // click will be included, which we don't want


    window.setTimeout(function () {
      if (closeOnEsc) {
        eDocument.addEventListener('keydown', hidePopupOnKeyboardEvent);
      }

      if (modal) {
        eDocument.addEventListener('click', hidePopupOnMouseEvent);

        _this.eventService.addEventListener(events_1.Events.EVENT_DRAG_STARTED, hidePopupOnMouseEvent);

        eDocument.addEventListener('touchstart', hidePopupOnTouchEvent);
        eDocument.addEventListener('contextmenu', hidePopupOnMouseEvent);
      }
    }, 0);
    return hidePopup;
  };

  PopupService.prototype.isEventFromCurrentPopup = function (mouseEvent, touchEvent, eChild) {
    var event = mouseEvent ? mouseEvent : touchEvent;

    if (event) {
      var indexOfThisChild = this.activePopupElements.indexOf(eChild);

      for (var i = indexOfThisChild; i < this.activePopupElements.length; i++) {
        var element = this.activePopupElements[i];

        if (utils_1._.isElementInEventPath(element, event)) {
          return true;
        }
      } // if the user did not write their own Custom Element to be rendered as popup
      // and this component has additional popup element, they should have the
      // `ag-custom-component-popup` class to be detected as part of the Custom Component


      var el = event.target;

      while (el && el != document.body) {
        if (el.classList.contains('ag-custom-component-popup') || el.parentElement === null) {
          return true;
        }

        el = el.parentElement;
      }
    }

    return false;
  }; // in some browsers, the context menu event can be fired before the click event, which means
  // the context menu event could open the popup, but then the click event closes it straight away.


  PopupService.prototype.isEventSameChainAsOriginalEvent = function (originalClick, mouseEvent, touchEvent) {
    // we check the coordinates of the event, to see if it's the same event. there is a 1 / 1000 chance that
    // the event is a different event, however that is an edge case that is not very relevant (the user clicking
    // twice on the same location isn't a normal path).
    // event could be mouse event or touch event.
    var mouseEventOrTouch = null;

    if (mouseEvent) {
      // mouse event can be used direction, it has coordinates
      mouseEventOrTouch = mouseEvent;
    } else if (touchEvent) {
      // touch event doesn't have coordinates, need it's touch object
      mouseEventOrTouch = touchEvent.touches[0];
    }

    if (mouseEventOrTouch && originalClick) {
      // for x, allow 4px margin, to cover iPads, where touch (which opens menu) is followed
      // by browser click (when you life finger up, touch is interrupted as click in browser)
      var screenX_1 = mouseEvent ? mouseEvent.screenX : 0;
      var screenY_1 = mouseEvent ? mouseEvent.screenY : 0;
      var xMatch = Math.abs(originalClick.screenX - screenX_1) < 5;
      var yMatch = Math.abs(originalClick.screenY - screenY_1) < 5;

      if (xMatch && yMatch) {
        return true;
      }
    }

    return false;
  };

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], PopupService.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('environment'), __metadata("design:type", environment_1.Environment)], PopupService.prototype, "environment", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], PopupService.prototype, "eventService", void 0);

  PopupService = __decorate([context_1.Bean('popupService')], PopupService);
  return PopupService;
}();

exports.PopupService = PopupService;

/***/ }),
/* 55 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});
var globalObj = typeof global === 'undefined' ? {} : global;
globalObj.HTMLElement = typeof HTMLElement === 'undefined' ? {} : HTMLElement;
globalObj.HTMLButtonElement = typeof HTMLButtonElement === 'undefined' ? {} : HTMLButtonElement;
globalObj.HTMLSelectElement = typeof HTMLSelectElement === 'undefined' ? {} : HTMLSelectElement;
globalObj.HTMLInputElement = typeof HTMLInputElement === 'undefined' ? {} : HTMLInputElement;
globalObj.Node = typeof Node === 'undefined' ? {} : Node;
globalObj.MouseEvent = typeof MouseEvent === 'undefined' ? {} : MouseEvent; // columnController

var columnFactory_1 = __webpack_require__(84);

exports.ColumnFactory = columnFactory_1.ColumnFactory;

var columnController_1 = __webpack_require__(17);

exports.ColumnController = columnController_1.ColumnController;

var columnKeyCreator_1 = __webpack_require__(204);

exports.ColumnKeyCreator = columnKeyCreator_1.ColumnKeyCreator;

var columnUtils_1 = __webpack_require__(69);

exports.ColumnUtils = columnUtils_1.ColumnUtils;

var displayedGroupCreator_1 = __webpack_require__(104);

exports.DisplayedGroupCreator = displayedGroupCreator_1.DisplayedGroupCreator;

var groupInstanceIdCreator_1 = __webpack_require__(157);

exports.GroupInstanceIdCreator = groupInstanceIdCreator_1.GroupInstanceIdCreator; // components

var componentUtil_1 = __webpack_require__(137);

exports.ComponentUtil = componentUtil_1.ComponentUtil;

var colDefUtil_1 = __webpack_require__(202);

exports.ColDefUtil = colDefUtil_1.ColDefUtil;

var userComponentRegistry_1 = __webpack_require__(147);

exports.UserComponentRegistry = userComponentRegistry_1.UserComponentRegistry;

var userComponentFactory_1 = __webpack_require__(35);

exports.UserComponentFactory = userComponentFactory_1.UserComponentFactory;

var agGridNg1_1 = __webpack_require__(301);

exports.initialiseAgGridWithAngular1 = agGridNg1_1.initialiseAgGridWithAngular1;

var agGridWebComponent_1 = __webpack_require__(310);

exports.initialiseAgGridWithWebComponents = agGridWebComponent_1.initialiseAgGridWithWebComponents; // context

var beanStub_1 = __webpack_require__(32);

exports.BeanStub = beanStub_1.BeanStub;

var context_1 = __webpack_require__(2);

exports.Context = context_1.Context;
exports.Autowired = context_1.Autowired;
exports.PostConstruct = context_1.PostConstruct;
exports.PreConstruct = context_1.PreConstruct;
exports.Optional = context_1.Optional;
exports.Bean = context_1.Bean;
exports.Qualifier = context_1.Qualifier;
exports.PreDestroy = context_1.PreDestroy;

var componentAnnotations_1 = __webpack_require__(25);

exports.QuerySelector = componentAnnotations_1.QuerySelector;
exports.Listener = componentAnnotations_1.Listener;
exports.RefSelector = componentAnnotations_1.RefSelector; // dragAndDrop

var dragAndDropService_1 = __webpack_require__(34);

exports.DragAndDropService = dragAndDropService_1.DragAndDropService;
exports.DragSourceType = dragAndDropService_1.DragSourceType;
exports.HDirection = dragAndDropService_1.HDirection;
exports.VDirection = dragAndDropService_1.VDirection;

var dragService_1 = __webpack_require__(87);

exports.DragService = dragService_1.DragService; // entities

var column_1 = __webpack_require__(24);

exports.Column = column_1.Column;

var columnGroup_1 = __webpack_require__(58);

exports.ColumnGroup = columnGroup_1.ColumnGroup;

var gridCell_1 = __webpack_require__(52);

exports.GridCell = gridCell_1.GridCell;

var gridRow_1 = __webpack_require__(140);

exports.GridRow = gridRow_1.GridRow;

var originalColumnGroup_1 = __webpack_require__(70);

exports.OriginalColumnGroup = originalColumnGroup_1.OriginalColumnGroup;

var rowNode_1 = __webpack_require__(39);

exports.RowNode = rowNode_1.RowNode; // filter

var baseFilter_1 = __webpack_require__(109);

exports.BaseFilter = baseFilter_1.BaseFilter;

var dateFilter_1 = __webpack_require__(149);

exports.DateFilter = dateFilter_1.DateFilter;

var filterManager_1 = __webpack_require__(40);

exports.FilterManager = filterManager_1.FilterManager;

var numberFilter_1 = __webpack_require__(198);

exports.NumberFilter = numberFilter_1.NumberFilter;

var textFilter_1 = __webpack_require__(197);

exports.TextFilter = textFilter_1.TextFilter; // gridPanel

var gridPanel_1 = __webpack_require__(162);

exports.GridPanel = gridPanel_1.GridPanel;

var scrollVisibleService_1 = __webpack_require__(89);

exports.ScrollVisibleService = scrollVisibleService_1.ScrollVisibleService;

var mouseEventService_1 = __webpack_require__(91);

exports.MouseEventService = mouseEventService_1.MouseEventService; // headerRendering

var bodyDropPivotTarget_1 = __webpack_require__(209);

exports.BodyDropPivotTarget = bodyDropPivotTarget_1.BodyDropPivotTarget;

var bodyDropTarget_1 = __webpack_require__(207);

exports.BodyDropTarget = bodyDropTarget_1.BodyDropTarget;

var cssClassApplier_1 = __webpack_require__(155);

exports.CssClassApplier = cssClassApplier_1.CssClassApplier;

var headerContainer_1 = __webpack_require__(205);

exports.HeaderContainer = headerContainer_1.HeaderContainer;

var headerRootComp_1 = __webpack_require__(161);

exports.HeaderRootComp = headerRootComp_1.HeaderRootComp;

var headerRowComp_1 = __webpack_require__(206);

exports.HeaderRowComp = headerRowComp_1.HeaderRowComp;

var horizontalResizeService_1 = __webpack_require__(111);

exports.HorizontalResizeService = horizontalResizeService_1.HorizontalResizeService;

var moveColumnController_1 = __webpack_require__(208);

exports.MoveColumnController = moveColumnController_1.MoveColumnController;

var standardMenu_1 = __webpack_require__(213);

exports.StandardMenuFactory = standardMenu_1.StandardMenuFactory; // layout

var tabbedLayout_1 = __webpack_require__(311);

exports.TabbedLayout = tabbedLayout_1.TabbedLayout;

var verticalStack_1 = __webpack_require__(312);

exports.VerticalStack = verticalStack_1.VerticalStack; // misc

var simpleHttpRequest_1 = __webpack_require__(313);

exports.simpleHttpRequest = simpleHttpRequest_1.simpleHttpRequest;

var largeTextCellEditor_1 = __webpack_require__(196);

exports.LargeTextCellEditor = largeTextCellEditor_1.LargeTextCellEditor;

var popupEditorWrapper_1 = __webpack_require__(142);

exports.PopupEditorWrapper = popupEditorWrapper_1.PopupEditorWrapper;

var popupSelectCellEditor_1 = __webpack_require__(195);

exports.PopupSelectCellEditor = popupSelectCellEditor_1.PopupSelectCellEditor;

var popupTextCellEditor_1 = __webpack_require__(194);

exports.PopupTextCellEditor = popupTextCellEditor_1.PopupTextCellEditor;

var selectCellEditor_1 = __webpack_require__(150);

exports.SelectCellEditor = selectCellEditor_1.SelectCellEditor;

var textCellEditor_1 = __webpack_require__(148);

exports.TextCellEditor = textCellEditor_1.TextCellEditor;

var animateShowChangeCellRenderer_1 = __webpack_require__(145);

exports.AnimateShowChangeCellRenderer = animateShowChangeCellRenderer_1.AnimateShowChangeCellRenderer;

var animateSlideCellRenderer_1 = __webpack_require__(144);

exports.AnimateSlideCellRenderer = animateSlideCellRenderer_1.AnimateSlideCellRenderer;

var groupCellRenderer_1 = __webpack_require__(146);

exports.GroupCellRenderer = groupCellRenderer_1.GroupCellRenderer; // features

var setLeftFeature_1 = __webpack_require__(112);

exports.SetLeftFeature = setLeftFeature_1.SetLeftFeature; // rendering

var autoWidthCalculator_1 = __webpack_require__(85);

exports.AutoWidthCalculator = autoWidthCalculator_1.AutoWidthCalculator;

var cellRendererFactory_1 = __webpack_require__(108);

exports.CellRendererFactory = cellRendererFactory_1.CellRendererFactory;

var checkboxSelectionComponent_1 = __webpack_require__(141);

exports.CheckboxSelectionComponent = checkboxSelectionComponent_1.CheckboxSelectionComponent;

var cellComp_1 = __webpack_require__(86);

exports.CellComp = cellComp_1.CellComp;

var rowComp_1 = __webpack_require__(139);

exports.RowComp = rowComp_1.RowComp;

var rowRenderer_1 = __webpack_require__(37);

exports.RowRenderer = rowRenderer_1.RowRenderer;

var valueFormatterService_1 = __webpack_require__(90);

exports.ValueFormatterService = valueFormatterService_1.ValueFormatterService; // rowControllers/inMemory

var filterStage_1 = __webpack_require__(214);

exports.FilterStage = filterStage_1.FilterStage;

var flattenStage_1 = __webpack_require__(218);

exports.FlattenStage = flattenStage_1.FlattenStage;

var sortStage_1 = __webpack_require__(216);

exports.SortStage = sortStage_1.SortStage; // row models

var pinnedRowModel_1 = __webpack_require__(59);

exports.PinnedRowModel = pinnedRowModel_1.PinnedRowModel;

var clientSideRowModel_1 = __webpack_require__(221);

exports.ClientSideRowModel = clientSideRowModel_1.ClientSideRowModel;

var changedPath_1 = __webpack_require__(106);

exports.ChangedPath = changedPath_1.ChangedPath;

var clientSideNodeManager_1 = __webpack_require__(222);

exports.ClientSideNodeManager = clientSideNodeManager_1.ClientSideNodeManager;

var infiniteRowModel_1 = __webpack_require__(219);

exports.InfiniteRowModel = infiniteRowModel_1.InfiniteRowModel;

var rowNodeBlock_1 = __webpack_require__(115);

exports.RowNodeBlock = rowNodeBlock_1.RowNodeBlock;

var rowNodeBlockLoader_1 = __webpack_require__(220);

exports.RowNodeBlockLoader = rowNodeBlockLoader_1.RowNodeBlockLoader;

var paginationProxy_1 = __webpack_require__(53);

exports.PaginationProxy = paginationProxy_1.PaginationProxy;

var rowNodeCache_1 = __webpack_require__(165);

exports.RowNodeCache = rowNodeCache_1.RowNodeCache; //styling

var stylingService_1 = __webpack_require__(153);

exports.StylingService = stylingService_1.StylingService; // widgets

var agCheckbox_1 = __webpack_require__(113);

exports.AgCheckbox = agCheckbox_1.AgCheckbox;

var popupWindow_1 = __webpack_require__(226);

exports.PopupWindow = popupWindow_1.PopupWindow;

var popupMessageBox_1 = __webpack_require__(314);

exports.PopupMessageBox = popupMessageBox_1.PopupMessageBox;

var component_1 = __webpack_require__(22);

exports.Component = component_1.Component;

var popupComponent_1 = __webpack_require__(72);

exports.PopupComponent = popupComponent_1.PopupComponent;

var popupService_1 = __webpack_require__(54);

exports.PopupService = popupService_1.PopupService;

var touchListener_1 = __webpack_require__(92);

exports.TouchListener = touchListener_1.TouchListener; // exporter

var csvCreator_1 = __webpack_require__(138);

exports.CsvCreator = csvCreator_1.CsvCreator;
exports.BaseCreator = csvCreator_1.BaseCreator;

var downloader_1 = __webpack_require__(158);

exports.Downloader = downloader_1.Downloader;

var xmlFactory_1 = __webpack_require__(224);

exports.XmlFactory = xmlFactory_1.XmlFactory;

var gridSerializer_1 = __webpack_require__(103);

exports.BaseGridSerializingSession = gridSerializer_1.BaseGridSerializingSession;
exports.GridSerializer = gridSerializer_1.GridSerializer;

var gridSerializer_2 = __webpack_require__(103);

exports.RowType = gridSerializer_2.RowType;

var zipContainer_1 = __webpack_require__(225);

exports.ZipContainer = zipContainer_1.ZipContainer; // root

var baseFrameworkFactory_1 = __webpack_require__(223);

exports.BaseFrameworkFactory = baseFrameworkFactory_1.BaseFrameworkFactory;

var cellNavigationService_1 = __webpack_require__(143);

exports.CellNavigationService = cellNavigationService_1.CellNavigationService;

var alignedGridsService_1 = __webpack_require__(114);

exports.AlignedGridsService = alignedGridsService_1.AlignedGridsService;

var constants_1 = __webpack_require__(19);

exports.Constants = constants_1.Constants;

var grid_1 = __webpack_require__(160);

exports.Grid = grid_1.Grid;

var gridApi_1 = __webpack_require__(20);

exports.GridApi = gridApi_1.GridApi;

var eventKeys_1 = __webpack_require__(57);

exports.Events = eventKeys_1.Events;

var focusedCellController_1 = __webpack_require__(48);

exports.FocusedCellController = focusedCellController_1.FocusedCellController;

var functions_1 = __webpack_require__(315);

exports.defaultGroupComparator = functions_1.defaultGroupComparator;

var gridOptionsWrapper_1 = __webpack_require__(7);

exports.GridOptionsWrapper = gridOptionsWrapper_1.GridOptionsWrapper;

var eventService_1 = __webpack_require__(14);

exports.EventService = eventService_1.EventService;

var selectableService_1 = __webpack_require__(164);

exports.SelectableService = selectableService_1.SelectableService;

var gridCore_1 = __webpack_require__(212);

exports.GridCore = gridCore_1.GridCore;

var logger_1 = __webpack_require__(30);

exports.Logger = logger_1.Logger;

var selectionController_1 = __webpack_require__(44);

exports.SelectionController = selectionController_1.SelectionController;

var sortController_1 = __webpack_require__(49);

exports.SortController = sortController_1.SortController;

var templateService_1 = __webpack_require__(105);

exports.TemplateService = templateService_1.TemplateService;

var utils_1 = __webpack_require__(6);

exports.Utils = utils_1.Utils;
exports.NumberSequence = utils_1.NumberSequence;
exports._ = utils_1._;
exports.Promise = utils_1.Promise;

var valueService_1 = __webpack_require__(38);

exports.ValueService = valueService_1.ValueService;

var expressionService_1 = __webpack_require__(43);

exports.ExpressionService = expressionService_1.ExpressionService;

var logger_2 = __webpack_require__(30);

exports.LoggerFactory = logger_2.LoggerFactory;

var columnApi_1 = __webpack_require__(21);

exports.ColumnApi = columnApi_1.ColumnApi;

var frameworkComponentWrapper_1 = __webpack_require__(316);

exports.BaseComponentWrapper = frameworkComponentWrapper_1.BaseComponentWrapper;

var environment_1 = __webpack_require__(88);

exports.Environment = environment_1.Environment;

var tooltipManager_1 = __webpack_require__(154);

exports.TooltipManager = tooltipManager_1.TooltipManager;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(51)))

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});

var Events =
/** @class */
function () {
  function Events() {}
  /** Everything has changed with the columns. Either complete new set of columns set, or user called setState()*/


  Events.EVENT_COLUMN_EVERYTHING_CHANGED = 'columnEverythingChanged';
  /** User has set in new columns. */

  Events.EVENT_NEW_COLUMNS_LOADED = 'newColumnsLoaded';
  /** The pivot mode flag was changed */

  Events.EVENT_COLUMN_PIVOT_MODE_CHANGED = 'columnPivotModeChanged';
  /** A row group column was added, removed or order changed. */

  Events.EVENT_COLUMN_ROW_GROUP_CHANGED = 'columnRowGroupChanged';
  /** expandAll / collapseAll was called from the api. */

  Events.EVENT_EXPAND_COLLAPSE_ALL = 'expandOrCollapseAll';
  /** A pivot column was added, removed or order changed. */

  Events.EVENT_COLUMN_PIVOT_CHANGED = 'columnPivotChanged';
  /** The list of grid columns has changed. */

  Events.EVENT_GRID_COLUMNS_CHANGED = 'gridColumnsChanged';
  /** A value column was added, removed or agg function was changed. */

  Events.EVENT_COLUMN_VALUE_CHANGED = 'columnValueChanged';
  /** A column was moved */

  Events.EVENT_COLUMN_MOVED = 'columnMoved';
  /** One or more columns was shown / hidden */

  Events.EVENT_COLUMN_VISIBLE = 'columnVisible';
  /** One or more columns was pinned / unpinned*/

  Events.EVENT_COLUMN_PINNED = 'columnPinned';
  /** A column group was opened / closed */

  Events.EVENT_COLUMN_GROUP_OPENED = 'columnGroupOpened';
  /** One or more columns was resized. If just one, the column in the event is set. */

  Events.EVENT_COLUMN_RESIZED = 'columnResized';
  /** The list of displayed columns has changed, can result from columns open / close, column move, pivot, group, etc */

  Events.EVENT_DISPLAYED_COLUMNS_CHANGED = 'displayedColumnsChanged';
  /** The list of virtual columns has changed, results from viewport changing */

  Events.EVENT_VIRTUAL_COLUMNS_CHANGED = 'virtualColumnsChanged';
  /** A row group was opened / closed */

  Events.EVENT_ROW_GROUP_OPENED = 'rowGroupOpened';
  /** The client has set new data into the grid */

  Events.EVENT_ROW_DATA_CHANGED = 'rowDataChanged';
  /** The client has updated data for the grid */

  Events.EVENT_ROW_DATA_UPDATED = 'rowDataUpdated';
  /** The client has set new floating data into the grid */

  Events.EVENT_PINNED_ROW_DATA_CHANGED = 'pinnedRowDataChanged';
  /** Range selection has changed */

  Events.EVENT_RANGE_SELECTION_CHANGED = 'rangeSelectionChanged';
  /** For when the tool panel is shown / hidden */

  Events.EVENT_TOOL_PANEL_VISIBLE_CHANGED = 'toolPanelVisibleChanged';
  /** Model was updated - grid updates the drawn rows when this happens */

  Events.EVENT_MODEL_UPDATED = 'modelUpdated';
  Events.EVENT_PASTE_START = 'pasteStart';
  Events.EVENT_PASTE_END = 'pasteEnd';
  Events.EVENT_CELL_CLICKED = 'cellClicked';
  Events.EVENT_CELL_DOUBLE_CLICKED = 'cellDoubleClicked';
  Events.EVENT_CELL_MOUSE_DOWN = 'cellMouseDown';
  Events.EVENT_CELL_CONTEXT_MENU = 'cellContextMenu';
  Events.EVENT_CELL_VALUE_CHANGED = 'cellValueChanged';
  Events.EVENT_ROW_VALUE_CHANGED = 'rowValueChanged';
  Events.EVENT_CELL_FOCUSED = 'cellFocused';
  Events.EVENT_ROW_SELECTED = 'rowSelected';
  Events.EVENT_SELECTION_CHANGED = 'selectionChanged';
  Events.EVENT_CELL_KEY_DOWN = 'cellKeyDown';
  Events.EVENT_CELL_KEY_PRESS = 'cellKeyPress';
  Events.EVENT_CELL_MOUSE_OVER = 'cellMouseOver';
  Events.EVENT_CELL_MOUSE_OUT = 'cellMouseOut';
  /** 2 events for filtering. The grid LISTENS for filterChanged and afterFilterChanged */

  Events.EVENT_FILTER_CHANGED = 'filterChanged';
  /** Filter was change but not applied. Only useful if apply buttons are used in filters. */

  Events.EVENT_FILTER_MODIFIED = 'filterModified';
  Events.EVENT_FILTER_OPENED = 'filterOpened';
  Events.EVENT_SORT_CHANGED = 'sortChanged';
  /** A row was removed from the dom, for any reason. Use to clean up resources (if any) used by the row. */

  Events.EVENT_VIRTUAL_ROW_REMOVED = 'virtualRowRemoved';
  Events.EVENT_ROW_CLICKED = 'rowClicked';
  Events.EVENT_ROW_DOUBLE_CLICKED = 'rowDoubleClicked';
  /** Gets called once after the grid has finished initialising. */

  Events.EVENT_GRID_READY = 'gridReady';
  /** Width of height of the main grid div has changed. Grid listens for this and does layout of grid if it's
   * changed, so always filling the space it was given. */

  Events.EVENT_GRID_SIZE_CHANGED = 'gridSizeChanged';
  /** The indexes of the rows rendered has changed, eg user has scrolled to a new vertical position. */

  Events.EVENT_VIEWPORT_CHANGED = 'viewportChanged';
  /** Rows were rendered for the first time (ie on async data load). */

  Events.EVENT_FIRST_DATA_RENDERED = 'firstDataRendered';
  /** A column drag has started, either resizing a column or moving a column. */

  Events.EVENT_DRAG_STARTED = 'dragStarted';
  /** A column drag has stopped */

  Events.EVENT_DRAG_STOPPED = 'dragStopped';
  Events.EVENT_ROW_EDITING_STARTED = 'rowEditingStarted';
  Events.EVENT_ROW_EDITING_STOPPED = 'rowEditingStopped';
  Events.EVENT_CELL_EDITING_STARTED = 'cellEditingStarted';
  Events.EVENT_CELL_EDITING_STOPPED = 'cellEditingStopped';
  /** Main body of grid has scrolled, either horizontally or vertically */

  Events.EVENT_BODY_SCROLL = 'bodyScroll';
  Events.EVENT_ANIMATION_QUEUE_EMPTY = 'animationQueueEmpty';
  Events.EVENT_HEIGHT_SCALE_CHANGED = 'heightScaleChanged';
  /** The displayed page for pagination has changed. For example the data was filtered or sorted,
   * or the user has moved to a different page. */

  Events.EVENT_PAGINATION_CHANGED = 'paginationChanged';
  /** Only used by React, Angular 2+, Web Components, Aurelia and VueJS ag-Grid components
   * (not used if doing plain JavaScript or Angular 1.x). If the grid receives changes due
   * to bound properties, this event fires after the grid has finished processing the change. */

  Events.EVENT_COMPONENT_STATE_CHANGED = 'componentStateChanged';
  /** All items from here down are used internally by the grid, not intended for external use. */
  // not documented, either experimental, or we just don't want users using an depending on them

  Events.EVENT_BODY_HEIGHT_CHANGED = 'bodyHeightChanged';
  Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED = 'displayedColumnsWidthChanged';
  Events.EVENT_SCROLL_VISIBILITY_CHANGED = 'scrollVisibilityChanged';
  Events.EVENT_COLUMN_HOVER_CHANGED = 'columnHoverChanged';
  Events.EVENT_FLASH_CELLS = 'flashCells';
  Events.EVENT_ROW_DRAG_ENTER = 'rowDragEnter';
  Events.EVENT_ROW_DRAG_MOVE = 'rowDragMove';
  Events.EVENT_ROW_DRAG_LEAVE = 'rowDragLeave';
  Events.EVENT_ROW_DRAG_END = 'rowDragEnd'; // these are used for server side group and agg - only used by CS with Viewport Row Model - intention is
  // to design these better around server side functions and then release to general public when fully working with
  // all the row models.

  Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST = 'columnRowGroupChangeRequest';
  Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST = 'columnPivotChangeRequest';
  Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST = 'columnValueChangeRequest';
  Events.EVENT_COLUMN_AGG_FUNC_CHANGE_REQUEST = 'columnAggFuncChangeRequest';
  return Events;
}();

exports.Events = Events;

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var column_1 = __webpack_require__(24);

var eventService_1 = __webpack_require__(14);

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var columnApi_1 = __webpack_require__(21);

var gridApi_1 = __webpack_require__(20);

var ColumnGroup =
/** @class */
function () {
  function ColumnGroup(originalColumnGroup, groupId, instanceId, pinned) {
    // depends on the open/closed state of the group, only displaying columns are stored here
    this.displayedChildren = [];
    this.localEventService = new eventService_1.EventService();
    this.groupId = groupId;
    this.instanceId = instanceId;
    this.originalColumnGroup = originalColumnGroup;
    this.pinned = pinned;
  } // this is static, a it is used outside of this class


  ColumnGroup.createUniqueId = function (groupId, instanceId) {
    return groupId + '_' + instanceId;
  }; // as the user is adding and removing columns, the groups are recalculated.
  // this reset clears out all children, ready for children to be added again


  ColumnGroup.prototype.reset = function () {
    this.parent = null;
    this.children = null;
    this.displayedChildren = null;
  };

  ColumnGroup.prototype.getParent = function () {
    return this.parent;
  };

  ColumnGroup.prototype.setParent = function (parent) {
    this.parent = parent;
  };

  ColumnGroup.prototype.getUniqueId = function () {
    return ColumnGroup.createUniqueId(this.groupId, this.instanceId);
  };

  ColumnGroup.prototype.isEmptyGroup = function () {
    return this.displayedChildren.length === 0;
  };

  ColumnGroup.prototype.isMoving = function () {
    var allLeafColumns = this.getOriginalColumnGroup().getLeafColumns();

    if (!allLeafColumns || allLeafColumns.length === 0) {
      return false;
    }

    var allMoving = true;
    allLeafColumns.forEach(function (col) {
      if (!col.isMoving()) {
        allMoving = false;
      }
    });
    return allMoving;
  };

  ColumnGroup.prototype.checkLeft = function () {
    // first get all children to setLeft, as it impacts our decision below
    this.displayedChildren.forEach(function (child) {
      if (child instanceof ColumnGroup) {
        child.checkLeft();
      }
    }); // set our left based on first displayed column

    if (this.displayedChildren.length > 0) {
      if (this.gridOptionsWrapper.isEnableRtl()) {
        var lastChild = this.displayedChildren[this.displayedChildren.length - 1];
        var lastChildLeft = lastChild.getLeft();
        this.setLeft(lastChildLeft);
      } else {
        var firstChildLeft = this.displayedChildren[0].getLeft();
        this.setLeft(firstChildLeft);
      }
    } else {
      // this should never happen, as if we have no displayed columns, then
      // this groups should not even exist.
      this.setLeft(null);
    }
  };

  ColumnGroup.prototype.getLeft = function () {
    return this.left;
  };

  ColumnGroup.prototype.getOldLeft = function () {
    return this.oldLeft;
  };

  ColumnGroup.prototype.setLeft = function (left) {
    this.oldLeft = left;

    if (this.left !== left) {
      this.left = left;
      this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_LEFT_CHANGED));
    }
  };

  ColumnGroup.prototype.getPinned = function () {
    return this.pinned;
  };

  ColumnGroup.prototype.createAgEvent = function (type) {
    return {
      type: type
    };
  };

  ColumnGroup.prototype.addEventListener = function (eventType, listener) {
    this.localEventService.addEventListener(eventType, listener);
  };

  ColumnGroup.prototype.removeEventListener = function (eventType, listener) {
    this.localEventService.removeEventListener(eventType, listener);
  };

  ColumnGroup.prototype.getGroupId = function () {
    return this.groupId;
  };

  ColumnGroup.prototype.getInstanceId = function () {
    return this.instanceId;
  };

  ColumnGroup.prototype.isChildInThisGroupDeepSearch = function (wantedChild) {
    var result = false;
    this.children.forEach(function (foundChild) {
      if (wantedChild === foundChild) {
        result = true;
      }

      if (foundChild instanceof ColumnGroup) {
        if (foundChild.isChildInThisGroupDeepSearch(wantedChild)) {
          result = true;
        }
      }
    });
    return result;
  };

  ColumnGroup.prototype.getActualWidth = function () {
    var groupActualWidth = 0;

    if (this.displayedChildren) {
      this.displayedChildren.forEach(function (child) {
        groupActualWidth += child.getActualWidth();
      });
    }

    return groupActualWidth;
  };

  ColumnGroup.prototype.isResizable = function () {
    if (!this.displayedChildren) {
      return false;
    } // if at least one child is resizable, then the group is resizable


    var result = false;
    this.displayedChildren.forEach(function (child) {
      if (child.isResizable()) {
        result = true;
      }
    });
    return result;
  };

  ColumnGroup.prototype.getMinWidth = function () {
    var result = 0;
    this.displayedChildren.forEach(function (groupChild) {
      result += groupChild.getMinWidth();
    });
    return result;
  };

  ColumnGroup.prototype.addChild = function (child) {
    if (!this.children) {
      this.children = [];
    }

    this.children.push(child);
  };

  ColumnGroup.prototype.getDisplayedChildren = function () {
    return this.displayedChildren;
  };

  ColumnGroup.prototype.getLeafColumns = function () {
    var result = [];
    this.addLeafColumns(result);
    return result;
  };

  ColumnGroup.prototype.getDisplayedLeafColumns = function () {
    var result = [];
    this.addDisplayedLeafColumns(result);
    return result;
  }; // why two methods here doing the same thing?


  ColumnGroup.prototype.getDefinition = function () {
    return this.originalColumnGroup.getColGroupDef();
  };

  ColumnGroup.prototype.getColGroupDef = function () {
    return this.originalColumnGroup.getColGroupDef();
  };

  ColumnGroup.prototype.isPadding = function () {
    return this.originalColumnGroup.isPadding();
  };

  ColumnGroup.prototype.isExpandable = function () {
    return this.originalColumnGroup.isExpandable();
  };

  ColumnGroup.prototype.isExpanded = function () {
    return this.originalColumnGroup.isExpanded();
  };

  ColumnGroup.prototype.setExpanded = function (expanded) {
    this.originalColumnGroup.setExpanded(expanded);
  };

  ColumnGroup.prototype.addDisplayedLeafColumns = function (leafColumns) {
    this.displayedChildren.forEach(function (child) {
      if (child instanceof column_1.Column) {
        leafColumns.push(child);
      } else if (child instanceof ColumnGroup) {
        child.addDisplayedLeafColumns(leafColumns);
      }
    });
  };

  ColumnGroup.prototype.addLeafColumns = function (leafColumns) {
    this.children.forEach(function (child) {
      if (child instanceof column_1.Column) {
        leafColumns.push(child);
      } else if (child instanceof ColumnGroup) {
        child.addLeafColumns(leafColumns);
      }
    });
  };

  ColumnGroup.prototype.getChildren = function () {
    return this.children;
  };

  ColumnGroup.prototype.getColumnGroupShow = function () {
    return this.originalColumnGroup.getColumnGroupShow();
  };

  ColumnGroup.prototype.getOriginalColumnGroup = function () {
    return this.originalColumnGroup;
  };

  ColumnGroup.prototype.calculateDisplayedColumns = function () {
    var _this = this; // clear out last time we calculated


    this.displayedChildren = [];
    var topLevelGroup = this; // find the column group that is controlling expandable. this is relevant when we have padding (empty)
    // groups, where the expandable is actually the first parent that is not a padding group.

    if (this.isPadding()) {
      while (topLevelGroup.getParent() && topLevelGroup.isPadding()) {
        topLevelGroup = topLevelGroup.getParent();
      }
    }

    var isExpandable = topLevelGroup.originalColumnGroup.isExpandable(); // it not expandable, everything is visible

    if (!isExpandable) {
      this.displayedChildren = this.children;
    } else {
      // Add cols based on columnGroupShow
      // Note - the below also adds padding groups, these are always added because they never have
      // colDef.columnGroupShow set.
      this.children.forEach(function (abstractColumn) {
        var headerGroupShow = abstractColumn.getColumnGroupShow();

        switch (headerGroupShow) {
          case ColumnGroup.HEADER_GROUP_SHOW_OPEN:
            // when set to open, only show col if group is open
            if (topLevelGroup.originalColumnGroup.isExpanded()) {
              _this.displayedChildren.push(abstractColumn);
            }

            break;

          case ColumnGroup.HEADER_GROUP_SHOW_CLOSED:
            // when set to open, only show col if group is open
            if (!topLevelGroup.originalColumnGroup.isExpanded()) {
              _this.displayedChildren.push(abstractColumn);
            }

            break;

          default:
            // default is always show the column
            _this.displayedChildren.push(abstractColumn);

            break;
        }
      });
    }

    this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED));
  };

  ColumnGroup.HEADER_GROUP_SHOW_OPEN = 'open';
  ColumnGroup.HEADER_GROUP_SHOW_CLOSED = 'closed';
  ColumnGroup.EVENT_LEFT_CHANGED = 'leftChanged';
  ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED = 'displayedChildrenChanged';

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], ColumnGroup.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('columnApi'), __metadata("design:type", columnApi_1.ColumnApi)], ColumnGroup.prototype, "columnApi", void 0);

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], ColumnGroup.prototype, "gridApi", void 0);

  return ColumnGroup;
}();

exports.ColumnGroup = ColumnGroup;

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var gridOptionsWrapper_1 = __webpack_require__(7);

var rowNode_1 = __webpack_require__(39);

var context_1 = __webpack_require__(2);

var eventService_1 = __webpack_require__(14);

var events_1 = __webpack_require__(18);

var constants_1 = __webpack_require__(19);

var columnApi_1 = __webpack_require__(21);

var gridApi_1 = __webpack_require__(20);

var utils_1 = __webpack_require__(6);

var PinnedRowModel =
/** @class */
function () {
  function PinnedRowModel() {}

  PinnedRowModel.prototype.init = function () {
    this.setPinnedTopRowData(this.gridOptionsWrapper.getPinnedTopRowData());
    this.setPinnedBottomRowData(this.gridOptionsWrapper.getPinnedBottomRowData());
  };

  PinnedRowModel.prototype.isEmpty = function (floating) {
    var rows = floating === constants_1.Constants.PINNED_TOP ? this.pinnedTopRows : this.pinnedBottomRows;
    return utils_1._.missingOrEmpty(rows);
  };

  PinnedRowModel.prototype.isRowsToRender = function (floating) {
    return !this.isEmpty(floating);
  };

  PinnedRowModel.prototype.getRowAtPixel = function (pixel, floating) {
    var rows = floating === constants_1.Constants.PINNED_TOP ? this.pinnedTopRows : this.pinnedBottomRows;

    if (utils_1._.missingOrEmpty(rows)) {
      return 0; // this should never happen, just in case, 0 is graceful failure
    }

    for (var i = 0; i < rows.length; i++) {
      var rowNode = rows[i];
      var rowTopPixel = rowNode.rowTop + rowNode.rowHeight - 1; // only need to range check against the top pixel, as we are going through the list
      // in order, first row to hit the pixel wins

      if (rowTopPixel >= pixel) {
        return i;
      }
    }

    return rows.length - 1;
  };

  PinnedRowModel.prototype.setPinnedTopRowData = function (rowData) {
    this.pinnedTopRows = this.createNodesFromData(rowData, true);
    var event = {
      type: events_1.Events.EVENT_PINNED_ROW_DATA_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(event);
  };

  PinnedRowModel.prototype.setPinnedBottomRowData = function (rowData) {
    this.pinnedBottomRows = this.createNodesFromData(rowData, false);
    var event = {
      type: events_1.Events.EVENT_PINNED_ROW_DATA_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(event);
  };

  PinnedRowModel.prototype.createNodesFromData = function (allData, isTop) {
    var _this = this;

    var rowNodes = [];

    if (allData) {
      var nextRowTop_1 = 0;
      allData.forEach(function (dataItem, index) {
        var rowNode = new rowNode_1.RowNode();

        _this.context.wireBean(rowNode);

        rowNode.data = dataItem;
        rowNode.rowPinned = isTop ? constants_1.Constants.PINNED_TOP : constants_1.Constants.PINNED_BOTTOM;
        rowNode.setRowTop(nextRowTop_1);
        rowNode.setRowHeight(_this.gridOptionsWrapper.getRowHeightForNode(rowNode).height);
        rowNode.setRowIndex(index);
        nextRowTop_1 += rowNode.rowHeight;
        rowNodes.push(rowNode);
      });
    }

    return rowNodes;
  };

  PinnedRowModel.prototype.getPinnedTopRowData = function () {
    return this.pinnedTopRows;
  };

  PinnedRowModel.prototype.getPinnedBottomRowData = function () {
    return this.pinnedBottomRows;
  };

  PinnedRowModel.prototype.getPinnedTopTotalHeight = function () {
    return this.getTotalHeight(this.pinnedTopRows);
  };

  PinnedRowModel.prototype.getPinnedTopRowCount = function () {
    return this.pinnedTopRows ? this.pinnedTopRows.length : 0;
  };

  PinnedRowModel.prototype.getPinnedBottomRowCount = function () {
    return this.pinnedBottomRows ? this.pinnedBottomRows.length : 0;
  };

  PinnedRowModel.prototype.getPinnedTopRow = function (index) {
    return this.pinnedTopRows[index];
  };

  PinnedRowModel.prototype.getPinnedBottomRow = function (index) {
    return this.pinnedBottomRows[index];
  };

  PinnedRowModel.prototype.forEachPinnedTopRow = function (callback) {
    if (utils_1._.missingOrEmpty(this.pinnedTopRows)) {
      return;
    }

    this.pinnedTopRows.forEach(callback);
  };

  PinnedRowModel.prototype.forEachPinnedBottomRow = function (callback) {
    if (utils_1._.missingOrEmpty(this.pinnedBottomRows)) {
      return;
    }

    this.pinnedBottomRows.forEach(callback);
  };

  PinnedRowModel.prototype.getPinnedBottomTotalHeight = function () {
    return this.getTotalHeight(this.pinnedBottomRows);
  };

  PinnedRowModel.prototype.getTotalHeight = function (rowNodes) {
    if (!rowNodes || rowNodes.length === 0) {
      return 0;
    } else {
      var lastNode = rowNodes[rowNodes.length - 1];
      return lastNode.rowTop + lastNode.rowHeight;
    }
  };

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], PinnedRowModel.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], PinnedRowModel.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('context'), __metadata("design:type", context_1.Context)], PinnedRowModel.prototype, "context", void 0);

  __decorate([context_1.Autowired('columnApi'), __metadata("design:type", columnApi_1.ColumnApi)], PinnedRowModel.prototype, "columnApi", void 0);

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], PinnedRowModel.prototype, "gridApi", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], PinnedRowModel.prototype, "init", null);

  PinnedRowModel = __decorate([context_1.Bean('pinnedRowModel')], PinnedRowModel);
  return PinnedRowModel;
}();

exports.PinnedRowModel = PinnedRowModel;

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var columnApi_1 = __webpack_require__(21);

var columnController_1 = __webpack_require__(17);

var gridApi_1 = __webpack_require__(20);

var gridOptionsWrapper_1 = __webpack_require__(7);

var expressionService_1 = __webpack_require__(43);

var rowRenderer_1 = __webpack_require__(37);

var templateService_1 = __webpack_require__(105);

var valueService_1 = __webpack_require__(38);

var eventService_1 = __webpack_require__(14);

var columnAnimationService_1 = __webpack_require__(107);

var focusedCellController_1 = __webpack_require__(48);

var cellRendererFactory_1 = __webpack_require__(108);

var popupService_1 = __webpack_require__(54);

var valueFormatterService_1 = __webpack_require__(90);

var stylingService_1 = __webpack_require__(153);

var columnHoverService_1 = __webpack_require__(93);

var paginationProxy_1 = __webpack_require__(53);

var animationFrameService_1 = __webpack_require__(73);

var userComponentFactory_1 = __webpack_require__(35);

var dragAndDropService_1 = __webpack_require__(34);

var sortController_1 = __webpack_require__(49);

var filterManager_1 = __webpack_require__(40);

var maxDivHeightScaler_1 = __webpack_require__(110);

var tooltipManager_1 = __webpack_require__(154);
/** Using the IoC has a slight performance consideration, which is no problem most of the
 * time, unless we are trashing objects - which is the case when scrolling and rowComp
 * and cellComp. So for performance reasons, RowComp and CellComp do not get autowired
 * with the IoC. Instead they get passed this object which is all the beans the RowComp
 * and CellComp need. Not autowiring all the cells gives performance improvement. */


var Beans =
/** @class */
function () {
  function Beans() {}

  Beans.prototype.registerGridComp = function (gridPanel) {
    this.gridPanel = gridPanel;
  };

  Beans.prototype.postConstruct = function () {
    this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();
  };

  __decorate([context_1.Autowired('paginationProxy'), __metadata("design:type", paginationProxy_1.PaginationProxy)], Beans.prototype, "paginationProxy", void 0);

  __decorate([context_1.Autowired('context'), __metadata("design:type", context_1.Context)], Beans.prototype, "context", void 0);

  __decorate([context_1.Autowired('columnApi'), __metadata("design:type", columnApi_1.ColumnApi)], Beans.prototype, "columnApi", void 0);

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], Beans.prototype, "gridApi", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], Beans.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('expressionService'), __metadata("design:type", expressionService_1.ExpressionService)], Beans.prototype, "expressionService", void 0);

  __decorate([context_1.Autowired('rowRenderer'), __metadata("design:type", rowRenderer_1.RowRenderer)], Beans.prototype, "rowRenderer", void 0);

  __decorate([context_1.Autowired('$compile'), __metadata("design:type", Object)], Beans.prototype, "$compile", void 0);

  __decorate([context_1.Autowired('templateService'), __metadata("design:type", templateService_1.TemplateService)], Beans.prototype, "templateService", void 0);

  __decorate([context_1.Autowired('valueService'), __metadata("design:type", valueService_1.ValueService)], Beans.prototype, "valueService", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], Beans.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], Beans.prototype, "columnController", void 0);

  __decorate([context_1.Autowired('columnAnimationService'), __metadata("design:type", columnAnimationService_1.ColumnAnimationService)], Beans.prototype, "columnAnimationService", void 0);

  __decorate([context_1.Optional('rangeController'), __metadata("design:type", Object)], Beans.prototype, "rangeController", void 0);

  __decorate([context_1.Autowired('focusedCellController'), __metadata("design:type", focusedCellController_1.FocusedCellController)], Beans.prototype, "focusedCellController", void 0);

  __decorate([context_1.Optional('contextMenuFactory'), __metadata("design:type", Object)], Beans.prototype, "contextMenuFactory", void 0);

  __decorate([context_1.Autowired('cellRendererFactory'), __metadata("design:type", cellRendererFactory_1.CellRendererFactory)], Beans.prototype, "cellRendererFactory", void 0);

  __decorate([context_1.Autowired('popupService'), __metadata("design:type", popupService_1.PopupService)], Beans.prototype, "popupService", void 0);

  __decorate([context_1.Autowired('valueFormatterService'), __metadata("design:type", valueFormatterService_1.ValueFormatterService)], Beans.prototype, "valueFormatterService", void 0);

  __decorate([context_1.Autowired('stylingService'), __metadata("design:type", stylingService_1.StylingService)], Beans.prototype, "stylingService", void 0);

  __decorate([context_1.Autowired('columnHoverService'), __metadata("design:type", columnHoverService_1.ColumnHoverService)], Beans.prototype, "columnHoverService", void 0);

  __decorate([context_1.Autowired('enterprise'), __metadata("design:type", Boolean)], Beans.prototype, "enterprise", void 0);

  __decorate([context_1.Autowired('userComponentFactory'), __metadata("design:type", userComponentFactory_1.UserComponentFactory)], Beans.prototype, "userComponentFactory", void 0);

  __decorate([context_1.Autowired('animationFrameService'), __metadata("design:type", animationFrameService_1.AnimationFrameService)], Beans.prototype, "taskQueue", void 0);

  __decorate([context_1.Autowired('dragAndDropService'), __metadata("design:type", dragAndDropService_1.DragAndDropService)], Beans.prototype, "dragAndDropService", void 0);

  __decorate([context_1.Autowired('sortController'), __metadata("design:type", sortController_1.SortController)], Beans.prototype, "sortController", void 0);

  __decorate([context_1.Autowired('filterManager'), __metadata("design:type", filterManager_1.FilterManager)], Beans.prototype, "filterManager", void 0);

  __decorate([context_1.Autowired('maxDivHeightScaler'), __metadata("design:type", maxDivHeightScaler_1.MaxDivHeightScaler)], Beans.prototype, "maxDivHeightScaler", void 0);

  __decorate([context_1.Autowired('tooltipManager'), __metadata("design:type", tooltipManager_1.TooltipManager)], Beans.prototype, "tooltipManager", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], Beans.prototype, "postConstruct", null);

  Beans = __decorate([context_1.Bean('beans')], Beans);
  return Beans;
}();

exports.Beans = Beans;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(27);

exports.__esModule = true;
exports.default = SchemaType;

var _extends2 = _interopRequireDefault(__webpack_require__(94));

var _has = _interopRequireDefault(__webpack_require__(74));

var _cloneDeepWith = _interopRequireDefault(__webpack_require__(355));

var _toArray2 = _interopRequireDefault(__webpack_require__(394));

var _locale = __webpack_require__(63);

var _Condition = _interopRequireDefault(__webpack_require__(401));

var _runValidations = _interopRequireDefault(__webpack_require__(181));

var _merge = _interopRequireDefault(__webpack_require__(402));

var _isSchema = _interopRequireDefault(__webpack_require__(64));

var _isAbsent = _interopRequireDefault(__webpack_require__(97));

var _createValidation = _interopRequireDefault(__webpack_require__(403));

var _printValue = _interopRequireDefault(__webpack_require__(124));

var _Reference = _interopRequireDefault(__webpack_require__(98));

var _reach = __webpack_require__(263);

var notEmpty = function notEmpty(value) {
  return !(0, _isAbsent.default)(value);
};

var RefSet =
/*#__PURE__*/
function () {
  function RefSet() {
    this.list = new Set();
    this.refs = new Map();
  }

  var _proto = RefSet.prototype;

  _proto.toArray = function toArray() {
    return (0, _toArray2.default)(this.list).concat((0, _toArray2.default)(this.refs.values()));
  };

  _proto.add = function add(value) {
    _Reference.default.isRef(value) ? this.refs.set(value.key, value) : this.list.add(value);
  };

  _proto.delete = function _delete(value) {
    _Reference.default.isRef(value) ? this.refs.delete(value.key, value) : this.list.delete(value);
  };

  _proto.has = function has(value, resolve) {
    if (this.list.has(value)) return true;
    var item,
        values = this.refs.values();

    while (item = values.next(), !item.done) {
      if (resolve(item.value) === value) return true;
    }

    return false;
  };

  return RefSet;
}();

function SchemaType(options) {
  var _this = this;

  if (options === void 0) {
    options = {};
  }

  if (!(this instanceof SchemaType)) return new SchemaType();
  this._deps = [];
  this._conditions = [];
  this._options = {
    abortEarly: true,
    recursive: true
  };
  this._exclusive = Object.create(null);
  this._whitelist = new RefSet();
  this._blacklist = new RefSet();
  this.tests = [];
  this.transforms = [];
  this.withMutation(function () {
    _this.typeError(_locale.mixed.notType);
  });
  if ((0, _has.default)(options, 'default')) this._defaultDefault = options.default;
  this._type = options.type || 'mixed';
}

var proto = SchemaType.prototype = {
  __isYupSchema__: true,
  constructor: SchemaType,
  clone: function clone() {
    var _this2 = this;

    if (this._mutate) return this; // if the nested value is a schema we can skip cloning, since
    // they are already immutable

    return (0, _cloneDeepWith.default)(this, function (value) {
      if ((0, _isSchema.default)(value) && value !== _this2) return value;
    });
  },
  label: function label(_label) {
    var next = this.clone();
    next._label = _label;
    return next;
  },
  meta: function meta(obj) {
    if (arguments.length === 0) return this._meta;
    var next = this.clone();
    next._meta = (0, _extends2.default)(next._meta || {}, obj);
    return next;
  },
  withMutation: function withMutation(fn) {
    this._mutate = true;
    var result = fn(this);
    this._mutate = false;
    return result;
  },
  concat: function concat(schema) {
    if (!schema) return this;
    if (schema._type !== this._type && this._type !== 'mixed') throw new TypeError("You cannot `concat()` schema's of different types: " + this._type + " and " + schema._type);
    var cloned = this.clone();
    var next = (0, _merge.default)(this.clone(), schema.clone()); // undefined isn't merged over, but is a valid value for default

    if ((0, _has.default)(schema, '_default')) next._default = schema._default;
    next.tests = cloned.tests;
    next._exclusive = cloned._exclusive; // manually add the new tests to ensure
    // the deduping logic is consistent

    schema.tests.forEach(function (fn) {
      next = next.test(fn.OPTIONS);
    });
    next._type = schema._type;
    return next;
  },
  isType: function isType(v) {
    if (this._nullable && v === null) return true;
    return !this._typeCheck || this._typeCheck(v);
  },
  resolve: function resolve(_ref) {
    var context = _ref.context,
        parent = _ref.parent;

    if (this._conditions.length) {
      return this._conditions.reduce(function (schema, match) {
        return match.resolve(schema, match.getValue(parent, context));
      }, this);
    }

    return this;
  },
  cast: function cast(value, options) {
    if (options === void 0) {
      options = {};
    }

    var resolvedSchema = this.resolve(options);

    var result = resolvedSchema._cast(value, options);

    if (value !== undefined && options.assert !== false && resolvedSchema.isType(result) !== true) {
      var formattedValue = (0, _printValue.default)(value);
      var formattedResult = (0, _printValue.default)(result);
      throw new TypeError("The value of " + (options.path || 'field') + " could not be cast to a value " + ("that satisfies the schema type: \"" + resolvedSchema._type + "\". \n\n") + ("attempted value: " + formattedValue + " \n") + (formattedResult !== formattedValue ? "result of cast: " + formattedResult : ''));
    }

    return result;
  },
  _cast: function _cast(rawValue) {
    var _this3 = this;

    var value = rawValue === undefined ? rawValue : this.transforms.reduce(function (value, fn) {
      return fn.call(_this3, value, rawValue);
    }, rawValue);

    if (value === undefined && (0, _has.default)(this, '_default')) {
      value = this.default();
    }

    return value;
  },
  _validate: function _validate(_value, options) {
    var _this4 = this;

    if (options === void 0) {
      options = {};
    }

    var value = _value;
    var originalValue = options.originalValue != null ? options.originalValue : _value;

    var isStrict = this._option('strict', options);

    var endEarly = this._option('abortEarly', options);

    var sync = options.sync;
    var path = options.path;
    var label = this._label;

    if (!isStrict) {
      value = this._cast(value, (0, _extends2.default)({
        assert: false
      }, options));
    } // value is cast, we can check if it meets type requirements


    var validationParams = {
      value: value,
      path: path,
      schema: this,
      options: options,
      label: label,
      originalValue: originalValue,
      sync: sync
    };
    var initialTests = [];
    if (this._typeError) initialTests.push(this._typeError(validationParams));
    if (this._whitelistError) initialTests.push(this._whitelistError(validationParams));
    if (this._blacklistError) initialTests.push(this._blacklistError(validationParams));
    return (0, _runValidations.default)({
      validations: initialTests,
      endEarly: endEarly,
      value: value,
      path: path,
      sync: sync
    }).then(function (value) {
      return (0, _runValidations.default)({
        path: path,
        sync: sync,
        value: value,
        endEarly: endEarly,
        validations: _this4.tests.map(function (fn) {
          return fn(validationParams);
        })
      });
    });
  },
  validate: function validate(value, options) {
    if (options === void 0) {
      options = {};
    }

    var schema = this.resolve(options);
    return schema._validate(value, options);
  },
  validateSync: function validateSync(value, options) {
    if (options === void 0) {
      options = {};
    }

    var schema = this.resolve(options);
    var result, err;

    schema._validate(value, (0, _extends2.default)({}, options, {
      sync: true
    })).then(function (r) {
      return result = r;
    }).catch(function (e) {
      return err = e;
    });

    if (err) throw err;
    return result;
  },
  isValid: function isValid(value, options) {
    return this.validate(value, options).then(function () {
      return true;
    }).catch(function (err) {
      if (err.name === 'ValidationError') return false;
      throw err;
    });
  },
  isValidSync: function isValidSync(value, options) {
    try {
      this.validateSync(value, (0, _extends2.default)({}, options));
      return true;
    } catch (err) {
      if (err.name === 'ValidationError') return false;
      throw err;
    }
  },
  getDefault: function getDefault(options) {
    if (options === void 0) {
      options = {};
    }

    var schema = this.resolve(options);
    return schema.default();
  },
  default: function _default(def) {
    if (arguments.length === 0) {
      var defaultValue = (0, _has.default)(this, '_default') ? this._default : this._defaultDefault;
      return typeof defaultValue === 'function' ? defaultValue.call(this) : (0, _cloneDeepWith.default)(defaultValue);
    }

    var next = this.clone();
    next._default = def;
    return next;
  },
  strict: function strict() {
    var next = this.clone();
    next._options.strict = true;
    return next;
  },
  required: function required(message) {
    if (message === void 0) {
      message = _locale.mixed.required;
    }

    return this.test({
      message: message,
      name: 'required',
      test: notEmpty
    });
  },
  notRequired: function notRequired() {
    var next = this.clone();
    next.tests = next.tests.filter(function (test) {
      return test.OPTIONS.name !== 'required';
    });
    return next;
  },
  nullable: function nullable(value) {
    var next = this.clone();
    next._nullable = value === false ? false : true;
    return next;
  },
  transform: function transform(fn) {
    var next = this.clone();
    next.transforms.push(fn);
    return next;
  },

  /**
   * Adds a test function to the schema's queue of tests.
   * tests can be exclusive or non-exclusive.
   *
   * - exclusive tests, will replace any existing tests of the same name.
   * - non-exclusive: can be stacked
   *
   * If a non-exclusive test is added to a schema with an exclusive test of the same name
   * the exclusive test is removed and further tests of the same name will be stacked.
   *
   * If an exclusive test is added to a schema with non-exclusive tests of the same name
   * the previous tests are removed and further tests of the same name will replace each other.
   */
  test: function test() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var opts = args[0];

    if (args.length > 1) {
      var name = args[0],
          message = args[1],
          test = args[2];

      if (test == null) {
        test = message;
        message = _locale.mixed.default;
      }

      opts = {
        name: name,
        test: test,
        message: message,
        exclusive: false
      };
    }

    if (typeof opts.test !== 'function') throw new TypeError('`test` is a required parameters');
    var next = this.clone();
    var validate = (0, _createValidation.default)(opts);
    var isExclusive = opts.exclusive || opts.name && next._exclusive[opts.name] === true;

    if (opts.exclusive && !opts.name) {
      throw new TypeError('Exclusive tests must provide a unique `name` identifying the test');
    }

    next._exclusive[opts.name] = !!opts.exclusive;
    next.tests = next.tests.filter(function (fn) {
      if (fn.OPTIONS.name === opts.name) {
        if (isExclusive) return false;
        if (fn.OPTIONS.test === validate.OPTIONS.test) return false;
      }

      return true;
    });
    next.tests.push(validate);
    return next;
  },
  when: function when(keys, options) {
    var next = this.clone(),
        deps = [].concat(keys).map(function (key) {
      return new _Reference.default(key);
    });
    deps.forEach(function (dep) {
      if (!dep.isContext) next._deps.push(dep.key);
    });

    next._conditions.push(new _Condition.default(deps, options));

    return next;
  },
  typeError: function typeError(message) {
    var next = this.clone();
    next._typeError = (0, _createValidation.default)({
      message: message,
      name: 'typeError',
      test: function test(value) {
        if (value !== undefined && !this.schema.isType(value)) return this.createError({
          params: {
            type: this.schema._type
          }
        });
        return true;
      }
    });
    return next;
  },
  oneOf: function oneOf(enums, message) {
    if (message === void 0) {
      message = _locale.mixed.oneOf;
    }

    var next = this.clone();
    enums.forEach(function (val) {
      next._whitelist.add(val);

      next._blacklist.delete(val);
    });
    next._whitelistError = (0, _createValidation.default)({
      message: message,
      name: 'oneOf',
      test: function test(value) {
        if (value === undefined) return true;
        var valids = this.schema._whitelist;
        return valids.has(value, this.resolve) ? true : this.createError({
          params: {
            values: valids.toArray().join(', ')
          }
        });
      }
    });
    return next;
  },
  notOneOf: function notOneOf(enums, message) {
    if (message === void 0) {
      message = _locale.mixed.notOneOf;
    }

    var next = this.clone();
    enums.forEach(function (val) {
      next._blacklist.add(val);

      next._whitelist.delete(val);
    });
    next._blacklistError = (0, _createValidation.default)({
      message: message,
      name: 'notOneOf',
      test: function test(value) {
        var invalids = this.schema._blacklist;
        if (invalids.has(value, this.resolve)) return this.createError({
          params: {
            values: invalids.toArray().join(', ')
          }
        });
        return true;
      }
    });
    return next;
  },
  strip: function strip(_strip) {
    if (_strip === void 0) {
      _strip = true;
    }

    var next = this.clone();
    next._strip = _strip;
    return next;
  },
  _option: function _option(key, overrides) {
    return (0, _has.default)(overrides, key) ? overrides[key] : this._options[key];
  },
  describe: function describe() {
    var next = this.clone();
    return {
      type: next._type,
      meta: next._meta,
      label: next._label,
      tests: next.tests.map(function (fn) {
        return {
          name: fn.OPTIONS.name,
          params: fn.OPTIONS.params
        };
      }).filter(function (n, idx, list) {
        return list.findIndex(function (c) {
          return c.name === n.name;
        }) === idx;
      })
    };
  }
};
var _arr = ['validate', 'validateSync'];

var _loop = function _loop() {
  var method = _arr[_i];

  proto[method + "At"] = function (path, value, options) {
    if (options === void 0) {
      options = {};
    }

    var _getIn = (0, _reach.getIn)(this, path, value, options.context),
        parent = _getIn.parent,
        parentPath = _getIn.parentPath,
        schema = _getIn.schema;

    return schema[method](parent && parent[parentPath], (0, _extends2.default)({}, options, {
      parent: parent,
      path: path
    }));
  };
};

for (var _i = 0; _i < _arr.length; _i++) {
  _loop();
}

var _arr2 = ['equals', 'is'];

for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
  var alias = _arr2[_i2];
  proto[alias] = proto.oneOf;
}

var _arr3 = ['not', 'nope'];

for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
  var _alias = _arr3[_i3];
  proto[_alias] = proto.notOneOf;
}

module.exports = exports["default"];

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsNative = __webpack_require__(335),
    getValue = __webpack_require__(338);
/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */


function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(27);

exports.__esModule = true;
exports.default = exports.array = exports.object = exports.boolean = exports.date = exports.number = exports.string = exports.mixed = void 0;

var _printValue = _interopRequireDefault(__webpack_require__(124));

var mixed = {
  default: '${path} is invalid',
  required: '${path} is a required field',
  oneOf: '${path} must be one of the following values: ${values}',
  notOneOf: '${path} must not be one of the following values: ${values}',
  notType: function notType(_ref) {
    var path = _ref.path,
        type = _ref.type,
        value = _ref.value,
        originalValue = _ref.originalValue;
    var isCast = originalValue != null && originalValue !== value;
    var msg = path + " must be a `" + type + "` type, " + ("but the final value was: `" + (0, _printValue.default)(value, true) + "`") + (isCast ? " (cast from the value `" + (0, _printValue.default)(originalValue, true) + "`)." : '.');

    if (value === null) {
      msg += "\n If \"null\" is intended as an empty value be sure to mark the schema as `.nullable()`";
    }

    return msg;
  }
};
exports.mixed = mixed;
var string = {
  length: '${path} must be exactly ${length} characters',
  min: '${path} must be at least ${min} characters',
  max: '${path} must be at most ${max} characters',
  matches: '${path} must match the following: "${regex}"',
  email: '${path} must be a valid email',
  url: '${path} must be a valid URL',
  trim: '${path} must be a trimmed string',
  lowercase: '${path} must be a lowercase string',
  uppercase: '${path} must be a upper case string'
};
exports.string = string;
var number = {
  min: '${path} must be greater than or equal to ${min}',
  max: '${path} must be less than or equal to ${max}',
  lessThan: '${path} must be less than ${less}',
  moreThan: '${path} must be greater than ${more}',
  notEqual: '${path} must be not equal to ${notEqual}',
  positive: '${path} must be a positive number',
  negative: '${path} must be a negative number',
  integer: '${path} must be an integer'
};
exports.number = number;
var date = {
  min: '${path} field must be later than ${min}',
  max: '${path} field must be at earlier than ${max}'
};
exports.date = date;
var boolean = {};
exports.boolean = boolean;
var object = {
  noUnknown: '${path} field cannot have keys not specified in the object shape'
};
exports.object = object;
var array = {
  min: '${path} field must have at least ${min} items',
  max: '${path} field must have less than or equal to ${max} items'
};
exports.array = array;
var _default = {
  mixed: mixed,
  string: string,
  number: number,
  date: date,
  object: object,
  array: array,
  boolean: boolean
};
exports.default = _default;

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _default = function _default(obj) {
  return obj && obj.__isYupSchema__;
};

exports.default = _default;
module.exports = exports["default"];

/***/ }),
/* 65 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return shallowEqual; });
function shallowEqual(objA, objB, compare, compareContext) {
  var compareResult = compare ? compare.call(compareContext, objA, objB) : void 0;

  if (compareResult !== void 0) {
    return !!compareResult;
  }

  if (objA === objB) {
    return true;
  }

  if (typeof objA !== 'object' || !objA || typeof objB !== 'object' || !objB) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB); // Test for A's keys different from B.

  for (var idx = 0; idx < keysA.length; idx++) {
    var key = keysA[idx];

    if (!bHasOwnProperty(key)) {
      return false;
    }

    var valueA = objA[key];
    var valueB = objB[key];
    compareResult = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;

    if (compareResult === false || compareResult === void 0 && valueA !== valueB) {
      return false;
    }
  }

  return true;
}



/***/ }),
/* 66 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var NativeTypes_namespaceObject = {};
__webpack_require__.r(NativeTypes_namespaceObject);
__webpack_require__.d(NativeTypes_namespaceObject, "FILE", function() { return FILE; });
__webpack_require__.d(NativeTypes_namespaceObject, "URL", function() { return URL; });
__webpack_require__.d(NativeTypes_namespaceObject, "TEXT", function() { return TEXT; });

// CONCATENATED MODULE: ./node_modules/react-dnd-html5-backend/dist/esm/utils/js_utils.js
// cheap lodash replacements
function memoize(fn) {
  var result = null;

  var memoized = function memoized() {
    if (result == null) {
      result = fn();
    }

    return result;
  };

  return memoized;
}
/**
 * drop-in replacement for _.without
 */

function without(items, item) {
  return items.filter(function (i) {
    return i !== item;
  });
}
function union(itemsA, itemsB) {
  var set = new Set();

  var insertItem = function insertItem(item) {
    return set.add(item);
  };

  itemsA.forEach(insertItem);
  itemsB.forEach(insertItem);
  var result = [];
  set.forEach(function (key) {
    return result.push(key);
  });
  return result;
}
// CONCATENATED MODULE: ./node_modules/react-dnd-html5-backend/dist/esm/EnterLeaveCounter.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}



var EnterLeaveCounter_EnterLeaveCounter =
/*#__PURE__*/
function () {
  function EnterLeaveCounter(isNodeInDocument) {
    _classCallCheck(this, EnterLeaveCounter);

    this.entered = [];
    this.isNodeInDocument = isNodeInDocument;
  }

  _createClass(EnterLeaveCounter, [{
    key: "enter",
    value: function enter(enteringNode) {
      var _this = this;

      var previousLength = this.entered.length;

      var isNodeEntered = function isNodeEntered(node) {
        return _this.isNodeInDocument(node) && (!node.contains || node.contains(enteringNode));
      };

      this.entered = union(this.entered.filter(isNodeEntered), [enteringNode]);
      return previousLength === 0 && this.entered.length > 0;
    }
  }, {
    key: "leave",
    value: function leave(leavingNode) {
      var previousLength = this.entered.length;
      this.entered = without(this.entered.filter(this.isNodeInDocument), leavingNode);
      return previousLength > 0 && this.entered.length === 0;
    }
  }, {
    key: "reset",
    value: function reset() {
      this.entered = [];
    }
  }]);

  return EnterLeaveCounter;
}();


// CONCATENATED MODULE: ./node_modules/react-dnd-html5-backend/dist/esm/BrowserDetector.js

var isFirefox = memoize(function () {
  return /firefox/i.test(navigator.userAgent);
});
var isSafari = memoize(function () {
  return Boolean(window.safari);
});
// CONCATENATED MODULE: ./node_modules/react-dnd-html5-backend/dist/esm/MonotonicInterpolant.js
function MonotonicInterpolant_classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function MonotonicInterpolant_defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function MonotonicInterpolant_createClass(Constructor, protoProps, staticProps) {
  if (protoProps) MonotonicInterpolant_defineProperties(Constructor.prototype, protoProps);
  if (staticProps) MonotonicInterpolant_defineProperties(Constructor, staticProps);
  return Constructor;
}

var MonotonicInterpolant =
/*#__PURE__*/
function () {
  function MonotonicInterpolant(xs, ys) {
    MonotonicInterpolant_classCallCheck(this, MonotonicInterpolant);

    var length = xs.length; // Rearrange xs and ys so that xs is sorted

    var indexes = [];

    for (var i = 0; i < length; i++) {
      indexes.push(i);
    }

    indexes.sort(function (a, b) {
      return xs[a] < xs[b] ? -1 : 1;
    }); // Get consecutive differences and slopes

    var dys = [];
    var dxs = [];
    var ms = [];
    var dx;
    var dy;

    for (var _i = 0; _i < length - 1; _i++) {
      dx = xs[_i + 1] - xs[_i];
      dy = ys[_i + 1] - ys[_i];
      dxs.push(dx);
      dys.push(dy);
      ms.push(dy / dx);
    } // Get degree-1 coefficients


    var c1s = [ms[0]];

    for (var _i2 = 0; _i2 < dxs.length - 1; _i2++) {
      var m2 = ms[_i2];
      var mNext = ms[_i2 + 1];

      if (m2 * mNext <= 0) {
        c1s.push(0);
      } else {
        dx = dxs[_i2];
        var dxNext = dxs[_i2 + 1];
        var common = dx + dxNext;
        c1s.push(3 * common / ((common + dxNext) / m2 + (common + dx) / mNext));
      }
    }

    c1s.push(ms[ms.length - 1]); // Get degree-2 and degree-3 coefficients

    var c2s = [];
    var c3s = [];
    var m;

    for (var _i3 = 0; _i3 < c1s.length - 1; _i3++) {
      m = ms[_i3];
      var c1 = c1s[_i3];
      var invDx = 1 / dxs[_i3];

      var _common = c1 + c1s[_i3 + 1] - m - m;

      c2s.push((m - c1 - _common) * invDx);
      c3s.push(_common * invDx * invDx);
    }

    this.xs = xs;
    this.ys = ys;
    this.c1s = c1s;
    this.c2s = c2s;
    this.c3s = c3s;
  }

  MonotonicInterpolant_createClass(MonotonicInterpolant, [{
    key: "interpolate",
    value: function interpolate(x) {
      var xs = this.xs,
          ys = this.ys,
          c1s = this.c1s,
          c2s = this.c2s,
          c3s = this.c3s; // The rightmost point in the dataset should give an exact result

      var i = xs.length - 1;

      if (x === xs[i]) {
        return ys[i];
      } // Search for the interval x is in, returning the corresponding y if x is one of the original xs


      var low = 0;
      var high = c3s.length - 1;
      var mid;

      while (low <= high) {
        mid = Math.floor(0.5 * (low + high));
        var xHere = xs[mid];

        if (xHere < x) {
          low = mid + 1;
        } else if (xHere > x) {
          high = mid - 1;
        } else {
          return ys[mid];
        }
      }

      i = Math.max(0, high); // Interpolate

      var diff = x - xs[i];
      var diffSq = diff * diff;
      return ys[i] + c1s[i] * diff + c2s[i] * diffSq + c3s[i] * diff * diffSq;
    }
  }]);

  return MonotonicInterpolant;
}();


// CONCATENATED MODULE: ./node_modules/react-dnd-html5-backend/dist/esm/OffsetUtils.js


var ELEMENT_NODE = 1;
function getNodeClientOffset(node) {
  var el = node.nodeType === ELEMENT_NODE ? node : node.parentElement;

  if (!el) {
    return null;
  }

  var _el$getBoundingClient = el.getBoundingClientRect(),
      top = _el$getBoundingClient.top,
      left = _el$getBoundingClient.left;

  return {
    x: left,
    y: top
  };
}
function getEventClientOffset(e) {
  return {
    x: e.clientX,
    y: e.clientY
  };
}

function isImageNode(node) {
  return node.nodeName === 'IMG' && (isFirefox() || !document.documentElement.contains(node));
}

function getDragPreviewSize(isImage, dragPreview, sourceWidth, sourceHeight) {
  var dragPreviewWidth = isImage ? dragPreview.width : sourceWidth;
  var dragPreviewHeight = isImage ? dragPreview.height : sourceHeight; // Work around @2x coordinate discrepancies in browsers

  if (isSafari() && isImage) {
    dragPreviewHeight /= window.devicePixelRatio;
    dragPreviewWidth /= window.devicePixelRatio;
  }

  return {
    dragPreviewWidth: dragPreviewWidth,
    dragPreviewHeight: dragPreviewHeight
  };
}

function getDragPreviewOffset(sourceNode, dragPreview, clientOffset, anchorPoint, offsetPoint) {
  // The browsers will use the image intrinsic size under different conditions.
  // Firefox only cares if it's an image, but WebKit also wants it to be detached.
  var isImage = isImageNode(dragPreview);
  var dragPreviewNode = isImage ? sourceNode : dragPreview;
  var dragPreviewNodeOffsetFromClient = getNodeClientOffset(dragPreviewNode);
  var offsetFromDragPreview = {
    x: clientOffset.x - dragPreviewNodeOffsetFromClient.x,
    y: clientOffset.y - dragPreviewNodeOffsetFromClient.y
  };
  var sourceWidth = sourceNode.offsetWidth,
      sourceHeight = sourceNode.offsetHeight;
  var anchorX = anchorPoint.anchorX,
      anchorY = anchorPoint.anchorY;

  var _getDragPreviewSize = getDragPreviewSize(isImage, dragPreview, sourceWidth, sourceHeight),
      dragPreviewWidth = _getDragPreviewSize.dragPreviewWidth,
      dragPreviewHeight = _getDragPreviewSize.dragPreviewHeight;

  var calculateYOffset = function calculateYOffset() {
    var interpolantY = new MonotonicInterpolant([0, 0.5, 1], [// Dock to the top
    offsetFromDragPreview.y, // Align at the center
    offsetFromDragPreview.y / sourceHeight * dragPreviewHeight, // Dock to the bottom
    offsetFromDragPreview.y + dragPreviewHeight - sourceHeight]);
    var y = interpolantY.interpolate(anchorY); // Work around Safari 8 positioning bug

    if (isSafari() && isImage) {
      // We'll have to wait for @3x to see if this is entirely correct
      y += (window.devicePixelRatio - 1) * dragPreviewHeight;
    }

    return y;
  };

  var calculateXOffset = function calculateXOffset() {
    // Interpolate coordinates depending on anchor point
    // If you know a simpler way to do this, let me know
    var interpolantX = new MonotonicInterpolant([0, 0.5, 1], [// Dock to the left
    offsetFromDragPreview.x, // Align at the center
    offsetFromDragPreview.x / sourceWidth * dragPreviewWidth, // Dock to the right
    offsetFromDragPreview.x + dragPreviewWidth - sourceWidth]);
    return interpolantX.interpolate(anchorX);
  }; // Force offsets if specified in the options.


  var offsetX = offsetPoint.offsetX,
      offsetY = offsetPoint.offsetY;
  var isManualOffsetX = offsetX === 0 || offsetX;
  var isManualOffsetY = offsetY === 0 || offsetY;
  return {
    x: isManualOffsetX ? offsetX : calculateXOffset(),
    y: isManualOffsetY ? offsetY : calculateYOffset()
  };
}
// CONCATENATED MODULE: ./node_modules/react-dnd-html5-backend/dist/esm/NativeTypes.js
var FILE = '__NATIVE_FILE__';
var URL = '__NATIVE_URL__';
var TEXT = '__NATIVE_TEXT__';
// CONCATENATED MODULE: ./node_modules/react-dnd-html5-backend/dist/esm/NativeDragSources/getDataFromDataTransfer.js
function getDataFromDataTransfer(dataTransfer, typesToTry, defaultValue) {
  var result = typesToTry.reduce(function (resultSoFar, typeToTry) {
    return resultSoFar || dataTransfer.getData(typeToTry);
  }, '');
  return result != null ? result : defaultValue;
}
// CONCATENATED MODULE: ./node_modules/react-dnd-html5-backend/dist/esm/NativeDragSources/nativeTypesConfig.js
var _nativeTypesConfig;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}



var nativeTypesConfig = (_nativeTypesConfig = {}, _defineProperty(_nativeTypesConfig, FILE, {
  exposeProperties: {
    files: function files(dataTransfer) {
      return Array.prototype.slice.call(dataTransfer.files);
    },
    items: function items(dataTransfer) {
      return dataTransfer.items;
    }
  },
  matchesTypes: ['Files']
}), _defineProperty(_nativeTypesConfig, URL, {
  exposeProperties: {
    urls: function urls(dataTransfer, matchesTypes) {
      return getDataFromDataTransfer(dataTransfer, matchesTypes, '').split('\n');
    }
  },
  matchesTypes: ['Url', 'text/uri-list']
}), _defineProperty(_nativeTypesConfig, TEXT, {
  exposeProperties: {
    text: function text(dataTransfer, matchesTypes) {
      return getDataFromDataTransfer(dataTransfer, matchesTypes, '');
    }
  },
  matchesTypes: ['Text', 'text/plain']
}), _nativeTypesConfig);
// CONCATENATED MODULE: ./node_modules/react-dnd-html5-backend/dist/esm/NativeDragSources/NativeDragSource.js
function NativeDragSource_classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function NativeDragSource_defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function NativeDragSource_createClass(Constructor, protoProps, staticProps) {
  if (protoProps) NativeDragSource_defineProperties(Constructor.prototype, protoProps);
  if (staticProps) NativeDragSource_defineProperties(Constructor, staticProps);
  return Constructor;
}

var NativeDragSource =
/*#__PURE__*/
function () {
  function NativeDragSource(config) {
    NativeDragSource_classCallCheck(this, NativeDragSource);

    this.config = config;
    this.item = {};
    this.initializeExposedProperties();
  }

  NativeDragSource_createClass(NativeDragSource, [{
    key: "initializeExposedProperties",
    value: function initializeExposedProperties() {
      var _this = this;

      Object.keys(this.config.exposeProperties).forEach(function (property) {
        Object.defineProperty(_this.item, property, {
          configurable: true,
          enumerable: true,
          get: function get() {
            // eslint-disable-next-line no-console
            console.warn("Browser doesn't allow reading \"".concat(property, "\" until the drop event."));
            return null;
          }
        });
      });
    }
  }, {
    key: "loadDataTransfer",
    value: function loadDataTransfer(dataTransfer) {
      var _this2 = this;

      if (dataTransfer) {
        var newProperties = {};
        Object.keys(this.config.exposeProperties).forEach(function (property) {
          newProperties[property] = {
            value: _this2.config.exposeProperties[property](dataTransfer, _this2.config.matchesTypes),
            configurable: true,
            enumerable: true
          };
        });
        Object.defineProperties(this.item, newProperties);
      }
    }
  }, {
    key: "canDrag",
    value: function canDrag() {
      return true;
    }
  }, {
    key: "beginDrag",
    value: function beginDrag() {
      return this.item;
    }
  }, {
    key: "isDragging",
    value: function isDragging(monitor, handle) {
      return handle === monitor.getSourceId();
    }
  }, {
    key: "endDrag",
    value: function endDrag() {// empty
    }
  }]);

  return NativeDragSource;
}();
// CONCATENATED MODULE: ./node_modules/react-dnd-html5-backend/dist/esm/NativeDragSources/index.js


function createNativeDragSource(type, dataTransfer) {
  var result = new NativeDragSource(nativeTypesConfig[type]);
  result.loadDataTransfer(dataTransfer);
  return result;
}
function matchNativeItemType(dataTransfer) {
  if (!dataTransfer) {
    return null;
  }

  var dataTransferTypes = Array.prototype.slice.call(dataTransfer.types || []);
  return Object.keys(nativeTypesConfig).filter(function (nativeItemType) {
    var matchesTypes = nativeTypesConfig[nativeItemType].matchesTypes;
    return matchesTypes.some(function (t) {
      return dataTransferTypes.indexOf(t) > -1;
    });
  })[0] || null;
}
// CONCATENATED MODULE: ./node_modules/react-dnd-html5-backend/dist/esm/OptionsReader.js
function OptionsReader_classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function OptionsReader_defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function OptionsReader_createClass(Constructor, protoProps, staticProps) {
  if (protoProps) OptionsReader_defineProperties(Constructor.prototype, protoProps);
  if (staticProps) OptionsReader_defineProperties(Constructor, staticProps);
  return Constructor;
}

var OptionsReader =
/*#__PURE__*/
function () {
  function OptionsReader(globalContext) {
    OptionsReader_classCallCheck(this, OptionsReader);

    this.globalContext = globalContext;
  }

  OptionsReader_createClass(OptionsReader, [{
    key: "window",
    get: function get() {
      if (this.globalContext) {
        return this.globalContext;
      } else if (typeof window !== 'undefined') {
        return window;
      }

      return undefined;
    }
  }, {
    key: "document",
    get: function get() {
      if (this.window) {
        return this.window.document;
      }

      return undefined;
    }
  }]);

  return OptionsReader;
}();
// CONCATENATED MODULE: ./node_modules/react-dnd-html5-backend/dist/esm/HTML5Backend.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        HTML5Backend_defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function HTML5Backend_defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function HTML5Backend_classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function HTML5Backend_defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function HTML5Backend_createClass(Constructor, protoProps, staticProps) {
  if (protoProps) HTML5Backend_defineProperties(Constructor.prototype, protoProps);
  if (staticProps) HTML5Backend_defineProperties(Constructor, staticProps);
  return Constructor;
}








var HTML5Backend_HTML5Backend =
/*#__PURE__*/
function () {
  function HTML5Backend(manager, globalContext) {
    var _this = this;

    HTML5Backend_classCallCheck(this, HTML5Backend);

    this.sourcePreviewNodes = new Map();
    this.sourcePreviewNodeOptions = new Map();
    this.sourceNodes = new Map();
    this.sourceNodeOptions = new Map();
    this.dragStartSourceIds = null;
    this.dropTargetIds = [];
    this.dragEnterTargetIds = [];
    this.currentNativeSource = null;
    this.currentNativeHandle = null;
    this.currentDragSourceNode = null;
    this.altKeyPressed = false;
    this.mouseMoveTimeoutTimer = null;
    this.asyncEndDragFrameId = null;
    this.dragOverTargetIds = null;

    this.getSourceClientOffset = function (sourceId) {
      return getNodeClientOffset(_this.sourceNodes.get(sourceId));
    };

    this.endDragNativeItem = function () {
      if (!_this.isDraggingNativeItem()) {
        return;
      }

      _this.actions.endDrag();

      _this.registry.removeSource(_this.currentNativeHandle);

      _this.currentNativeHandle = null;
      _this.currentNativeSource = null;
    };

    this.isNodeInDocument = function (node) {
      // Check the node either in the main document or in the current context
      return _this.document && _this.document.body && document.body.contains(node);
    };

    this.endDragIfSourceWasRemovedFromDOM = function () {
      var node = _this.currentDragSourceNode;

      if (_this.isNodeInDocument(node)) {
        return;
      }

      if (_this.clearCurrentDragSourceNode()) {
        _this.actions.endDrag();
      }
    };

    this.handleTopDragStartCapture = function () {
      _this.clearCurrentDragSourceNode();

      _this.dragStartSourceIds = [];
    };

    this.handleTopDragStart = function (e) {
      if (e.defaultPrevented) {
        return;
      }

      var dragStartSourceIds = _this.dragStartSourceIds;
      _this.dragStartSourceIds = null;
      var clientOffset = getEventClientOffset(e); // Avoid crashing if we missed a drop event or our previous drag died

      if (_this.monitor.isDragging()) {
        _this.actions.endDrag();
      } // Don't publish the source just yet (see why below)


      _this.actions.beginDrag(dragStartSourceIds || [], {
        publishSource: false,
        getSourceClientOffset: _this.getSourceClientOffset,
        clientOffset: clientOffset
      });

      var dataTransfer = e.dataTransfer;
      var nativeType = matchNativeItemType(dataTransfer);

      if (_this.monitor.isDragging()) {
        if (dataTransfer && typeof dataTransfer.setDragImage === 'function') {
          // Use custom drag image if user specifies it.
          // If child drag source refuses drag but parent agrees,
          // use parent's node as drag image. Neither works in IE though.
          var sourceId = _this.monitor.getSourceId();

          var sourceNode = _this.sourceNodes.get(sourceId);

          var dragPreview = _this.sourcePreviewNodes.get(sourceId) || sourceNode;

          if (dragPreview) {
            var _this$getCurrentSourc = _this.getCurrentSourcePreviewNodeOptions(),
                anchorX = _this$getCurrentSourc.anchorX,
                anchorY = _this$getCurrentSourc.anchorY,
                offsetX = _this$getCurrentSourc.offsetX,
                offsetY = _this$getCurrentSourc.offsetY;

            var anchorPoint = {
              anchorX: anchorX,
              anchorY: anchorY
            };
            var offsetPoint = {
              offsetX: offsetX,
              offsetY: offsetY
            };
            var dragPreviewOffset = getDragPreviewOffset(sourceNode, dragPreview, clientOffset, anchorPoint, offsetPoint);
            dataTransfer.setDragImage(dragPreview, dragPreviewOffset.x, dragPreviewOffset.y);
          }
        }

        try {
          // Firefox won't drag without setting data
          dataTransfer.setData('application/json', {});
        } catch (err) {} // IE doesn't support MIME types in setData
        // Store drag source node so we can check whether
        // it is removed from DOM and trigger endDrag manually.


        _this.setCurrentDragSourceNode(e.target); // Now we are ready to publish the drag source.. or are we not?


        var _this$getCurrentSourc2 = _this.getCurrentSourcePreviewNodeOptions(),
            captureDraggingState = _this$getCurrentSourc2.captureDraggingState;

        if (!captureDraggingState) {
          // Usually we want to publish it in the next tick so that browser
          // is able to screenshot the current (not yet dragging) state.
          //
          // It also neatly avoids a situation where render() returns null
          // in the same tick for the source element, and browser freaks out.
          setTimeout(function () {
            return _this.actions.publishDragSource();
          }, 0);
        } else {
          // In some cases the user may want to override this behavior, e.g.
          // to work around IE not supporting custom drag previews.
          //
          // When using a custom drag layer, the only way to prevent
          // the default drag preview from drawing in IE is to screenshot
          // the dragging state in which the node itself has zero opacity
          // and height. In this case, though, returning null from render()
          // will abruptly end the dragging, which is not obvious.
          //
          // This is the reason such behavior is strictly opt-in.
          _this.actions.publishDragSource();
        }
      } else if (nativeType) {
        // A native item (such as URL) dragged from inside the document
        _this.beginDragNativeItem(nativeType);
      } else if (dataTransfer && !dataTransfer.types && (e.target && !e.target.hasAttribute || !e.target.hasAttribute('draggable'))) {
        // Looks like a Safari bug: dataTransfer.types is null, but there was no draggable.
        // Just let it drag. It's a native type (URL or text) and will be picked up in
        // dragenter handler.
        return;
      } else {
        // If by this time no drag source reacted, tell browser not to drag.
        e.preventDefault();
      }
    };

    this.handleTopDragEndCapture = function () {
      if (_this.clearCurrentDragSourceNode()) {
        // Firefox can dispatch this event in an infinite loop
        // if dragend handler does something like showing an alert.
        // Only proceed if we have not handled it already.
        _this.actions.endDrag();
      }
    };

    this.handleTopDragEnterCapture = function (e) {
      _this.dragEnterTargetIds = [];

      var isFirstEnter = _this.enterLeaveCounter.enter(e.target);

      if (!isFirstEnter || _this.monitor.isDragging()) {
        return;
      }

      var dataTransfer = e.dataTransfer;
      var nativeType = matchNativeItemType(dataTransfer);

      if (nativeType) {
        // A native item (such as file or URL) dragged from outside the document
        _this.beginDragNativeItem(nativeType, dataTransfer);
      }
    };

    this.handleTopDragEnter = function (e) {
      var dragEnterTargetIds = _this.dragEnterTargetIds;
      _this.dragEnterTargetIds = [];

      if (!_this.monitor.isDragging()) {
        // This is probably a native item type we don't understand.
        return;
      }

      _this.altKeyPressed = e.altKey;

      if (!isFirefox()) {
        // Don't emit hover in `dragenter` on Firefox due to an edge case.
        // If the target changes position as the result of `dragenter`, Firefox
        // will still happily dispatch `dragover` despite target being no longer
        // there. The easy solution is to only fire `hover` in `dragover` on FF.
        _this.actions.hover(dragEnterTargetIds, {
          clientOffset: getEventClientOffset(e)
        });
      }

      var canDrop = dragEnterTargetIds.some(function (targetId) {
        return _this.monitor.canDropOnTarget(targetId);
      });

      if (canDrop) {
        // IE requires this to fire dragover events
        e.preventDefault();

        if (e.dataTransfer) {
          e.dataTransfer.dropEffect = _this.getCurrentDropEffect();
        }
      }
    };

    this.handleTopDragOverCapture = function () {
      _this.dragOverTargetIds = [];
    };

    this.handleTopDragOver = function (e) {
      var dragOverTargetIds = _this.dragOverTargetIds;
      _this.dragOverTargetIds = [];

      if (!_this.monitor.isDragging()) {
        // This is probably a native item type we don't understand.
        // Prevent default "drop and blow away the whole document" action.
        e.preventDefault();

        if (e.dataTransfer) {
          e.dataTransfer.dropEffect = 'none';
        }

        return;
      }

      _this.altKeyPressed = e.altKey;

      _this.actions.hover(dragOverTargetIds || [], {
        clientOffset: getEventClientOffset(e)
      });

      var canDrop = (dragOverTargetIds || []).some(function (targetId) {
        return _this.monitor.canDropOnTarget(targetId);
      });

      if (canDrop) {
        // Show user-specified drop effect.
        e.preventDefault();

        if (e.dataTransfer) {
          e.dataTransfer.dropEffect = _this.getCurrentDropEffect();
        }
      } else if (_this.isDraggingNativeItem()) {
        // Don't show a nice cursor but still prevent default
        // "drop and blow away the whole document" action.
        e.preventDefault();
      } else {
        e.preventDefault();

        if (e.dataTransfer) {
          e.dataTransfer.dropEffect = 'none';
        }
      }
    };

    this.handleTopDragLeaveCapture = function (e) {
      if (_this.isDraggingNativeItem()) {
        e.preventDefault();
      }

      var isLastLeave = _this.enterLeaveCounter.leave(e.target);

      if (!isLastLeave) {
        return;
      }

      if (_this.isDraggingNativeItem()) {
        _this.endDragNativeItem();
      }
    };

    this.handleTopDropCapture = function (e) {
      _this.dropTargetIds = [];
      e.preventDefault();

      if (_this.isDraggingNativeItem()) {
        _this.currentNativeSource.loadDataTransfer(e.dataTransfer);
      }

      _this.enterLeaveCounter.reset();
    };

    this.handleTopDrop = function (e) {
      var dropTargetIds = _this.dropTargetIds;
      _this.dropTargetIds = [];

      _this.actions.hover(dropTargetIds, {
        clientOffset: getEventClientOffset(e)
      });

      _this.actions.drop({
        dropEffect: _this.getCurrentDropEffect()
      });

      if (_this.isDraggingNativeItem()) {
        _this.endDragNativeItem();
      } else {
        _this.endDragIfSourceWasRemovedFromDOM();
      }
    };

    this.handleSelectStart = function (e) {
      var target = e.target; // Only IE requires us to explicitly say
      // we want drag drop operation to start

      if (typeof target.dragDrop !== 'function') {
        return;
      } // Inputs and textareas should be selectable


      if (target.tagName === 'INPUT' || target.tagName === 'SELECT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {
        return;
      } // For other targets, ask IE
      // to enable drag and drop


      e.preventDefault();
      target.dragDrop();
    };

    this.options = new OptionsReader(globalContext);
    this.actions = manager.getActions();
    this.monitor = manager.getMonitor();
    this.registry = manager.getRegistry();
    this.enterLeaveCounter = new EnterLeaveCounter_EnterLeaveCounter(this.isNodeInDocument);
  } // public for test


  HTML5Backend_createClass(HTML5Backend, [{
    key: "setup",
    value: function setup() {
      if (this.window === undefined) {
        return;
      }

      if (this.window.__isReactDndBackendSetUp) {
        throw new Error('Cannot have two HTML5 backends at the same time.');
      }

      this.window.__isReactDndBackendSetUp = true;
      this.addEventListeners(this.window);
    }
  }, {
    key: "teardown",
    value: function teardown() {
      if (this.window === undefined) {
        return;
      }

      this.window.__isReactDndBackendSetUp = false;
      this.removeEventListeners(this.window);
      this.clearCurrentDragSourceNode();

      if (this.asyncEndDragFrameId) {
        this.window.cancelAnimationFrame(this.asyncEndDragFrameId);
      }
    }
  }, {
    key: "connectDragPreview",
    value: function connectDragPreview(sourceId, node, options) {
      var _this2 = this;

      this.sourcePreviewNodeOptions.set(sourceId, options);
      this.sourcePreviewNodes.set(sourceId, node);
      return function () {
        _this2.sourcePreviewNodes.delete(sourceId);

        _this2.sourcePreviewNodeOptions.delete(sourceId);
      };
    }
  }, {
    key: "connectDragSource",
    value: function connectDragSource(sourceId, node, options) {
      var _this3 = this;

      this.sourceNodes.set(sourceId, node);
      this.sourceNodeOptions.set(sourceId, options);

      var handleDragStart = function handleDragStart(e) {
        return _this3.handleDragStart(e, sourceId);
      };

      var handleSelectStart = function handleSelectStart(e) {
        return _this3.handleSelectStart(e);
      };

      node.setAttribute('draggable', 'true');
      node.addEventListener('dragstart', handleDragStart);
      node.addEventListener('selectstart', handleSelectStart);
      return function () {
        _this3.sourceNodes.delete(sourceId);

        _this3.sourceNodeOptions.delete(sourceId);

        node.removeEventListener('dragstart', handleDragStart);
        node.removeEventListener('selectstart', handleSelectStart);
        node.setAttribute('draggable', 'false');
      };
    }
  }, {
    key: "connectDropTarget",
    value: function connectDropTarget(targetId, node) {
      var _this4 = this;

      var handleDragEnter = function handleDragEnter(e) {
        return _this4.handleDragEnter(e, targetId);
      };

      var handleDragOver = function handleDragOver(e) {
        return _this4.handleDragOver(e, targetId);
      };

      var handleDrop = function handleDrop(e) {
        return _this4.handleDrop(e, targetId);
      };

      node.addEventListener('dragenter', handleDragEnter);
      node.addEventListener('dragover', handleDragOver);
      node.addEventListener('drop', handleDrop);
      return function () {
        node.removeEventListener('dragenter', handleDragEnter);
        node.removeEventListener('dragover', handleDragOver);
        node.removeEventListener('drop', handleDrop);
      };
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners(target) {
      // SSR Fix (https://github.com/react-dnd/react-dnd/pull/813
      if (!target.addEventListener) {
        return;
      }

      target.addEventListener('dragstart', this.handleTopDragStart);
      target.addEventListener('dragstart', this.handleTopDragStartCapture, true);
      target.addEventListener('dragend', this.handleTopDragEndCapture, true);
      target.addEventListener('dragenter', this.handleTopDragEnter);
      target.addEventListener('dragenter', this.handleTopDragEnterCapture, true);
      target.addEventListener('dragleave', this.handleTopDragLeaveCapture, true);
      target.addEventListener('dragover', this.handleTopDragOver);
      target.addEventListener('dragover', this.handleTopDragOverCapture, true);
      target.addEventListener('drop', this.handleTopDrop);
      target.addEventListener('drop', this.handleTopDropCapture, true);
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners(target) {
      // SSR Fix (https://github.com/react-dnd/react-dnd/pull/813
      if (!target.removeEventListener) {
        return;
      }

      target.removeEventListener('dragstart', this.handleTopDragStart);
      target.removeEventListener('dragstart', this.handleTopDragStartCapture, true);
      target.removeEventListener('dragend', this.handleTopDragEndCapture, true);
      target.removeEventListener('dragenter', this.handleTopDragEnter);
      target.removeEventListener('dragenter', this.handleTopDragEnterCapture, true);
      target.removeEventListener('dragleave', this.handleTopDragLeaveCapture, true);
      target.removeEventListener('dragover', this.handleTopDragOver);
      target.removeEventListener('dragover', this.handleTopDragOverCapture, true);
      target.removeEventListener('drop', this.handleTopDrop);
      target.removeEventListener('drop', this.handleTopDropCapture, true);
    }
  }, {
    key: "getCurrentSourceNodeOptions",
    value: function getCurrentSourceNodeOptions() {
      var sourceId = this.monitor.getSourceId();
      var sourceNodeOptions = this.sourceNodeOptions.get(sourceId);
      return _objectSpread({
        dropEffect: this.altKeyPressed ? 'copy' : 'move'
      }, sourceNodeOptions || {});
    }
  }, {
    key: "getCurrentDropEffect",
    value: function getCurrentDropEffect() {
      if (this.isDraggingNativeItem()) {
        // It makes more sense to default to 'copy' for native resources
        return 'copy';
      }

      return this.getCurrentSourceNodeOptions().dropEffect;
    }
  }, {
    key: "getCurrentSourcePreviewNodeOptions",
    value: function getCurrentSourcePreviewNodeOptions() {
      var sourceId = this.monitor.getSourceId();
      var sourcePreviewNodeOptions = this.sourcePreviewNodeOptions.get(sourceId);
      return _objectSpread({
        anchorX: 0.5,
        anchorY: 0.5,
        captureDraggingState: false
      }, sourcePreviewNodeOptions || {});
    }
  }, {
    key: "isDraggingNativeItem",
    value: function isDraggingNativeItem() {
      var itemType = this.monitor.getItemType();
      return Object.keys(NativeTypes_namespaceObject).some(function (key) {
        return NativeTypes_namespaceObject[key] === itemType;
      });
    }
  }, {
    key: "beginDragNativeItem",
    value: function beginDragNativeItem(type, dataTransfer) {
      this.clearCurrentDragSourceNode();
      this.currentNativeSource = createNativeDragSource(type, dataTransfer);
      this.currentNativeHandle = this.registry.addSource(type, this.currentNativeSource);
      this.actions.beginDrag([this.currentNativeHandle]);
    }
  }, {
    key: "setCurrentDragSourceNode",
    value: function setCurrentDragSourceNode(node) {
      var _this5 = this;

      this.clearCurrentDragSourceNode();
      this.currentDragSourceNode = node; // A timeout of > 0 is necessary to resolve Firefox issue referenced
      // See:
      //   * https://github.com/react-dnd/react-dnd/pull/928
      //   * https://github.com/react-dnd/react-dnd/issues/869

      var MOUSE_MOVE_TIMEOUT = 1000; // Receiving a mouse event in the middle of a dragging operation
      // means it has ended and the drag source node disappeared from DOM,
      // so the browser didn't dispatch the dragend event.
      //
      // We need to wait before we start listening for mousemove events.
      // This is needed because the drag preview needs to be drawn or else it fires an 'mousemove' event
      // immediately in some browsers.
      //
      // See:
      //   * https://github.com/react-dnd/react-dnd/pull/928
      //   * https://github.com/react-dnd/react-dnd/issues/869
      //

      this.mouseMoveTimeoutTimer = setTimeout(function () {
        return _this5.window && _this5.window.addEventListener('mousemove', _this5.endDragIfSourceWasRemovedFromDOM, true);
      }, MOUSE_MOVE_TIMEOUT);
    }
  }, {
    key: "clearCurrentDragSourceNode",
    value: function clearCurrentDragSourceNode() {
      if (this.currentDragSourceNode) {
        this.currentDragSourceNode = null;

        if (this.window) {
          this.window.clearTimeout(this.mouseMoveTimeoutTimer || undefined);
          this.window.removeEventListener('mousemove', this.endDragIfSourceWasRemovedFromDOM, true);
        }

        this.mouseMoveTimeoutTimer = null;
        return true;
      }

      return false;
    }
  }, {
    key: "handleDragStart",
    value: function handleDragStart(e, sourceId) {
      if (e.defaultPrevented) {
        return;
      }

      if (!this.dragStartSourceIds) {
        this.dragStartSourceIds = [];
      }

      this.dragStartSourceIds.unshift(sourceId);
    }
  }, {
    key: "handleDragEnter",
    value: function handleDragEnter(e, targetId) {
      this.dragEnterTargetIds.unshift(targetId);
    }
  }, {
    key: "handleDragOver",
    value: function handleDragOver(e, targetId) {
      if (this.dragOverTargetIds === null) {
        this.dragOverTargetIds = [];
      }

      this.dragOverTargetIds.unshift(targetId);
    }
  }, {
    key: "handleDrop",
    value: function handleDrop(e, targetId) {
      this.dropTargetIds.unshift(targetId);
    }
  }, {
    key: "window",
    get: function get() {
      return this.options.window;
    }
  }, {
    key: "document",
    get: function get() {
      return this.options.document;
    }
  }]);

  return HTML5Backend;
}();


// CONCATENATED MODULE: ./node_modules/react-dnd-html5-backend/dist/esm/index.js
/* unused concated harmony import NativeTypes */





var esm_createBackend = function createBackend(manager, context) {
  return new HTML5Backend_HTML5Backend(manager, context);
};

/* harmony default export */ var esm = __webpack_exports__["a"] = (esm_createBackend);

/***/ }),
/* 67 */,
/* 68 */,
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var gridOptionsWrapper_1 = __webpack_require__(7);

var columnGroup_1 = __webpack_require__(58);

var originalColumnGroup_1 = __webpack_require__(70);

var context_1 = __webpack_require__(2);

var context_2 = __webpack_require__(2); // takes in a list of columns, as specified by the column definitions, and returns column groups


var ColumnUtils =
/** @class */
function () {
  function ColumnUtils() {}

  ColumnUtils.prototype.calculateColInitialWidth = function (colDef) {
    if (!colDef.width) {
      // if no width defined in colDef, use default
      return this.gridOptionsWrapper.getColWidth();
    } else if (colDef.width < this.gridOptionsWrapper.getMinColWidth()) {
      // if width in col def to small, set to min width
      return this.gridOptionsWrapper.getMinColWidth();
    } else {
      // otherwise use the provided width
      return colDef.width;
    }
  };

  ColumnUtils.prototype.getOriginalPathForColumn = function (column, originalBalancedTree) {
    var result = [];
    var found = false;
    recursePath(originalBalancedTree, 0); // we should always find the path, but in case there is a bug somewhere, returning null
    // will make it fail rather than provide a 'hard to track down' bug

    if (found) {
      return result;
    } else {
      return null;
    }

    function recursePath(balancedColumnTree, dept) {
      for (var i = 0; i < balancedColumnTree.length; i++) {
        if (found) {
          // quit the search, so 'result' is kept with the found result
          return;
        }

        var node = balancedColumnTree[i];

        if (node instanceof originalColumnGroup_1.OriginalColumnGroup) {
          var nextNode = node;
          recursePath(nextNode.getChildren(), dept + 1);
          result[dept] = node;
        } else {
          if (node === column) {
            found = true;
          }
        }
      }
    }
  };
  /*    public getPathForColumn(column: Column, allDisplayedColumnGroups: ColumnGroupChild[]): ColumnGroup[] {
          let result: ColumnGroup[] = [];
          let found = false;
  
          recursePath(allDisplayedColumnGroups, 0);
  
          // we should always find the path, but in case there is a bug somewhere, returning null
          // will make it fail rather than provide a 'hard to track down' bug
          if (found) {
              return result;
          } else {
              return null;
          }
  
          function recursePath(balancedColumnTree: ColumnGroupChild[], dept: number): void {
  
              for (let i = 0; i<balancedColumnTree.length; i++) {
                  if (found) {
                      // quit the search, so 'result' is kept with the found result
                      return;
                  }
                  let node = balancedColumnTree[i];
                  if (node instanceof ColumnGroup) {
                      let nextNode = <ColumnGroup> node;
                      recursePath(nextNode.getChildren(), dept+1);
                      result[dept] = node;
                  } else {
                      if (node === column) {
                          found = true;
                      }
                  }
              }
          }
      }*/


  ColumnUtils.prototype.depthFirstOriginalTreeSearch = function (parent, tree, callback) {
    var _this = this;

    if (!tree) {
      return;
    }

    tree.forEach(function (child) {
      if (child instanceof originalColumnGroup_1.OriginalColumnGroup) {
        _this.depthFirstOriginalTreeSearch(child, child.getChildren(), callback);
      }

      callback(child, parent);
    });
  };

  ColumnUtils.prototype.depthFirstAllColumnTreeSearch = function (tree, callback) {
    var _this = this;

    if (!tree) {
      return;
    }

    tree.forEach(function (child) {
      if (child instanceof columnGroup_1.ColumnGroup) {
        _this.depthFirstAllColumnTreeSearch(child.getChildren(), callback);
      }

      callback(child);
    });
  };

  ColumnUtils.prototype.depthFirstDisplayedColumnTreeSearch = function (tree, callback) {
    var _this = this;

    if (!tree) {
      return;
    }

    tree.forEach(function (child) {
      if (child instanceof columnGroup_1.ColumnGroup) {
        _this.depthFirstDisplayedColumnTreeSearch(child.getDisplayedChildren(), callback);
      }

      callback(child);
    });
  };

  __decorate([context_2.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], ColumnUtils.prototype, "gridOptionsWrapper", void 0);

  ColumnUtils = __decorate([context_1.Bean('columnUtils')], ColumnUtils);
  return ColumnUtils;
}();

exports.ColumnUtils = ColumnUtils;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var columnGroup_1 = __webpack_require__(58);

var column_1 = __webpack_require__(24);

var eventService_1 = __webpack_require__(14);

var columnApi_1 = __webpack_require__(21);

var gridApi_1 = __webpack_require__(20);

var OriginalColumnGroup =
/** @class */
function () {
  function OriginalColumnGroup(colGroupDef, groupId, padding, level) {
    this.localEventService = new eventService_1.EventService();
    this.expandable = false;
    this.colGroupDef = colGroupDef;
    this.groupId = groupId;
    this.expanded = colGroupDef && !!colGroupDef.openByDefault;
    this.padding = padding;
    this.level = level;
  }

  OriginalColumnGroup.prototype.setOriginalParent = function (originalParent) {
    this.originalParent = this.originalParent;
  };

  OriginalColumnGroup.prototype.getOriginalParent = function () {
    return this.originalParent;
  };

  OriginalColumnGroup.prototype.getLevel = function () {
    return this.level;
  };

  OriginalColumnGroup.prototype.isVisible = function () {
    // return true if at least one child is visible
    if (this.children) {
      return this.children.some(function (child) {
        return child.isVisible();
      });
    }

    return false;
  };

  OriginalColumnGroup.prototype.isPadding = function () {
    return this.padding;
  };

  OriginalColumnGroup.prototype.setExpanded = function (expanded) {
    this.expanded = expanded === undefined ? false : expanded;
    var event = {
      type: OriginalColumnGroup.EVENT_EXPANDED_CHANGED
    };
    this.localEventService.dispatchEvent(event);
  };

  OriginalColumnGroup.prototype.isExpandable = function () {
    return this.expandable;
  };

  OriginalColumnGroup.prototype.isExpanded = function () {
    return this.expanded;
  };

  OriginalColumnGroup.prototype.getGroupId = function () {
    return this.groupId;
  };

  OriginalColumnGroup.prototype.getId = function () {
    return this.getGroupId();
  };

  OriginalColumnGroup.prototype.setChildren = function (children) {
    this.children = children;
  };

  OriginalColumnGroup.prototype.getChildren = function () {
    return this.children;
  };

  OriginalColumnGroup.prototype.getColGroupDef = function () {
    return this.colGroupDef;
  };

  OriginalColumnGroup.prototype.getLeafColumns = function () {
    var result = [];
    this.addLeafColumns(result);
    return result;
  };

  OriginalColumnGroup.prototype.addLeafColumns = function (leafColumns) {
    if (!this.children) {
      return;
    }

    this.children.forEach(function (child) {
      if (child instanceof column_1.Column) {
        leafColumns.push(child);
      } else if (child instanceof OriginalColumnGroup) {
        child.addLeafColumns(leafColumns);
      }
    });
  };

  OriginalColumnGroup.prototype.getColumnGroupShow = function () {
    if (!this.padding) {
      return this.colGroupDef.columnGroupShow;
    } else {
      // if this is padding we have exactly only child. we then
      // take the value from the child and push it up, making
      // this group 'invisible'.
      return this.children[0].getColumnGroupShow();
    }
  }; // need to check that this group has at least one col showing when both expanded and contracted.
  // if not, then we don't allow expanding and contracting on this group


  OriginalColumnGroup.prototype.setupExpandable = function () {
    var _this = this;

    this.setExpandable(); // note - we should be removing this event listener

    this.getLeafColumns().forEach(function (col) {
      return col.addEventListener(column_1.Column.EVENT_VISIBLE_CHANGED, _this.onColumnVisibilityChanged.bind(_this));
    });
  };

  OriginalColumnGroup.prototype.setExpandable = function () {
    if (this.isPadding()) {
      return;
    } // want to make sure the group doesn't disappear when it's open


    var atLeastOneShowingWhenOpen = false; // want to make sure the group doesn't disappear when it's closed

    var atLeastOneShowingWhenClosed = false; // want to make sure the group has something to show / hide

    var atLeastOneChangeable = false;
    var children = this.findChildren();

    for (var i = 0, j = children.length; i < j; i++) {
      var abstractColumn = children[i];

      if (!abstractColumn.isVisible()) {
        continue;
      } // if the abstractColumn is a grid generated group, there will be no colDef


      var headerGroupShow = abstractColumn.getColumnGroupShow();

      if (headerGroupShow === columnGroup_1.ColumnGroup.HEADER_GROUP_SHOW_OPEN) {
        atLeastOneShowingWhenOpen = true;
        atLeastOneChangeable = true;
      } else if (headerGroupShow === columnGroup_1.ColumnGroup.HEADER_GROUP_SHOW_CLOSED) {
        atLeastOneShowingWhenClosed = true;
        atLeastOneChangeable = true;
      } else {
        atLeastOneShowingWhenOpen = true;
        atLeastOneShowingWhenClosed = true;
      }
    }

    var expandable = atLeastOneShowingWhenOpen && atLeastOneShowingWhenClosed && atLeastOneChangeable;

    if (this.expandable !== expandable) {
      this.expandable = expandable;
      var event_1 = {
        type: OriginalColumnGroup.EVENT_EXPANDABLE_CHANGED
      };
      this.localEventService.dispatchEvent(event_1);
    }
  };

  OriginalColumnGroup.prototype.findChildren = function () {
    var children = this.children;
    var firstChild = children[0];

    if (firstChild && (!firstChild.isPadding || !firstChild.isPadding())) {
      return children;
    }

    while (children.length === 1 && children[0] instanceof OriginalColumnGroup) {
      children = children[0].children;
    }

    return children;
  };

  OriginalColumnGroup.prototype.onColumnVisibilityChanged = function () {
    this.setExpandable();
  };

  OriginalColumnGroup.prototype.addEventListener = function (eventType, listener) {
    this.localEventService.addEventListener(eventType, listener);
  };

  OriginalColumnGroup.prototype.removeEventListener = function (eventType, listener) {
    this.localEventService.removeEventListener(eventType, listener);
  };

  OriginalColumnGroup.EVENT_EXPANDED_CHANGED = 'expandedChanged';
  OriginalColumnGroup.EVENT_EXPANDABLE_CHANGED = 'expandableChanged';

  __decorate([context_1.Autowired('columnApi'), __metadata("design:type", columnApi_1.ColumnApi)], OriginalColumnGroup.prototype, "columnApi", void 0);

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], OriginalColumnGroup.prototype, "gridApi", void 0);

  return OriginalColumnGroup;
}();

exports.OriginalColumnGroup = OriginalColumnGroup;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var ValueCache =
/** @class */
function () {
  function ValueCache() {
    this.cacheVersion = 0;
  }

  ValueCache.prototype.init = function () {
    this.active = this.gridOptionsWrapper.isValueCache();
    this.neverExpires = this.gridOptionsWrapper.isValueCacheNeverExpires();
  };

  ValueCache.prototype.onDataChanged = function () {
    if (this.neverExpires) {
      return;
    }

    this.expire();
  };

  ValueCache.prototype.expire = function () {
    this.cacheVersion++;
  };

  ValueCache.prototype.setValue = function (rowNode, colId, value) {
    if (this.active) {
      if (rowNode.__cacheVersion !== this.cacheVersion) {
        rowNode.__cacheVersion = this.cacheVersion;
        rowNode.__cacheData = {};
      }

      rowNode.__cacheData[colId] = value;
    }
  };

  ValueCache.prototype.getValue = function (rowNode, colId) {
    var valueInCache = this.active && rowNode.__cacheVersion === this.cacheVersion && rowNode.__cacheData[colId] !== undefined;

    if (valueInCache) {
      return rowNode.__cacheData[colId];
    } else {
      return undefined;
    }
  };

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], ValueCache.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], ValueCache.prototype, "init", null);

  ValueCache = __decorate([context_1.Bean('valueCache')], ValueCache);
  return ValueCache;
}();

exports.ValueCache = ValueCache;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var component_1 = __webpack_require__(22);

var PopupComponent =
/** @class */
function (_super) {
  __extends(PopupComponent, _super);

  function PopupComponent() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  PopupComponent.prototype.isPopup = function () {
    return true;
  };

  return PopupComponent;
}(component_1.Component);

exports.PopupComponent = PopupComponent;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var eventKeys_1 = __webpack_require__(57);

var eventService_1 = __webpack_require__(14);

var AnimationFrameService =
/** @class */
function () {
  function AnimationFrameService() {
    // create tasks are to do with row creation. for them we want to execute according to row order, so we use
    // TaskItem so we know what index the item is for.
    this.createRowTasks = []; // destroy tasks are to do with row removal. they are done after row creation as the user will need to see new
    // rows first (as blank is scrolled into view), when we remove the old rows (no longer in view) is not as
    // important.

    this.destroyRowTasks = [];
    this.ticking = false; // we need to know direction of scroll, to build up rows in the direction of
    // the scroll. eg if user scrolls down, we extend the rows by building down.

    this.scrollGoingDown = true;
    this.lastScrollTop = 0;
  }

  AnimationFrameService.prototype.setScrollTop = function (scrollTop) {
    this.scrollGoingDown = scrollTop > this.lastScrollTop;
    this.lastScrollTop = scrollTop;
  };

  AnimationFrameService.prototype.init = function () {
    this.useAnimationFrame = !this.gridOptionsWrapper.isSuppressAnimationFrame();
  }; // this method is for our ag-Grid sanity only - if animation frames are turned off,
  // then no place in the code should be looking to add any work to be done in animation
  // frames. this stops bugs - where some code is asking for a frame to be executed
  // when it should not.


  AnimationFrameService.prototype.verifyAnimationFrameOn = function (methodName) {
    if (this.useAnimationFrame === false) {
      console.warn("ag-Grid: AnimationFrameService." + methodName + " called but animation frames are off");
    }
  };

  AnimationFrameService.prototype.addP1Task = function (task, index) {
    this.verifyAnimationFrameOn('addP1Task');
    var taskItem = {
      task: task,
      index: index
    };
    this.createRowTasks.push(taskItem);
    this.schedule();
  };

  AnimationFrameService.prototype.addP2Task = function (task) {
    this.verifyAnimationFrameOn('addP2Task');
    this.destroyRowTasks.push(task);
    this.schedule();
  };

  AnimationFrameService.prototype.executeFrame = function (millis) {
    this.verifyAnimationFrameOn('executeFrame');

    if (this.scrollGoingDown) {
      this.createRowTasks.sort(function (a, b) {
        return b.index - a.index;
      });
    } else {
      this.createRowTasks.sort(function (a, b) {
        return a.index - b.index;
      });
    }

    var frameStart = new Date().getTime();
    var duration = new Date().getTime() - frameStart; // 16ms is 60 fps

    var noMaxMillis = millis <= 0;

    while (noMaxMillis || duration < millis) {
      if (this.createRowTasks.length > 0) {
        var taskItem = this.createRowTasks.pop();
        taskItem.task();
      } else if (this.destroyRowTasks.length > 0) {
        var task = this.destroyRowTasks.pop();
        task();
      } else {
        break;
      }

      duration = new Date().getTime() - frameStart;
    }

    if (this.createRowTasks.length > 0 || this.destroyRowTasks.length > 0) {
      this.requestFrame();
    } else {
      this.stopTicking();
    }
  };

  AnimationFrameService.prototype.stopTicking = function () {
    this.ticking = false;
    var event = {
      type: eventKeys_1.Events.EVENT_ANIMATION_QUEUE_EMPTY,
      columnApi: this.gridOptionsWrapper.getColumnApi(),
      api: this.gridOptionsWrapper.getApi()
    };
    this.eventService.dispatchEvent(event);
  };

  AnimationFrameService.prototype.flushAllFrames = function () {
    if (!this.useAnimationFrame) {
      return;
    }

    this.executeFrame(-1);
  };

  AnimationFrameService.prototype.schedule = function () {
    if (!this.useAnimationFrame) {
      return;
    }

    if (!this.ticking) {
      this.ticking = true;
      this.requestFrame();
    }
  };

  AnimationFrameService.prototype.requestFrame = function () {
    // check for the existence of requestAnimationFrame, and if
    // it's missing, then we polyfill it with setTimeout()
    var callback = this.executeFrame.bind(this, 60);

    if (window.requestAnimationFrame) {
      window.requestAnimationFrame(callback);
    } else if (window.webkitRequestAnimationFrame) {
      window.webkitRequestAnimationFrame(callback);
    } else {
      window.setTimeout(callback, 0);
    }
  };

  AnimationFrameService.prototype.isQueueEmpty = function () {
    return this.ticking;
  };

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], AnimationFrameService.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], AnimationFrameService.prototype, "eventService", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], AnimationFrameService.prototype, "init", null);

  AnimationFrameService = __decorate([context_1.Bean('animationFrameService')], AnimationFrameService);
  return AnimationFrameService;
}();

exports.AnimationFrameService = AnimationFrameService;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var baseHas = __webpack_require__(326),
    hasPath = __webpack_require__(229);
/**
 * Checks if `path` is a direct property of `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = { 'a': { 'b': 2 } };
 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.has(object, 'a');
 * // => true
 *
 * _.has(object, 'a.b');
 * // => true
 *
 * _.has(object, ['a', 'b']);
 * // => true
 *
 * _.has(other, 'a');
 * // => false
 */


function has(object, path) {
  return object != null && hasPath(object, path, baseHas);
}

module.exports = has;

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(76),
    getRawTag = __webpack_require__(327),
    objectToString = __webpack_require__(328);
/** `Object#toString` result references. */


var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';
/** Built-in value references. */

var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }

  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}

module.exports = baseGetTag;

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(46);
/** Built-in value references. */


var Symbol = root.Symbol;
module.exports = Symbol;

/***/ }),
/* 77 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeKeys = __webpack_require__(238),
    baseKeys = __webpack_require__(368),
    isArrayLike = __webpack_require__(178);
/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */


function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(27);

exports.__esModule = true;
exports.default = inherits;

var _extends2 = _interopRequireDefault(__webpack_require__(94));

function inherits(ctor, superCtor, spec) {
  ctor.prototype = Object.create(superCtor.prototype, {
    constructor: {
      value: ctor,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  (0, _extends2.default)(ctor.prototype, spec);
}

module.exports = exports["default"];

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
    return;
  }

  if (false) {}

  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (true) {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = __webpack_require__(275);
} else {}

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

exports.AgGridReact = __webpack_require__(291).AgGridReact;
exports.AgGridColumn = __webpack_require__(227).AgGridColumn;

/***/ }),
/* 82 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return useDragDropManager; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _react_dnd_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);
/* harmony import */ var _common_DndContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(100);



/**
 * A hook to retrieve the DragDropManager from Context
 */

function useDragDropManager() {
  var _useContext = Object(react__WEBPACK_IMPORTED_MODULE_0__["useContext"])(_common_DndContext__WEBPACK_IMPORTED_MODULE_2__[/* DndContext */ "a"]),
      dragDropManager = _useContext.dragDropManager;

  Object(_react_dnd_invariant__WEBPACK_IMPORTED_MODULE_1__[/* invariant */ "a"])(dragDropManager != null, 'Expected drag drop context');
  return dragDropManager;
}

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ACTION = exports.TYPE = exports.POSITION = void 0;
var POSITION = {
  TOP_LEFT: 'top-left',
  TOP_RIGHT: 'top-right',
  TOP_CENTER: 'top-center',
  BOTTOM_LEFT: 'bottom-left',
  BOTTOM_RIGHT: 'bottom-right',
  BOTTOM_CENTER: 'bottom-center'
};
exports.POSITION = POSITION;
var TYPE = {
  INFO: 'info',
  SUCCESS: 'success',
  WARNING: 'warning',
  ERROR: 'error',
  DEFAULT: 'default'
};
exports.TYPE = TYPE;
var ACTION = {
  SHOW: 0,
  CLEAR: 1,
  DID_MOUNT: 2,
  WILL_UNMOUNT: 3,
  ON_CHANGE: 4
};
exports.ACTION = ACTION;

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var __param = this && this.__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var gridOptionsWrapper_1 = __webpack_require__(7);

var logger_1 = __webpack_require__(30);

var columnUtils_1 = __webpack_require__(69);

var columnKeyCreator_1 = __webpack_require__(204);

var originalColumnGroup_1 = __webpack_require__(70);

var column_1 = __webpack_require__(24);

var context_1 = __webpack_require__(2);

var defaultColumnTypes_1 = __webpack_require__(300);

var utils_1 = __webpack_require__(6); // takes ColDefs and ColGroupDefs and turns them into Columns and OriginalGroups


var ColumnFactory =
/** @class */
function () {
  function ColumnFactory() {}

  ColumnFactory.prototype.setBeans = function (loggerFactory) {
    this.logger = loggerFactory.create('ColumnFactory');
  };

  ColumnFactory.prototype.createColumnTree = function (defs, primaryColumns, existingColumns) {
    // column key creator dishes out unique column id's in a deterministic way,
    // so if we have two grids (that could be master/slave) with same column definitions,
    // then this ensures the two grids use identical id's.
    var columnKeyCreator = new columnKeyCreator_1.ColumnKeyCreator();

    if (existingColumns) {
      var existingKeys = existingColumns.map(function (col) {
        return col.getId();
      });
      columnKeyCreator.addExistingKeys(existingKeys);
    } // we take a copy of the columns as we are going to be removing from them


    var existingColsCopy = existingColumns ? existingColumns.slice() : null; // create am unbalanced tree that maps the provided definitions

    var unbalancedTree = this.recursivelyCreateColumns(defs, 0, primaryColumns, existingColsCopy, columnKeyCreator, null);
    var treeDept = this.findMaxDept(unbalancedTree, 0);
    this.logger.log('Number of levels for grouped columns is ' + treeDept);
    var res = this.balanceColumnTree(unbalancedTree, 0, treeDept, columnKeyCreator);

    var deptFirstCallback = function deptFirstCallback(child, parent) {
      if (child instanceof originalColumnGroup_1.OriginalColumnGroup) {
        child.setupExpandable();
      } // we set the original parents at the end, rather than when we go along, as balancing the tree
      // adds extra levels into the tree. so we can only set parents when balancing is done.


      child.setOriginalParent(parent);
    };

    this.columnUtils.depthFirstOriginalTreeSearch(null, res, deptFirstCallback);
    return {
      columnTree: res,
      treeDept: treeDept
    };
  };

  ColumnFactory.prototype.createForAutoGroups = function (autoGroupCols, gridBalancedTree) {
    var _this = this;

    var autoColBalancedTree = [];
    autoGroupCols.forEach(function (col) {
      var fakeTreeItem = _this.createAutoGroupTreeItem(gridBalancedTree, col);

      autoColBalancedTree.push(fakeTreeItem);
    });
    return autoColBalancedTree;
  };

  ColumnFactory.prototype.createAutoGroupTreeItem = function (balancedColumnTree, column) {
    var dept = this.findDepth(balancedColumnTree); // at the end, this will be the top of the tree item.

    var nextChild = column;

    for (var i = dept - 1; i >= 0; i--) {
      var autoGroup = new originalColumnGroup_1.OriginalColumnGroup(null, "FAKE_PATH_" + column.getId() + "}_" + i, true, i);
      this.context.wireBean(autoGroup);
      autoGroup.setChildren([nextChild]);
      nextChild.setOriginalParent(autoGroup);
      nextChild = autoGroup;
    } // at this point, the nextChild is the top most item in the tree


    return nextChild;
  };

  ColumnFactory.prototype.findDepth = function (balancedColumnTree) {
    var dept = 0;
    var pointer = balancedColumnTree;

    while (pointer && pointer[0] && pointer[0] instanceof originalColumnGroup_1.OriginalColumnGroup) {
      dept++;
      pointer = pointer[0].getChildren();
    }

    return dept;
  };

  ColumnFactory.prototype.balanceColumnTree = function (unbalancedTree, currentDept, columnDept, columnKeyCreator) {
    var result = []; // go through each child, for groups, recurse a level deeper,
    // for columns we need to pad

    for (var i = 0; i < unbalancedTree.length; i++) {
      var child = unbalancedTree[i];

      if (child instanceof originalColumnGroup_1.OriginalColumnGroup) {
        // child is a group, all we do is go to the next level of recursion
        var originalGroup = child;
        var newChildren = this.balanceColumnTree(originalGroup.getChildren(), currentDept + 1, columnDept, columnKeyCreator);
        originalGroup.setChildren(newChildren);
        result.push(originalGroup);
      } else {
        // child is a column - so here we add in the padded column groups if needed
        var firstPaddedGroup = void 0;
        var currentPaddedGroup = void 0; // this for loop will NOT run any loops if no padded column groups are needed

        for (var j = columnDept - 1; j >= currentDept; j--) {
          var newColId = columnKeyCreator.getUniqueKey(null, null);
          var colGroupDefMerged = this.createMergedColGroupDef(null);
          var paddedGroup = new originalColumnGroup_1.OriginalColumnGroup(colGroupDefMerged, newColId, true, currentDept);
          this.context.wireBean(paddedGroup);

          if (currentPaddedGroup) {
            currentPaddedGroup.setChildren([paddedGroup]);
          }

          currentPaddedGroup = paddedGroup;

          if (!firstPaddedGroup) {
            firstPaddedGroup = currentPaddedGroup;
          }
        } // likewise this if statement will not run if no padded groups


        if (firstPaddedGroup) {
          result.push(firstPaddedGroup);
          var hasGroups = unbalancedTree.some(function (child) {
            return child instanceof originalColumnGroup_1.OriginalColumnGroup;
          });

          if (hasGroups) {
            currentPaddedGroup.setChildren([child]);
            continue;
          } else {
            currentPaddedGroup.setChildren(unbalancedTree);
            break;
          }
        }

        result.push(child);
      }
    }

    return result;
  };

  ColumnFactory.prototype.findMaxDept = function (treeChildren, dept) {
    var maxDeptThisLevel = dept;

    for (var i = 0; i < treeChildren.length; i++) {
      var abstractColumn = treeChildren[i];

      if (abstractColumn instanceof originalColumnGroup_1.OriginalColumnGroup) {
        var originalGroup = abstractColumn;
        var newDept = this.findMaxDept(originalGroup.getChildren(), dept + 1);

        if (maxDeptThisLevel < newDept) {
          maxDeptThisLevel = newDept;
        }
      }
    }

    return maxDeptThisLevel;
  };

  ColumnFactory.prototype.recursivelyCreateColumns = function (defs, level, primaryColumns, existingColsCopy, columnKeyCreator, parent) {
    var _this = this;

    var result = [];

    if (!defs) {
      return result;
    }

    defs.forEach(function (def) {
      var newGroupOrColumn;

      if (_this.isColumnGroup(def)) {
        newGroupOrColumn = _this.createColumnGroup(primaryColumns, def, level, existingColsCopy, columnKeyCreator, parent);
      } else {
        newGroupOrColumn = _this.createColumn(primaryColumns, def, existingColsCopy, columnKeyCreator, parent);
      }

      result.push(newGroupOrColumn);
    });
    return result;
  };

  ColumnFactory.prototype.createColumnGroup = function (primaryColumns, colGroupDef, level, existingColumns, columnKeyCreator, parent) {
    var colGroupDefMerged = this.createMergedColGroupDef(colGroupDef);
    var groupId = columnKeyCreator.getUniqueKey(colGroupDefMerged.groupId, null);
    var originalGroup = new originalColumnGroup_1.OriginalColumnGroup(colGroupDefMerged, groupId, false, level);
    this.context.wireBean(originalGroup);
    var children = this.recursivelyCreateColumns(colGroupDefMerged.children, level + 1, primaryColumns, existingColumns, columnKeyCreator, originalGroup);
    originalGroup.setChildren(children);
    return originalGroup;
  };

  ColumnFactory.prototype.createMergedColGroupDef = function (colGroupDef) {
    var colGroupDefMerged = {};

    utils_1._.assign(colGroupDefMerged, this.gridOptionsWrapper.getDefaultColGroupDef());

    utils_1._.assign(colGroupDefMerged, colGroupDef);

    this.checkForDeprecatedItems(colGroupDefMerged);
    return colGroupDefMerged;
  };

  ColumnFactory.prototype.createColumn = function (primaryColumns, colDef, existingColsCopy, columnKeyCreator, parent) {
    var colDefMerged = this.mergeColDefs(colDef);
    this.checkForDeprecatedItems(colDefMerged); // see if column already exists

    var column = this.findExistingColumn(colDef, existingColsCopy);

    if (!column) {
      // no existing column, need to create one
      var colId = columnKeyCreator.getUniqueKey(colDefMerged.colId, colDefMerged.field);
      column = new column_1.Column(colDefMerged, colDef, colId, primaryColumns);
      this.context.wireBean(column);
    } else {
      column.setColDef(colDefMerged, colDef);
    }

    return column;
  };

  ColumnFactory.prototype.findExistingColumn = function (colDef, existingColsCopy) {
    var res = utils_1._.find(existingColsCopy, function (col) {
      var oldColDef = col.getUserProvidedColDef();

      if (!oldColDef) {
        return false;
      } // first check object references


      if (oldColDef === colDef) {
        return true;
      } // second check id's


      var oldColHadId = oldColDef.colId !== null && oldColDef.colId !== undefined;

      if (oldColHadId) {
        return oldColDef.colId === colDef.colId;
      } else {
        return false;
      }
    }); // make sure we remove, so if user provided duplicate id, then we don't have more than
    // one column instance for colDef with common id


    if (res) {
      utils_1._.removeFromArray(existingColsCopy, res);
    }

    return res;
  };

  ColumnFactory.prototype.mergeColDefs = function (colDef) {
    // start with empty merged definition
    var colDefMerged = {}; // merge properties from default column definitions

    utils_1._.assign(colDefMerged, this.gridOptionsWrapper.getDefaultColDef()); // merge properties from column type properties


    if (colDef.type) {
      this.assignColumnTypes(colDef, colDefMerged);
    } // merge properties from column definitions


    utils_1._.assign(colDefMerged, colDef);

    return colDefMerged;
  };

  ColumnFactory.prototype.assignColumnTypes = function (colDef, colDefMerged) {
    var typeKeys;

    if (colDef.type instanceof Array) {
      var invalidArray = colDef.type.some(function (a) {
        return typeof a !== 'string';
      });

      if (invalidArray) {
        console.warn("ag-grid: if colDef.type is supplied an array it should be of type 'string[]'");
      } else {
        typeKeys = colDef.type;
      }
    } else if (typeof colDef.type === 'string') {
      typeKeys = colDef.type.split(',');
    } else {
      console.warn("ag-grid: colDef.type should be of type 'string' | 'string[]'");
      return;
    } // merge user defined with default column types


    var allColumnTypes = utils_1._.assign({}, this.gridOptionsWrapper.getColumnTypes(), defaultColumnTypes_1.DefaultColumnTypes);

    typeKeys.forEach(function (t) {
      var typeColDef = allColumnTypes[t.trim()];

      if (typeColDef) {
        utils_1._.assign(colDefMerged, typeColDef);
      } else {
        console.warn("ag-grid: colDef.type '" + t + "' does not correspond to defined gridOptions.columnTypes");
      }
    });
  };

  ColumnFactory.prototype.checkForDeprecatedItems = function (colDef) {
    if (colDef) {
      var colDefNoType = colDef; // take out the type, so we can access attributes not defined in the type

      if (colDefNoType.group !== undefined) {
        console.warn('ag-grid: colDef.group is invalid, please check documentation on how to do grouping as it changed in version 3');
      }

      if (colDefNoType.headerGroup !== undefined) {
        console.warn('ag-grid: colDef.headerGroup is invalid, please check documentation on how to do grouping as it changed in version 3');
      }

      if (colDefNoType.headerGroupShow !== undefined) {
        console.warn('ag-grid: colDef.headerGroupShow is invalid, should be columnGroupShow, please check documentation on how to do grouping as it changed in version 3');
      }

      if (colDefNoType.suppressRowGroup !== undefined) {
        console.warn('ag-grid: colDef.suppressRowGroup is deprecated, please use colDef.type instead');
      }

      if (colDefNoType.suppressAggregation !== undefined) {
        console.warn('ag-grid: colDef.suppressAggregation is deprecated, please use colDef.type instead');
      }

      if (colDefNoType.suppressRowGroup || colDefNoType.suppressAggregation) {
        console.warn('ag-grid: colDef.suppressAggregation and colDef.suppressRowGroup are deprecated, use allowRowGroup, allowPivot and allowValue instead');
      }

      if (colDefNoType.displayName) {
        console.warn("ag-grid: Found displayName " + colDefNoType.displayName + ", please use headerName instead, displayName is deprecated.");
        colDefNoType.headerName = colDefNoType.displayName;
      }
    }
  }; // if object has children, we assume it's a group


  ColumnFactory.prototype.isColumnGroup = function (abstractColDef) {
    return abstractColDef.children !== undefined;
  };

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], ColumnFactory.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('columnUtils'), __metadata("design:type", columnUtils_1.ColumnUtils)], ColumnFactory.prototype, "columnUtils", void 0);

  __decorate([context_1.Autowired('context'), __metadata("design:type", context_1.Context)], ColumnFactory.prototype, "context", void 0);

  __decorate([__param(0, context_1.Qualifier('loggerFactory')), __metadata("design:type", Function), __metadata("design:paramtypes", [logger_1.LoggerFactory]), __metadata("design:returntype", void 0)], ColumnFactory.prototype, "setBeans", null);

  ColumnFactory = __decorate([context_1.Bean('columnFactory')], ColumnFactory);
  return ColumnFactory;
}();

exports.ColumnFactory = ColumnFactory;

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var rowRenderer_1 = __webpack_require__(37);

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var headerWrapperComp_1 = __webpack_require__(199);

var AutoWidthCalculator =
/** @class */
function () {
  function AutoWidthCalculator() {}

  AutoWidthCalculator.prototype.registerGridComp = function (gridPanel) {
    this.gridPanel = gridPanel;
  };

  AutoWidthCalculator.prototype.registerHeaderRootComp = function (headerRootComp) {
    this.headerRootComp = headerRootComp;
  }; // this is the trick: we create a dummy container and clone all the cells
  // into the dummy, then check the dummy's width. then destroy the dummy
  // as we don't need it any more.
  // drawback: only the cells visible on the screen are considered


  AutoWidthCalculator.prototype.getPreferredWidthForColumn = function (column) {
    var eHeaderCell = this.getHeaderCellForColumn(column); // cell isn't visible

    if (!eHeaderCell) {
      return -1;
    }

    var eDummyContainer = document.createElement('span'); // position fixed, so it isn't restricted to the boundaries of the parent

    eDummyContainer.style.position = 'fixed'; // we put the dummy into the body container, so it will inherit all the
    // css styles that the real cells are inheriting

    var eBodyContainer = this.gridPanel.getCenterContainer();
    eBodyContainer.appendChild(eDummyContainer); // get all the cells that are currently displayed (this only brings back
    // rendered cells, rows not rendered due to row visualisation will not be here)

    this.putRowCellsIntoDummyContainer(column, eDummyContainer); // also put header cell in
    // we only consider the lowest level cell, not the group cell. in 99% of the time, this
    // will be enough. if we consider groups, then it gets to complicated for what it's worth,
    // as the groups can span columns and this class only considers one column at a time.

    this.cloneItemIntoDummy(eHeaderCell, eDummyContainer); // at this point, all the clones are lined up vertically with natural widths. the dummy
    // container will have a width wide enough just to fit the largest.

    var dummyContainerWidth = eDummyContainer.offsetWidth; // we are finished with the dummy container, so get rid of it

    eBodyContainer.removeChild(eDummyContainer); // we add padding as I found sometimes the gui still put '...' after some of the texts. so the
    // user can configure the grid to add a few more pixels after the calculated width

    var autoSizePadding = this.gridOptionsWrapper.getAutoSizePadding();
    return dummyContainerWidth + autoSizePadding;
  };

  AutoWidthCalculator.prototype.getHeaderCellForColumn = function (column) {
    var comp = null; // find the rendered header cell

    this.headerRootComp.forEachHeaderElement(function (headerElement) {
      if (headerElement instanceof headerWrapperComp_1.HeaderWrapperComp) {
        var headerWrapperComp = headerElement;

        if (headerWrapperComp.getColumn() === column) {
          comp = headerWrapperComp;
        }
      }
    });
    return comp ? comp.getGui() : null;
  };

  AutoWidthCalculator.prototype.putRowCellsIntoDummyContainer = function (column, eDummyContainer) {
    var _this = this;

    var eCells = this.rowRenderer.getAllCellsForColumn(column);
    eCells.forEach(function (eCell) {
      return _this.cloneItemIntoDummy(eCell, eDummyContainer);
    });
  };

  AutoWidthCalculator.prototype.cloneItemIntoDummy = function (eCell, eDummyContainer) {
    // make a deep clone of the cell
    var eCellClone = eCell.cloneNode(true); // the original has a fixed width, we remove this to allow the natural width based on content

    eCellClone.style.width = ''; // the original has position = absolute, we need to remove this so it's positioned normally

    eCellClone.style.position = 'static';
    eCellClone.style.left = ''; // we put the cell into a containing div, as otherwise the cells would just line up
    // on the same line, standard flow layout, by putting them into divs, they are laid
    // out one per line

    var eCloneParent = document.createElement('div'); // table-row, so that each cell is on a row. i also tried display='block', but this
    // didn't work in IE

    eCloneParent.style.display = 'table-row'; // the twig on the branch, the branch on the tree, the tree in the hole,
    // the hole in the bog, the bog in the clone, the clone in the parent,
    // the parent in the dummy, and the dummy down in the vall-e-ooo, OOOOOOOOO! Oh row the rattling bog....

    eCloneParent.appendChild(eCellClone);
    eDummyContainer.appendChild(eCloneParent);
  };

  __decorate([context_1.Autowired('rowRenderer'), __metadata("design:type", rowRenderer_1.RowRenderer)], AutoWidthCalculator.prototype, "rowRenderer", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], AutoWidthCalculator.prototype, "gridOptionsWrapper", void 0);

  AutoWidthCalculator = __decorate([context_1.Bean('autoWidthCalculator')], AutoWidthCalculator);
  return AutoWidthCalculator;
}();

exports.AutoWidthCalculator = AutoWidthCalculator;

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var column_1 = __webpack_require__(24);

var rowNode_1 = __webpack_require__(39);

var constants_1 = __webpack_require__(19);

var events_1 = __webpack_require__(18);

var gridCell_1 = __webpack_require__(52);

var component_1 = __webpack_require__(22);

var checkboxSelectionComponent_1 = __webpack_require__(141);

var rowDragComp_1 = __webpack_require__(292);

var popupEditorWrapper_1 = __webpack_require__(142);

var utils_1 = __webpack_require__(6);

var CellComp =
/** @class */
function (_super) {
  __extends(CellComp, _super);

  function CellComp(scope, beans, column, rowNode, rowComp, autoHeightCell, printLayout) {
    var _this = _super.call(this) || this;

    _this.editingCell = false;
    _this.suppressRefreshCell = false;
    _this.scope = null; // every time we go into edit mode, or back again, this gets incremented.
    // it's the components way of dealing with the async nature of framework components,
    // so if a framework component takes a while to be created, we know if the object
    // is still relevant when creating is finished. eg we could click edit / un-edit 20
    // times before the first React edit component comes back - we should discard
    // the first 19.

    _this.cellEditorVersion = 0;
    _this.cellRendererVersion = 0;
    _this.scope = scope;
    _this.beans = beans;
    _this.column = column;
    _this.rowNode = rowNode;
    _this.rowComp = rowComp;
    _this.autoHeightCell = autoHeightCell;
    _this.printLayout = printLayout;

    _this.createGridCellVo();

    _this.rangeSelectionEnabled = beans.enterprise && beans.gridOptionsWrapper.isEnableRangeSelection();
    _this.cellFocused = _this.beans.focusedCellController.isCellFocused(_this.gridCell);
    _this.firstRightPinned = _this.column.isFirstRightPinned();
    _this.lastLeftPinned = _this.column.isLastLeftPinned();

    if (_this.rangeSelectionEnabled) {
      _this.rangeCount = _this.beans.rangeController.getCellRangeCount(_this.gridCell);
    }

    _this.getValueAndFormat();

    _this.setUsingWrapper();

    _this.chooseCellRenderer();

    _this.setupColSpan();

    _this.rowSpan = _this.column.getRowSpan(_this.rowNode);
    return _this;
  }

  CellComp.prototype.getCreateTemplate = function () {
    var unselectable = !this.beans.gridOptionsWrapper.isEnableCellTextSelection() ? 'unselectable="on"' : '';
    var templateParts = [];
    var col = this.column;
    var width = this.getCellWidth();
    var left = this.modifyLeftForPrintLayout(col.getLeft());
    var valueToRender = this.getInitialValueToRender();
    var valueSanitised = utils_1._.get(this.column, 'colDef.template', null) ? valueToRender : utils_1._.escape(valueToRender);
    this.tooltip = this.getToolTip();

    var tooltipSanitised = utils_1._.escape(this.tooltip);

    var colIdSanitised = utils_1._.escape(col.getId());

    var wrapperStartTemplate = '';
    var wrapperEndTemplate = '';
    var stylesFromColDef = this.preProcessStylesFromColDef();
    var cssClasses = this.getInitialCssClasses();
    var stylesForRowSpanning = this.getStylesForRowSpanning();

    if (this.usingWrapper) {
      wrapperStartTemplate = "<span ref=\"eCellWrapper\" class=\"ag-cell-wrapper\"><span ref=\"eCellValue\" class=\"ag-cell-value\" " + unselectable + ">";
      wrapperEndTemplate = '</span></span>';
    }

    templateParts.push("<div");
    templateParts.push(" tabindex=\"-1\"");
    templateParts.push(" " + unselectable); // THIS IS FOR IE ONLY so text selection doesn't bubble outside of the grid

    templateParts.push(" role=\"gridcell\"");
    templateParts.push(" comp-id=\"" + this.getCompId() + "\" ");
    templateParts.push(" col-id=\"" + colIdSanitised + "\"");
    templateParts.push(" class=\"" + cssClasses.join(' ') + "\"");

    if (this.beans.gridOptionsWrapper.isEnableBrowserTooltips() && utils_1._.exists(tooltipSanitised)) {
      templateParts.push("title=\"" + tooltipSanitised + "\"");
    }

    templateParts.push(" style=\"width: " + width + "px; left: " + left + "px; " + stylesFromColDef + " " + stylesForRowSpanning + "\" >");
    templateParts.push(wrapperStartTemplate);

    if (utils_1._.exists(valueSanitised, true)) {
      templateParts.push(valueSanitised);
    }

    templateParts.push(wrapperEndTemplate);
    templateParts.push("</div>");
    return templateParts.join('');
  };

  CellComp.prototype.getStylesForRowSpanning = function () {
    if (this.rowSpan === 1) {
      return '';
    }

    var singleRowHeight = this.beans.gridOptionsWrapper.getRowHeightAsNumber();
    var totalRowHeight = singleRowHeight * this.rowSpan;
    return "height: " + totalRowHeight + "px; z-index: 1;";
  };

  CellComp.prototype.afterAttached = function () {
    var querySelector = "[comp-id=\"" + this.getCompId() + "\"]";
    var eGui = this.eParentRow.querySelector(querySelector);
    this.setGui(eGui); // all of these have dependencies on the eGui, so only do them after eGui is set

    this.addDomData();
    this.populateTemplate();
    this.attachCellRenderer();
    this.angular1Compile();
    this.addDestroyableEventListener(this.beans.eventService, events_1.Events.EVENT_CELL_FOCUSED, this.onCellFocused.bind(this));
    this.addDestroyableEventListener(this.beans.eventService, events_1.Events.EVENT_FLASH_CELLS, this.onFlashCells.bind(this));
    this.addDestroyableEventListener(this.beans.eventService, events_1.Events.EVENT_COLUMN_HOVER_CHANGED, this.onColumnHover.bind(this));
    this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_ROW_INDEX_CHANGED, this.onRowIndexChanged.bind(this));
    this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_CELL_CHANGED, this.onCellChanged.bind(this));
    this.addDestroyableEventListener(this.column, column_1.Column.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));
    this.addDestroyableEventListener(this.column, column_1.Column.EVENT_WIDTH_CHANGED, this.onWidthChanged.bind(this));
    this.addDestroyableEventListener(this.column, column_1.Column.EVENT_FIRST_RIGHT_PINNED_CHANGED, this.onFirstRightPinnedChanged.bind(this));
    this.addDestroyableEventListener(this.column, column_1.Column.EVENT_LAST_LEFT_PINNED_CHANGED, this.onLastLeftPinnedChanged.bind(this)); // only for printLayout - because we are rendering all the cells in the same row, regardless of pinned state,
    // then changing the width of the containers will impact left position. eg the center cols all have their
    // left position adjusted by the width of the left pinned column, so if the pinned left column width changes,
    // all the center cols need to be shifted to accommodate this. when in normal layout, the pinned cols are
    // in different containers so doesn't impact.

    if (this.printLayout) {
      this.addDestroyableEventListener(this.beans.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onLeftChanged.bind(this));
    } // if not doing enterprise, then range selection service would be missing
    // so need to check before trying to use it


    if (this.rangeSelectionEnabled) {
      this.addDestroyableEventListener(this.beans.eventService, events_1.Events.EVENT_RANGE_SELECTION_CHANGED, this.onRangeSelectionChanged.bind(this));
    }

    if (this.tooltip && !this.beans.gridOptionsWrapper.isEnableBrowserTooltips()) {
      this.beans.tooltipManager.registerTooltip(this);
    }
  };

  CellComp.prototype.onColumnHover = function () {
    var isHovered = this.beans.columnHoverService.isHovered(this.column);

    utils_1._.addOrRemoveCssClass(this.getGui(), 'ag-column-hover', isHovered);
  };

  CellComp.prototype.onCellChanged = function (event) {
    var eventImpactsThisCell = event.column === this.column;

    if (eventImpactsThisCell) {
      this.refreshCell({});
    }
  };

  CellComp.prototype.getCellLeft = function () {
    var mostLeftCol;

    if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {
      mostLeftCol = this.colsSpanning[this.colsSpanning.length - 1];
    } else {
      mostLeftCol = this.column;
    }

    return mostLeftCol.getLeft();
  };

  CellComp.prototype.getCellWidth = function () {
    if (!this.colsSpanning) {
      return this.column.getActualWidth();
    }

    var result = 0;
    this.colsSpanning.forEach(function (col) {
      return result += col.getActualWidth();
    });
    return result;
  };

  CellComp.prototype.onFlashCells = function (event) {
    var cellId = this.gridCell.createId();
    var shouldFlash = event.cells[cellId];

    if (shouldFlash) {
      this.animateCell('highlight');
    }
  };

  CellComp.prototype.setupColSpan = function () {
    // if no col span is active, then we don't set it up, as it would be wasteful of CPU
    if (utils_1._.missing(this.getComponentHolder().colSpan)) {
      return;
    } // because we are col spanning, a reorder of the cols can change what cols we are spanning over


    this.addDestroyableEventListener(this.beans.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayColumnsChanged.bind(this)); // because we are spanning over multiple cols, we check for width any time any cols width changes.
    // this is expensive - really we should be explicitly checking only the cols we are spanning over
    // instead of every col, however it would be tricky code to track the cols we are spanning over, so
    // because hardly anyone will be using colSpan, am favouring this easier way for more maintainable code.

    this.addDestroyableEventListener(this.beans.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onWidthChanged.bind(this));
    this.colsSpanning = this.getColSpanningList();
  };

  CellComp.prototype.getColSpanningList = function () {
    var colSpan = this.column.getColSpan(this.rowNode);
    var colsSpanning = []; // if just one col, the col span is just the column we are in

    if (colSpan === 1) {
      colsSpanning.push(this.column);
    } else {
      var pointer = this.column;
      var pinned = this.column.getPinned();

      for (var i = 0; pointer && i < colSpan; i++) {
        colsSpanning.push(pointer);
        pointer = this.beans.columnController.getDisplayedColAfter(pointer);

        if (!pointer || utils_1._.missing(pointer)) {
          break;
        } // we do not allow col spanning to span outside of pinned areas


        if (pinned !== pointer.getPinned()) {
          break;
        }
      }
    }

    return colsSpanning;
  };

  CellComp.prototype.onDisplayColumnsChanged = function () {
    var colsSpanning = this.getColSpanningList();

    if (!utils_1._.compareArrays(this.colsSpanning, colsSpanning)) {
      this.colsSpanning = colsSpanning;
      this.onWidthChanged();
      this.onLeftChanged(); // left changes when doing RTL
    }
  };

  CellComp.prototype.getInitialCssClasses = function () {
    var cssClasses = ["ag-cell", "ag-cell-not-inline-editing"]; // if we are putting the cell into a dummy container, to work out it's height,
    // then we don't put the height css in, as we want cell to fit height in that case.

    if (!this.autoHeightCell) {
      cssClasses.push('ag-cell-with-height');
    }

    var doingFocusCss = !this.beans.gridOptionsWrapper.isSuppressCellSelection();

    if (doingFocusCss && this.cellFocused) {
      // otherwise the class depends on the focus state
      cssClasses.push('ag-cell-focus');
    }

    if (this.firstRightPinned) {
      cssClasses.push('ag-cell-first-right-pinned');
    }

    if (this.lastLeftPinned) {
      cssClasses.push('ag-cell-last-left-pinned');
    }

    if (this.beans.columnHoverService.isHovered(this.column)) {
      cssClasses.push('ag-column-hover');
    }

    utils_1._.pushAll(cssClasses, this.preProcessClassesFromColDef());

    utils_1._.pushAll(cssClasses, this.preProcessCellClassRules());

    utils_1._.pushAll(cssClasses, this.getRangeClasses()); // if using the wrapper, this class goes on the wrapper instead


    if (!this.usingWrapper) {
      cssClasses.push('ag-cell-value');
    }

    return cssClasses;
  };

  CellComp.prototype.getInitialValueToRender = function () {
    // if using a cellRenderer, then render the html from the cell renderer if it exists
    if (this.usingCellRenderer) {
      if (typeof this.cellRendererGui === 'string') {
        return this.cellRendererGui;
      } else {
        return '';
      }
    }

    var colDef = this.getComponentHolder();

    if (colDef.template) {
      // template is really only used for angular 1 - as people using ng1 are used to providing templates with
      // bindings in it. in ng2, people will hopefully want to provide components, not templates.
      return colDef.template;
    } else if (colDef.templateUrl) {
      // likewise for templateUrl - it's for ng1 really - when we move away from ng1, we can take these out.
      // niall was pro angular 1 when writing template and templateUrl, if writing from scratch now, would
      // not do these, but would follow a pattern that was friendly towards components, not templates.
      var template = this.beans.templateService.getTemplate(colDef.templateUrl, this.refreshCell.bind(this, true));

      if (template) {
        return template;
      } else {
        return '';
      }
    } else {
      return this.getValueToUse();
    }
  };

  CellComp.prototype.getRenderedRow = function () {
    return this.rowComp;
  };

  CellComp.prototype.isSuppressNavigable = function () {
    return this.column.isSuppressNavigable(this.rowNode);
  };

  CellComp.prototype.getCellRenderer = function () {
    return this.cellRenderer;
  };

  CellComp.prototype.getCellEditor = function () {
    return this.cellEditor;
  }; // + stop editing {forceRefresh: true, suppressFlash: true}
  // + event cellChanged {}
  // + cellRenderer.params.refresh() {} -> method passes 'as is' to the cellRenderer, so params could be anything
  // + rowComp: event dataChanged {animate: update, newData: !update}
  // + rowComp: api refreshCells() {animate: true/false}
  // + rowRenderer: api softRefreshView() {}


  CellComp.prototype.refreshCell = function (params) {
    if (this.editingCell) {
      return;
    } // if we are in the middle of 'stopEditing', then we don't refresh here, as refresh gets called explicitly


    if (this.suppressRefreshCell) {
      return;
    }

    var colDef = this.getComponentHolder();
    var newData = params && params.newData;
    var suppressFlash = params && params.suppressFlash || colDef.suppressCellFlash;
    var forceRefresh = params && params.forceRefresh;
    var oldValue = this.value;
    this.getValueAndFormat(); // for simple values only (not pojo's), see if the value is the same, and if it is, skip the refresh.
    // when never allow skipping after an edit, as after editing, we need to put the GUI back to the way
    // if was before the edit.

    var valuesDifferent = !this.valuesAreEqual(oldValue, this.value);
    var dataNeedsUpdating = forceRefresh || valuesDifferent;

    if (dataNeedsUpdating) {
      // if it's 'new data', then we don't refresh the cellRenderer, even if refresh method is available.
      // this is because if the whole data is new (ie we are showing stock price 'BBA' now and not 'SSD')
      // then we are not showing a movement in the stock price, rather we are showing different stock.
      var cellRendererRefreshed = newData ? false : this.attemptCellRendererRefresh(); // we do the replace if not doing refresh, or if refresh was unsuccessful.
      // the refresh can be unsuccessful if we are using a framework (eg ng2 or react) and the framework
      // wrapper has the refresh method, but the underlying component doesn't

      if (!cellRendererRefreshed) {
        this.replaceContentsAfterRefresh();
      }

      var flashCell = !suppressFlash && (this.beans.gridOptionsWrapper.isEnableCellChangeFlash() || colDef.enableCellChangeFlash);

      if (flashCell) {
        this.flashCell();
      } // need to check rules. note, we ignore colDef classes and styles, these are assumed to be static


      this.postProcessStylesFromColDef();
      this.postProcessClassesFromColDef();
    } // we can't readily determine if the data in an angularjs template has changed, so here we just update
    // and recompile (if applicable)


    this.updateAngular1ScopeAndCompile();
    this.refreshToolTip(); // we do cellClassRules even if the value has not changed, so that users who have rules that
    // look at other parts of the row (where the other part of the row might of changed) will work.

    this.postProcessCellClassRules();
  }; // user can also call this via API


  CellComp.prototype.flashCell = function () {
    this.animateCell('data-changed');
  };

  CellComp.prototype.animateCell = function (cssName) {
    var fullName = 'ag-cell-' + cssName;
    var animationFullName = 'ag-cell-' + cssName + '-animation';
    var element = this.getGui(); // we want to highlight the cells, without any animation

    utils_1._.addCssClass(element, fullName);

    utils_1._.removeCssClass(element, animationFullName); // then once that is applied, we remove the highlight with animation


    window.setTimeout(function () {
      utils_1._.removeCssClass(element, fullName);

      utils_1._.addCssClass(element, animationFullName);

      window.setTimeout(function () {
        // and then to leave things as we got them, we remove the animation
        utils_1._.removeCssClass(element, animationFullName);
      }, 1000);
    }, 500);
  };

  CellComp.prototype.replaceContentsAfterRefresh = function () {
    // otherwise we rip out the cell and replace it
    utils_1._.clearElement(this.eParentOfValue); // remove old renderer component if it exists


    if (this.cellRenderer && this.cellRenderer.destroy) {
      this.cellRenderer.destroy();
    }

    this.cellRenderer = null;
    this.cellRendererGui = null; // populate

    this.putDataIntoCellAfterRefresh();
    this.updateAngular1ScopeAndCompile();
  };

  CellComp.prototype.updateAngular1ScopeAndCompile = function () {
    if (this.beans.gridOptionsWrapper.isAngularCompileRows() && this.scope) {
      this.scope.data = __assign({}, this.rowNode.data);
      this.angular1Compile();
    }
  };

  CellComp.prototype.angular1Compile = function () {
    // if angular compiling, then need to also compile the cell again (angular compiling sucks, please wait...)
    if (this.beans.gridOptionsWrapper.isAngularCompileRows()) {
      var eGui = this.getGui(); // only compile the node if it hasn't already been done
      // this prevents "orphaned" node leaks

      if (!eGui.classList.contains('ng-scope') || eGui.childElementCount === 0) {
        var compiledElement_1 = this.beans.$compile(eGui)(this.scope);
        this.addDestroyFunc(function () {
          compiledElement_1.remove();
        });
      }
    }
  };

  CellComp.prototype.postProcessStylesFromColDef = function () {
    var stylesToUse = this.processStylesFromColDef();

    if (stylesToUse) {
      utils_1._.addStylesToElement(this.getGui(), stylesToUse);
    }
  };

  CellComp.prototype.preProcessStylesFromColDef = function () {
    var stylesToUse = this.processStylesFromColDef();
    return utils_1._.cssStyleObjectToMarkup(stylesToUse);
  };

  CellComp.prototype.processStylesFromColDef = function () {
    var colDef = this.getComponentHolder();

    if (colDef.cellStyle) {
      var cssToUse = void 0;

      if (typeof colDef.cellStyle === 'function') {
        var cellStyleParams = {
          value: this.value,
          data: this.rowNode.data,
          node: this.rowNode,
          colDef: colDef,
          column: this.column,
          $scope: this.scope,
          context: this.beans.gridOptionsWrapper.getContext(),
          api: this.beans.gridOptionsWrapper.getApi()
        };
        var cellStyleFunc = colDef.cellStyle;
        cssToUse = cellStyleFunc(cellStyleParams);
      } else {
        cssToUse = colDef.cellStyle;
      }

      return cssToUse;
    }
  };

  CellComp.prototype.postProcessClassesFromColDef = function () {
    var _this = this;

    this.processClassesFromColDef(function (className) {
      return utils_1._.addCssClass(_this.getGui(), className);
    });
  };

  CellComp.prototype.preProcessClassesFromColDef = function () {
    var res = [];
    this.processClassesFromColDef(function (className) {
      return res.push(className);
    });
    return res;
  };

  CellComp.prototype.processClassesFromColDef = function (onApplicableClass) {
    var colDef = this.getComponentHolder();
    this.beans.stylingService.processStaticCellClasses(colDef, {
      value: this.value,
      data: this.rowNode.data,
      node: this.rowNode,
      colDef: colDef,
      rowIndex: this.rowNode.rowIndex,
      $scope: this.scope,
      api: this.beans.gridOptionsWrapper.getApi(),
      context: this.beans.gridOptionsWrapper.getContext()
    }, onApplicableClass);
  };

  CellComp.prototype.putDataIntoCellAfterRefresh = function () {
    // template gets preference, then cellRenderer, then do it ourselves
    var colDef = this.getComponentHolder();

    if (colDef.template) {
      // template is really only used for angular 1 - as people using ng1 are used to providing templates with
      // bindings in it. in ng2, people will hopefully want to provide components, not templates.
      this.eParentOfValue.innerHTML = colDef.template;
    } else if (colDef.templateUrl) {
      // likewise for templateUrl - it's for ng1 really - when we move away from ng1, we can take these out.
      // niall was pro angular 1 when writing template and templateUrl, if writing from scratch now, would
      // not do these, but would follow a pattern that was friendly towards components, not templates.
      var template = this.beans.templateService.getTemplate(colDef.templateUrl, this.refreshCell.bind(this, true));

      if (template) {
        this.eParentOfValue.innerHTML = template;
      }
    } else {
      // we can switch from using a cell renderer back to the default if a user
      // is using cellRendererSelect
      if (this.usingCellRenderer) {
        if (!this.attachCellRenderer()) {
          this.usingCellRenderer = false;
        }
      }

      if (!this.usingCellRenderer) {
        var valueToUse = this.getValueToUse();

        if (valueToUse !== null && valueToUse !== undefined) {
          this.eParentOfValue.innerHTML = utils_1._.escape(valueToUse);
        }
      }
    }
  };

  CellComp.prototype.attemptCellRendererRefresh = function () {
    if (utils_1._.missing(this.cellRenderer) || !this.cellRenderer || utils_1._.missing(this.cellRenderer.refresh)) {
      return false;
    } // if the cell renderer has a refresh method, we call this instead of doing a refresh


    var params = this.createCellRendererParams(); // take any custom params off of the user

    var finalParams = this.beans.userComponentFactory.createFinalParams(this.getComponentHolder(), this.cellRendererType, params);
    var result = this.cellRenderer.refresh(finalParams); // NOTE on undefined: previous version of the cellRenderer.refresh() interface
    // returned nothing, if the method existed, we assumed it refreshed. so for
    // backwards compatibility, we assume if method exists and returns nothing,
    // that it was successful.

    return result === true || result === undefined;
  };

  CellComp.prototype.refreshToolTip = function () {
    var newTooltip = this.getToolTip();

    if (this.tooltip !== newTooltip) {
      this.tooltip = newTooltip;

      if (!this.beans.gridOptionsWrapper.isEnableBrowserTooltips()) {
        return;
      }

      if (utils_1._.exists(newTooltip)) {
        var tooltipSanitised = utils_1._.escape(this.tooltip);

        this.eParentOfValue.setAttribute('title', tooltipSanitised);
      } else {
        this.eParentOfValue.removeAttribute('title');
      }
    }
  };

  CellComp.prototype.valuesAreEqual = function (val1, val2) {
    // if the user provided an equals method, use that, otherwise do simple comparison
    var colDef = this.getComponentHolder();
    var equalsMethod = colDef ? colDef.equals : null;

    if (equalsMethod) {
      return equalsMethod(val1, val2);
    }

    return val1 === val2;
  };

  CellComp.prototype.getToolTip = function () {
    var colDef = this.getComponentHolder();
    var data = this.rowNode.data;

    if (colDef.tooltipField && utils_1._.exists(data)) {
      return utils_1._.getValueUsingField(data, colDef.tooltipField, this.column.isTooltipFieldContainsDots());
    }

    var valueGetter = colDef.tooltipValueGetter || colDef.tooltip;

    if (valueGetter) {
      return valueGetter({
        api: this.beans.gridOptionsWrapper.getApi(),
        columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
        colDef: colDef,
        column: this.getColumn(),
        context: this.beans.gridOptionsWrapper.getContext(),
        value: this.value,
        valueFormatted: this.valueFormatted,
        rowIndex: this.gridCell.rowIndex,
        node: this.rowNode,
        data: this.rowNode.data,
        $scope: this.scope
      });
    }

    return null;
  };

  CellComp.prototype.getTooltipText = function (escape) {
    if (escape === void 0) {
      escape = true;
    }

    return escape ? utils_1._.escape(this.tooltip) : this.tooltip;
  };

  CellComp.prototype.processCellClassRules = function (onApplicableClass, onNotApplicableClass) {
    var colDef = this.getComponentHolder();
    this.beans.stylingService.processClassRules(colDef.cellClassRules, {
      value: this.value,
      data: this.rowNode.data,
      node: this.rowNode,
      colDef: colDef,
      rowIndex: this.gridCell.rowIndex,
      api: this.beans.gridOptionsWrapper.getApi(),
      $scope: this.scope,
      context: this.beans.gridOptionsWrapper.getContext()
    }, onApplicableClass, onNotApplicableClass);
  };

  CellComp.prototype.postProcessCellClassRules = function () {
    var _this = this;

    this.processCellClassRules(function (className) {
      utils_1._.addCssClass(_this.getGui(), className);
    }, function (className) {
      utils_1._.removeCssClass(_this.getGui(), className);
    });
  };

  CellComp.prototype.preProcessCellClassRules = function () {
    var res = [];
    this.processCellClassRules(function (className) {
      res.push(className);
    }, function (className) {// not catered for, if creating, no need
      // to remove class as it was never there
    });
    return res;
  }; // a wrapper is used when we are putting a selection checkbox in the cell with the value


  CellComp.prototype.setUsingWrapper = function () {
    var colDef = this.getComponentHolder(); // never allow selection or dragging on pinned rows

    if (this.rowNode.rowPinned) {
      this.usingWrapper = false;
      this.includeSelectionComponent = false;
      this.includeRowDraggingComponent = false;
      return;
    }

    var cbSelectionIsFunc = typeof colDef.checkboxSelection === 'function';
    var rowDraggableIsFunc = typeof colDef.rowDrag === 'function';
    this.includeSelectionComponent = cbSelectionIsFunc || colDef.checkboxSelection === true;
    this.includeRowDraggingComponent = rowDraggableIsFunc || colDef.rowDrag === true;
    this.usingWrapper = this.includeRowDraggingComponent || this.includeSelectionComponent;
  };

  CellComp.prototype.chooseCellRenderer = function () {
    // template gets preference, then cellRenderer, then do it ourselves
    var colDef = this.getComponentHolder(); // templates are for ng1, ideally we wouldn't have these, they are ng1 support
    // inside the core which is bad

    if (colDef.template || colDef.templateUrl) {
      this.usingCellRenderer = false;
      return;
    }

    var params = this.createCellRendererParams();
    var cellRenderer = this.beans.userComponentFactory.lookupComponentClassDef(colDef, 'cellRenderer', params);
    var pinnedRowCellRenderer = this.beans.userComponentFactory.lookupComponentClassDef(colDef, 'pinnedRowCellRenderer', params);

    if (pinnedRowCellRenderer && this.rowNode.rowPinned) {
      this.cellRendererType = CellComp.CELL_RENDERER_TYPE_PINNED;
      this.usingCellRenderer = true;
    } else if (cellRenderer) {
      this.cellRendererType = CellComp.CELL_RENDERER_TYPE_NORMAL;
      this.usingCellRenderer = true;
    } else {
      this.usingCellRenderer = false;
    }
  };

  CellComp.prototype.createCellRendererInstance = function () {
    var params = this.createCellRendererParams();
    this.cellRendererVersion++;
    var callback = this.afterCellRendererCreated.bind(this, this.cellRendererVersion); // this can return null in the event that the user has switched from a renderer component to nothing, for example
    // when using a cellRendererSelect to return a component or null depending on row data etc

    var componentPromise;

    if (this.cellRendererType === CellComp.CELL_RENDERER_TYPE_NORMAL) {
      componentPromise = this.beans.userComponentFactory.newCellRenderer(this.getComponentHolder(), params);
    } else {
      componentPromise = this.beans.userComponentFactory.newPinnedRowCellRenderer(this.getComponentHolder(), params);
    }

    if (componentPromise) {
      componentPromise.then(callback);
      return true;
    }

    return false;
  };

  CellComp.prototype.afterCellRendererCreated = function (cellRendererVersion, cellRenderer) {
    // see if daemon
    if (!this.isAlive() || cellRendererVersion !== this.cellRendererVersion) {
      if (cellRenderer.destroy) {
        cellRenderer.destroy();
      }

      return;
    }

    this.cellRenderer = cellRenderer;
    this.cellRendererGui = this.cellRenderer.getGui();

    if (utils_1._.missing(this.cellRendererGui)) {
      return;
    } // if async components, then it's possible the user started editing since
    // this call was made


    if (!this.editingCell) {
      this.eParentOfValue.appendChild(this.cellRendererGui);
    }
  };

  CellComp.prototype.attachCellRenderer = function () {
    if (!this.usingCellRenderer) {
      return false;
    }

    return this.createCellRendererInstance();
  };

  CellComp.prototype.createCellRendererParams = function () {
    var _this = this;

    var params = {
      value: this.value,
      valueFormatted: this.valueFormatted,
      getValue: this.getValue.bind(this),
      setValue: function setValue(value) {
        _this.beans.valueService.setValue(_this.rowNode, _this.column, value);
      },
      formatValue: this.formatValue.bind(this),
      data: this.rowNode.data,
      node: this.rowNode,
      colDef: this.getComponentHolder(),
      column: this.column,
      $scope: this.scope,
      rowIndex: this.gridCell.rowIndex,
      api: this.beans.gridOptionsWrapper.getApi(),
      columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
      context: this.beans.gridOptionsWrapper.getContext(),
      refreshCell: this.refreshCell.bind(this),
      eGridCell: this.getGui(),
      eParentOfValue: this.eParentOfValue,
      // these bits are not documented anywhere, so we could drop them?
      // it was in the olden days to allow user to register for when rendered
      // row was removed (the row comp was removed), however now that the user
      // can provide components for cells, the destroy method gets call when this
      // happens so no longer need to fire event.
      addRowCompListener: this.rowComp ? this.rowComp.addEventListener.bind(this.rowComp) : null,
      addRenderedRowListener: function addRenderedRowListener(eventType, listener) {
        console.warn('ag-Grid: since ag-Grid .v11, params.addRenderedRowListener() is now params.addRowCompListener()');

        if (_this.rowComp) {
          _this.rowComp.addEventListener(eventType, listener);
        }
      }
    };
    return params;
  };

  CellComp.prototype.formatValue = function (value) {
    var valueFormatted = this.beans.valueFormatterService.formatValue(this.column, this.rowNode, this.scope, value);
    var valueFormattedExists = valueFormatted !== null && valueFormatted !== undefined;
    return valueFormattedExists ? valueFormatted : value;
  };

  CellComp.prototype.getValueToUse = function () {
    var valueFormattedExists = this.valueFormatted !== null && this.valueFormatted !== undefined;
    return valueFormattedExists ? this.valueFormatted : this.value;
  };

  CellComp.prototype.getValueAndFormat = function () {
    this.value = this.getValue();
    this.valueFormatted = this.beans.valueFormatterService.formatValue(this.column, this.rowNode, this.scope, this.value);
  };

  CellComp.prototype.getValue = function () {
    // if we don't check this, then the grid will render leaf groups as open even if we are not
    // allowing the user to open leaf groups. confused? remember for pivot mode we don't allow
    // opening leaf groups, so we have to force leafGroups to be closed in case the user expanded
    // them via the API, or user user expanded them in the UI before turning on pivot mode
    var lockedClosedGroup = this.rowNode.leafGroup && this.beans.columnController.isPivotMode();
    var isOpenGroup = this.rowNode.group && this.rowNode.expanded && !this.rowNode.footer && !lockedClosedGroup; // are we showing group footers

    var groupFootersEnabled = this.beans.gridOptionsWrapper.isGroupIncludeFooter(); // if doing footers, we normally don't show agg data at group level when group is open

    var groupAlwaysShowAggData = this.beans.gridOptionsWrapper.isGroupSuppressBlankHeader(); // if doing grouping and footers, we don't want to include the agg value
    // in the header when the group is open

    var ignoreAggData = isOpenGroup && groupFootersEnabled && !groupAlwaysShowAggData;
    return this.beans.valueService.getValue(this.column, this.rowNode, false, ignoreAggData);
  };

  CellComp.prototype.onMouseEvent = function (eventName, mouseEvent) {
    if (utils_1._.isStopPropagationForAgGrid(mouseEvent)) {
      return;
    }

    switch (eventName) {
      case 'click':
        this.onCellClicked(mouseEvent);
        break;

      case 'mousedown':
        this.onMouseDown(mouseEvent);
        break;

      case 'dblclick':
        this.onCellDoubleClicked(mouseEvent);
        break;

      case 'mouseout':
        this.onMouseOut(mouseEvent);
        break;

      case 'mouseover':
        this.onMouseOver(mouseEvent);
        break;
    }
  };

  CellComp.prototype.dispatchCellContextMenuEvent = function (event) {
    var colDef = this.getComponentHolder();
    var cellContextMenuEvent = this.createEvent(event, events_1.Events.EVENT_CELL_CONTEXT_MENU);
    this.beans.eventService.dispatchEvent(cellContextMenuEvent);

    if (colDef.onCellContextMenu) {
      // to make the callback async, do in a timeout
      window.setTimeout(function () {
        return colDef.onCellContextMenu(cellContextMenuEvent);
      }, 0);
    }
  };

  CellComp.prototype.createEvent = function (domEvent, eventType) {
    var event = {
      node: this.rowNode,
      data: this.rowNode.data,
      value: this.value,
      column: this.column,
      colDef: this.getComponentHolder(),
      context: this.beans.gridOptionsWrapper.getContext(),
      api: this.beans.gridApi,
      columnApi: this.beans.columnApi,
      rowPinned: this.rowNode.rowPinned,
      event: domEvent,
      type: eventType,
      rowIndex: this.rowNode.rowIndex
    }; // because we are hacking in $scope for angular 1, we have to de-reference

    if (this.scope) {
      event.$scope = this.scope;
    }

    return event;
  };

  CellComp.prototype.onMouseOut = function (mouseEvent) {
    var cellMouseOutEvent = this.createEvent(mouseEvent, events_1.Events.EVENT_CELL_MOUSE_OUT);
    this.beans.eventService.dispatchEvent(cellMouseOutEvent);
    this.beans.columnHoverService.clearMouseOver();
  };

  CellComp.prototype.onMouseOver = function (mouseEvent) {
    var cellMouseOverEvent = this.createEvent(mouseEvent, events_1.Events.EVENT_CELL_MOUSE_OVER);
    this.beans.eventService.dispatchEvent(cellMouseOverEvent);
    this.beans.columnHoverService.setMouseOver([this.column]);
  };

  CellComp.prototype.onCellDoubleClicked = function (mouseEvent) {
    var colDef = this.getComponentHolder(); // always dispatch event to eventService

    var cellDoubleClickedEvent = this.createEvent(mouseEvent, events_1.Events.EVENT_CELL_DOUBLE_CLICKED);
    this.beans.eventService.dispatchEvent(cellDoubleClickedEvent); // check if colDef also wants to handle event

    if (typeof colDef.onCellDoubleClicked === 'function') {
      // to make the callback async, do in a timeout
      window.setTimeout(function () {
        return colDef.onCellDoubleClicked(cellDoubleClickedEvent);
      }, 0);
    }

    var editOnDoubleClick = !this.beans.gridOptionsWrapper.isSingleClickEdit() && !this.beans.gridOptionsWrapper.isSuppressClickEdit();

    if (editOnDoubleClick) {
      this.startRowOrCellEdit();
    }
  }; // called by rowRenderer when user navigates via tab key


  CellComp.prototype.startRowOrCellEdit = function (keyPress, charPress) {
    if (this.beans.gridOptionsWrapper.isFullRowEdit()) {
      this.rowComp.startRowEditing(keyPress, charPress, this);
    } else {
      this.startEditingIfEnabled(keyPress, charPress, true);
    }
  };

  CellComp.prototype.isCellEditable = function () {
    return this.column.isCellEditable(this.rowNode);
  }; // either called internally if single cell editing, or called by rowRenderer if row editing


  CellComp.prototype.startEditingIfEnabled = function (keyPress, charPress, cellStartedEdit) {
    if (keyPress === void 0) {
      keyPress = null;
    }

    if (charPress === void 0) {
      charPress = null;
    }

    if (cellStartedEdit === void 0) {
      cellStartedEdit = false;
    } // don't do it if not editable


    if (!this.isCellEditable()) {
      return;
    } // don't do it if already editing


    if (this.editingCell) {
      return;
    }

    this.editingCell = true;
    this.cellEditorVersion++;
    var callback = this.afterCellEditorCreated.bind(this, this.cellEditorVersion);
    var params = this.createCellEditorParams(keyPress, charPress, cellStartedEdit);
    this.createCellEditor(params).then(callback); // if we don't do this, and editor component is async, then there will be a period
    // when the component isn't present and keyboard navigation won't work - so example
    // of user hitting tab quickly (more quickly than renderers getting created) won't work

    var cellEditorAsync = utils_1._.missing(this.cellEditor);

    if (cellEditorAsync && cellStartedEdit) {
      this.focusCell(true);
    }
  };

  CellComp.prototype.createCellEditor = function (params) {
    var _this = this;

    var cellEditorPromise = this.beans.userComponentFactory.newCellEditor(this.column.getColDef(), params);
    return cellEditorPromise.map(function (cellEditor) {
      var isPopup = cellEditor.isPopup && cellEditor.isPopup();

      if (!isPopup) {
        return cellEditor;
      }

      if (_this.beans.gridOptionsWrapper.isFullRowEdit()) {
        console.warn('ag-Grid: popup cellEditor does not work with fullRowEdit - you cannot use them both ' + '- either turn off fullRowEdit, or stop using popup editors.');
      } // if a popup, then we wrap in a popup editor and return the popup


      var popupEditorWrapper = new popupEditorWrapper_1.PopupEditorWrapper(cellEditor);

      _this.beans.context.wireBean(popupEditorWrapper);

      popupEditorWrapper.init(params);
      return popupEditorWrapper;
    });
  };

  CellComp.prototype.afterCellEditorCreated = function (cellEditorVersion, cellEditor) {
    // if editingCell=false, means user cancelled the editor before component was ready.
    // if versionMismatch, then user cancelled the edit, then started the edit again, and this
    //   is the first editor which is now stale.
    var versionMismatch = cellEditorVersion !== this.cellEditorVersion;

    if (versionMismatch || !this.editingCell) {
      if (cellEditor.destroy) {
        cellEditor.destroy();
      }

      return;
    }

    if (cellEditor.isCancelBeforeStart && cellEditor.isCancelBeforeStart()) {
      if (cellEditor.destroy) {
        cellEditor.destroy();
      }

      this.editingCell = false;
      return;
    }

    if (!cellEditor.getGui) {
      console.warn("ag-Grid: cellEditor for column " + this.column.getId() + " is missing getGui() method"); // no getGui, for React guys, see if they attached a react component directly

      if (cellEditor.render) {
        console.warn("ag-Grid: we found 'render' on the component, are you trying to set a React renderer but added it as colDef.cellEditor instead of colDef.cellEditorFmk?");
      }

      if (cellEditor.destroy) {
        cellEditor.destroy();
      }

      this.editingCell = false;
      return;
    }

    this.cellEditor = cellEditor;
    this.cellEditorInPopup = cellEditor.isPopup !== undefined && cellEditor.isPopup();
    this.setInlineEditingClass();

    if (this.cellEditorInPopup) {
      this.addPopupCellEditor();
    } else {
      this.addInCellEditor();
    }

    if (cellEditor.afterGuiAttached) {
      cellEditor.afterGuiAttached();
    }

    var event = this.createEvent(null, events_1.Events.EVENT_CELL_EDITING_STARTED);
    this.beans.eventService.dispatchEvent(event);
  };

  CellComp.prototype.addInCellEditor = function () {
    utils_1._.clearElement(this.getGui());

    if (this.cellEditor) {
      this.getGui().appendChild(this.cellEditor.getGui());
    }

    this.angular1Compile();
  };

  CellComp.prototype.addPopupCellEditor = function () {
    var _this = this;

    var ePopupGui = this.cellEditor ? this.cellEditor.getGui() : null;
    this.hideEditorPopup = this.beans.popupService.addAsModalPopup(ePopupGui, true, // callback for when popup disappears
    function () {
      _this.onPopupEditorClosed();
    });
    this.beans.popupService.positionPopupOverComponent({
      column: this.column,
      rowNode: this.rowNode,
      type: 'popupCellEditor',
      eventSource: this.getGui(),
      ePopup: ePopupGui,
      keepWithinBounds: true
    });
    this.angular1Compile();
  };

  CellComp.prototype.onPopupEditorClosed = function () {
    // we only call stopEditing if we are editing, as
    // it's possible the popup called 'stop editing'
    // before this, eg if 'enter key' was pressed on
    // the editor.
    if (this.editingCell) {
      // note: this only happens when use clicks outside of the grid. if use clicks on another
      // cell, then the editing will have already stopped on this cell
      this.stopRowOrCellEdit(); // we only focus cell again if this cell is still focused. it is possible
      // it is not focused if the user cancelled the edit by clicking on another
      // cell outside of this one

      if (this.beans.focusedCellController.isCellFocused(this.gridCell)) {
        this.focusCell(true);
      }
    }
  }; // if we are editing inline, then we don't have the padding in the cell (set in the themes)
  // to allow the text editor full access to the entire cell


  CellComp.prototype.setInlineEditingClass = function () {
    // ag-cell-inline-editing - appears when user is inline editing
    // ag-cell-not-inline-editing - appears when user is no inline editing
    // ag-cell-popup-editing - appears when user is editing cell in popup (appears on the cell, not on the popup)
    // note: one of {ag-cell-inline-editing, ag-cell-not-inline-editing} is always present, they toggle.
    //       however {ag-cell-popup-editing} shows when popup, so you have both {ag-cell-popup-editing}
    //       and {ag-cell-not-inline-editing} showing at the same time.
    var editingInline = this.editingCell && !this.cellEditorInPopup;
    var popupEditorShowing = this.editingCell && this.cellEditorInPopup;

    utils_1._.addOrRemoveCssClass(this.getGui(), "ag-cell-inline-editing", editingInline);

    utils_1._.addOrRemoveCssClass(this.getGui(), "ag-cell-not-inline-editing", !editingInline);

    utils_1._.addOrRemoveCssClass(this.getGui(), "ag-cell-popup-editing", popupEditorShowing);

    utils_1._.addOrRemoveCssClass(this.getGui().parentNode, "ag-row-inline-editing", editingInline);

    utils_1._.addOrRemoveCssClass(this.getGui().parentNode, "ag-row-not-inline-editing", !editingInline);
  };

  CellComp.prototype.createCellEditorParams = function (keyPress, charPress, cellStartedEdit) {
    var params = {
      value: this.getValue(),
      keyPress: keyPress,
      charPress: charPress,
      column: this.column,
      colDef: this.column.getColDef(),
      rowIndex: this.gridCell.rowIndex,
      node: this.rowNode,
      data: this.rowNode.data,
      api: this.beans.gridOptionsWrapper.getApi(),
      cellStartedEdit: cellStartedEdit,
      columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
      context: this.beans.gridOptionsWrapper.getContext(),
      $scope: this.scope,
      onKeyDown: this.onKeyDown.bind(this),
      stopEditing: this.stopEditingAndFocus.bind(this),
      eGridCell: this.getGui(),
      parseValue: this.parseValue.bind(this),
      formatValue: this.formatValue.bind(this)
    };
    return params;
  }; // cell editors call this, when they want to stop for reasons other
  // than what we pick up on. eg selecting from a dropdown ends editing.


  CellComp.prototype.stopEditingAndFocus = function (suppressNavigateAfterEdit) {
    if (suppressNavigateAfterEdit === void 0) {
      suppressNavigateAfterEdit = false;
    }

    this.stopRowOrCellEdit();
    this.focusCell(true);

    if (!suppressNavigateAfterEdit) {
      this.navigateAfterEdit();
    }
  };

  CellComp.prototype.parseValue = function (newValue) {
    var colDef = this.getComponentHolder();
    var params = {
      node: this.rowNode,
      data: this.rowNode.data,
      oldValue: this.value,
      newValue: newValue,
      colDef: colDef,
      column: this.column,
      api: this.beans.gridOptionsWrapper.getApi(),
      columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
      context: this.beans.gridOptionsWrapper.getContext()
    };
    var valueParser = colDef.valueParser;
    return utils_1._.exists(valueParser) ? this.beans.expressionService.evaluate(valueParser, params) : newValue;
  };

  CellComp.prototype.focusCell = function (forceBrowserFocus) {
    if (forceBrowserFocus === void 0) {
      forceBrowserFocus = false;
    }

    this.beans.focusedCellController.setFocusedCell(this.gridCell.rowIndex, this.column, this.rowNode.rowPinned, forceBrowserFocus);
  };

  CellComp.prototype.setFocusInOnEditor = function () {
    if (this.editingCell) {
      if (this.cellEditor && this.cellEditor.focusIn) {
        // if the editor is present, then we just focus it
        this.cellEditor.focusIn();
      } else {
        // if the editor is not present, it means async cell editor (eg React fibre)
        // and we are trying to set focus before the cell editor is present, so we
        // focus the cell instead
        this.focusCell(true);
      }
    }
  };

  CellComp.prototype.isEditing = function () {
    return this.editingCell;
  };

  CellComp.prototype.onKeyDown = function (event) {
    var key = event.which || event.keyCode;

    switch (key) {
      case constants_1.Constants.KEY_ENTER:
        this.onEnterKeyDown();
        break;

      case constants_1.Constants.KEY_F2:
        this.onF2KeyDown();
        break;

      case constants_1.Constants.KEY_ESCAPE:
        this.onEscapeKeyDown();
        break;

      case constants_1.Constants.KEY_TAB:
        this.onTabKeyDown(event);
        break;

      case constants_1.Constants.KEY_BACKSPACE:
      case constants_1.Constants.KEY_DELETE:
        this.onBackspaceOrDeleteKeyPressed(key);
        break;

      case constants_1.Constants.KEY_DOWN:
      case constants_1.Constants.KEY_UP:
      case constants_1.Constants.KEY_RIGHT:
      case constants_1.Constants.KEY_LEFT:
        this.onNavigationKeyPressed(event, key);
        break;
    }
  };

  CellComp.prototype.setFocusOutOnEditor = function () {
    if (this.editingCell && this.cellEditor && this.cellEditor.focusOut) {
      this.cellEditor.focusOut();
    }
  };

  CellComp.prototype.onNavigationKeyPressed = function (event, key) {
    if (this.editingCell) {
      return;
    }

    if (event.shiftKey && this.rangeSelectionEnabled) {
      this.onShiftRangeSelect(key);
    } else {
      this.beans.rowRenderer.navigateToNextCell(event, key, this.gridCell, true);
    } // if we don't prevent default, the grid will scroll with the navigation keys


    event.preventDefault();
  };

  CellComp.prototype.onShiftRangeSelect = function (key) {
    var success = this.beans.rangeController.extendRangeInDirection(this.gridCell, key);

    if (!success) {
      return;
    }

    var ranges = this.beans.rangeController.getCellRanges(); // this should never happen, as extendRangeFromCell should always have one range after getting called

    if (utils_1._.missing(ranges) || !ranges || ranges.length !== 1) {
      return;
    }

    var endCell = ranges[0].end;
    this.beans.rowRenderer.ensureCellVisible(endCell);
  };

  CellComp.prototype.onTabKeyDown = function (event) {
    this.beans.rowRenderer.onTabKeyDown(this, event);
  };

  CellComp.prototype.onBackspaceOrDeleteKeyPressed = function (key) {
    if (!this.editingCell) {
      this.startRowOrCellEdit(key);
    }
  };

  CellComp.prototype.onEnterKeyDown = function () {
    if (this.editingCell || this.rowComp.isEditing()) {
      this.stopEditingAndFocus();
    } else {
      if (this.beans.gridOptionsWrapper.isEnterMovesDown()) {
        this.beans.rowRenderer.navigateToNextCell(null, constants_1.Constants.KEY_DOWN, this.gridCell, false);
      } else {
        this.startRowOrCellEdit(constants_1.Constants.KEY_ENTER);
      }
    }
  };

  CellComp.prototype.navigateAfterEdit = function () {
    var fullRowEdit = this.beans.gridOptionsWrapper.isFullRowEdit();

    if (fullRowEdit) {
      return;
    }

    var enterMovesDownAfterEdit = this.beans.gridOptionsWrapper.isEnterMovesDownAfterEdit();

    if (enterMovesDownAfterEdit) {
      this.beans.rowRenderer.navigateToNextCell(null, constants_1.Constants.KEY_DOWN, this.gridCell, false);
    }
  };

  CellComp.prototype.onF2KeyDown = function () {
    if (!this.editingCell) {
      this.startRowOrCellEdit(constants_1.Constants.KEY_F2);
    }
  };

  CellComp.prototype.onEscapeKeyDown = function () {
    if (this.editingCell) {
      this.stopRowOrCellEdit(true);
      this.focusCell(true);
    }
  };

  CellComp.prototype.onKeyPress = function (event) {
    // check this, in case focus is on a (for example) a text field inside the cell,
    // in which cse we should not be listening for these key pressed
    var eventTarget = utils_1._.getTarget(event);

    var eventOnChildComponent = eventTarget !== this.getGui();

    if (eventOnChildComponent) {
      return;
    }

    if (!this.editingCell) {
      var pressedChar = String.fromCharCode(event.charCode);

      if (pressedChar === ' ') {
        this.onSpaceKeyPressed(event);
      } else {
        if (utils_1._.isEventFromPrintableCharacter(event)) {
          this.startRowOrCellEdit(null, pressedChar); // if we don't prevent default, then the keypress also gets applied to the text field
          // (at least when doing the default editor), but we need to allow the editor to decide
          // what it wants to do. we only do this IF editing was started - otherwise it messes
          // up when the use is not doing editing, but using rendering with text fields in cellRenderer
          // (as it would block the the user from typing into text fields).

          event.preventDefault();
        }
      }
    }
  };

  CellComp.prototype.onSpaceKeyPressed = function (event) {
    if (!this.editingCell && this.beans.gridOptionsWrapper.isRowSelection()) {
      var selected = this.rowNode.isSelected();
      this.rowNode.setSelected(!selected);
    } // prevent default as space key, by default, moves browser scroll down


    event.preventDefault();
  };

  CellComp.prototype.onMouseDown = function (mouseEvent) {
    // we only need to pass true to focusCell in when the browser is IE
    // and we are trying to focus a cell (has ag-cell class), otherwise
    // we pass false, as we don't want the cell to focus also get the browser
    // focus. if we did, then the cellRenderer could have a text field in it,
    // for example, and as the user clicks on the text field, the text field,
    // the focus doesn't get to the text field, instead to goes to the div
    // behind, making it impossible to select the text field.
    var forceBrowserFocus = false; // return if we are clicking on a row selection checkbox, otherwise the row will get selected AND
    // we do range selection, however if user is clicking checking, they are probably only interested
    // in row selection.

    if (utils_1._.isElementChildOfClass(mouseEvent.target, 'ag-selection-checkbox', 3)) {
      return;
    }

    if (utils_1._.isBrowserIE()) {
      var target = mouseEvent.target;

      if (target.classList.contains('ag-cell')) {
        forceBrowserFocus = true;
      }
    }

    this.focusCell(forceBrowserFocus); // if it's a right click, then if the cell is already in range,
    // don't change the range, however if the cell is not in a range,
    // we set a new range

    var leftMouseButtonClick = utils_1._.isLeftClick(mouseEvent);

    if (leftMouseButtonClick && this.beans.rangeController) {
      var thisCell = this.gridCell;

      if (mouseEvent.shiftKey) {
        this.beans.rangeController.extendRangeToCell(thisCell);
      } else {
        var ctrlKeyPressed = mouseEvent.ctrlKey || mouseEvent.metaKey;
        this.beans.rangeController.setRangeToCell(thisCell, ctrlKeyPressed);
      }
    }

    var cellMouseDownEvent = this.createEvent(mouseEvent, events_1.Events.EVENT_CELL_MOUSE_DOWN);
    this.beans.eventService.dispatchEvent(cellMouseDownEvent);
  }; // returns true if on iPad and this is second 'click' event in 200ms


  CellComp.prototype.isDoubleClickOnIPad = function () {
    if (!utils_1._.isUserAgentIPad()) {
      return false;
    }

    var nowMillis = new Date().getTime();
    var res = nowMillis - this.lastIPadMouseClickEvent < 200;
    this.lastIPadMouseClickEvent = nowMillis;
    return res;
  };

  CellComp.prototype.onCellClicked = function (mouseEvent) {
    // iPad doesn't have double click - so we need to mimic it do enable editing for
    // iPad.
    if (this.isDoubleClickOnIPad()) {
      this.onCellDoubleClicked(mouseEvent);
      mouseEvent.preventDefault(); // if we don't do this, then iPad zooms in

      return;
    }

    var cellClickedEvent = this.createEvent(mouseEvent, events_1.Events.EVENT_CELL_CLICKED);
    this.beans.eventService.dispatchEvent(cellClickedEvent);
    var colDef = this.getComponentHolder();

    if (colDef.onCellClicked) {
      // to make callback async, do in a timeout
      window.setTimeout(function () {
        return colDef.onCellClicked(cellClickedEvent);
      }, 0);
    }

    var editOnSingleClick = (this.beans.gridOptionsWrapper.isSingleClickEdit() || colDef.singleClickEdit) && !this.beans.gridOptionsWrapper.isSuppressClickEdit();

    if (editOnSingleClick) {
      this.startRowOrCellEdit();
    }

    utils_1._.doIeFocusHack(this.getGui());
  };

  CellComp.prototype.createGridCellVo = function () {
    var gridCellDef = {
      rowIndex: this.rowNode.rowIndex,
      floating: this.rowNode.rowPinned,
      column: this.column
    };
    this.gridCell = new gridCell_1.GridCell(gridCellDef);
  };

  CellComp.prototype.getGridCell = function () {
    return this.gridCell;
  };

  CellComp.prototype.getParentRow = function () {
    return this.eParentRow;
  };

  CellComp.prototype.setParentRow = function (eParentRow) {
    this.eParentRow = eParentRow;
  };

  CellComp.prototype.getColumn = function () {
    return this.column;
  };

  CellComp.prototype.getComponentHolder = function () {
    return this.column.getColDef();
  };

  CellComp.prototype.detach = function () {
    this.eParentRow.removeChild(this.getGui());
  }; // if the row is also getting destroyed, then we don't need to remove from dom,
  // as the row will also get removed, so no need to take out the cells from the row
  // if the row is going (removing is an expensive operation, so only need to remove
  // the top part)


  CellComp.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    if (this.cellEditor && this.cellEditor.destroy) {
      this.cellEditor.destroy();
      this.cellEditor = null;
    }

    if (this.cellRenderer && this.cellRenderer.destroy) {
      this.cellRenderer.destroy();
      this.cellRenderer = null;
    }
  };

  CellComp.prototype.onLeftChanged = function () {
    var left = this.modifyLeftForPrintLayout(this.getCellLeft());
    this.getGui().style.left = left + 'px';
  };

  CellComp.prototype.modifyLeftForPrintLayout = function (leftPosition) {
    if (!this.printLayout) {
      return leftPosition;
    }

    if (this.column.getPinned() === column_1.Column.PINNED_LEFT) {
      return leftPosition;
    }

    if (this.column.getPinned() === column_1.Column.PINNED_RIGHT) {
      var leftWidth_1 = this.beans.columnController.getPinnedLeftContainerWidth();
      var bodyWidth = this.beans.columnController.getBodyContainerWidth();
      return leftWidth_1 + bodyWidth + leftPosition;
    } // is in body


    var leftWidth = this.beans.columnController.getPinnedLeftContainerWidth();
    return leftWidth + leftPosition;
  };

  CellComp.prototype.onWidthChanged = function () {
    var width = this.getCellWidth();
    this.getGui().style.width = width + 'px';
  };

  CellComp.prototype.getRangeClasses = function () {
    var res = [];

    if (!this.rangeSelectionEnabled) {
      return res;
    }

    if (this.rangeCount !== 0) {
      res.push('ag-cell-range-selected');
    }

    if (this.rangeCount === 1) {
      res.push('ag-cell-range-selected-1');
    }

    if (this.rangeCount === 2) {
      res.push('ag-cell-range-selected-2');
    }

    if (this.rangeCount === 3) {
      res.push('ag-cell-range-selected-3');
    }

    if (this.rangeCount >= 4) {
      res.push('ag-cell-range-selected-4');
    }

    return res;
  };

  CellComp.prototype.onRowIndexChanged = function () {
    // when index changes, this influences items that need the index, so we update the
    // grid cell so they are working off the new index.
    this.createGridCellVo(); // when the index of the row changes, ie means the cell may have lost or gained focus

    this.onCellFocused(); // check range selection

    this.onRangeSelectionChanged();
  };

  CellComp.prototype.onRangeSelectionChanged = function () {
    if (!this.beans.enterprise) {
      return;
    }

    var newRangeCount = this.beans.rangeController.getCellRangeCount(this.gridCell);
    var element = this.getGui();

    if (this.rangeCount !== newRangeCount) {
      utils_1._.addOrRemoveCssClass(element, 'ag-cell-range-selected', newRangeCount !== 0);

      utils_1._.addOrRemoveCssClass(element, 'ag-cell-range-selected-1', newRangeCount === 1);

      utils_1._.addOrRemoveCssClass(element, 'ag-cell-range-selected-2', newRangeCount === 2);

      utils_1._.addOrRemoveCssClass(element, 'ag-cell-range-selected-3', newRangeCount === 3);

      utils_1._.addOrRemoveCssClass(element, 'ag-cell-range-selected-4', newRangeCount >= 4);

      this.rangeCount = newRangeCount;
    }
  };

  CellComp.prototype.onFirstRightPinnedChanged = function () {
    var firstRightPinned = this.column.isFirstRightPinned();

    if (this.firstRightPinned !== firstRightPinned) {
      this.firstRightPinned = firstRightPinned;

      utils_1._.addOrRemoveCssClass(this.getGui(), 'ag-cell-first-right-pinned', firstRightPinned);
    }
  };

  CellComp.prototype.onLastLeftPinnedChanged = function () {
    var lastLeftPinned = this.column.isLastLeftPinned();

    if (this.lastLeftPinned !== lastLeftPinned) {
      this.lastLeftPinned = lastLeftPinned;

      utils_1._.addOrRemoveCssClass(this.getGui(), 'ag-cell-last-left-pinned', lastLeftPinned);
    }
  };

  CellComp.prototype.populateTemplate = function () {
    if (this.usingWrapper) {
      this.eParentOfValue = this.getRefElement('eCellValue');
      this.eCellWrapper = this.getRefElement('eCellWrapper');

      if (this.includeRowDraggingComponent) {
        this.addRowDragging();
      }

      if (this.includeSelectionComponent) {
        this.addSelectionCheckbox();
      }
    } else {
      this.eParentOfValue = this.getGui();
    }
  };

  CellComp.prototype.addRowDragging = function () {
    // row dragging only available in default row model
    if (!this.beans.gridOptionsWrapper.isRowModelDefault()) {
      utils_1._.doOnce(function () {
        return console.warn('ag-Grid: row dragging is only allowed in the In Memory Row Model');
      }, 'CellComp.addRowDragging');

      return;
    }

    if (this.beans.gridOptionsWrapper.isPagination()) {
      utils_1._.doOnce(function () {
        return console.warn('ag-Grid: row dragging is not possible when doing pagination');
      }, 'CellComp.addRowDragging');

      return;
    }

    var rowDraggingComp = new rowDragComp_1.RowDragComp(this.rowNode, this.column, this.getValueToUse(), this.beans);
    this.addFeature(this.beans.context, rowDraggingComp); // let visibleFunc = this.getComponentHolder().checkboxSelection;
    // visibleFunc = typeof visibleFunc === 'function' ? visibleFunc : null;
    // cbSelectionComponent.init({rowNode: this.rowNode, column: this.column, visibleFunc: visibleFunc});
    // put the checkbox in before the value

    this.eCellWrapper.insertBefore(rowDraggingComp.getGui(), this.eParentOfValue);
  };

  CellComp.prototype.addSelectionCheckbox = function () {
    var cbSelectionComponent = new checkboxSelectionComponent_1.CheckboxSelectionComponent();
    this.beans.context.wireBean(cbSelectionComponent);
    var visibleFunc = this.getComponentHolder().checkboxSelection;
    visibleFunc = typeof visibleFunc === 'function' ? visibleFunc : null;
    cbSelectionComponent.init({
      rowNode: this.rowNode,
      column: this.column,
      visibleFunc: visibleFunc
    });
    this.addDestroyFunc(function () {
      return cbSelectionComponent.destroy();
    }); // put the checkbox in before the value

    this.eCellWrapper.insertBefore(cbSelectionComponent.getGui(), this.eParentOfValue);
  };

  CellComp.prototype.addDomData = function () {
    var _this = this;

    var element = this.getGui();
    this.beans.gridOptionsWrapper.setDomData(element, CellComp.DOM_DATA_KEY_CELL_COMP, this);
    this.addDestroyFunc(function () {
      return _this.beans.gridOptionsWrapper.setDomData(element, CellComp.DOM_DATA_KEY_CELL_COMP, null);
    });
  };

  CellComp.prototype.onCellFocused = function (event) {
    var cellFocused = this.beans.focusedCellController.isCellFocused(this.gridCell); // see if we need to change the classes on this cell

    if (cellFocused !== this.cellFocused) {
      // if we are not doing cell selection, then the focus class does not change
      var doingFocusCss = !this.beans.gridOptionsWrapper.isSuppressCellSelection();

      if (doingFocusCss) {
        utils_1._.addOrRemoveCssClass(this.getGui(), 'ag-cell-focus', cellFocused);
      }

      this.cellFocused = cellFocused;
    } // if this cell was just focused, see if we need to force browser focus, his can
    // happen if focus is programmatically set.


    if (cellFocused && event && event.forceBrowserFocus) {
      var eGui = this.getGui();
      eGui.focus();

      utils_1._.doIeFocusHack(eGui);
    } // if another cell was focused, and we are editing, then stop editing


    var fullRowEdit = this.beans.gridOptionsWrapper.isFullRowEdit();

    if (!cellFocused && !fullRowEdit && this.editingCell) {
      this.stopRowOrCellEdit();
    }
  }; // pass in 'true' to cancel the editing.


  CellComp.prototype.stopRowOrCellEdit = function (cancel) {
    if (cancel === void 0) {
      cancel = false;
    }

    if (this.beans.gridOptionsWrapper.isFullRowEdit()) {
      this.rowComp.stopRowEditing(cancel);
    } else {
      this.stopEditing(cancel);
    }
  };

  CellComp.prototype.stopEditing = function (cancel) {
    if (cancel === void 0) {
      cancel = false;
    }

    if (!this.editingCell) {
      return;
    } // if no cell editor, this means due to async, that the cell editor never got initialised,
    // so we just carry on regardless as if the editing was never started.


    if (!this.cellEditor) {
      this.editingCell = false;
      return;
    }

    var newValueExists = false;
    var newValue;

    if (!cancel) {
      // also have another option here to cancel after editing, so for example user could have a popup editor and
      // it is closed by user clicking outside the editor. then the editor will close automatically (with false
      // passed above) and we need to see if the editor wants to accept the new value.
      var userWantsToCancel = this.cellEditor.isCancelAfterEnd && this.cellEditor.isCancelAfterEnd();

      if (!userWantsToCancel) {
        newValue = this.cellEditor.getValue();
        newValueExists = true;
      }
    } // it is important we set this after setValue() above, as otherwise the cell will flash
    // when editing stops. the 'refresh' method checks editing, and doesn't refresh editing cells.
    // thus it will skip the refresh on this cell until the end of this method where we call
    // refresh directly and we suppress the flash.


    this.editingCell = false;

    if (this.cellEditor.destroy) {
      this.cellEditor.destroy();
    } // important to clear this out - as parts of the code will check for
    // this to see if an async cellEditor has yet to be created


    this.cellEditor = null;

    if (this.cellEditorInPopup && this.hideEditorPopup) {
      this.hideEditorPopup();
      this.hideEditorPopup = null;
    } else {
      utils_1._.clearElement(this.getGui()); // put the cell back the way it was before editing


      if (this.usingWrapper) {
        // if wrapper, then put the wrapper back
        this.getGui().appendChild(this.eCellWrapper);
      } else {
        // if cellRenderer, then put the gui back in. if the renderer has
        // a refresh, it will be called. however if it doesn't, then later
        // the renderer will be destroyed and a new one will be created.
        if (this.cellRenderer) {
          // we know it's a dom element (not a string) because we converted
          // it after the gui was attached if it was a string.
          var eCell = this.cellRendererGui; // can be null if cell was previously null / contained empty string,
          // this will result in new value not being rendered.

          if (eCell) {
            this.getGui().appendChild(eCell);
          }
        }
      }
    }

    this.setInlineEditingClass();

    if (newValueExists) {
      // we suppressRefreshCell because the call to rowNode.setDataValue() results in change detection
      // getting triggered, which results in all cells getting refreshed. we do not want this refresh
      // to happen on this call as we want to call it explicitly below. otherwise refresh gets called twice.
      // if we only did this refresh (and not the one below) then the cell would flash and not be forced.
      this.suppressRefreshCell = true;
      this.rowNode.setDataValue(this.column, newValue);
      this.suppressRefreshCell = false;
    } // we suppress the flash, as it is not correct to flash the cell the user has finished editing,
    // the user doesn't need to flash as they were the one who did the edit, the flash is pointless
    // (as the flash is meant to draw the user to a change that they didn't manually do themselves).


    this.refreshCell({
      forceRefresh: true,
      suppressFlash: true
    });
    var event = this.createEvent(null, events_1.Events.EVENT_CELL_EDITING_STOPPED);
    this.beans.eventService.dispatchEvent(event);
  };

  CellComp.DOM_DATA_KEY_CELL_COMP = 'cellComp';
  CellComp.CELL_RENDERER_TYPE_NORMAL = 'cellRenderer';
  CellComp.CELL_RENDERER_TYPE_PINNED = 'pinnedRowCellRenderer';
  return CellComp;
}(component_1.Component);

exports.CellComp = CellComp;

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var logger_1 = __webpack_require__(30);

var eventService_1 = __webpack_require__(14);

var events_1 = __webpack_require__(18);

var gridOptionsWrapper_1 = __webpack_require__(7);

var columnApi_1 = __webpack_require__(21);

var gridApi_1 = __webpack_require__(20);

var utils_1 = __webpack_require__(6);
/** Adds drag listening onto an element. In ag-Grid this is used twice, first is resizing columns,
 * second is moving the columns and column groups around (ie the 'drag' part of Drag and Drop. */


var DragService =
/** @class */
function () {
  function DragService() {
    this.onMouseUpListener = this.onMouseUp.bind(this);
    this.onMouseMoveListener = this.onMouseMove.bind(this);
    this.onTouchEndListener = this.onTouchUp.bind(this);
    this.onTouchMoveListener = this.onTouchMove.bind(this);
    this.dragEndFunctions = [];
    this.dragSources = [];
  }

  DragService.prototype.init = function () {
    this.logger = this.loggerFactory.create('DragService');
  };

  DragService.prototype.destroy = function () {
    this.dragSources.forEach(this.removeListener.bind(this));
    this.dragSources.length = 0;
  };

  DragService.prototype.removeListener = function (dragSourceAndListener) {
    var element = dragSourceAndListener.dragSource.eElement;
    var mouseDownListener = dragSourceAndListener.mouseDownListener;
    element.removeEventListener('mousedown', mouseDownListener); // remove touch listener only if it exists

    if (dragSourceAndListener.touchEnabled) {
      var touchStartListener = dragSourceAndListener.touchStartListener;
      element.removeEventListener('touchstart', touchStartListener, {
        passive: true
      });
    }
  };

  DragService.prototype.removeDragSource = function (params) {
    var dragSourceAndListener = utils_1._.find(this.dragSources, function (item) {
      return item.dragSource === params;
    });

    if (!dragSourceAndListener) {
      return;
    }

    this.removeListener(dragSourceAndListener);

    utils_1._.removeFromArray(this.dragSources, dragSourceAndListener);
  };

  DragService.prototype.setNoSelectToBody = function (noSelect) {
    var eDocument = this.gridOptionsWrapper.getDocument();
    var eBody = eDocument.querySelector('body');

    if (utils_1._.exists(eBody)) {
      // when we drag the mouse in ag-Grid, this class gets added / removed from the body, so that
      // the mouse isn't selecting text when dragging.
      utils_1._.addOrRemoveCssClass(eBody, 'ag-unselectable', noSelect);
    }
  };

  DragService.prototype.addDragSource = function (params, includeTouch) {
    if (includeTouch === void 0) {
      includeTouch = false;
    }

    var mouseListener = this.onMouseDown.bind(this, params);
    params.eElement.addEventListener('mousedown', mouseListener);
    var touchListener = null;
    var suppressTouch = this.gridOptionsWrapper.isSuppressTouch();

    if (includeTouch && !suppressTouch) {
      touchListener = this.onTouchStart.bind(this, params);
      params.eElement.addEventListener('touchstart', touchListener, {
        passive: false
      });
    }

    this.dragSources.push({
      dragSource: params,
      mouseDownListener: mouseListener,
      touchStartListener: touchListener,
      touchEnabled: includeTouch
    });
  }; // gets called whenever mouse down on any drag source


  DragService.prototype.onTouchStart = function (params, touchEvent) {
    var _this = this;

    this.currentDragParams = params;
    this.dragging = false;
    var touch = touchEvent.touches[0];
    this.touchLastTime = touch;
    this.touchStart = touch;
    touchEvent.preventDefault(); // we temporally add these listeners, for the duration of the drag, they
    // are removed in touch end handling.

    params.eElement.addEventListener('touchmove', this.onTouchMoveListener, {
      passive: true
    });
    params.eElement.addEventListener('touchend', this.onTouchEndListener, {
      passive: true
    });
    params.eElement.addEventListener('touchcancel', this.onTouchEndListener, {
      passive: true
    });
    this.dragEndFunctions.push(function () {
      params.eElement.removeEventListener('touchmove', _this.onTouchMoveListener, {
        passive: true
      });
      params.eElement.removeEventListener('touchend', _this.onTouchEndListener, {
        passive: true
      });
      params.eElement.removeEventListener('touchcancel', _this.onTouchEndListener, {
        passive: true
      });
    }); // see if we want to start dragging straight away

    if (params.dragStartPixels === 0) {
      this.onCommonMove(touch, this.touchStart);
    }
  }; // gets called whenever mouse down on any drag source


  DragService.prototype.onMouseDown = function (params, mouseEvent) {
    var _this = this; // we ignore when shift key is pressed. this is for the range selection, as when
    // user shift-clicks a cell, this should not be interpreted as the start of a drag.
    // if (mouseEvent.shiftKey) { return; }


    if (params.skipMouseEvent) {
      if (params.skipMouseEvent(mouseEvent)) {
        return;
      }
    } // if there are two elements with parent / child relationship, and both are draggable,
    // when we drag the child, we should NOT drag the parent. an example of this is row moving
    // and range selection - row moving should get preference when use drags the rowDrag component.


    if (mouseEvent._alreadyProcessedByDragService) {
      return;
    }

    mouseEvent._alreadyProcessedByDragService = true; // only interested in left button clicks

    if (mouseEvent.button !== 0) {
      return;
    }

    this.currentDragParams = params;
    this.dragging = false;
    this.mouseEventLastTime = mouseEvent;
    this.mouseStartEvent = mouseEvent;
    var eDocument = this.gridOptionsWrapper.getDocument(); // we temporally add these listeners, for the duration of the drag, they
    // are removed in mouseup handling.

    eDocument.addEventListener('mousemove', this.onMouseMoveListener);
    eDocument.addEventListener('mouseup', this.onMouseUpListener);
    this.dragEndFunctions.push(function () {
      eDocument.removeEventListener('mousemove', _this.onMouseMoveListener);
      eDocument.removeEventListener('mouseup', _this.onMouseUpListener);
    }); //see if we want to start dragging straight away

    if (params.dragStartPixels === 0) {
      this.onMouseMove(mouseEvent);
    }
  }; // returns true if the event is close to the original event by X pixels either vertically or horizontally.
  // we only start dragging after X pixels so this allows us to know if we should start dragging yet.


  DragService.prototype.isEventNearStartEvent = function (currentEvent, startEvent) {
    // by default, we wait 4 pixels before starting the drag
    var dragStartPixels = this.currentDragParams.dragStartPixels;
    var requiredPixelDiff = utils_1._.exists(dragStartPixels) ? dragStartPixels : 4;
    return utils_1._.areEventsNear(currentEvent, startEvent, requiredPixelDiff);
  };

  DragService.prototype.getFirstActiveTouch = function (touchList) {
    for (var i = 0; i < touchList.length; i++) {
      if (touchList[i].identifier === this.touchStart.identifier) {
        return touchList[i];
      }
    }

    return null;
  };

  DragService.prototype.onCommonMove = function (currentEvent, startEvent) {
    if (!this.dragging) {
      // if mouse hasn't travelled from the start position enough, do nothing
      if (!this.dragging && this.isEventNearStartEvent(currentEvent, startEvent)) {
        return;
      }

      this.dragging = true;
      var event_1 = {
        type: events_1.Events.EVENT_DRAG_STARTED,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(event_1);
      this.currentDragParams.onDragStart(startEvent);
      this.setNoSelectToBody(true);
    }

    this.currentDragParams.onDragging(currentEvent);
  };

  DragService.prototype.onTouchMove = function (touchEvent) {
    var touch = this.getFirstActiveTouch(touchEvent.touches);

    if (!touch) {
      return;
    } // this.___statusPanel.setInfoText(Math.random() + ' onTouchMove preventDefault stopPropagation');
    // if we don't preview default, then the browser will try and do it's own touch stuff,
    // like do 'back button' (chrome does this) or scroll the page (eg drag column could  be confused
    // with scroll page in the app)
    // touchEvent.preventDefault();


    this.onCommonMove(touch, this.touchStart);
  }; // only gets called after a mouse down - as this is only added after mouseDown
  // and is removed when mouseUp happens


  DragService.prototype.onMouseMove = function (mouseEvent) {
    this.onCommonMove(mouseEvent, this.mouseStartEvent);
  };

  DragService.prototype.onTouchUp = function (touchEvent) {
    var touch = this.getFirstActiveTouch(touchEvent.changedTouches); // i haven't worked this out yet, but there is no matching touch
    // when we get the touch up event. to get around this, we swap in
    // the last touch. this is a hack to 'get it working' while we
    // figure out what's going on, why we are not getting a touch in
    // current event.

    if (!touch) {
      touch = this.touchLastTime;
    } // if mouse was left up before we started to move, then this is a tap.
    // we check this before onUpCommon as onUpCommon resets the dragging
    // let tap = !this.dragging;
    // let tapTarget = this.currentDragParams.eElement;


    this.onUpCommon(touch); // if tap, tell user
    // console.log(`${Math.random()} tap = ${tap}`);
    // if (tap) {
    //     tapTarget.click();
    // }
  };

  DragService.prototype.onMouseUp = function (mouseEvent) {
    this.onUpCommon(mouseEvent);
  };

  DragService.prototype.onUpCommon = function (eventOrTouch) {
    if (this.dragging) {
      this.dragging = false;
      this.currentDragParams.onDragStop(eventOrTouch);
      var event_2 = {
        type: events_1.Events.EVENT_DRAG_STOPPED,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(event_2);
    }

    this.setNoSelectToBody(false);
    this.mouseStartEvent = null;
    this.mouseEventLastTime = null;
    this.touchStart = null;
    this.touchLastTime = null;
    this.currentDragParams = null;
    this.dragEndFunctions.forEach(function (func) {
      return func();
    });
    this.dragEndFunctions.length = 0;
  };

  __decorate([context_1.Autowired('loggerFactory'), __metadata("design:type", logger_1.LoggerFactory)], DragService.prototype, "loggerFactory", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], DragService.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], DragService.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('columnApi'), __metadata("design:type", columnApi_1.ColumnApi)], DragService.prototype, "columnApi", void 0);

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], DragService.prototype, "gridApi", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], DragService.prototype, "init", null);

  __decorate([context_1.PreDestroy, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], DragService.prototype, "destroy", null);

  DragService = __decorate([context_1.Bean('dragService')], DragService);
  return DragService;
}();

exports.DragService = DragService;

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var utils_1 = __webpack_require__(6);

var MAT_GRID_SIZE = 8;
var FRESH_GRID_SIZE = 4;
var BALHAM_GRID_SIZE = 4;
var HARD_CODED_SIZES = {
  'ag-theme-material': {
    headerHeight: MAT_GRID_SIZE * 7,
    virtualItemHeight: MAT_GRID_SIZE * 5,
    rowHeight: MAT_GRID_SIZE * 6
  },
  'ag-theme-classic': {
    headerHeight: 25,
    virtualItemHeight: FRESH_GRID_SIZE * 5,
    rowHeight: 25
  },
  'ag-theme-balham': {
    headerHeight: BALHAM_GRID_SIZE * 8,
    virtualItemHeight: BALHAM_GRID_SIZE * 7,
    rowHeight: BALHAM_GRID_SIZE * 7
  }
};

var Environment =
/** @class */
function () {
  function Environment() {}

  Environment.prototype.getSassVariable = function (theme, key) {
    if (theme == 'ag-theme-material') {
      return HARD_CODED_SIZES['ag-theme-material'][key];
    } else if (theme == 'ag-theme-balham' || theme == 'ag-theme-balham-dark') {
      return HARD_CODED_SIZES['ag-theme-balham'][key];
    }

    return HARD_CODED_SIZES['ag-theme-classic'][key];
  };

  Environment.prototype.getTheme = function () {
    var reg = /\bag-(fresh|dark|blue|material|bootstrap|(?:theme-([\w\-]*)))\b/;
    var el = this.eGridDiv;
    var themeMatch;

    while (el) {
      themeMatch = reg.exec(el.className);
      el = el.parentElement;

      if (el == null || themeMatch) {
        break;
      }
    }

    if (!themeMatch) {
      return;
    }

    var theme = themeMatch[0];
    var usingOldTheme = themeMatch[2] === undefined;

    if (usingOldTheme) {
      var newTheme_1 = theme.replace('ag-', 'ag-theme-');

      utils_1._.doOnce(function () {
        return console.warn("ag-Grid: As of v19 old theme are no longer provided. Please replace " + theme + " with " + newTheme_1 + ".");
      }, 'using-old-theme');
    }

    return theme;
  };

  __decorate([context_1.Autowired('eGridDiv'), __metadata("design:type", HTMLElement)], Environment.prototype, "eGridDiv", void 0);

  Environment = __decorate([context_1.Bean('environment')], Environment);
  return Environment;
}();

exports.Environment = Environment;

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var eventService_1 = __webpack_require__(14);

var events_1 = __webpack_require__(18);

var columnController_1 = __webpack_require__(17);

var columnApi_1 = __webpack_require__(21);

var gridApi_1 = __webpack_require__(20);

var gridOptionsWrapper_1 = __webpack_require__(7);

var ScrollVisibleService =
/** @class */
function () {
  function ScrollVisibleService() {}

  ScrollVisibleService.prototype.setScrollsVisible = function (params) {
    var atLeastOneDifferent = this.horizontalScrollShowing !== params.horizontalScrollShowing || this.verticalScrollShowing !== params.verticalScrollShowing;

    if (atLeastOneDifferent) {
      this.horizontalScrollShowing = params.horizontalScrollShowing;
      this.verticalScrollShowing = params.verticalScrollShowing;
      var event_1 = {
        type: events_1.Events.EVENT_SCROLL_VISIBILITY_CHANGED,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(event_1);
    }
  }; // used by pagination service - to know page height


  ScrollVisibleService.prototype.isHorizontalScrollShowing = function () {
    return this.horizontalScrollShowing;
  }; // used by header container


  ScrollVisibleService.prototype.isVerticalScrollShowing = function () {
    return this.verticalScrollShowing;
  };

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], ScrollVisibleService.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], ScrollVisibleService.prototype, "columnController", void 0);

  __decorate([context_1.Autowired('columnApi'), __metadata("design:type", columnApi_1.ColumnApi)], ScrollVisibleService.prototype, "columnApi", void 0);

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], ScrollVisibleService.prototype, "gridApi", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], ScrollVisibleService.prototype, "gridOptionsWrapper", void 0);

  ScrollVisibleService = __decorate([context_1.Bean('scrollVisibleService')], ScrollVisibleService);
  return ScrollVisibleService;
}();

exports.ScrollVisibleService = ScrollVisibleService;

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var expressionService_1 = __webpack_require__(43);

var ValueFormatterService =
/** @class */
function () {
  function ValueFormatterService() {}

  ValueFormatterService.prototype.formatValue = function (column, rowNode, $scope, value) {
    var formatter;
    var colDef = column.getColDef(); // if floating, give preference to the floating formatter

    if (rowNode && rowNode.rowPinned) {
      formatter = colDef.pinnedRowValueFormatter ? colDef.pinnedRowValueFormatter : colDef.valueFormatter;
    } else {
      formatter = colDef.valueFormatter;
    }

    var result = null;

    if (formatter) {
      var params = {
        value: value,
        node: rowNode,
        data: rowNode ? rowNode.data : null,
        colDef: column.getColDef(),
        column: column,
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        context: this.gridOptionsWrapper.getContext()
      }; // originally we put the angular 1 scope here, but we don't want the scope
      // in the params interface, as other frameworks will see the interface, and
      // angular 1 is not cool any more. so we hack the scope in here (we cannot
      // include it above, as it's not in the interface, so would cause a compile error).
      // in the future, when we stop supporting angular 1, we can take this out.

      params.$scope = $scope;
      result = this.expressionService.evaluate(formatter, params);
    } else if (colDef.refData) {
      return colDef.refData[value] || '';
    } // if we don't do this, then arrays get displayed as 1,2,3, but we want 1, 2, 3 (ie with spaces)


    if ((result === null || result === undefined) && Array.isArray(value)) {
      result = value.join(', ');
    }

    return result;
  };

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], ValueFormatterService.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('expressionService'), __metadata("design:type", expressionService_1.ExpressionService)], ValueFormatterService.prototype, "expressionService", void 0);

  ValueFormatterService = __decorate([context_1.Bean('valueFormatterService')], ValueFormatterService);
  return ValueFormatterService;
}();

exports.ValueFormatterService = ValueFormatterService;

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var context_2 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var utils_1 = __webpack_require__(6);

var MouseEventService =
/** @class */
function () {
  function MouseEventService() {
    this.gridInstanceId = MouseEventService_1.gridInstanceSequence.next();
  }

  MouseEventService_1 = MouseEventService;

  MouseEventService.prototype.init = function () {
    this.stampDomElementWithGridInstance();
  }; // we put the instance id onto the main DOM element. this is used for events, when grids are inside grids,
  // so the grid can work out if the even came from this grid or a grid inside this one. see the ctrl+v logic
  // for where this is used.


  MouseEventService.prototype.stampDomElementWithGridInstance = function () {
    this.eGridDiv[MouseEventService_1.GRID_DOM_KEY] = this.gridInstanceId;
  };

  MouseEventService.prototype.getRenderedCellForEvent = function (event) {
    return utils_1._.getCellCompForEvent(this.gridOptionsWrapper, event);
  }; // walks the path of the event, and returns true if this grid is the first one that it finds. if doing
  // master / detail grids, and a child grid is found, then it returns false. this stops things like copy/paste
  // getting executed on many grids at the same time.


  MouseEventService.prototype.isEventFromThisGrid = function (event) {
    var path = utils_1._.getEventPath(event);

    for (var i = 0; i < path.length; i++) {
      var element = path[i];
      var instanceId = element[MouseEventService_1.GRID_DOM_KEY];

      if (utils_1._.exists(instanceId)) {
        var eventFromThisGrid = instanceId === this.gridInstanceId;
        return eventFromThisGrid;
      }
    }

    return false;
  };

  MouseEventService.prototype.getGridCellForEvent = function (event) {
    var cellComp = this.getRenderedCellForEvent(event);
    return cellComp ? cellComp.getGridCell() : null;
  };

  var MouseEventService_1;
  MouseEventService.gridInstanceSequence = new utils_1.NumberSequence();
  MouseEventService.GRID_DOM_KEY = '__ag_grid_instance';

  __decorate([context_2.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], MouseEventService.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_2.Autowired('eGridDiv'), __metadata("design:type", HTMLElement)], MouseEventService.prototype, "eGridDiv", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], MouseEventService.prototype, "init", null);

  MouseEventService = MouseEventService_1 = __decorate([context_1.Bean('mouseEventService')], MouseEventService);
  return MouseEventService;
}();

exports.MouseEventService = MouseEventService;

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});

var eventService_1 = __webpack_require__(14);

var utils_1 = __webpack_require__(6);

var TouchListener =
/** @class */
function () {
  function TouchListener(eElement, preventMouseClick) {
    if (preventMouseClick === void 0) {
      preventMouseClick = false;
    }

    var _this = this;

    this.destroyFuncs = [];
    this.touching = false;
    this.eventService = new eventService_1.EventService();
    this.eElement = eElement;
    this.preventMouseClick = preventMouseClick;
    var startListener = this.onTouchStart.bind(this);
    var moveListener = this.onTouchMove.bind(this);
    var endListener = this.onTouchEnd.bind(this);
    this.eElement.addEventListener("touchstart", startListener, {
      passive: true
    });
    this.eElement.addEventListener("touchmove", moveListener, {
      passive: true
    }); // we set passive=false, as we want to prevent default on this event

    this.eElement.addEventListener("touchend", endListener, {
      passive: false
    });
    this.destroyFuncs.push(function () {
      _this.eElement.removeEventListener("touchstart", startListener, {
        passive: true
      });

      _this.eElement.removeEventListener("touchmove", moveListener, {
        passive: true
      });

      _this.eElement.removeEventListener("touchend", endListener, {
        passive: false
      });
    });
  }

  TouchListener.prototype.getActiveTouch = function (touchList) {
    for (var i = 0; i < touchList.length; i++) {
      var matches = touchList[i].identifier === this.touchStart.identifier;

      if (matches) {
        return touchList[i];
      }
    }

    return null;
  };

  TouchListener.prototype.addEventListener = function (eventType, listener) {
    this.eventService.addEventListener(eventType, listener);
  };

  TouchListener.prototype.removeEventListener = function (eventType, listener) {
    this.eventService.removeEventListener(eventType, listener);
  };

  TouchListener.prototype.onTouchStart = function (touchEvent) {
    var _this = this; // only looking at one touch point at any time


    if (this.touching) {
      return;
    }

    this.touchStart = touchEvent.touches[0];
    this.touching = true;
    this.moved = false;
    var touchStartCopy = this.touchStart;
    window.setTimeout(function () {
      var touchesMatch = _this.touchStart === touchStartCopy;

      if (_this.touching && touchesMatch && !_this.moved) {
        _this.moved = true;
        var event_1 = {
          type: TouchListener.EVENT_LONG_TAP,
          touchStart: _this.touchStart,
          touchEvent: touchEvent
        };

        _this.eventService.dispatchEvent(event_1);
      }
    }, 500);
  };

  TouchListener.prototype.onTouchMove = function (touchEvent) {
    if (!this.touching) {
      return;
    }

    var touch = this.getActiveTouch(touchEvent.touches);

    if (!touch) {
      return;
    }

    var eventIsFarAway = !utils_1._.areEventsNear(touch, this.touchStart, 4);

    if (eventIsFarAway) {
      this.moved = true;
    }
  };

  TouchListener.prototype.onTouchEnd = function (touchEvent) {
    if (!this.touching) {
      return;
    }

    if (!this.moved) {
      var event_2 = {
        type: TouchListener.EVENT_TAP,
        touchStart: this.touchStart
      };
      this.eventService.dispatchEvent(event_2);
      this.checkForDoubleTap();
    } // stops the tap from also been processed as a mouse click


    if (this.preventMouseClick) {
      touchEvent.preventDefault();
    }

    this.touching = false;
  };

  TouchListener.prototype.checkForDoubleTap = function () {
    var now = new Date().getTime();

    if (this.lastTapTime && this.lastTapTime > 0) {
      // if previous tap, see if duration is short enough to be considered double tap
      var interval = now - this.lastTapTime;

      if (interval > TouchListener.DOUBLE_TAP_MILLIS) {
        // dispatch double tap event
        var event_3 = {
          type: TouchListener.EVENT_DOUBLE_TAP,
          touchStart: this.touchStart
        };
        this.eventService.dispatchEvent(event_3); // this stops a tripple tap ending up as two double taps

        this.lastTapTime = null;
      } else {
        this.lastTapTime = now;
      }
    } else {
      this.lastTapTime = now;
    }
  };

  TouchListener.prototype.destroy = function () {
    this.destroyFuncs.forEach(function (func) {
      return func();
    });
  };

  TouchListener.EVENT_TAP = "tap";
  TouchListener.EVENT_DOUBLE_TAP = "doubleTap";
  TouchListener.EVENT_LONG_TAP = "longTap";
  TouchListener.DOUBLE_TAP_MILLIS = 500;
  return TouchListener;
}();

exports.TouchListener = TouchListener;

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var eventService_1 = __webpack_require__(14);

var context_1 = __webpack_require__(2);

var events_1 = __webpack_require__(18);

var beanStub_1 = __webpack_require__(32);

var columnApi_1 = __webpack_require__(21);

var gridApi_1 = __webpack_require__(20);

var ColumnHoverService =
/** @class */
function (_super) {
  __extends(ColumnHoverService, _super);

  function ColumnHoverService() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ColumnHoverService.prototype.setMouseOver = function (columns) {
    this.selectedColumns = columns;
    var event = {
      type: events_1.Events.EVENT_COLUMN_HOVER_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(event);
  };

  ColumnHoverService.prototype.clearMouseOver = function () {
    this.selectedColumns = null;
    var event = {
      type: events_1.Events.EVENT_COLUMN_HOVER_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(event);
  };

  ColumnHoverService.prototype.isHovered = function (column) {
    return this.selectedColumns && this.selectedColumns.indexOf(column) >= 0;
  };

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], ColumnHoverService.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('columnApi'), __metadata("design:type", columnApi_1.ColumnApi)], ColumnHoverService.prototype, "columnApi", void 0);

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], ColumnHoverService.prototype, "gridApi", void 0);

  ColumnHoverService = __decorate([context_1.Bean('columnHoverService')], ColumnHoverService);
  return ColumnHoverService;
}(beanStub_1.BeanStub);

exports.ColumnHoverService = ColumnHoverService;

/***/ }),
/* 94 */
/***/ (function(module, exports) {

function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

var baseToString = __webpack_require__(353);
/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */


function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

var DataView = __webpack_require__(378),
    Map = __webpack_require__(170),
    Promise = __webpack_require__(379),
    Set = __webpack_require__(380),
    WeakMap = __webpack_require__(381),
    baseGetTag = __webpack_require__(75),
    toSource = __webpack_require__(233);
/** `Object#toString` result references. */


var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';
var dataViewTag = '[object DataView]';
/** Used to detect maps, sets, and weakmaps. */

var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);
/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

var getTag = baseGetTag; // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.

if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
  getTag = function getTag(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString:
          return dataViewTag;

        case mapCtorString:
          return mapTag;

        case promiseCtorString:
          return promiseTag;

        case setCtorString:
          return setTag;

        case weakMapCtorString:
          return weakMapTag;
      }
    }

    return result;
  };
}

module.exports = getTag;

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _default = function _default(value) {
  return value == null;
};

exports.default = _default;
module.exports = exports["default"];

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _propertyExpr = __webpack_require__(125);

var validateName = function validateName(d) {
  if (typeof d !== 'string') throw new TypeError("ref's must be strings, got: " + d);
};

var Reference =
/*#__PURE__*/
function () {
  Reference.isRef = function isRef(value) {
    return !!(value && (value.__isYupRef || value instanceof Reference));
  };

  var _proto = Reference.prototype;

  _proto.toString = function toString() {
    return "Ref(" + this.key + ")";
  };

  function Reference(key, mapFn, options) {
    if (options === void 0) {
      options = {};
    }

    validateName(key);
    var prefix = options.contextPrefix || '$';

    if (typeof key === 'function') {
      key = '.';
    }

    this.key = key.trim();
    this.prefix = prefix;
    this.isContext = this.key.indexOf(prefix) === 0;
    this.isSelf = this.key === '.';
    this.path = this.isContext ? this.key.slice(this.prefix.length) : this.key;
    this._get = (0, _propertyExpr.getter)(this.path, true);

    this.map = mapFn || function (value) {
      return value;
    };
  }

  _proto.resolve = function resolve() {
    return this;
  };

  _proto.cast = function cast(value, _ref) {
    var parent = _ref.parent,
        context = _ref.context;
    return this.getValue(parent, context);
  };

  _proto.getValue = function getValue(parent, context) {
    var isContext = this.isContext;

    var value = this._get(isContext ? context : parent || context || {});

    return this.map(value);
  };

  return Reference;
}();

exports.default = Reference;
Reference.prototype.__isYupRef = true;
module.exports = exports["default"];

/***/ }),
/* 99 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return isRef; });
function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function isRef(obj) {
  return (// eslint-disable-next-line no-prototype-builtins
    obj !== null && _typeof(obj) === 'object' && obj.hasOwnProperty('current')
  );
}

/***/ }),
/* 100 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(0);

// EXTERNAL MODULE: ./node_modules/symbol-observable/es/index.js
var es = __webpack_require__(185);

// CONCATENATED MODULE: ./node_modules/redux/es/redux.js

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */

var randomString = function randomString() {
  return Math.random().toString(36).substring(7).split('').join('.');
};

var ActionTypes = {
  INIT: "@@redux/INIT" + randomString(),
  REPLACE: "@@redux/REPLACE" + randomString(),
  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
    return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
  }
};
/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

function isPlainObject(obj) {
  if (typeof obj !== 'object' || obj === null) return false;
  var proto = obj;

  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }

  return Object.getPrototypeOf(obj) === proto;
}
/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */


function createStore(reducer, preloadedState, enhancer) {
  var _ref2;

  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {
    throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function.');
  }

  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
    enhancer = preloadedState;
    preloadedState = undefined;
  }

  if (typeof enhancer !== 'undefined') {
    if (typeof enhancer !== 'function') {
      throw new Error('Expected the enhancer to be a function.');
    }

    return enhancer(createStore)(reducer, preloadedState);
  }

  if (typeof reducer !== 'function') {
    throw new Error('Expected the reducer to be a function.');
  }

  var currentReducer = reducer;
  var currentState = preloadedState;
  var currentListeners = [];
  var nextListeners = currentListeners;
  var isDispatching = false;
  /**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = currentListeners.slice();
    }
  }
  /**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */


  function getState() {
    if (isDispatching) {
      throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');
    }

    return currentState;
  }
  /**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */


  function subscribe(listener) {
    if (typeof listener !== 'function') {
      throw new Error('Expected the listener to be a function.');
    }

    if (isDispatching) {
      throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');
    }

    var isSubscribed = true;
    ensureCanMutateNextListeners();
    nextListeners.push(listener);
    return function unsubscribe() {
      if (!isSubscribed) {
        return;
      }

      if (isDispatching) {
        throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');
      }

      isSubscribed = false;
      ensureCanMutateNextListeners();
      var index = nextListeners.indexOf(listener);
      nextListeners.splice(index, 1);
      currentListeners = null;
    };
  }
  /**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */


  function dispatch(action) {
    if (!isPlainObject(action)) {
      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
    }

    if (typeof action.type === 'undefined') {
      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
    }

    if (isDispatching) {
      throw new Error('Reducers may not dispatch actions.');
    }

    try {
      isDispatching = true;
      currentState = currentReducer(currentState, action);
    } finally {
      isDispatching = false;
    }

    var listeners = currentListeners = nextListeners;

    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];
      listener();
    }

    return action;
  }
  /**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */


  function replaceReducer(nextReducer) {
    if (typeof nextReducer !== 'function') {
      throw new Error('Expected the nextReducer to be a function.');
    }

    currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.
    // Any reducers that existed in both the new and old rootReducer
    // will receive the previous state. This effectively populates
    // the new state tree with any relevant data from the old one.

    dispatch({
      type: ActionTypes.REPLACE
    });
  }
  /**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */


  function observable() {
    var _ref;

    var outerSubscribe = subscribe;
    return _ref = {
      /**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
      subscribe: function subscribe(observer) {
        if (typeof observer !== 'object' || observer === null) {
          throw new TypeError('Expected the observer to be an object.');
        }

        function observeState() {
          if (observer.next) {
            observer.next(getState());
          }
        }

        observeState();
        var unsubscribe = outerSubscribe(observeState);
        return {
          unsubscribe: unsubscribe
        };
      }
    }, _ref[es["a" /* default */]] = function () {
      return this;
    }, _ref;
  } // When a store is created, an "INIT" action is dispatched so that every
  // reducer returns their initial state. This effectively populates
  // the initial state tree.


  dispatch({
    type: ActionTypes.INIT
  });
  return _ref2 = {
    dispatch: dispatch,
    subscribe: subscribe,
    getState: getState,
    replaceReducer: replaceReducer
  }, _ref2[es["a" /* default */]] = observable, _ref2;
}
/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */


function warning(message) {
  /* eslint-disable no-console */
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }
  /* eslint-enable no-console */


  try {
    // This error was thrown as a convenience so that if you enable
    // "break on all exceptions" in your console,
    // it would pause the execution at this line.
    throw new Error(message);
  } catch (e) {} // eslint-disable-line no-empty

}

function getUndefinedStateErrorMessage(key, action) {
  var actionType = action && action.type;
  var actionDescription = actionType && "action \"" + String(actionType) + "\"" || 'an action';
  return "Given " + actionDescription + ", reducer \"" + key + "\" returned undefined. " + "To ignore an action, you must explicitly return the previous state. " + "If you want this reducer to hold no value, you can return null instead of undefined.";
}

function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
  var reducerKeys = Object.keys(reducers);
  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

  if (reducerKeys.length === 0) {
    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
  }

  if (!isPlainObject(inputState)) {
    return "The " + argumentName + " has unexpected type of \"" + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + "\". Expected argument to be an object with the following " + ("keys: \"" + reducerKeys.join('", "') + "\"");
  }

  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
  });
  unexpectedKeys.forEach(function (key) {
    unexpectedKeyCache[key] = true;
  });
  if (action && action.type === ActionTypes.REPLACE) return;

  if (unexpectedKeys.length > 0) {
    return "Unexpected " + (unexpectedKeys.length > 1 ? 'keys' : 'key') + " " + ("\"" + unexpectedKeys.join('", "') + "\" found in " + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ("\"" + reducerKeys.join('", "') + "\". Unexpected keys will be ignored.");
  }
}

function assertReducerShape(reducers) {
  Object.keys(reducers).forEach(function (key) {
    var reducer = reducers[key];
    var initialState = reducer(undefined, {
      type: ActionTypes.INIT
    });

    if (typeof initialState === 'undefined') {
      throw new Error("Reducer \"" + key + "\" returned undefined during initialization. " + "If the state passed to the reducer is undefined, you must " + "explicitly return the initial state. The initial state may " + "not be undefined. If you don't want to set a value for this reducer, " + "you can use null instead of undefined.");
    }

    if (typeof reducer(undefined, {
      type: ActionTypes.PROBE_UNKNOWN_ACTION()
    }) === 'undefined') {
      throw new Error("Reducer \"" + key + "\" returned undefined when probed with a random type. " + ("Don't try to handle " + ActionTypes.INIT + " or other actions in \"redux/*\" ") + "namespace. They are considered private. Instead, you must return the " + "current state for any unknown actions, unless it is undefined, " + "in which case you must return the initial state, regardless of the " + "action type. The initial state may not be undefined, but can be null.");
    }
  });
}
/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */


function combineReducers(reducers) {
  var reducerKeys = Object.keys(reducers);
  var finalReducers = {};

  for (var i = 0; i < reducerKeys.length; i++) {
    var key = reducerKeys[i];

    if (false) {}

    if (typeof reducers[key] === 'function') {
      finalReducers[key] = reducers[key];
    }
  }

  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same
  // keys multiple times.

  var unexpectedKeyCache;

  if (false) {}

  var shapeAssertionError;

  try {
    assertReducerShape(finalReducers);
  } catch (e) {
    shapeAssertionError = e;
  }

  return function combination(state, action) {
    if (state === void 0) {
      state = {};
    }

    if (shapeAssertionError) {
      throw shapeAssertionError;
    }

    if (false) { var warningMessage; }

    var hasChanged = false;
    var nextState = {};

    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
      var _key = finalReducerKeys[_i];
      var reducer = finalReducers[_key];
      var previousStateForKey = state[_key];
      var nextStateForKey = reducer(previousStateForKey, action);

      if (typeof nextStateForKey === 'undefined') {
        var errorMessage = getUndefinedStateErrorMessage(_key, action);
        throw new Error(errorMessage);
      }

      nextState[_key] = nextStateForKey;
      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
    }

    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
    return hasChanged ? nextState : state;
  };
}

function redux_bindActionCreator(actionCreator, dispatch) {
  return function () {
    return dispatch(actionCreator.apply(this, arguments));
  };
}
/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass an action creator as the first argument,
 * and get a dispatch wrapped function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */


function bindActionCreators(actionCreators, dispatch) {
  if (typeof actionCreators === 'function') {
    return redux_bindActionCreator(actionCreators, dispatch);
  }

  if (typeof actionCreators !== 'object' || actionCreators === null) {
    throw new Error("bindActionCreators expected an object or a function, instead received " + (actionCreators === null ? 'null' : typeof actionCreators) + ". " + "Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?");
  }

  var boundActionCreators = {};

  for (var key in actionCreators) {
    var actionCreator = actionCreators[key];

    if (typeof actionCreator === 'function') {
      boundActionCreators[key] = redux_bindActionCreator(actionCreator, dispatch);
    }
  }

  return boundActionCreators;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    keys.push.apply(keys, Object.getOwnPropertySymbols(object));
  }

  if (enumerableOnly) keys = keys.filter(function (sym) {
    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
  });
  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(source, true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(source).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}
/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */


function compose() {
  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }

  if (funcs.length === 0) {
    return function (arg) {
      return arg;
    };
  }

  if (funcs.length === 1) {
    return funcs[0];
  }

  return funcs.reduce(function (a, b) {
    return function () {
      return a(b.apply(void 0, arguments));
    };
  });
}
/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */


function applyMiddleware() {
  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
    middlewares[_key] = arguments[_key];
  }

  return function (createStore) {
    return function () {
      var store = createStore.apply(void 0, arguments);

      var _dispatch = function dispatch() {
        throw new Error('Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');
      };

      var middlewareAPI = {
        getState: store.getState,
        dispatch: function dispatch() {
          return _dispatch.apply(void 0, arguments);
        }
      };
      var chain = middlewares.map(function (middleware) {
        return middleware(middlewareAPI);
      });
      _dispatch = compose.apply(void 0, chain)(store.dispatch);
      return _objectSpread2({}, store, {
        dispatch: _dispatch
      });
    };
  };
}
/*
 * This is a dummy function to check if the function name has been altered by minification.
 * If the function has been minified and NODE_ENV !== 'production', warn the user.
 */


function isCrushed() {}

if (false) {}


// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/actions/dragDrop/types.js
var INIT_COORDS = 'dnd-core/INIT_COORDS';
var BEGIN_DRAG = 'dnd-core/BEGIN_DRAG';
var PUBLISH_DRAG_SOURCE = 'dnd-core/PUBLISH_DRAG_SOURCE';
var HOVER = 'dnd-core/HOVER';
var DROP = 'dnd-core/DROP';
var END_DRAG = 'dnd-core/END_DRAG';
// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/utils/equality.js
var strictEquality = function strictEquality(a, b) {
  return a === b;
};
/**
 * Determine if two cartesian coordinate offsets are equal
 * @param offsetA
 * @param offsetB
 */

function areCoordsEqual(offsetA, offsetB) {
  if (!offsetA && !offsetB) {
    return true;
  } else if (!offsetA || !offsetB) {
    return false;
  } else {
    return offsetA.x === offsetB.x && offsetA.y === offsetB.y;
  }
}
/**
 * Determines if two arrays of items are equal
 * @param a The first array of items
 * @param b The second array of items
 */

function areArraysEqual(a, b) {
  var isEqual = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : strictEquality;

  if (a.length !== b.length) {
    return false;
  }

  for (var i = 0; i < a.length; ++i) {
    if (!isEqual(a[i], b[i])) {
      return false;
    }
  }

  return true;
}
// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/reducers/dragOffset.js
function dragOffset_ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      dragOffset_ownKeys(Object(source), true).forEach(function (key) {
        dragOffset_defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      dragOffset_ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function dragOffset_defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}



var initialState = {
  initialSourceClientOffset: null,
  initialClientOffset: null,
  clientOffset: null
};
function dragOffset() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments.length > 1 ? arguments[1] : undefined;
  var payload = action.payload;

  switch (action.type) {
    case INIT_COORDS:
    case BEGIN_DRAG:
      return {
        initialSourceClientOffset: payload.sourceClientOffset,
        initialClientOffset: payload.clientOffset,
        clientOffset: payload.clientOffset
      };

    case HOVER:
      if (areCoordsEqual(state.clientOffset, payload.clientOffset)) {
        return state;
      }

      return _objectSpread({}, state, {
        clientOffset: payload.clientOffset
      });

    case END_DRAG:
    case DROP:
      return initialState;

    default:
      return state;
  }
}
// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/actions/registry.js
var ADD_SOURCE = 'dnd-core/ADD_SOURCE';
var ADD_TARGET = 'dnd-core/ADD_TARGET';
var REMOVE_SOURCE = 'dnd-core/REMOVE_SOURCE';
var REMOVE_TARGET = 'dnd-core/REMOVE_TARGET';
function registry_addSource(sourceId) {
  return {
    type: ADD_SOURCE,
    payload: {
      sourceId: sourceId
    }
  };
}
function registry_addTarget(targetId) {
  return {
    type: ADD_TARGET,
    payload: {
      targetId: targetId
    }
  };
}
function registry_removeSource(sourceId) {
  return {
    type: REMOVE_SOURCE,
    payload: {
      sourceId: sourceId
    }
  };
}
function registry_removeTarget(targetId) {
  return {
    type: REMOVE_TARGET,
    payload: {
      targetId: targetId
    }
  };
}
// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/utils/js_utils.js
function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
} // cheap lodash replacements

/**
 * drop-in replacement for _.get
 * @param obj
 * @param path
 * @param defaultValue
 */


function get(obj, path, defaultValue) {
  return path.split('.').reduce(function (a, c) {
    return a && a[c] ? a[c] : defaultValue || null;
  }, obj);
}
/**
 * drop-in replacement for _.without
 */

function without(items, item) {
  return items.filter(function (i) {
    return i !== item;
  });
}
/**
 * drop-in replacement for _.isString
 * @param input
 */

function isString(input) {
  return typeof input === 'string';
}
/**
 * drop-in replacement for _.isString
 * @param input
 */

function isObject(input) {
  return _typeof(input) === 'object';
}
/**
 * repalcement for _.xor
 * @param itemsA
 * @param itemsB
 */

function xor(itemsA, itemsB) {
  var map = new Map();

  var insertItem = function insertItem(item) {
    return map.set(item, map.has(item) ? map.get(item) + 1 : 1);
  };

  itemsA.forEach(insertItem);
  itemsB.forEach(insertItem);
  var result = [];
  map.forEach(function (count, key) {
    if (count === 1) {
      result.push(key);
    }
  });
  return result;
}
/**
 * replacement for _.intersection
 * @param itemsA
 * @param itemsB
 */

function intersection(itemsA, itemsB) {
  return itemsA.filter(function (t) {
    return itemsB.indexOf(t) > -1;
  });
}
// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/reducers/dragOperation.js
function dragOperation_ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function dragOperation_objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      dragOperation_ownKeys(Object(source), true).forEach(function (key) {
        dragOperation_defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      dragOperation_ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function dragOperation_defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}




var dragOperation_initialState = {
  itemType: null,
  item: null,
  sourceId: null,
  targetIds: [],
  dropResult: null,
  didDrop: false,
  isSourcePublic: null
};
function dragOperation() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : dragOperation_initialState;
  var action = arguments.length > 1 ? arguments[1] : undefined;
  var payload = action.payload;

  switch (action.type) {
    case BEGIN_DRAG:
      return dragOperation_objectSpread({}, state, {
        itemType: payload.itemType,
        item: payload.item,
        sourceId: payload.sourceId,
        isSourcePublic: payload.isSourcePublic,
        dropResult: null,
        didDrop: false
      });

    case PUBLISH_DRAG_SOURCE:
      return dragOperation_objectSpread({}, state, {
        isSourcePublic: true
      });

    case HOVER:
      return dragOperation_objectSpread({}, state, {
        targetIds: payload.targetIds
      });

    case REMOVE_TARGET:
      if (state.targetIds.indexOf(payload.targetId) === -1) {
        return state;
      }

      return dragOperation_objectSpread({}, state, {
        targetIds: without(state.targetIds, payload.targetId)
      });

    case DROP:
      return dragOperation_objectSpread({}, state, {
        dropResult: payload.dropResult,
        didDrop: true,
        targetIds: []
      });

    case END_DRAG:
      return dragOperation_objectSpread({}, state, {
        itemType: null,
        item: null,
        sourceId: null,
        dropResult: null,
        didDrop: false,
        isSourcePublic: null,
        targetIds: []
      });

    default:
      return state;
  }
}
// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/reducers/refCount.js

function refCount() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case ADD_SOURCE:
    case ADD_TARGET:
      return state + 1;

    case REMOVE_SOURCE:
    case REMOVE_TARGET:
      return state - 1;

    default:
      return state;
  }
}
// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/utils/dirtiness.js

var NONE = [];
var ALL = [];
NONE.__IS_NONE__ = true;
ALL.__IS_ALL__ = true;
/**
 * Determines if the given handler IDs are dirty or not.
 *
 * @param dirtyIds The set of dirty handler ids
 * @param handlerIds The set of handler ids to check
 */

function areDirty(dirtyIds, handlerIds) {
  if (dirtyIds === NONE) {
    return false;
  }

  if (dirtyIds === ALL || typeof handlerIds === 'undefined') {
    return true;
  }

  var commonIds = intersection(handlerIds, dirtyIds);
  return commonIds.length > 0;
}
// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/reducers/dirtyHandlerIds.js





function dirtyHandlerIds() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NONE;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case HOVER:
      break;

    case ADD_SOURCE:
    case ADD_TARGET:
    case REMOVE_TARGET:
    case REMOVE_SOURCE:
      return NONE;

    case BEGIN_DRAG:
    case PUBLISH_DRAG_SOURCE:
    case END_DRAG:
    case DROP:
    default:
      return ALL;
  }

  var _action$payload = action.payload,
      _action$payload$targe = _action$payload.targetIds,
      targetIds = _action$payload$targe === void 0 ? [] : _action$payload$targe,
      _action$payload$prevT = _action$payload.prevTargetIds,
      prevTargetIds = _action$payload$prevT === void 0 ? [] : _action$payload$prevT;
  var result = xor(targetIds, prevTargetIds);
  var didChange = result.length > 0 || !areArraysEqual(targetIds, prevTargetIds);

  if (!didChange) {
    return NONE;
  } // Check the target ids at the innermost position. If they are valid, add them
  // to the result


  var prevInnermostTargetId = prevTargetIds[prevTargetIds.length - 1];
  var innermostTargetId = targetIds[targetIds.length - 1];

  if (prevInnermostTargetId !== innermostTargetId) {
    if (prevInnermostTargetId) {
      result.push(prevInnermostTargetId);
    }

    if (innermostTargetId) {
      result.push(innermostTargetId);
    }
  }

  return result;
}
// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/reducers/stateId.js
function stateId() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  return state + 1;
}
// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/reducers/index.js
function reducers_ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function reducers_objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      reducers_ownKeys(Object(source), true).forEach(function (key) {
        reducers_defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      reducers_ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function reducers_defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}







function reduce() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments.length > 1 ? arguments[1] : undefined;
  return {
    dirtyHandlerIds: dirtyHandlerIds(state.dirtyHandlerIds, {
      type: action.type,
      payload: reducers_objectSpread({}, action.payload, {
        prevTargetIds: get(state, 'dragOperation.targetIds', [])
      })
    }),
    dragOffset: dragOffset(state.dragOffset, action),
    refCount: refCount(state.refCount, action),
    dragOperation: dragOperation(state.dragOperation, action),
    stateId: stateId(state.stateId)
  };
}
// EXTERNAL MODULE: ./node_modules/@react-dnd/invariant/dist/invariant.esm.js
var invariant_esm = __webpack_require__(8);

// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/actions/dragDrop/local/setClientOffset.js

function setClientOffset(clientOffset, sourceClientOffset) {
  return {
    type: INIT_COORDS,
    payload: {
      sourceClientOffset: sourceClientOffset || null,
      clientOffset: clientOffset || null
    }
  };
}
// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/actions/dragDrop/beginDrag.js




var ResetCoordinatesAction = {
  type: INIT_COORDS,
  payload: {
    clientOffset: null,
    sourceClientOffset: null
  }
};
function createBeginDrag(manager) {
  return function beginDrag() {
    var sourceIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      publishSource: true
    };
    var _options$publishSourc = options.publishSource,
        publishSource = _options$publishSourc === void 0 ? true : _options$publishSourc,
        clientOffset = options.clientOffset,
        getSourceClientOffset = options.getSourceClientOffset;
    var monitor = manager.getMonitor();
    var registry = manager.getRegistry(); // Initialize the coordinates using the client offset

    manager.dispatch(setClientOffset(clientOffset));
    verifyInvariants(sourceIds, monitor, registry); // Get the draggable source

    var sourceId = getDraggableSource(sourceIds, monitor);

    if (sourceId === null) {
      manager.dispatch(ResetCoordinatesAction);
      return;
    } // Get the source client offset


    var sourceClientOffset = null;

    if (clientOffset) {
      verifyGetSourceClientOffsetIsFunction(getSourceClientOffset);
      sourceClientOffset = getSourceClientOffset(sourceId);
    } // Initialize the full coordinates


    manager.dispatch(setClientOffset(clientOffset, sourceClientOffset));
    var source = registry.getSource(sourceId);
    var item = source.beginDrag(monitor, sourceId);
    verifyItemIsObject(item);
    registry.pinSource(sourceId);
    var itemType = registry.getSourceType(sourceId);
    return {
      type: BEGIN_DRAG,
      payload: {
        itemType: itemType,
        item: item,
        sourceId: sourceId,
        clientOffset: clientOffset || null,
        sourceClientOffset: sourceClientOffset || null,
        isSourcePublic: !!publishSource
      }
    };
  };
}

function verifyInvariants(sourceIds, monitor, registry) {
  Object(invariant_esm["a" /* invariant */])(!monitor.isDragging(), 'Cannot call beginDrag while dragging.');
  sourceIds.forEach(function (sourceId) {
    Object(invariant_esm["a" /* invariant */])(registry.getSource(sourceId), 'Expected sourceIds to be registered.');
  });
}

function verifyGetSourceClientOffsetIsFunction(getSourceClientOffset) {
  Object(invariant_esm["a" /* invariant */])(typeof getSourceClientOffset === 'function', 'When clientOffset is provided, getSourceClientOffset must be a function.');
}

function verifyItemIsObject(item) {
  Object(invariant_esm["a" /* invariant */])(isObject(item), 'Item must be an object.');
}

function getDraggableSource(sourceIds, monitor) {
  var sourceId = null;

  for (var i = sourceIds.length - 1; i >= 0; i--) {
    if (monitor.canDragSource(sourceIds[i])) {
      sourceId = sourceIds[i];
      break;
    }
  }

  return sourceId;
}
// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/actions/dragDrop/publishDragSource.js

function createPublishDragSource(manager) {
  return function publishDragSource() {
    var monitor = manager.getMonitor();

    if (monitor.isDragging()) {
      return {
        type: PUBLISH_DRAG_SOURCE
      };
    }
  };
}
// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/utils/matchesType.js
function matchesType(targetType, draggedItemType) {
  if (draggedItemType === null) {
    return targetType === null;
  }

  return Array.isArray(targetType) ? targetType.some(function (t) {
    return t === draggedItemType;
  }) : targetType === draggedItemType;
}
// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/actions/dragDrop/hover.js



function createHover(manager) {
  return function hover(targetIdsArg) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        clientOffset = _ref.clientOffset;

    verifyTargetIdsIsArray(targetIdsArg);
    var targetIds = targetIdsArg.slice(0);
    var monitor = manager.getMonitor();
    var registry = manager.getRegistry();
    checkInvariants(targetIds, monitor, registry);
    var draggedItemType = monitor.getItemType();
    removeNonMatchingTargetIds(targetIds, registry, draggedItemType);
    hoverAllTargets(targetIds, monitor, registry);
    return {
      type: HOVER,
      payload: {
        targetIds: targetIds,
        clientOffset: clientOffset || null
      }
    };
  };
}

function verifyTargetIdsIsArray(targetIdsArg) {
  Object(invariant_esm["a" /* invariant */])(Array.isArray(targetIdsArg), 'Expected targetIds to be an array.');
}

function checkInvariants(targetIds, monitor, registry) {
  Object(invariant_esm["a" /* invariant */])(monitor.isDragging(), 'Cannot call hover while not dragging.');
  Object(invariant_esm["a" /* invariant */])(!monitor.didDrop(), 'Cannot call hover after drop.');

  for (var i = 0; i < targetIds.length; i++) {
    var targetId = targetIds[i];
    Object(invariant_esm["a" /* invariant */])(targetIds.lastIndexOf(targetId) === i, 'Expected targetIds to be unique in the passed array.');
    var target = registry.getTarget(targetId);
    Object(invariant_esm["a" /* invariant */])(target, 'Expected targetIds to be registered.');
  }
}

function removeNonMatchingTargetIds(targetIds, registry, draggedItemType) {
  // Remove those targetIds that don't match the targetType.  This
  // fixes shallow isOver which would only be non-shallow because of
  // non-matching targets.
  for (var i = targetIds.length - 1; i >= 0; i--) {
    var targetId = targetIds[i];
    var targetType = registry.getTargetType(targetId);

    if (!matchesType(targetType, draggedItemType)) {
      targetIds.splice(i, 1);
    }
  }
}

function hoverAllTargets(targetIds, monitor, registry) {
  // Finally call hover on all matching targets.
  targetIds.forEach(function (targetId) {
    var target = registry.getTarget(targetId);
    target.hover(monitor, targetId);
  });
}
// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/actions/dragDrop/drop.js
function drop_ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function drop_objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      drop_ownKeys(Object(source), true).forEach(function (key) {
        drop_defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      drop_ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function drop_defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}




function createDrop(manager) {
  return function drop() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var monitor = manager.getMonitor();
    var registry = manager.getRegistry();
    drop_verifyInvariants(monitor);
    var targetIds = getDroppableTargets(monitor); // Multiple actions are dispatched here, which is why this doesn't return an action

    targetIds.forEach(function (targetId, index) {
      var dropResult = determineDropResult(targetId, index, registry, monitor);
      var action = {
        type: DROP,
        payload: {
          dropResult: drop_objectSpread({}, options, {}, dropResult)
        }
      };
      manager.dispatch(action);
    });
  };
}

function drop_verifyInvariants(monitor) {
  Object(invariant_esm["a" /* invariant */])(monitor.isDragging(), 'Cannot call drop while not dragging.');
  Object(invariant_esm["a" /* invariant */])(!monitor.didDrop(), 'Cannot call drop twice during one drag operation.');
}

function determineDropResult(targetId, index, registry, monitor) {
  var target = registry.getTarget(targetId);
  var dropResult = target ? target.drop(monitor, targetId) : undefined;
  verifyDropResultType(dropResult);

  if (typeof dropResult === 'undefined') {
    dropResult = index === 0 ? {} : monitor.getDropResult();
  }

  return dropResult;
}

function verifyDropResultType(dropResult) {
  Object(invariant_esm["a" /* invariant */])(typeof dropResult === 'undefined' || isObject(dropResult), 'Drop result must either be an object or undefined.');
}

function getDroppableTargets(monitor) {
  var targetIds = monitor.getTargetIds().filter(monitor.canDropOnTarget, monitor);
  targetIds.reverse();
  return targetIds;
}
// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/actions/dragDrop/endDrag.js


function createEndDrag(manager) {
  return function endDrag() {
    var monitor = manager.getMonitor();
    var registry = manager.getRegistry();
    verifyIsDragging(monitor);
    var sourceId = monitor.getSourceId();
    var source = registry.getSource(sourceId, true);
    source.endDrag(monitor, sourceId);
    registry.unpinSource();
    return {
      type: END_DRAG
    };
  };
}

function verifyIsDragging(monitor) {
  Object(invariant_esm["a" /* invariant */])(monitor.isDragging(), 'Cannot call endDrag while not dragging.');
}
// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/actions/dragDrop/index.js






function createDragDropActions(manager) {
  return {
    beginDrag: createBeginDrag(manager),
    publishDragSource: createPublishDragSource(manager),
    hover: createHover(manager),
    drop: createDrop(manager),
    endDrag: createEndDrag(manager)
  };
}
// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/utils/coords.js
/**
 * Coordinate addition
 * @param a The first coordinate
 * @param b The second coordinate
 */
function add(a, b) {
  return {
    x: a.x + b.x,
    y: a.y + b.y
  };
}
/**
 * Coordinate subtraction
 * @param a The first coordinate
 * @param b The second coordinate
 */

function subtract(a, b) {
  return {
    x: a.x - b.x,
    y: a.y - b.y
  };
}
/**
 * Returns the cartesian distance of the drag source component's position, based on its position
 * at the time when the current drag operation has started, and the movement difference.
 *
 * Returns null if no item is being dragged.
 *
 * @param state The offset state to compute from
 */

function coords_getSourceClientOffset(state) {
  var clientOffset = state.clientOffset,
      initialClientOffset = state.initialClientOffset,
      initialSourceClientOffset = state.initialSourceClientOffset;

  if (!clientOffset || !initialClientOffset || !initialSourceClientOffset) {
    return null;
  }

  return subtract(add(clientOffset, initialSourceClientOffset), initialClientOffset);
}
/**
 * Determines the x,y offset between the client offset and the initial client offset
 *
 * @param state The offset state to compute from
 */

function coords_getDifferenceFromInitialOffset(state) {
  var clientOffset = state.clientOffset,
      initialClientOffset = state.initialClientOffset;

  if (!clientOffset || !initialClientOffset) {
    return null;
  }

  return subtract(clientOffset, initialClientOffset);
}
// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/DragDropMonitorImpl.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}






var DragDropMonitorImpl_DragDropMonitorImpl =
/*#__PURE__*/
function () {
  function DragDropMonitorImpl(store, registry) {
    _classCallCheck(this, DragDropMonitorImpl);

    this.store = store;
    this.registry = registry;
  }

  _createClass(DragDropMonitorImpl, [{
    key: "subscribeToStateChange",
    value: function subscribeToStateChange(listener) {
      var _this = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        handlerIds: undefined
      };
      var handlerIds = options.handlerIds;
      Object(invariant_esm["a" /* invariant */])(typeof listener === 'function', 'listener must be a function.');
      Object(invariant_esm["a" /* invariant */])(typeof handlerIds === 'undefined' || Array.isArray(handlerIds), 'handlerIds, when specified, must be an array of strings.');
      var prevStateId = this.store.getState().stateId;

      var handleChange = function handleChange() {
        var state = _this.store.getState();

        var currentStateId = state.stateId;

        try {
          var canSkipListener = currentStateId === prevStateId || currentStateId === prevStateId + 1 && !areDirty(state.dirtyHandlerIds, handlerIds);

          if (!canSkipListener) {
            listener();
          }
        } finally {
          prevStateId = currentStateId;
        }
      };

      return this.store.subscribe(handleChange);
    }
  }, {
    key: "subscribeToOffsetChange",
    value: function subscribeToOffsetChange(listener) {
      var _this2 = this;

      Object(invariant_esm["a" /* invariant */])(typeof listener === 'function', 'listener must be a function.');
      var previousState = this.store.getState().dragOffset;

      var handleChange = function handleChange() {
        var nextState = _this2.store.getState().dragOffset;

        if (nextState === previousState) {
          return;
        }

        previousState = nextState;
        listener();
      };

      return this.store.subscribe(handleChange);
    }
  }, {
    key: "canDragSource",
    value: function canDragSource(sourceId) {
      if (!sourceId) {
        return false;
      }

      var source = this.registry.getSource(sourceId);
      Object(invariant_esm["a" /* invariant */])(source, 'Expected to find a valid source.');

      if (this.isDragging()) {
        return false;
      }

      return source.canDrag(this, sourceId);
    }
  }, {
    key: "canDropOnTarget",
    value: function canDropOnTarget(targetId) {
      // undefined on initial render
      if (!targetId) {
        return false;
      }

      var target = this.registry.getTarget(targetId);
      Object(invariant_esm["a" /* invariant */])(target, 'Expected to find a valid target.');

      if (!this.isDragging() || this.didDrop()) {
        return false;
      }

      var targetType = this.registry.getTargetType(targetId);
      var draggedItemType = this.getItemType();
      return matchesType(targetType, draggedItemType) && target.canDrop(this, targetId);
    }
  }, {
    key: "isDragging",
    value: function isDragging() {
      return Boolean(this.getItemType());
    }
  }, {
    key: "isDraggingSource",
    value: function isDraggingSource(sourceId) {
      // undefined on initial render
      if (!sourceId) {
        return false;
      }

      var source = this.registry.getSource(sourceId, true);
      Object(invariant_esm["a" /* invariant */])(source, 'Expected to find a valid source.');

      if (!this.isDragging() || !this.isSourcePublic()) {
        return false;
      }

      var sourceType = this.registry.getSourceType(sourceId);
      var draggedItemType = this.getItemType();

      if (sourceType !== draggedItemType) {
        return false;
      }

      return source.isDragging(this, sourceId);
    }
  }, {
    key: "isOverTarget",
    value: function isOverTarget(targetId) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        shallow: false
      }; // undefined on initial render

      if (!targetId) {
        return false;
      }

      var shallow = options.shallow;

      if (!this.isDragging()) {
        return false;
      }

      var targetType = this.registry.getTargetType(targetId);
      var draggedItemType = this.getItemType();

      if (draggedItemType && !matchesType(targetType, draggedItemType)) {
        return false;
      }

      var targetIds = this.getTargetIds();

      if (!targetIds.length) {
        return false;
      }

      var index = targetIds.indexOf(targetId);

      if (shallow) {
        return index === targetIds.length - 1;
      } else {
        return index > -1;
      }
    }
  }, {
    key: "getItemType",
    value: function getItemType() {
      return this.store.getState().dragOperation.itemType;
    }
  }, {
    key: "getItem",
    value: function getItem() {
      return this.store.getState().dragOperation.item;
    }
  }, {
    key: "getSourceId",
    value: function getSourceId() {
      return this.store.getState().dragOperation.sourceId;
    }
  }, {
    key: "getTargetIds",
    value: function getTargetIds() {
      return this.store.getState().dragOperation.targetIds;
    }
  }, {
    key: "getDropResult",
    value: function getDropResult() {
      return this.store.getState().dragOperation.dropResult;
    }
  }, {
    key: "didDrop",
    value: function didDrop() {
      return this.store.getState().dragOperation.didDrop;
    }
  }, {
    key: "isSourcePublic",
    value: function isSourcePublic() {
      return this.store.getState().dragOperation.isSourcePublic;
    }
  }, {
    key: "getInitialClientOffset",
    value: function getInitialClientOffset() {
      return this.store.getState().dragOffset.initialClientOffset;
    }
  }, {
    key: "getInitialSourceClientOffset",
    value: function getInitialSourceClientOffset() {
      return this.store.getState().dragOffset.initialSourceClientOffset;
    }
  }, {
    key: "getClientOffset",
    value: function getClientOffset() {
      return this.store.getState().dragOffset.clientOffset;
    }
  }, {
    key: "getSourceClientOffset",
    value: function getSourceClientOffset() {
      return coords_getSourceClientOffset(this.store.getState().dragOffset);
    }
  }, {
    key: "getDifferenceFromInitialOffset",
    value: function getDifferenceFromInitialOffset() {
      return coords_getDifferenceFromInitialOffset(this.store.getState().dragOffset);
    }
  }]);

  return DragDropMonitorImpl;
}();


// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/utils/getNextUniqueId.js
var nextUniqueId = 0;
function getNextUniqueId() {
  return nextUniqueId++;
}
// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/interfaces.js
var HandlerRole;

(function (HandlerRole) {
  HandlerRole["SOURCE"] = "SOURCE";
  HandlerRole["TARGET"] = "TARGET";
})(HandlerRole || (HandlerRole = {}));
// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/contracts.js
function contracts_typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    contracts_typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    contracts_typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return contracts_typeof(obj);
}


function validateSourceContract(source) {
  Object(invariant_esm["a" /* invariant */])(typeof source.canDrag === 'function', 'Expected canDrag to be a function.');
  Object(invariant_esm["a" /* invariant */])(typeof source.beginDrag === 'function', 'Expected beginDrag to be a function.');
  Object(invariant_esm["a" /* invariant */])(typeof source.endDrag === 'function', 'Expected endDrag to be a function.');
}
function validateTargetContract(target) {
  Object(invariant_esm["a" /* invariant */])(typeof target.canDrop === 'function', 'Expected canDrop to be a function.');
  Object(invariant_esm["a" /* invariant */])(typeof target.hover === 'function', 'Expected hover to be a function.');
  Object(invariant_esm["a" /* invariant */])(typeof target.drop === 'function', 'Expected beginDrag to be a function.');
}
function validateType(type, allowArray) {
  if (allowArray && Array.isArray(type)) {
    type.forEach(function (t) {
      return validateType(t, false);
    });
    return;
  }

  Object(invariant_esm["a" /* invariant */])(typeof type === 'string' || contracts_typeof(type) === 'symbol', allowArray ? 'Type can only be a string, a symbol, or an array of either.' : 'Type can only be a string or a symbol.');
}
// EXTERNAL MODULE: ./node_modules/@react-dnd/asap/dist/esm/browser/raw.js
var raw = __webpack_require__(186);

// CONCATENATED MODULE: ./node_modules/@react-dnd/asap/dist/esm/browser/asap.js
 // rawAsap provides everything we need except exception management.
// RawTasks are recycled to reduce GC churn.

var freeTasks = []; // We queue errors to ensure they are thrown in right order (FIFO).
// Array-as-queue is good enough here, since we are just dealing with exceptions.

var pendingErrors = [];
var requestErrorThrow = raw["a" /* rawAsap */].makeRequestCallFromTimer(throwFirstError);

function throwFirstError() {
  if (pendingErrors.length) {
    throw pendingErrors.shift();
  }
}
/**
 * Calls a task as soon as possible after returning, in its own event, with priority
 * over other events like animation, reflow, and repaint. An error thrown from an
 * event will not interrupt, nor even substantially slow down the processing of
 * other events, but will be rather postponed to a lower priority event.
 * @param {{call}} task A callable object, typically a function that takes no
 * arguments.
 */


function asap(task) {
  var rawTask;

  if (freeTasks.length) {
    rawTask = freeTasks.pop();
  } else {
    rawTask = new RawTask();
  }

  rawTask.task = task;
  Object(raw["a" /* rawAsap */])(rawTask);
} // We wrap tasks with recyclable task objects.  A task object implements
// `call`, just like a function.

var RawTask =
/** @class */
function () {
  function RawTask() {}

  RawTask.prototype.call = function () {
    try {
      this.task.call();
    } catch (error) {
      if (asap.onerror) {
        // This hook exists purely for testing purposes.
        // Its name will be periodically randomized to break any code that
        // depends on its existence.
        asap.onerror(error);
      } else {
        // In a web browser, exceptions are not fatal. However, to avoid
        // slowing down the queue of pending tasks, we rethrow the error in a
        // lower priority turn.
        pendingErrors.push(error);
        requestErrorThrow();
      }
    } finally {
      this.task = null;
      freeTasks[freeTasks.length] = this;
    }
  };

  return RawTask;
}();
// CONCATENATED MODULE: ./node_modules/@react-dnd/asap/dist/esm/browser/index.js

// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/HandlerRegistryImpl.js
function HandlerRegistryImpl_classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function HandlerRegistryImpl_defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function HandlerRegistryImpl_createClass(Constructor, protoProps, staticProps) {
  if (protoProps) HandlerRegistryImpl_defineProperties(Constructor.prototype, protoProps);
  if (staticProps) HandlerRegistryImpl_defineProperties(Constructor, staticProps);
  return Constructor;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function _iterableToArrayLimit(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}








function getNextHandlerId(role) {
  var id = getNextUniqueId().toString();

  switch (role) {
    case HandlerRole.SOURCE:
      return "S".concat(id);

    case HandlerRole.TARGET:
      return "T".concat(id);

    default:
      throw new Error("Unknown Handler Role: ".concat(role));
  }
}

function parseRoleFromHandlerId(handlerId) {
  switch (handlerId[0]) {
    case 'S':
      return HandlerRole.SOURCE;

    case 'T':
      return HandlerRole.TARGET;

    default:
      Object(invariant_esm["a" /* invariant */])(false, "Cannot parse handler ID: ".concat(handlerId));
  }
}

function mapContainsValue(map, searchValue) {
  var entries = map.entries();
  var isDone = false;

  do {
    var _entries$next = entries.next(),
        done = _entries$next.done,
        _entries$next$value = _slicedToArray(_entries$next.value, 2),
        value = _entries$next$value[1];

    if (value === searchValue) {
      return true;
    }

    isDone = !!done;
  } while (!isDone);

  return false;
}

var HandlerRegistryImpl_HandlerRegistryImpl =
/*#__PURE__*/
function () {
  function HandlerRegistryImpl(store) {
    HandlerRegistryImpl_classCallCheck(this, HandlerRegistryImpl);

    this.types = new Map();
    this.dragSources = new Map();
    this.dropTargets = new Map();
    this.pinnedSourceId = null;
    this.pinnedSource = null;
    this.store = store;
  }

  HandlerRegistryImpl_createClass(HandlerRegistryImpl, [{
    key: "addSource",
    value: function addSource(type, source) {
      validateType(type);
      validateSourceContract(source);
      var sourceId = this.addHandler(HandlerRole.SOURCE, type, source);
      this.store.dispatch(registry_addSource(sourceId));
      return sourceId;
    }
  }, {
    key: "addTarget",
    value: function addTarget(type, target) {
      validateType(type, true);
      validateTargetContract(target);
      var targetId = this.addHandler(HandlerRole.TARGET, type, target);
      this.store.dispatch(registry_addTarget(targetId));
      return targetId;
    }
  }, {
    key: "containsHandler",
    value: function containsHandler(handler) {
      return mapContainsValue(this.dragSources, handler) || mapContainsValue(this.dropTargets, handler);
    }
  }, {
    key: "getSource",
    value: function getSource(sourceId) {
      var includePinned = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      Object(invariant_esm["a" /* invariant */])(this.isSourceId(sourceId), 'Expected a valid source ID.');
      var isPinned = includePinned && sourceId === this.pinnedSourceId;
      var source = isPinned ? this.pinnedSource : this.dragSources.get(sourceId);
      return source;
    }
  }, {
    key: "getTarget",
    value: function getTarget(targetId) {
      Object(invariant_esm["a" /* invariant */])(this.isTargetId(targetId), 'Expected a valid target ID.');
      return this.dropTargets.get(targetId);
    }
  }, {
    key: "getSourceType",
    value: function getSourceType(sourceId) {
      Object(invariant_esm["a" /* invariant */])(this.isSourceId(sourceId), 'Expected a valid source ID.');
      return this.types.get(sourceId);
    }
  }, {
    key: "getTargetType",
    value: function getTargetType(targetId) {
      Object(invariant_esm["a" /* invariant */])(this.isTargetId(targetId), 'Expected a valid target ID.');
      return this.types.get(targetId);
    }
  }, {
    key: "isSourceId",
    value: function isSourceId(handlerId) {
      var role = parseRoleFromHandlerId(handlerId);
      return role === HandlerRole.SOURCE;
    }
  }, {
    key: "isTargetId",
    value: function isTargetId(handlerId) {
      var role = parseRoleFromHandlerId(handlerId);
      return role === HandlerRole.TARGET;
    }
  }, {
    key: "removeSource",
    value: function removeSource(sourceId) {
      var _this = this;

      Object(invariant_esm["a" /* invariant */])(this.getSource(sourceId), 'Expected an existing source.');
      this.store.dispatch(registry_removeSource(sourceId));
      asap(function () {
        _this.dragSources.delete(sourceId);

        _this.types.delete(sourceId);
      });
    }
  }, {
    key: "removeTarget",
    value: function removeTarget(targetId) {
      Object(invariant_esm["a" /* invariant */])(this.getTarget(targetId), 'Expected an existing target.');
      this.store.dispatch(registry_removeTarget(targetId));
      this.dropTargets.delete(targetId);
      this.types.delete(targetId);
    }
  }, {
    key: "pinSource",
    value: function pinSource(sourceId) {
      var source = this.getSource(sourceId);
      Object(invariant_esm["a" /* invariant */])(source, 'Expected an existing source.');
      this.pinnedSourceId = sourceId;
      this.pinnedSource = source;
    }
  }, {
    key: "unpinSource",
    value: function unpinSource() {
      Object(invariant_esm["a" /* invariant */])(this.pinnedSource, 'No source is pinned at the time.');
      this.pinnedSourceId = null;
      this.pinnedSource = null;
    }
  }, {
    key: "addHandler",
    value: function addHandler(role, type, handler) {
      var id = getNextHandlerId(role);
      this.types.set(id, type);

      if (role === HandlerRole.SOURCE) {
        this.dragSources.set(id, handler);
      } else if (role === HandlerRole.TARGET) {
        this.dropTargets.set(id, handler);
      }

      return id;
    }
  }]);

  return HandlerRegistryImpl;
}();


// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/DragDropManagerImpl.js
function DragDropManagerImpl_classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function DragDropManagerImpl_defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function DragDropManagerImpl_createClass(Constructor, protoProps, staticProps) {
  if (protoProps) DragDropManagerImpl_defineProperties(Constructor.prototype, protoProps);
  if (staticProps) DragDropManagerImpl_defineProperties(Constructor, staticProps);
  return Constructor;
}







function makeStoreInstance(debugMode) {
  // TODO: if we ever make a react-native version of this,
  // we'll need to consider how to pull off dev-tooling
  var reduxDevTools = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__;
  return createStore(reduce, debugMode && reduxDevTools && reduxDevTools({
    name: 'dnd-core',
    instanceId: 'dnd-core'
  }));
}

var DragDropManagerImpl_DragDropManagerImpl =
/*#__PURE__*/
function () {
  function DragDropManagerImpl() {
    var _this = this;

    var debugMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    DragDropManagerImpl_classCallCheck(this, DragDropManagerImpl);

    this.isSetUp = false;

    this.handleRefCountChange = function () {
      var shouldSetUp = _this.store.getState().refCount > 0;

      if (_this.backend) {
        if (shouldSetUp && !_this.isSetUp) {
          _this.backend.setup();

          _this.isSetUp = true;
        } else if (!shouldSetUp && _this.isSetUp) {
          _this.backend.teardown();

          _this.isSetUp = false;
        }
      }
    };

    var store = makeStoreInstance(debugMode);
    this.store = store;
    this.monitor = new DragDropMonitorImpl_DragDropMonitorImpl(store, new HandlerRegistryImpl_HandlerRegistryImpl(store));
    store.subscribe(this.handleRefCountChange);
  }

  DragDropManagerImpl_createClass(DragDropManagerImpl, [{
    key: "receiveBackend",
    value: function receiveBackend(backend) {
      this.backend = backend;
    }
  }, {
    key: "getMonitor",
    value: function getMonitor() {
      return this.monitor;
    }
  }, {
    key: "getBackend",
    value: function getBackend() {
      return this.backend;
    }
  }, {
    key: "getRegistry",
    value: function getRegistry() {
      return this.monitor.registry;
    }
  }, {
    key: "getActions",
    value: function getActions() {
      /* eslint-disable-next-line @typescript-eslint/no-this-alias */
      var manager = this;
      var dispatch = this.store.dispatch;

      function bindActionCreator(actionCreator) {
        return function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          var action = actionCreator.apply(manager, args);

          if (typeof action !== 'undefined') {
            dispatch(action);
          }
        };
      }

      var actions = createDragDropActions(this);
      return Object.keys(actions).reduce(function (boundActions, key) {
        var action = actions[key];
        boundActions[key] = bindActionCreator(action);
        return boundActions;
      }, {});
    }
  }, {
    key: "dispatch",
    value: function dispatch(action) {
      this.store.dispatch(action);
    }
  }]);

  return DragDropManagerImpl;
}();


// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/factories.js

function createDragDropManager(backendFactory, globalContext, backendOptions, debugMode) {
  var manager = new DragDropManagerImpl_DragDropManagerImpl(debugMode);
  var backend = backendFactory(manager, globalContext, backendOptions);
  manager.receiveBackend(backend);
  return manager;
}
// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/common/DndContext.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DndContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return createDndContext; });


/**
 * Create the React Context
 */

var DndContext = react["createContext"]({
  dragDropManager: undefined
});
/**
 * Creates the context object we're providing
 * @param backend
 * @param context
 */

function createDndContext(backend, context, options, debugMode) {
  return {
    dragDropManager: createDragDropManager(backend, context, options, debugMode)
  };
}

/***/ }),
/* 101 */,
/* 102 */,
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var columnController_1 = __webpack_require__(17);

var constants_1 = __webpack_require__(19);

var selectionController_1 = __webpack_require__(44);

var gridOptionsWrapper_1 = __webpack_require__(7);

var displayedGroupCreator_1 = __webpack_require__(104);

var columnFactory_1 = __webpack_require__(84);

var groupInstanceIdCreator_1 = __webpack_require__(157);

var columnGroup_1 = __webpack_require__(58);

var pinnedRowModel_1 = __webpack_require__(59);

var utils_1 = __webpack_require__(6);

var BaseGridSerializingSession =
/** @class */
function () {
  function BaseGridSerializingSession(config) {
    var columnController = config.columnController,
        valueService = config.valueService,
        gridOptionsWrapper = config.gridOptionsWrapper,
        processCellCallback = config.processCellCallback,
        processHeaderCallback = config.processHeaderCallback,
        cellAndHeaderEscaper = config.cellAndHeaderEscaper;
    this.columnController = columnController;
    this.valueService = valueService;
    this.gridOptionsWrapper = gridOptionsWrapper;
    this.processCellCallback = processCellCallback;
    this.processHeaderCallback = processHeaderCallback;
    this.cellAndHeaderEscaper = cellAndHeaderEscaper;
  }

  BaseGridSerializingSession.prototype.extractHeaderValue = function (column) {
    var nameForCol = this.getHeaderName(this.processHeaderCallback, column);

    if (nameForCol === null || nameForCol === undefined) {
      nameForCol = '';
    }

    return this.cellAndHeaderEscaper ? this.cellAndHeaderEscaper(nameForCol) : nameForCol;
  };

  BaseGridSerializingSession.prototype.extractRowCellValue = function (column, index, type, node) {
    var isRowGrouping = this.columnController.getRowGroupColumns().length > 0;
    var valueForCell;

    if (node && node.group && isRowGrouping && index === 0) {
      valueForCell = this.createValueForGroupNode(node);
    } else {
      valueForCell = this.valueService.getValue(column, node);
    }

    valueForCell = this.processCell(node, column, valueForCell, this.processCellCallback, type);

    if (valueForCell === null || valueForCell === undefined) {
      valueForCell = '';
    }

    return this.cellAndHeaderEscaper ? this.cellAndHeaderEscaper(valueForCell) : valueForCell;
  };

  BaseGridSerializingSession.prototype.getHeaderName = function (callback, column) {
    if (callback) {
      return callback({
        column: column,
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        context: this.gridOptionsWrapper.getContext()
      });
    } else {
      return this.columnController.getDisplayNameForColumn(column, 'csv', true);
    }
  };

  BaseGridSerializingSession.prototype.createValueForGroupNode = function (node) {
    var keys = [node.key];

    while (node.parent) {
      node = node.parent;
      keys.push(node.key);
    }

    return keys.reverse().join(' -> ');
  };

  BaseGridSerializingSession.prototype.processCell = function (rowNode, column, value, processCellCallback, type) {
    if (processCellCallback) {
      return processCellCallback({
        column: column,
        node: rowNode,
        value: value,
        api: this.gridOptionsWrapper.getApi(),
        columnApi: this.gridOptionsWrapper.getColumnApi(),
        context: this.gridOptionsWrapper.getContext(),
        type: type
      });
    } else {
      return value;
    }
  };

  return BaseGridSerializingSession;
}();

exports.BaseGridSerializingSession = BaseGridSerializingSession;

var GridSerializer =
/** @class */
function () {
  function GridSerializer() {}

  GridSerializer.prototype.serialize = function (gridSerializingSession, params) {
    var dontSkipRows = function dontSkipRows() {
      return false;
    };

    var skipGroups = params && params.skipGroups;
    var skipHeader = params && params.skipHeader;
    var columnGroups = params && params.columnGroups;
    var skipFooters = params && params.skipFooters;
    var skipPinnedTop = params && params.skipPinnedTop;
    var skipPinnedBottom = params && params.skipPinnedBottom;
    var includeCustomHeader = params && params.customHeader;
    var includeCustomFooter = params && params.customFooter;
    var allColumns = params && params.allColumns;
    var onlySelected = params && params.onlySelected;
    var columnKeys = params && params.columnKeys;
    var onlySelectedAllPages = params && params.onlySelectedAllPages;
    var rowSkipper = params && params.shouldRowBeSkipped || dontSkipRows;
    var api = this.gridOptionsWrapper.getApi();
    var skipSingleChildrenGroup = this.gridOptionsWrapper.isGroupRemoveSingleChildren();
    var skipLowestSingleChildrenGroup = this.gridOptionsWrapper.isGroupRemoveLowestSingleChildren();
    var context = this.gridOptionsWrapper.getContext(); // when in pivot mode, we always render cols on screen, never 'all columns'

    var isPivotMode = this.columnController.isPivotMode();
    var rowModelNormal = this.rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
    var onlySelectedNonStandardModel = !rowModelNormal && onlySelected;
    var columnsToExport = [];

    if (utils_1._.existsAndNotEmpty(columnKeys)) {
      columnsToExport = this.columnController.getGridColumns(columnKeys);
    } else if (allColumns && !isPivotMode) {
      // add auto group column for tree data
      columnsToExport = this.gridOptionsWrapper.isTreeData() ? this.columnController.getGridColumns([constants_1.Constants.GROUP_AUTO_COLUMN_ID]) : [];
      columnsToExport = columnsToExport.concat(this.columnController.getAllPrimaryColumns() || []);
    } else {
      columnsToExport = this.columnController.getAllDisplayedColumns();
    }

    if (includeCustomHeader) {
      gridSerializingSession.addCustomHeader(includeCustomHeader);
    }

    gridSerializingSession.prepare(columnsToExport); // first pass, put in the header names of the cols

    if (columnGroups) {
      var groupInstanceIdCreator = new groupInstanceIdCreator_1.GroupInstanceIdCreator();
      var displayedGroups = this.displayedGroupCreator.createDisplayedGroups(columnsToExport, this.columnController.getGridBalancedTree(), groupInstanceIdCreator, null);
      this.recursivelyAddHeaderGroups(displayedGroups, gridSerializingSession);
    }

    if (!skipHeader) {
      var gridRowIterator_1 = gridSerializingSession.onNewHeaderRow();
      columnsToExport.forEach(function (column, index) {
        gridRowIterator_1.onColumn(column, index, undefined);
      });
    }

    this.pinnedRowModel.forEachPinnedTopRow(processRow);

    if (isPivotMode) {
      if (this.rowModel.forEachPivotNode) {
        this.rowModel.forEachPivotNode(processRow);
      } else {
        //Must be enterprise, so we can just loop through all the nodes
        this.rowModel.forEachNode(processRow);
      }
    } else {
      // onlySelectedAllPages: user doing pagination and wants selected items from
      // other pages, so cannot use the standard row model as it won't have rows from
      // other pages.
      // onlySelectedNonStandardModel: if user wants selected in non standard row model
      // (eg viewport) then again rowmodel cannot be used, so need to use selected instead.
      if (onlySelectedAllPages || onlySelectedNonStandardModel) {
        var selectedNodes = this.selectionController.getSelectedNodes();
        selectedNodes.forEach(function (node) {
          processRow(node);
        });
      } else {
        // here is everything else - including standard row model and selected. we don't use
        // the selection model even when just using selected, so that the result is the order
        // of the rows appearing on the screen.
        if (rowModelNormal) {
          this.rowModel.forEachNodeAfterFilterAndSort(processRow);
        } else {
          this.rowModel.forEachNode(processRow);
        }
      }
    }

    this.pinnedRowModel.forEachPinnedBottomRow(processRow);

    if (includeCustomFooter) {
      gridSerializingSession.addCustomFooter(includeCustomFooter);
    }

    function processRow(node) {
      var shouldSkipLowestGroup = skipLowestSingleChildrenGroup && node.leafGroup;
      var shouldSkipCurrentGroup = node.allChildrenCount === 1 && (skipSingleChildrenGroup || shouldSkipLowestGroup);

      if (node.group && (skipGroups || shouldSkipCurrentGroup)) {
        return;
      }

      if (skipFooters && node.footer) {
        return;
      }

      if (onlySelected && !node.isSelected()) {
        return;
      }

      if (skipPinnedTop && node.rowPinned === 'top') {
        return;
      }

      if (skipPinnedBottom && node.rowPinned === 'bottom') {
        return;
      } // if we are in pivotMode, then the grid will show the root node only
      // if it's not a leaf group


      var nodeIsRootNode = node.level === -1;

      if (nodeIsRootNode && !node.leafGroup) {
        return;
      }

      var shouldRowBeSkipped = rowSkipper({
        node: node,
        api: api,
        context: context
      });

      if (shouldRowBeSkipped) {
        return;
      }

      var rowAccumulator = gridSerializingSession.onNewBodyRow();
      columnsToExport.forEach(function (column, index) {
        rowAccumulator.onColumn(column, index, node);
      });
    }

    return gridSerializingSession.parse();
  };

  GridSerializer.prototype.recursivelyAddHeaderGroups = function (displayedGroups, gridSerializingSession) {
    var directChildrenHeaderGroups = [];
    displayedGroups.forEach(function (columnGroupChild) {
      var columnGroup = columnGroupChild;

      if (!columnGroup.getChildren) {
        return;
      }

      columnGroup.getChildren().forEach(function (it) {
        return directChildrenHeaderGroups.push(it);
      });
    });

    if (displayedGroups.length > 0 && displayedGroups[0] instanceof columnGroup_1.ColumnGroup) {
      this.doAddHeaderHeader(gridSerializingSession, displayedGroups);
    }

    if (directChildrenHeaderGroups && directChildrenHeaderGroups.length > 0) {
      this.recursivelyAddHeaderGroups(directChildrenHeaderGroups, gridSerializingSession);
    }
  };

  GridSerializer.prototype.doAddHeaderHeader = function (gridSerializingSession, displayedGroups) {
    var _this = this;

    var gridRowIterator = gridSerializingSession.onNewHeaderGroupingRow();
    var columnIndex = 0;
    displayedGroups.forEach(function (columnGroupChild) {
      var columnGroup = columnGroupChild;

      var columnName = _this.columnController.getDisplayNameForColumnGroup(columnGroup, 'header');

      gridRowIterator.onColumn(columnName || '', columnIndex++, columnGroup.getLeafColumns().length - 1);
    });
  };

  __decorate([context_1.Autowired('displayedGroupCreator'), __metadata("design:type", displayedGroupCreator_1.DisplayedGroupCreator)], GridSerializer.prototype, "displayedGroupCreator", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], GridSerializer.prototype, "columnController", void 0);

  __decorate([context_1.Autowired('rowModel'), __metadata("design:type", Object)], GridSerializer.prototype, "rowModel", void 0);

  __decorate([context_1.Autowired('pinnedRowModel'), __metadata("design:type", pinnedRowModel_1.PinnedRowModel)], GridSerializer.prototype, "pinnedRowModel", void 0);

  __decorate([context_1.Autowired('selectionController'), __metadata("design:type", selectionController_1.SelectionController)], GridSerializer.prototype, "selectionController", void 0);

  __decorate([context_1.Autowired('columnFactory'), __metadata("design:type", columnFactory_1.ColumnFactory)], GridSerializer.prototype, "columnFactory", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], GridSerializer.prototype, "gridOptionsWrapper", void 0);

  GridSerializer = __decorate([context_1.Bean("gridSerializer")], GridSerializer);
  return GridSerializer;
}();

exports.GridSerializer = GridSerializer;
var RowType;

(function (RowType) {
  RowType[RowType["HEADER_GROUPING"] = 0] = "HEADER_GROUPING";
  RowType[RowType["HEADER"] = 1] = "HEADER";
  RowType[RowType["BODY"] = 2] = "BODY";
})(RowType = exports.RowType || (exports.RowType = {}));

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var columnUtils_1 = __webpack_require__(69);

var columnGroup_1 = __webpack_require__(58);

var originalColumnGroup_1 = __webpack_require__(70);

var context_2 = __webpack_require__(2);

var utils_1 = __webpack_require__(6); // takes in a list of columns, as specified by the column definitions, and returns column groups


var DisplayedGroupCreator =
/** @class */
function () {
  function DisplayedGroupCreator() {}

  DisplayedGroupCreator.prototype.createDisplayedGroups = function ( // all displayed columns sorted - this is the columns the grid should show
  sortedVisibleColumns, // the tree of columns, as provided by the users, used to know what groups columns roll up into
  balancedColumnTree, // creates unique id's for the group
  groupInstanceIdCreator, // whether it's left, right or center col
  pinned, // we try to reuse old groups if we can, to allow gui to do animation
  oldDisplayedGroups) {
    var _this = this;

    var result = [];
    var previousRealPath;
    var previousOriginalPath;
    var oldColumnsMapped = this.mapOldGroupsById(oldDisplayedGroups); // go through each column, then do a bottom up comparison to the previous column, and start
    // to share groups if they converge at any point.

    sortedVisibleColumns.forEach(function (currentColumn) {
      var currentOriginalPath = _this.getOriginalPathForColumn(balancedColumnTree, currentColumn);

      var currentRealPath = [];
      var firstColumn = !previousOriginalPath;

      for (var i = 0; i < currentOriginalPath.length; i++) {
        if (firstColumn || currentOriginalPath[i] !== previousOriginalPath[i]) {
          // new group needed
          var newGroup = _this.createColumnGroup(currentOriginalPath[i], groupInstanceIdCreator, oldColumnsMapped, pinned);

          currentRealPath[i] = newGroup; // if top level, add to result, otherwise add to parent

          if (i == 0) {
            result.push(newGroup);
          } else {
            currentRealPath[i - 1].addChild(newGroup);
          }
        } else {
          // reuse old group
          currentRealPath[i] = previousRealPath[i];
        }
      }

      var noColumnGroups = currentRealPath.length === 0;

      if (noColumnGroups) {
        // if we are not grouping, then the result of the above is an empty
        // path (no groups), and we just add the column to the root list.
        result.push(currentColumn);
      } else {
        var leafGroup = currentRealPath[currentRealPath.length - 1];
        leafGroup.addChild(currentColumn);
      }

      previousRealPath = currentRealPath;
      previousOriginalPath = currentOriginalPath;
    });
    this.setupParentsIntoColumns(result, null);
    return result;
  };

  DisplayedGroupCreator.prototype.createColumnGroup = function (originalGroup, groupInstanceIdCreator, oldColumnsMapped, pinned) {
    var groupId = originalGroup.getGroupId();
    var instanceId = groupInstanceIdCreator.getInstanceIdForKey(groupId);
    var uniqueId = columnGroup_1.ColumnGroup.createUniqueId(groupId, instanceId);
    var columnGroup = oldColumnsMapped[uniqueId]; // if the user is setting new colDefs, it is possible that the id's overlap, and we
    // would have a false match from above. so we double check we are talking about the
    // same original column group.

    if (columnGroup && columnGroup.getOriginalColumnGroup() !== originalGroup) {
      columnGroup = null;
    }

    if (utils_1._.exists(columnGroup)) {
      // clean out the old column group here, as we will be adding children into it again
      columnGroup.reset();
    } else {
      columnGroup = new columnGroup_1.ColumnGroup(originalGroup, groupId, instanceId, pinned);
      this.context.wireBean(columnGroup);
    }

    return columnGroup;
  }; // returns back a 2d map of ColumnGroup as follows: groupId -> instanceId -> ColumnGroup


  DisplayedGroupCreator.prototype.mapOldGroupsById = function (displayedGroups) {
    var result = {};

    var recursive = function recursive(columnsOrGroups) {
      columnsOrGroups.forEach(function (columnOrGroup) {
        if (columnOrGroup instanceof columnGroup_1.ColumnGroup) {
          var columnGroup = columnOrGroup;
          result[columnOrGroup.getUniqueId()] = columnGroup;
          recursive(columnGroup.getChildren());
        }
      });
    };

    if (displayedGroups) {
      recursive(displayedGroups);
    }

    return result;
  };

  DisplayedGroupCreator.prototype.setupParentsIntoColumns = function (columnsOrGroups, parent) {
    var _this = this;

    columnsOrGroups.forEach(function (columnsOrGroup) {
      columnsOrGroup.setParent(parent);

      if (columnsOrGroup instanceof columnGroup_1.ColumnGroup) {
        var columnGroup = columnsOrGroup;

        _this.setupParentsIntoColumns(columnGroup.getChildren(), columnGroup);
      }
    });
  }; // private createFakePath(balancedColumnTree: OriginalColumnGroupChild[], column: Column): OriginalColumnGroup[] {
  //     let fakePath: OriginalColumnGroup[] = [];
  //     let currentChildren = balancedColumnTree;
  //     // this while loop does search on the balanced tree, so our result is the right length
  //     let index = 0;
  //     while (currentChildren && currentChildren[0] && currentChildren[0] instanceof OriginalColumnGroup) {
  //         // putting in a deterministic fake id, in case the API in the future needs to reference the col
  //         let fakeGroup = new OriginalColumnGroup(null, 'FAKE_PATH_' + index, true);
  //         this.context.wireBean(fakeGroup);
  //
  //         // fakePath.setChildren(children);
  //
  //         fakePath.push(fakeGroup);
  //         currentChildren = (<OriginalColumnGroup>currentChildren[0]).getChildren();
  //         index++;
  //     }
  //
  //     fakePath.forEach( (fakePathGroup: OriginalColumnGroup, i: number) => {
  //         let lastItemInList = i === fakePath.length-1;
  //         let child = lastItemInList ? column : fakePath[i+1];
  //         fakePathGroup.setChildren([child]);
  //     });
  //
  //     return fakePath;
  // }


  DisplayedGroupCreator.prototype.getOriginalPathForColumn = function (balancedColumnTree, column) {
    var result = [];
    var found = false;
    recursePath(balancedColumnTree, 0); // it's possible we didn't find a path. this happens if the column is generated
    // by the grid (auto-group), in that the definition didn't come from the client. in this case,
    // we create a fake original path.

    if (found) {
      return result;
    } else {
      console.warn('could not get path');
      return null; // return this.createFakePath(balancedColumnTree, column);
    }

    function recursePath(balancedColumnTree, dept) {
      for (var i = 0; i < balancedColumnTree.length; i++) {
        if (found) {
          // quit the search, so 'result' is kept with the found result
          return;
        }

        var node = balancedColumnTree[i];

        if (node instanceof originalColumnGroup_1.OriginalColumnGroup) {
          var nextNode = node;
          recursePath(nextNode.getChildren(), dept + 1);
          result[dept] = node;
        } else {
          if (node === column) {
            found = true;
          }
        }
      }
    }
  };

  __decorate([context_1.Autowired('columnUtils'), __metadata("design:type", columnUtils_1.ColumnUtils)], DisplayedGroupCreator.prototype, "columnUtils", void 0);

  __decorate([context_1.Autowired('context'), __metadata("design:type", context_2.Context)], DisplayedGroupCreator.prototype, "context", void 0);

  DisplayedGroupCreator = __decorate([context_2.Bean('displayedGroupCreator')], DisplayedGroupCreator);
  return DisplayedGroupCreator;
}();

exports.DisplayedGroupCreator = DisplayedGroupCreator;

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var context_2 = __webpack_require__(2);

var TemplateService =
/** @class */
function () {
  function TemplateService() {
    this.templateCache = {};
    this.waitingCallbacks = {};
  } // returns the template if it is loaded, or null if it is not loaded
  // but will call the callback when it is loaded


  TemplateService.prototype.getTemplate = function (url, callback) {
    var templateFromCache = this.templateCache[url];

    if (templateFromCache) {
      return templateFromCache;
    }

    var callbackList = this.waitingCallbacks[url];
    var that = this;

    if (!callbackList) {
      // first time this was called, so need a new list for callbacks
      callbackList = [];
      this.waitingCallbacks[url] = callbackList; // and also need to do the http request

      var client = new XMLHttpRequest();

      client.onload = function () {
        that.handleHttpResult(this, url);
      };

      client.open("GET", url);
      client.send();
    } // add this callback


    if (callback) {
      callbackList.push(callback);
    } // caller needs to wait for template to load, so return null


    return null;
  };

  TemplateService.prototype.handleHttpResult = function (httpResult, url) {
    if (httpResult.status !== 200 || httpResult.response === null) {
      console.warn("Unable to get template error " + httpResult.status + " - " + url);
      return;
    } // response success, so process it
    // in IE9 the response is in - responseText


    this.templateCache[url] = httpResult.response || httpResult.responseText; // inform all listeners that this is now in the cache

    var callbacks = this.waitingCallbacks[url];

    for (var i = 0; i < callbacks.length; i++) {
      var callback = callbacks[i]; // we could pass the callback the response, however we know the client of this code
      // is the cell renderer, and it passes the 'cellRefresh' method in as the callback
      // which doesn't take any parameters.

      callback();
    }

    if (this.$scope) {
      var that_1 = this;
      window.setTimeout(function () {
        that_1.$scope.$apply();
      }, 0);
    }
  };

  __decorate([context_2.Autowired('$scope'), __metadata("design:type", Object)], TemplateService.prototype, "$scope", void 0);

  TemplateService = __decorate([context_1.Bean('templateService')], TemplateService);
  return TemplateService;
}();

exports.TemplateService = TemplateService;

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
}); // when doing transactions, or change detection, and grouping is present
// in the data, there is no need for the ClientSideRowModel to update each
// group after an update, ony parts that were impacted by the change.
// this class keeps track of all groups that were impacted by a transaction.
// the the different CSRM operations (filter, sort etc) use the forEach method
// to visit each group that was changed.

var ChangedPath =
/** @class */
function () {
  function ChangedPath(keepingColumns, rootNode) {
    // whether changed path is active of not. it is active when a) doing
    // a transaction update or b) doing change detection. if we are doing
    // a CSRM refresh for other reasons (after sort or filter, or user calling
    // setRowData() without delta mode) then we are not active. we are also
    // marked as not active if secondary columns change in pivot (as this impacts
    // aggregations)
    this.active = true; // for each node in the change path, we also store which columns need
    // to be re-aggregated.

    this.nodeIdsToColumns = {}; // for quick lookup, all items in the change path are mapped by nodeId

    this.mapToItems = {};
    this.keepingColumns = keepingColumns;
    this.pathRoot = {
      rowNode: rootNode,
      children: null
    };
    this.mapToItems[rootNode.id] = this.pathRoot;
  } // can be set inactive by:
  // a) ClientSideRowModel, if no transactions or
  // b) PivotService, if secondary columns changed


  ChangedPath.prototype.setInactive = function () {
    this.active = false;
  };

  ChangedPath.prototype.isActive = function () {
    return this.active;
  };

  ChangedPath.prototype.depthFirstSearchChangedPath = function (pathItem, callback) {
    if (pathItem.children) {
      for (var i = 0; i < pathItem.children.length; i++) {
        this.depthFirstSearchChangedPath(pathItem.children[i], callback);
      }
    }

    callback(pathItem.rowNode);
  };

  ChangedPath.prototype.depthFirstSearchEverything = function (rowNode, callback, traverseEverything) {
    if (rowNode.childrenAfterGroup) {
      for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {
        var childNode = rowNode.childrenAfterGroup[i];

        if (childNode.childrenAfterGroup) {
          this.depthFirstSearchEverything(rowNode.childrenAfterGroup[i], callback, traverseEverything);
        } else if (traverseEverything) {
          callback(childNode);
        }
      }
    }

    callback(rowNode);
  }; // traverseLeafNodes -> used when NOT doing changed path, ie traversing everything. the callback
  // will be called for child nodes in addition to parent nodes.


  ChangedPath.prototype.forEachChangedNodeDepthFirst = function (callback, traverseLeafNodes) {
    if (traverseLeafNodes === void 0) {
      traverseLeafNodes = false;
    }

    if (this.active) {
      // if we are active, then use the change path to callback
      // only for updated groups
      this.depthFirstSearchChangedPath(this.pathRoot, callback);
    } else {
      // we are not active, so callback for everything, walk the entire path
      this.depthFirstSearchEverything(this.pathRoot.rowNode, callback, traverseLeafNodes);
    }
  };

  ChangedPath.prototype.executeFromRootNode = function (callback) {
    callback(this.pathRoot.rowNode);
  };

  ChangedPath.prototype.createPathItems = function (rowNode) {
    var pointer = rowNode;
    var newEntryCount = 0;

    while (!this.mapToItems[pointer.id]) {
      var newEntry = {
        rowNode: pointer,
        children: null
      };
      this.mapToItems[pointer.id] = newEntry;
      newEntryCount++;
      pointer = pointer.parent;
    }

    return newEntryCount;
  };

  ChangedPath.prototype.populateColumnsMap = function (rowNode, columns) {
    var _this = this;

    if (!this.keepingColumns || !columns) {
      return;
    }

    var pointer = rowNode;

    while (pointer) {
      // if columns, add the columns in all the way to parent, merging
      // in any other columns that might be there already
      if (!this.nodeIdsToColumns[pointer.id]) {
        this.nodeIdsToColumns[pointer.id] = {};
      }

      columns.forEach(function (col) {
        return _this.nodeIdsToColumns[pointer.id][col.getId()] = true;
      });
      pointer = pointer.parent;
    }
  };

  ChangedPath.prototype.linkPathItems = function (rowNode, newEntryCount) {
    var pointer = rowNode;

    for (var i = 0; i < newEntryCount; i++) {
      var thisItem = this.mapToItems[pointer.id];
      var parentItem = this.mapToItems[pointer.parent.id];

      if (!parentItem.children) {
        parentItem.children = [];
      }

      parentItem.children.push(thisItem);
      pointer = pointer.parent;
    }
  }; // called by
  // 1) change detection (provides cols) and
  // 2) groupStage if doing transaction update (doesn't provide cols)


  ChangedPath.prototype.addParentNode = function (rowNode, columns) {
    // we cannot do  both steps below in the same loop as
    // the second loop has a dependency on the first loop.
    // ie the hierarchy cannot be stitched up yet because
    // we don't have it built yet
    // create the new PathItem objects.
    var newEntryCount = this.createPathItems(rowNode); // link in the node items

    this.linkPathItems(rowNode, newEntryCount); // update columns

    this.populateColumnsMap(rowNode, columns);
  };

  ChangedPath.prototype.canSkip = function (rowNode) {
    return this.active && !this.mapToItems[rowNode.id];
  };

  ChangedPath.prototype.getValueColumnsForNode = function (rowNode, valueColumns) {
    if (!this.keepingColumns) {
      return valueColumns;
    }

    var colsForThisNode = this.nodeIdsToColumns[rowNode.id];
    var result = valueColumns.filter(function (col) {
      return colsForThisNode[col.getId()];
    });
    return result;
  };

  ChangedPath.prototype.getNotValueColumnsForNode = function (rowNode, valueColumns) {
    if (!this.keepingColumns) {
      return null;
    }

    var colsForThisNode = this.nodeIdsToColumns[rowNode.id];
    var result = valueColumns.filter(function (col) {
      return !colsForThisNode[col.getId()];
    });
    return result;
  };

  return ChangedPath;
}();

exports.ChangedPath = ChangedPath;

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var ColumnAnimationService =
/** @class */
function () {
  function ColumnAnimationService() {
    this.executeNextFuncs = [];
    this.executeLaterFuncs = [];
    this.active = false;
    this.animationThreadCount = 0;
  }

  ColumnAnimationService.prototype.registerGridComp = function (gridPanel) {
    this.gridPanel = gridPanel;
  };

  ColumnAnimationService.prototype.isActive = function () {
    return this.active;
  };

  ColumnAnimationService.prototype.start = function () {
    if (this.active) {
      return;
    }

    if (this.gridOptionsWrapper.isSuppressColumnMoveAnimation()) {
      return;
    } // if doing RTL, we don't animate open / close as due to how the pixels are inverted,
    // the animation moves all the row the the right rather than to the left (ie it's the static
    // columns that actually get their coordinates updated)


    if (this.gridOptionsWrapper.isEnableRtl()) {
      return;
    }

    this.ensureAnimationCssClassPresent();
    this.active = true;
  };

  ColumnAnimationService.prototype.finish = function () {
    if (!this.active) {
      return;
    }

    this.flush();
    this.active = false;
  };

  ColumnAnimationService.prototype.executeNextVMTurn = function (func) {
    if (this.active) {
      this.executeNextFuncs.push(func);
    } else {
      func();
    }
  };

  ColumnAnimationService.prototype.executeLaterVMTurn = function (func) {
    if (this.active) {
      this.executeLaterFuncs.push(func);
    } else {
      func();
    }
  };

  ColumnAnimationService.prototype.ensureAnimationCssClassPresent = function () {
    var _this = this; // up the count, so we can tell if someone else has updated the count
    // by the time the 'wait' func executes


    this.animationThreadCount++;
    var animationThreadCountCopy = this.animationThreadCount;
    this.gridPanel.setColumnMovingCss(true);
    this.executeLaterFuncs.push(function () {
      // only remove the class if this thread was the last one to update it
      if (_this.animationThreadCount === animationThreadCountCopy) {
        _this.gridPanel.setColumnMovingCss(false);
      }
    });
  };

  ColumnAnimationService.prototype.flush = function () {
    var nowFuncs = this.executeNextFuncs;
    this.executeNextFuncs = [];
    var waitFuncs = this.executeLaterFuncs;
    this.executeLaterFuncs = [];

    if (nowFuncs.length === 0 && waitFuncs.length === 0) {
      return;
    }

    window.setTimeout(function () {
      return nowFuncs.forEach(function (func) {
        return func();
      });
    }, 0);
    window.setTimeout(function () {
      return waitFuncs.forEach(function (func) {
        return func();
      });
    }, 300);
  };

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], ColumnAnimationService.prototype, "gridOptionsWrapper", void 0);

  ColumnAnimationService = __decorate([context_1.Bean('columnAnimationService')], ColumnAnimationService);
  return ColumnAnimationService;
}();

exports.ColumnAnimationService = ColumnAnimationService;

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var eventService_1 = __webpack_require__(14);

var expressionService_1 = __webpack_require__(43);

var animateSlideCellRenderer_1 = __webpack_require__(144);

var animateShowChangeCellRenderer_1 = __webpack_require__(145);

var groupCellRenderer_1 = __webpack_require__(146);

var utils_1 = __webpack_require__(6);

var CellRendererFactory =
/** @class */
function () {
  function CellRendererFactory() {
    this.cellRendererMap = {};
  }

  CellRendererFactory_1 = CellRendererFactory;

  CellRendererFactory.prototype.init = function () {
    this.cellRendererMap[CellRendererFactory_1.ANIMATE_SLIDE] = animateSlideCellRenderer_1.AnimateSlideCellRenderer;
    this.cellRendererMap[CellRendererFactory_1.ANIMATE_SHOW_CHANGE] = animateShowChangeCellRenderer_1.AnimateShowChangeCellRenderer;
    this.cellRendererMap[CellRendererFactory_1.GROUP] = groupCellRenderer_1.GroupCellRenderer; // this.registerRenderersFromGridOptions();
  }; // private registerRenderersFromGridOptions(): void {
  //     let userProvidedCellRenderers = this.gridOptionsWrapper.getCellRenderers();
  //     _.iterateObject(userProvidedCellRenderers, (key: string, cellRenderer: {new(): ICellRenderer} | ICellRendererFunc)=> {
  //         this.addCellRenderer(key, cellRenderer);
  //     });
  // }


  CellRendererFactory.prototype.addCellRenderer = function (key, cellRenderer) {
    this.cellRendererMap[key] = cellRenderer;
  };

  CellRendererFactory.prototype.getCellRenderer = function (key) {
    var result = this.cellRendererMap[key];

    if (utils_1._.missing(result)) {
      console.warn('ag-Grid: unable to find cellRenderer for key ' + key);
      return null;
    }

    return result;
  };

  var CellRendererFactory_1;
  CellRendererFactory.ANIMATE_SLIDE = 'animateSlide';
  CellRendererFactory.ANIMATE_SHOW_CHANGE = 'animateShowChange';
  CellRendererFactory.GROUP = 'group';

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], CellRendererFactory.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('expressionService'), __metadata("design:type", expressionService_1.ExpressionService)], CellRendererFactory.prototype, "expressionService", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], CellRendererFactory.prototype, "eventService", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], CellRendererFactory.prototype, "init", null);

  CellRendererFactory = CellRendererFactory_1 = __decorate([context_1.Bean('cellRendererFactory')], CellRendererFactory);
  return CellRendererFactory;
}();

exports.CellRendererFactory = CellRendererFactory;

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var component_1 = __webpack_require__(22);

var componentAnnotations_1 = __webpack_require__(25);

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var utils_1 = __webpack_require__(6);

var FilterConditionType;

(function (FilterConditionType) {
  FilterConditionType[FilterConditionType["MAIN"] = 0] = "MAIN";
  FilterConditionType[FilterConditionType["CONDITION"] = 1] = "CONDITION";
})(FilterConditionType = exports.FilterConditionType || (exports.FilterConditionType = {}));

var DEFAULT_TRANSLATIONS = {
  loadingOoo: 'Loading...',
  empty: 'Choose One',
  equals: 'Equals',
  notEqual: 'Not equal',
  lessThan: 'Less than',
  greaterThan: 'Greater than',
  inRange: 'In range',
  lessThanOrEqual: 'Less than or equals',
  greaterThanOrEqual: 'Greater than or equals',
  filterOoo: 'Filter...',
  contains: 'Contains',
  notContains: 'Not contains',
  startsWith: 'Starts with',
  endsWith: 'Ends with',
  searchOoo: 'Search...',
  selectAll: 'Select All',
  applyFilter: 'Apply Filter',
  clearFilter: 'Clear Filter',
  andCondition: 'AND',
  orCondition: 'OR'
};
/**
 * T(ype) The type of this filter. ie in DateFilter T=Date
 * P(arams) The params that this filter can take
 * M(model getModel/setModel) The object that this filter serializes to
 * F Floating filter params
 *
 * Contains common logic to ALL filters.. Translation, apply and clear button
 * get/setModel context wiring....
 */

var BaseFilter =
/** @class */
function (_super) {
  __extends(BaseFilter, _super);

  function BaseFilter() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.customFilterOptions = {};
    return _this;
  }

  BaseFilter.prototype.init = function (params) {
    var _this = this;

    this.filterParams = params;
    this.defaultFilter = this.filterParams.defaultOption; // strip out incorrectly defined FilterOptionDefs

    if (params.filterOptions) {
      params.filterOptions.forEach(function (filterOption) {
        if (typeof filterOption === 'string') {
          return;
        }

        if (!filterOption.displayKey) {
          console.warn("ag-Grid: ignoring FilterOptionDef as it doesn't contain a 'displayKey'");
          return;
        }

        if (!filterOption.displayName) {
          console.warn("ag-Grid: ignoring FilterOptionDef as it doesn't contain a 'displayName'");
          return;
        }

        if (!filterOption.test) {
          console.warn("ag-Grid: ignoring FilterOptionDef as it doesn't contain a 'test'");
          return;
        }

        _this.customFilterOptions[filterOption.displayKey] = filterOption;
      });
    }

    if (this.filterParams.filterOptions && !this.defaultFilter) {
      var firstFilterOption = this.filterParams.filterOptions[0];

      if (typeof firstFilterOption === 'string') {
        this.defaultFilter = firstFilterOption;
      } else if (firstFilterOption.displayKey) {
        this.defaultFilter = firstFilterOption.displayKey;
      } else {
        console.warn("ag-Grid: invalid FilterOptionDef supplied as it doesn't contain a 'displayKey'");
      }
    }

    this.customInit();
    this.selectedFilter = this.defaultFilter;
    this.selectedFilterCondition = this.defaultFilter;
    this.clearActive = params.clearButton === true; //Allowing for old param property apply, even though is not advertised through the interface

    this.applyActive = params.applyButton === true || params.apply === true;
    this.newRowsActionKeep = params.newRowsAction === 'keep';
    this.setTemplate(this.generateTemplate());

    utils_1._.setVisible(this.eApplyButton, this.applyActive);

    if (this.applyActive) {
      this.addDestroyableEventListener(this.eApplyButton, "click", this.filterParams.filterChangedCallback);
    }

    utils_1._.setVisible(this.eClearButton, this.clearActive);

    if (this.clearActive) {
      this.addDestroyableEventListener(this.eClearButton, "click", this.onClearButton.bind(this));
    }

    var anyButtonVisible = this.applyActive || this.clearActive;

    utils_1._.setVisible(this.eButtonsPanel, anyButtonVisible);

    this.initialiseFilterBodyUi(FilterConditionType.MAIN);
    this.refreshFilterBodyUi(FilterConditionType.MAIN);
  };

  BaseFilter.prototype.onClearButton = function () {
    this.setModel(null);
    this.onFilterChanged();
  };

  BaseFilter.prototype.floatingFilter = function (from) {
    if (from !== '') {
      var model = this.modelFromFloatingFilter(from);
      this.setModel(model);
    } else {
      this.resetState();
    }

    this.onFilterChanged();
  };

  BaseFilter.prototype.onNewRowsLoaded = function () {
    if (!this.newRowsActionKeep) {
      this.resetState();
    }
  };

  BaseFilter.prototype.getModel = function () {
    if (this.isFilterActive()) {
      if (!this.isFilterConditionActive(FilterConditionType.CONDITION)) {
        return this.serialize(FilterConditionType.MAIN);
      } else {
        return {
          condition1: this.serialize(FilterConditionType.MAIN),
          condition2: this.serialize(FilterConditionType.CONDITION),
          operator: this.conditionValue
        };
      }
    } else {
      return null;
    }
  };

  BaseFilter.prototype.getNullableModel = function () {
    if (!this.isFilterConditionActive(FilterConditionType.CONDITION)) {
      return this.serialize(FilterConditionType.MAIN);
    } else {
      return {
        condition1: this.serialize(FilterConditionType.MAIN),
        condition2: this.serialize(FilterConditionType.CONDITION),
        operator: this.conditionValue
      };
    }
  };

  BaseFilter.prototype.setModel = function (model) {
    if (model) {
      if (!model.operator) {
        this.resetState();
        this.parse(model, FilterConditionType.MAIN);
      } else {
        var asCombinedFilter = model;
        this.parse(asCombinedFilter.condition1, FilterConditionType.MAIN);
        this.parse(asCombinedFilter.condition2, FilterConditionType.CONDITION);
        this.conditionValue = asCombinedFilter.operator;
      }
    } else {
      this.resetState();
    }

    this.redrawCondition();
    this.refreshFilterBodyUi(FilterConditionType.MAIN);
    this.refreshFilterBodyUi(FilterConditionType.CONDITION);
  };

  BaseFilter.prototype.doOnFilterChanged = function (applyNow) {
    if (applyNow === void 0) {
      applyNow = false;
    }

    this.filterParams.filterModifiedCallback();
    var requiresApplyAndIsApplying = this.applyActive && applyNow;
    var notRequiresApply = !this.applyActive;
    var shouldFilter = notRequiresApply || requiresApplyAndIsApplying;

    if (shouldFilter) {
      this.filterParams.filterChangedCallback();
    }

    this.refreshFilterBodyUi(FilterConditionType.MAIN);
    this.refreshFilterBodyUi(FilterConditionType.CONDITION);
    return shouldFilter;
  };

  BaseFilter.prototype.onFilterChanged = function (applyNow) {
    if (applyNow === void 0) {
      applyNow = false;
    }

    this.doOnFilterChanged(applyNow);
    this.redrawCondition();
    this.refreshFilterBodyUi(FilterConditionType.MAIN);
    this.refreshFilterBodyUi(FilterConditionType.CONDITION);
  };

  BaseFilter.prototype.redrawCondition = function () {
    var _this = this;

    var filterCondition = this.eFilterBodyWrapper.querySelector('.ag-filter-condition');

    if (!filterCondition && this.isFilterActive() && this.acceptsBooleanLogic()) {
      this.eConditionWrapper = utils_1._.loadTemplate(this.createConditionTemplate(FilterConditionType.CONDITION));
      this.eFilterBodyWrapper.appendChild(this.eConditionWrapper);
      this.wireQuerySelectors();

      var _a = this.refreshOperatorUi(),
          andButton = _a.andButton,
          orButton = _a.orButton;

      this.addDestroyableEventListener(andButton, 'change', function () {
        _this.conditionValue = 'AND';

        _this.onFilterChanged();
      });
      this.addDestroyableEventListener(orButton, 'change', function () {
        _this.conditionValue = 'OR';

        _this.onFilterChanged();
      });
      this.initialiseFilterBodyUi(FilterConditionType.CONDITION);
    } else if (filterCondition && !this.isFilterActive()) {
      // reset condition filter state
      this.conditionValue = 'AND';
      this.resetState(true);
      this.eFilterBodyWrapper.removeChild(this.eConditionWrapper);
      this.eConditionWrapper = null;
    } else {
      this.refreshFilterBodyUi(FilterConditionType.CONDITION);

      if (this.eConditionWrapper) {
        this.refreshOperatorUi();
      }
    }
  };

  BaseFilter.prototype.refreshOperatorUi = function () {
    var andButton = this.eConditionWrapper.querySelector('.and');
    var orButton = this.eConditionWrapper.querySelector('.or');
    this.conditionValue = this.conditionValue == null ? 'AND' : this.conditionValue;
    andButton.checked = this.conditionValue === 'AND';
    orButton.checked = this.conditionValue === 'OR';
    return {
      andButton: andButton,
      orButton: orButton
    };
  };

  BaseFilter.prototype.onFloatingFilterChanged = function (change) {
    //It has to be of the type FloatingFilterWithApplyChange if it gets here
    var casted = change;

    if (casted == null) {
      this.setModel(null);
    } else if (!this.isFilterConditionActive(FilterConditionType.CONDITION)) {
      this.setModel(casted ? casted.model : null);
    } else {
      var combinedFilter = {
        condition1: casted.model,
        condition2: this.serialize(FilterConditionType.CONDITION),
        operator: this.conditionValue
      };
      this.setModel(combinedFilter);
    }

    return this.doOnFilterChanged(casted ? casted.apply : false);
  };

  BaseFilter.prototype.generateFilterHeader = function (type) {
    return '';
  };

  BaseFilter.prototype.generateTemplate = function () {
    var translate = this.translate.bind(this);
    var mainConditionBody = this.createConditionBody(FilterConditionType.MAIN);
    var bodyWithBooleanLogic = !this.acceptsBooleanLogic() ? mainConditionBody : this.wrapCondition(mainConditionBody);
    return "<div>\n                    <div class='ag-filter-body-wrapper'>" + bodyWithBooleanLogic + "</div>\n                    <div class=\"ag-filter-apply-panel\" id=\"applyPanel\">\n                        <button type=\"button\" id=\"clearButton\">" + translate('clearFilter') + "</button>\n                        <button type=\"button\" id=\"applyButton\">" + translate('applyFilter') + "</button>\n                    </div>\n                </div>";
  };

  BaseFilter.prototype.acceptsBooleanLogic = function () {
    return false;
  };

  BaseFilter.prototype.wrapCondition = function (mainCondition) {
    if (!this.isFilterActive()) {
      return mainCondition;
    }

    return "" + mainCondition + this.createConditionTemplate(FilterConditionType.CONDITION);
  };

  BaseFilter.prototype.createConditionTemplate = function (type) {
    return "<div class=\"ag-filter-condition\">\n            <input id=\"andId\" type=\"radio\" class=\"and\" name=\"booleanLogic\" value=" + this.translate('AND') + "\n                   checked=\"checked\" /><label style=\"display: inline\" for=\"andId\">" + this.translate('andCondition') + "</label>\n            <input id=\"orId\" type=\"radio\" class=\"or\" name=\"booleanLogic\" value=\"OR\" /><label style=\"display: inline\"\n                   for=\"orId\">" + this.translate('orCondition') + "</label>\n            <div>" + this.createConditionBody(type) + "</div>\n        </div>";
  };

  BaseFilter.prototype.createConditionBody = function (type) {
    var body = this.bodyTemplate(type);
    return this.generateFilterHeader(type) + body;
  };

  BaseFilter.prototype.translate = function (toTranslate) {
    var translate = this.gridOptionsWrapper.getLocaleTextFunc();
    var defaultTranslation = DEFAULT_TRANSLATIONS[toTranslate];

    if (!defaultTranslation && this.customFilterOptions[toTranslate]) {
      defaultTranslation = this.customFilterOptions[toTranslate].displayName;
    }

    return translate(toTranslate, defaultTranslation);
  };

  BaseFilter.prototype.getDebounceMs = function (filterParams) {
    if (this.applyActive) {
      if (filterParams.debounceMs != null) {
        console.warn('ag-Grid: debounceMs is ignored when applyButton = true');
      }

      return 0;
    }

    return filterParams.debounceMs != null ? filterParams.debounceMs : 500;
  };

  BaseFilter.prototype.doesFilterHaveHiddenInput = function (filterType) {
    var customFilterOption = this.customFilterOptions[filterType];
    return customFilterOption && customFilterOption.hideFilterInput;
  };

  BaseFilter.EMPTY = 'empty';
  BaseFilter.EQUALS = 'equals';
  BaseFilter.NOT_EQUAL = 'notEqual';
  BaseFilter.LESS_THAN = 'lessThan';
  BaseFilter.LESS_THAN_OR_EQUAL = 'lessThanOrEqual';
  BaseFilter.GREATER_THAN = 'greaterThan';
  BaseFilter.GREATER_THAN_OR_EQUAL = 'greaterThanOrEqual';
  BaseFilter.IN_RANGE = 'inRange';
  BaseFilter.CONTAINS = 'contains'; //1;

  BaseFilter.NOT_CONTAINS = 'notContains'; //1;

  BaseFilter.STARTS_WITH = 'startsWith'; //4;

  BaseFilter.ENDS_WITH = 'endsWith'; //5;

  __decorate([componentAnnotations_1.QuerySelector('#applyPanel'), __metadata("design:type", HTMLElement)], BaseFilter.prototype, "eButtonsPanel", void 0);

  __decorate([componentAnnotations_1.QuerySelector('.ag-filter-body-wrapper'), __metadata("design:type", HTMLElement)], BaseFilter.prototype, "eFilterBodyWrapper", void 0);

  __decorate([componentAnnotations_1.QuerySelector('#applyButton'), __metadata("design:type", HTMLElement)], BaseFilter.prototype, "eApplyButton", void 0);

  __decorate([componentAnnotations_1.QuerySelector('#clearButton'), __metadata("design:type", HTMLElement)], BaseFilter.prototype, "eClearButton", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], BaseFilter.prototype, "gridOptionsWrapper", void 0);

  return BaseFilter;
}(component_1.Component);

exports.BaseFilter = BaseFilter;
/**
 * Every filter with a dropdown where the user can specify a comparing type against the filter values
 */

var ComparableBaseFilter =
/** @class */
function (_super) {
  __extends(ComparableBaseFilter, _super);

  function ComparableBaseFilter() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ComparableBaseFilter.prototype.doesFilterPass = function (params) {
    var mainFilterResult = this.individualFilterPasses(params, FilterConditionType.MAIN);

    if (this.eTypeConditionSelector == null) {
      return mainFilterResult;
    }

    var auxFilterResult = this.individualFilterPasses(params, FilterConditionType.CONDITION);
    return this.conditionValue === 'AND' ? mainFilterResult && auxFilterResult : mainFilterResult || auxFilterResult;
  };

  ComparableBaseFilter.prototype.init = function (params) {
    _super.prototype.init.call(this, params);

    this.suppressAndOrCondition = params.suppressAndOrCondition;
  };

  ComparableBaseFilter.prototype.customInit = function () {
    if (!this.defaultFilter) {
      this.defaultFilter = this.getDefaultType();
    }
  };

  ComparableBaseFilter.prototype.acceptsBooleanLogic = function () {
    return this.suppressAndOrCondition !== true;
  };

  ComparableBaseFilter.prototype.generateFilterHeader = function (type) {
    var _this = this;

    var defaultFilterTypes = this.getApplicableFilterTypes();
    var restrictedFilterTypes = this.filterParams.filterOptions;
    var actualFilterTypes = restrictedFilterTypes ? restrictedFilterTypes : defaultFilterTypes;
    var optionsHtml = actualFilterTypes.map(function (filter) {
      var filterName = typeof filter === 'string' ? filter : filter.displayKey;

      var localeFilterName = _this.translate(filterName);

      return "<option value=\"" + filterName + "\">" + localeFilterName + "</option>";
    });
    var readOnly = optionsHtml.length == 1 ? 'disabled' : '';
    var id = type == FilterConditionType.MAIN ? 'filterType' : 'filterConditionType';
    return optionsHtml.length <= 0 ? '' : "<div>\n                <select class=\"ag-filter-select\" id=\"" + id + "\" " + readOnly + ">\n                    " + optionsHtml.join('') + "\n                </select>\n            </div>";
  };

  ComparableBaseFilter.prototype.initialiseFilterBodyUi = function (type) {
    var _this = this;

    if (type === FilterConditionType.MAIN) {
      this.setFilterType(this.selectedFilter, type);
      this.addDestroyableEventListener(this.eTypeSelector, "change", function () {
        return _this.onFilterTypeChanged(type);
      });
    } else {
      this.setFilterType(this.selectedFilterCondition, type);
      this.addDestroyableEventListener(this.eTypeConditionSelector, "change", function () {
        return _this.onFilterTypeChanged(type);
      });
    }
  };

  ComparableBaseFilter.prototype.onFilterTypeChanged = function (type) {
    var prevSelectedFilter = this.selectedFilter;

    if (type === FilterConditionType.MAIN) {
      this.selectedFilter = this.eTypeSelector.value;
    } else {
      this.selectedFilterCondition = this.eTypeConditionSelector.value;
    }

    this.refreshFilterBodyUi(type);
    var prevSelectedFilterHadNoInput = this.doesFilterHaveHiddenInput(prevSelectedFilter); // only fire 'onFilterChanged' event if filter is active, as in it contains a filter value, or if the previously
    // selected filter didn't require a value, i.e. if custom filter has 'hideFilterInputField = true'

    if (this.isFilterActive() || prevSelectedFilterHadNoInput) {
      // reset when switching back to the empty filter to remove conditional filter
      if (this.selectedFilter === BaseFilter.EMPTY) {
        this.resetState();
      }

      this.onFilterChanged();
    }
  };

  ComparableBaseFilter.prototype.isFilterActive = function () {
    // the main selected filter is always active when there is no input field
    if (this.doesFilterHaveHiddenInput(this.selectedFilter)) {
      return true;
    }

    var rawFilterValues = this.filterValues(FilterConditionType.MAIN);

    if (rawFilterValues && this.selectedFilter === BaseFilter.IN_RANGE) {
      var filterValueArray = rawFilterValues;
      return filterValueArray[0] != null && filterValueArray[1] != null;
    } else {
      return rawFilterValues != null;
    }
  };

  ComparableBaseFilter.prototype.setFilterType = function (filterType, type) {
    if (type === FilterConditionType.MAIN) {
      this.selectedFilter = filterType;

      if (!this.eTypeSelector) {
        return;
      }

      this.eTypeSelector.value = filterType;
    } else {
      this.selectedFilterCondition = filterType;

      if (!this.eTypeConditionSelector) {
        return;
      }

      this.eTypeConditionSelector.value = filterType;
    }
  };

  ComparableBaseFilter.prototype.isFilterConditionActive = function (type) {
    return this.filterValues(type) != null;
  };

  __decorate([componentAnnotations_1.QuerySelector('#filterType'), __metadata("design:type", HTMLSelectElement)], ComparableBaseFilter.prototype, "eTypeSelector", void 0);

  __decorate([componentAnnotations_1.QuerySelector('#filterConditionType'), __metadata("design:type", HTMLSelectElement)], ComparableBaseFilter.prototype, "eTypeConditionSelector", void 0);

  return ComparableBaseFilter;
}(BaseFilter);

exports.ComparableBaseFilter = ComparableBaseFilter;
/**
 * Comparable filter with scalar underlying values (ie numbers and dates. Strings are not scalar so have to extend
 * ComparableBaseFilter)
 */

var ScalarBaseFilter =
/** @class */
function (_super) {
  __extends(ScalarBaseFilter, _super);

  function ScalarBaseFilter() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ScalarBaseFilter.prototype.nullComparator = function (type) {
    var _this = this;

    return function (filterValue, gridValue) {
      if (gridValue == null) {
        var nullValue = _this.translateNull(type);

        if (_this.selectedFilter === BaseFilter.EMPTY) {
          return 0;
        }

        if (_this.selectedFilter === BaseFilter.EQUALS) {
          return nullValue ? 0 : 1;
        }

        if (_this.selectedFilter === BaseFilter.GREATER_THAN) {
          return nullValue ? 1 : -1;
        }

        if (_this.selectedFilter === BaseFilter.GREATER_THAN_OR_EQUAL) {
          return nullValue ? 1 : -1;
        }

        if (_this.selectedFilter === BaseFilter.LESS_THAN_OR_EQUAL) {
          return nullValue ? -1 : 1;
        }

        if (_this.selectedFilter === BaseFilter.LESS_THAN) {
          return nullValue ? -1 : 1;
        }

        if (_this.selectedFilter === BaseFilter.NOT_EQUAL) {
          return nullValue ? 1 : 0;
        }
      }

      var actualComparator = _this.comparator();

      return actualComparator(filterValue, gridValue);
    };
  };

  ScalarBaseFilter.prototype.getDefaultType = function () {
    return BaseFilter.EQUALS;
  };

  ScalarBaseFilter.prototype.translateNull = function (type) {
    var reducedType = type.indexOf('greater') > -1 ? 'greaterThan' : type.indexOf('lessThan') > -1 ? 'lessThan' : 'equals';

    if (this.filterParams.nullComparator && this.filterParams.nullComparator[reducedType]) {
      return this.filterParams.nullComparator[reducedType];
    }

    return ScalarBaseFilter.DEFAULT_NULL_COMPARATOR[reducedType];
  };

  ScalarBaseFilter.prototype.individualFilterPasses = function (params, type) {
    return this.doIndividualFilterPasses(params, type, type === FilterConditionType.MAIN ? this.selectedFilter : this.selectedFilterCondition);
  };

  ScalarBaseFilter.prototype.doIndividualFilterPasses = function (params, type, filter) {
    var cellValue = this.filterParams.valueGetter(params.node);
    var rawFilterValues = this.filterValues(type);
    var filterValue = Array.isArray(rawFilterValues) ? rawFilterValues[0] : rawFilterValues;
    var customFilterOption = this.customFilterOptions[filter];

    if (customFilterOption) {
      // only execute the custom filter if a value exists or a value isn't required, i.e. input is hidden
      if (filterValue != null || customFilterOption.hideFilterInput) {
        return customFilterOption.test(filterValue, cellValue);
      }
    }

    if (filterValue == null) {
      return type === FilterConditionType.MAIN ? true : this.conditionValue === 'AND';
    }

    var comparator = this.nullComparator(filter);
    var compareResult = comparator(filterValue, cellValue);

    if (filter === BaseFilter.EMPTY) {
      return false;
    }

    if (filter === BaseFilter.EQUALS) {
      return compareResult === 0;
    }

    if (filter === BaseFilter.GREATER_THAN) {
      return compareResult > 0;
    }

    if (filter === BaseFilter.GREATER_THAN_OR_EQUAL) {
      return compareResult >= 0;
    }

    if (filter === BaseFilter.LESS_THAN_OR_EQUAL) {
      return compareResult <= 0;
    }

    if (filter === BaseFilter.LESS_THAN) {
      return compareResult < 0;
    }

    if (filter === BaseFilter.NOT_EQUAL) {
      return compareResult != 0;
    } //From now on the type is a range and rawFilterValues must be an array!


    var compareToResult = comparator(rawFilterValues[1], cellValue);

    if (filter === BaseFilter.IN_RANGE) {
      if (!this.filterParams.inRangeInclusive) {
        return compareResult > 0 && compareToResult < 0;
      } else {
        return compareResult >= 0 && compareToResult <= 0;
      }
    }

    throw new Error('Unexpected type of filter: ' + filter);
  };

  ScalarBaseFilter.DEFAULT_NULL_COMPARATOR = {
    equals: false,
    lessThan: false,
    greaterThan: false
  };
  return ScalarBaseFilter;
}(ComparableBaseFilter);

exports.ScalarBaseFilter = ScalarBaseFilter;

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var beanStub_1 = __webpack_require__(32);

var context_1 = __webpack_require__(2);

var eventService_1 = __webpack_require__(14);

var eventKeys_1 = __webpack_require__(57);

var utils_1 = __webpack_require__(6);
/**
 * This class solves the 'max height' problem, where the user might want to show more data than
 * the max div height actually allows.
 */


var MaxDivHeightScaler =
/** @class */
function (_super) {
  __extends(MaxDivHeightScaler, _super);

  function MaxDivHeightScaler() {
    var _this = _super !== null && _super.apply(this, arguments) || this; // the scrollY position


    _this.scrollY = 0; // how tall the body is

    _this.uiBodyHeight = 0;
    return _this;
  }

  MaxDivHeightScaler.prototype.postConstruct = function () {
    this.addDestroyableEventListener(this.eventService, eventKeys_1.Events.EVENT_BODY_HEIGHT_CHANGED, this.updateOffset.bind(this));
    this.scrollBarWidth = utils_1._.getScrollbarWidth();
    this.maxDivHeight = utils_1._.getMaxDivHeight();
  };

  MaxDivHeightScaler.prototype.registerGridComp = function (gridPanel) {
    this.gridPanel = gridPanel;
  };

  MaxDivHeightScaler.prototype.isScaling = function () {
    return this.scaling;
  };

  MaxDivHeightScaler.prototype.getOffset = function () {
    return this.offset;
  };

  MaxDivHeightScaler.prototype.updateOffset = function () {
    if (!this.scaling) {
      return;
    }

    var newScrollY = this.gridPanel.getVScrollPosition().top;
    var newBodyHeight = this.getUiBodyHeight();
    var atLeastOneChanged = newScrollY !== this.scrollY || newBodyHeight !== this.uiBodyHeight;

    if (atLeastOneChanged) {
      this.scrollY = newScrollY;
      this.uiBodyHeight = newBodyHeight;
      this.calculateOffset();
    }
  };

  MaxDivHeightScaler.prototype.calculateOffset = function () {
    this.uiContainerHeight = this.maxDivHeight;
    this.pixelsToShave = this.modelHeight - this.uiContainerHeight;
    this.maxScrollY = this.uiContainerHeight - this.uiBodyHeight;
    var scrollPercent = this.scrollY / this.maxScrollY;
    this.setOffset(scrollPercent * this.pixelsToShave);
  };

  MaxDivHeightScaler.prototype.clearOffset = function () {
    this.uiContainerHeight = this.modelHeight;
    this.pixelsToShave = 0;
    this.setOffset(0);
  };

  MaxDivHeightScaler.prototype.setOffset = function (newOffset) {
    // because we are talking pixels, no point in confusing things with half numbers
    var newOffsetFloor = typeof newOffset === 'number' ? Math.floor(newOffset) : null;

    if (this.offset === newOffsetFloor) {
      return;
    }

    this.offset = newOffsetFloor;
    this.eventService.dispatchEvent({
      type: eventKeys_1.Events.EVENT_HEIGHT_SCALE_CHANGED
    });
  };

  MaxDivHeightScaler.prototype.setModelHeight = function (modelHeight) {
    this.modelHeight = modelHeight;
    this.scaling = this.maxDivHeight > 0 && modelHeight > this.maxDivHeight;

    if (this.scaling) {
      this.calculateOffset();
    } else {
      this.clearOffset();
    }
  };

  MaxDivHeightScaler.prototype.getUiContainerHeight = function () {
    return this.uiContainerHeight;
  };

  MaxDivHeightScaler.prototype.getRealPixelPosition = function (modelPixel) {
    return modelPixel - this.offset;
  };

  MaxDivHeightScaler.prototype.getUiBodyHeight = function () {
    var pos = this.gridPanel.getVScrollPosition();
    return pos.bottom - pos.top;
  };

  MaxDivHeightScaler.prototype.getScrollPositionForPixel = function (rowTop) {
    if (this.pixelsToShave <= 0) {
      return rowTop;
    }

    var modelMaxScroll = this.modelHeight - this.getUiBodyHeight();
    var scrollPercent = rowTop / modelMaxScroll;
    var scrollPixel = this.maxScrollY * scrollPercent;
    return scrollPixel;
  };

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], MaxDivHeightScaler.prototype, "eventService", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], MaxDivHeightScaler.prototype, "postConstruct", null);

  MaxDivHeightScaler = __decorate([context_1.Bean('maxDivHeightScaler')], MaxDivHeightScaler);
  return MaxDivHeightScaler;
}(beanStub_1.BeanStub);

exports.MaxDivHeightScaler = MaxDivHeightScaler;

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var gridOptionsWrapper_1 = __webpack_require__(7);

var context_1 = __webpack_require__(2);

var dragService_1 = __webpack_require__(87);

var HorizontalResizeService =
/** @class */
function () {
  function HorizontalResizeService() {}

  HorizontalResizeService.prototype.addResizeBar = function (params) {
    var _this = this;

    var dragSource = {
      dragStartPixels: params.dragStartPixels || 0,
      eElement: params.eResizeBar,
      onDragStart: this.onDragStart.bind(this, params),
      onDragStop: this.onDragStop.bind(this, params),
      onDragging: this.onDragging.bind(this, params)
    };
    this.dragService.addDragSource(dragSource, true); // we pass remove func back to the caller, so call can tell us when they
    // are finished, and then we remove the listener from the drag source

    var finishedWithResizeFunc = function finishedWithResizeFunc() {
      return _this.dragService.removeDragSource(dragSource);
    };

    return finishedWithResizeFunc;
  };

  HorizontalResizeService.prototype.onDragStart = function (params, mouseEvent) {
    this.draggingStarted = true;
    this.dragStartX = mouseEvent.clientX;
    this.setResizeIcons();
    var shiftKey = mouseEvent instanceof MouseEvent ? mouseEvent.shiftKey === true : false;
    params.onResizeStart(shiftKey);
  };

  HorizontalResizeService.prototype.setResizeIcons = function () {
    this.oldBodyCursor = this.eGridDiv.style.cursor;
    this.oldMsUserSelect = this.eGridDiv.style.msUserSelect;
    this.oldWebkitUserSelect = this.eGridDiv.style.webkitUserSelect; // change the body cursor, so when drag moves out of the drag bar, the cursor is still 'resize' (or 'move'

    this.eGridDiv.style.cursor = 'col-resize'; // we don't want text selection outside the grid (otherwise it looks weird as text highlights when we move)

    this.eGridDiv.style.msUserSelect = 'none';
    this.eGridDiv.style.webkitUserSelect = 'none';
  };

  HorizontalResizeService.prototype.onDragStop = function (params, mouseEvent) {
    params.onResizeEnd(this.resizeAmount);
    this.resetIcons();
  };

  HorizontalResizeService.prototype.resetIcons = function () {
    // we don't want text selection outside the grid (otherwise it looks weird as text highlights when we move)
    this.eGridDiv.style.cursor = this.oldBodyCursor;
    this.eGridDiv.style.msUserSelect = this.oldMsUserSelect;
    this.eGridDiv.style.webkitUserSelect = this.oldWebkitUserSelect;
  };

  HorizontalResizeService.prototype.onDragging = function (params, mouseEvent) {
    this.resizeAmount = mouseEvent.clientX - this.dragStartX;
    params.onResizing(this.resizeAmount);
  };

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], HorizontalResizeService.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('dragService'), __metadata("design:type", dragService_1.DragService)], HorizontalResizeService.prototype, "dragService", void 0);

  __decorate([context_1.Autowired('eGridDiv'), __metadata("design:type", HTMLElement)], HorizontalResizeService.prototype, "eGridDiv", void 0);

  HorizontalResizeService = __decorate([context_1.Bean('horizontalResizeService')], HorizontalResizeService);
  return HorizontalResizeService;
}();

exports.HorizontalResizeService = HorizontalResizeService;

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var column_1 = __webpack_require__(24);

var beanStub_1 = __webpack_require__(32);

var constants_1 = __webpack_require__(19);

var utils_1 = __webpack_require__(6);

var SetLeftFeature =
/** @class */
function (_super) {
  __extends(SetLeftFeature, _super);

  function SetLeftFeature(columnOrGroup, eCell, beans, colsSpanning) {
    var _this = _super.call(this) || this;

    _this.columnOrGroup = columnOrGroup;
    _this.eCell = eCell;
    _this.colsSpanning = colsSpanning;
    _this.beans = beans;
    _this.printLayout = beans.gridOptionsWrapper.getDomLayout() === constants_1.Constants.DOM_LAYOUT_PRINT;
    return _this;
  }

  SetLeftFeature.prototype.setColsSpanning = function (colsSpanning) {
    this.colsSpanning = colsSpanning;
    this.onLeftChanged();
  };

  SetLeftFeature.prototype.getColumnOrGroup = function () {
    if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {
      return this.colsSpanning[this.colsSpanning.length - 1];
    } else {
      return this.columnOrGroup;
    }
  };

  SetLeftFeature.prototype.init = function () {
    this.addDestroyableEventListener(this.columnOrGroup, column_1.Column.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));
    this.setLeftFirstTime();
  };

  SetLeftFeature.prototype.setLeftFirstTime = function () {
    var suppressMoveAnimation = this.beans.gridOptionsWrapper.isSuppressColumnMoveAnimation();

    var oldLeftExists = utils_1._.exists(this.columnOrGroup.getOldLeft());

    var animateColumnMove = this.beans.columnAnimationService.isActive() && oldLeftExists && !suppressMoveAnimation;

    if (animateColumnMove) {
      this.animateInLeft();
    } else {
      this.onLeftChanged();
    }
  };

  SetLeftFeature.prototype.animateInLeft = function () {
    var _this = this;

    var left = this.getColumnOrGroup().getLeft();
    var oldLeft = this.getColumnOrGroup().getOldLeft();
    this.setLeft(oldLeft); // we must keep track of the left we want to set to, as this would otherwise lead to a race
    // condition, if the user changed the left value many times in one VM turn, then we want to make
    // make sure the actualLeft we set in the timeout below (in the next VM turn) is the correct left
    // position. eg if user changes column position twice, then setLeft() below executes twice in next
    // VM turn, but only one (the correct one) should get applied.

    this.actualLeft = left;
    this.beans.columnAnimationService.executeNextVMTurn(function () {
      // test this left value is the latest one to be applied, and if not, do nothing
      if (_this.actualLeft === left) {
        _this.setLeft(left);
      }
    });
  };

  SetLeftFeature.prototype.onLeftChanged = function () {
    var colOrGroup = this.getColumnOrGroup();
    var left = colOrGroup.getLeft();
    this.actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left);
    this.setLeft(this.actualLeft);
  };

  SetLeftFeature.prototype.modifyLeftForPrintLayout = function (colOrGroup, leftPosition) {
    if (!this.printLayout) {
      return leftPosition;
    }

    if (colOrGroup.getPinned() === column_1.Column.PINNED_LEFT) {
      return leftPosition;
    } else if (colOrGroup.getPinned() === column_1.Column.PINNED_RIGHT) {
      var leftWidth = this.beans.columnController.getPinnedLeftContainerWidth();
      var bodyWidth = this.beans.columnController.getBodyContainerWidth();
      return leftWidth + bodyWidth + leftPosition;
    } else {
      // is in body
      var leftWidth = this.beans.columnController.getPinnedLeftContainerWidth();
      return leftWidth + leftPosition;
    }
  };

  SetLeftFeature.prototype.setLeft = function (value) {
    // if the value is null, then that means the column is no longer
    // displayed. there is logic in the rendering to fade these columns
    // out, so we don't try and change their left positions.
    if (utils_1._.exists(value)) {
      this.eCell.style.left = value + "px";
    }
  };

  return SetLeftFeature;
}(beanStub_1.BeanStub);

exports.SetLeftFeature = SetLeftFeature;

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var component_1 = __webpack_require__(22);

var componentAnnotations_1 = __webpack_require__(25);

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var utils_1 = __webpack_require__(6);

var AgCheckbox =
/** @class */
function (_super) {
  __extends(AgCheckbox, _super);

  function AgCheckbox() {
    var _this = _super.call(this) || this;

    _this.selected = false;
    _this.readOnly = false;
    _this.passive = false;
    return _this;
  }

  AgCheckbox.prototype.preConstruct = function () {
    this.setTemplate(AgCheckbox.TEMPLATE);
  };

  AgCheckbox.prototype.postConstruct = function () {
    this.loadIcons();
    this.updateIcons();
  };

  AgCheckbox.prototype.setLabel = function (label) {
    this.eLabel.innerText = label;
  };

  AgCheckbox.prototype.loadIcons = function () {
    utils_1._.clearElement(this.eChecked);

    utils_1._.clearElement(this.eUnchecked);

    utils_1._.clearElement(this.eIndeterminate);

    if (this.readOnly) {
      this.eChecked.appendChild(utils_1._.createIconNoSpan('checkboxCheckedReadOnly', this.gridOptionsWrapper, null));
      this.eUnchecked.appendChild(utils_1._.createIconNoSpan('checkboxUncheckedReadOnly', this.gridOptionsWrapper, null));
      this.eIndeterminate.appendChild(utils_1._.createIconNoSpan('checkboxIndeterminateReadOnly', this.gridOptionsWrapper, null));
    } else {
      this.eChecked.appendChild(utils_1._.createIconNoSpan('checkboxChecked', this.gridOptionsWrapper, null));
      this.eUnchecked.appendChild(utils_1._.createIconNoSpan('checkboxUnchecked', this.gridOptionsWrapper, null));
      this.eIndeterminate.appendChild(utils_1._.createIconNoSpan('checkboxIndeterminate', this.gridOptionsWrapper, null));
    }
  };

  AgCheckbox.prototype.onClick = function (event) {
    // if we don't set the path, then won't work in Edge, as once the <span> is removed from the dom,
    // it's not possible to calculate the path by following the parent's chain. in other browser (eg
    // chrome) there is event.path for this purpose, but missing in Edge.
    utils_1._.addAgGridEventPath(event);

    if (!this.readOnly) {
      this.toggle();
    }
  };

  AgCheckbox.prototype.getNextValue = function () {
    if (this.selected === undefined) {
      return true;
    } else {
      return !this.selected;
    }
  };

  AgCheckbox.prototype.setPassive = function (passive) {
    this.passive = passive;
  };

  AgCheckbox.prototype.setReadOnly = function (readOnly) {
    this.readOnly = readOnly;
    this.loadIcons();
  };

  AgCheckbox.prototype.isReadOnly = function () {
    return this.readOnly;
  };

  AgCheckbox.prototype.isSelected = function () {
    return this.selected;
  };

  AgCheckbox.prototype.toggle = function () {
    var nextValue = this.getNextValue();

    if (this.passive) {
      var event_1 = {
        type: AgCheckbox.EVENT_CHANGED,
        selected: nextValue
      };
      this.dispatchEvent(event_1);
    } else {
      this.setSelected(nextValue);
    }
  };

  AgCheckbox.prototype.setSelected = function (selected) {
    if (this.selected === selected) {
      return;
    }

    if (selected === true) {
      this.selected = true;
    } else if (selected === false) {
      this.selected = false;
    } else {
      this.selected = undefined;
    }

    this.updateIcons();
    var event = {
      type: AgCheckbox.EVENT_CHANGED,
      selected: this.selected
    };
    this.dispatchEvent(event);
  };

  AgCheckbox.prototype.updateIcons = function () {
    utils_1._.setVisible(this.eChecked, this.selected === true);

    utils_1._.setVisible(this.eUnchecked, this.selected === false);

    utils_1._.setVisible(this.eIndeterminate, this.selected === undefined);
  };

  AgCheckbox.EVENT_CHANGED = 'change';
  AgCheckbox.TEMPLATE = '<span class="ag-checkbox" role="presentation">' + '  <span class="ag-checkbox-checked" role="presentation"></span>' + '  <span class="ag-checkbox-unchecked" role="presentation"></span>' + '  <span class="ag-checkbox-indeterminate" role="presentation"></span>' + '  <span class="ag-checkbox-label" role="presentation"></span>' + '</span>';

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], AgCheckbox.prototype, "gridOptionsWrapper", void 0);

  __decorate([componentAnnotations_1.QuerySelector('.ag-checkbox-checked'), __metadata("design:type", HTMLElement)], AgCheckbox.prototype, "eChecked", void 0);

  __decorate([componentAnnotations_1.QuerySelector('.ag-checkbox-unchecked'), __metadata("design:type", HTMLElement)], AgCheckbox.prototype, "eUnchecked", void 0);

  __decorate([componentAnnotations_1.QuerySelector('.ag-checkbox-indeterminate'), __metadata("design:type", HTMLElement)], AgCheckbox.prototype, "eIndeterminate", void 0);

  __decorate([componentAnnotations_1.QuerySelector('.ag-checkbox-label'), __metadata("design:type", HTMLElement)], AgCheckbox.prototype, "eLabel", void 0);

  __decorate([context_1.PreConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], AgCheckbox.prototype, "preConstruct", null);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], AgCheckbox.prototype, "postConstruct", null);

  __decorate([componentAnnotations_1.Listener('click'), __metadata("design:type", Function), __metadata("design:paramtypes", [MouseEvent]), __metadata("design:returntype", void 0)], AgCheckbox.prototype, "onClick", null);

  return AgCheckbox;
}(component_1.Component);

exports.AgCheckbox = AgCheckbox;

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var __param = this && this.__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var gridOptionsWrapper_1 = __webpack_require__(7);

var columnController_1 = __webpack_require__(17);

var eventService_1 = __webpack_require__(14);

var logger_1 = __webpack_require__(30);

var events_1 = __webpack_require__(18);

var context_1 = __webpack_require__(2);

var context_2 = __webpack_require__(2);

var context_3 = __webpack_require__(2);

var context_4 = __webpack_require__(2);

var AlignedGridsService =
/** @class */
function () {
  function AlignedGridsService() {
    // flag to mark if we are consuming. to avoid cyclic events (ie other grid firing back to master
    // while processing a master event) we mark this if consuming an event, and if we are, then
    // we don't fire back any events.
    this.consuming = false;
  }

  AlignedGridsService.prototype.setBeans = function (loggerFactory) {
    this.logger = loggerFactory.create('AlignedGridsService');
  };

  AlignedGridsService.prototype.registerGridComp = function (gridPanel) {
    this.gridPanel = gridPanel;
  };

  AlignedGridsService.prototype.init = function () {
    this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_MOVED, this.fireColumnEvent.bind(this));
    this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_VISIBLE, this.fireColumnEvent.bind(this));
    this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_PINNED, this.fireColumnEvent.bind(this));
    this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_GROUP_OPENED, this.fireColumnEvent.bind(this));
    this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_RESIZED, this.fireColumnEvent.bind(this));
    this.eventService.addEventListener(events_1.Events.EVENT_BODY_SCROLL, this.fireScrollEvent.bind(this));
  }; // common logic across all the fire methods


  AlignedGridsService.prototype.fireEvent = function (callback) {
    // if we are already consuming, then we are acting on an event from a master,
    // so we don't cause a cyclic firing of events
    if (this.consuming) {
      return;
    } // iterate through the aligned grids, and pass each aligned grid service to the callback


    var otherGrids = this.gridOptionsWrapper.getAlignedGrids();

    if (otherGrids) {
      otherGrids.forEach(function (otherGridOptions) {
        if (otherGridOptions.api) {
          var alignedGridService = otherGridOptions.api.__getAlignedGridService();

          callback(alignedGridService);
        }
      });
    }
  }; // common logic across all consume methods. very little common logic, however extracting
  // guarantees consistency across the methods.


  AlignedGridsService.prototype.onEvent = function (callback) {
    this.consuming = true;
    callback();
    this.consuming = false;
  };

  AlignedGridsService.prototype.fireColumnEvent = function (event) {
    this.fireEvent(function (alignedGridsService) {
      alignedGridsService.onColumnEvent(event);
    });
  };

  AlignedGridsService.prototype.fireScrollEvent = function (event) {
    if (event.direction !== 'horizontal') {
      return;
    }

    this.fireEvent(function (alignedGridsService) {
      alignedGridsService.onScrollEvent(event);
    });
  };

  AlignedGridsService.prototype.onScrollEvent = function (event) {
    var _this = this;

    this.onEvent(function () {
      _this.gridPanel.setHorizontalScrollPosition(event.left);
    });
  };

  AlignedGridsService.prototype.getMasterColumns = function (event) {
    var result = [];

    if (event.columns) {
      event.columns.forEach(function (column) {
        result.push(column);
      });
    } else if (event.column) {
      result.push(event.column);
    }

    return result;
  };

  AlignedGridsService.prototype.getColumnIds = function (event) {
    var result = [];

    if (event.columns) {
      event.columns.forEach(function (column) {
        result.push(column.getColId());
      });
    } else if (event.column) {
      result.push(event.column.getColId());
    }

    return result;
  };

  AlignedGridsService.prototype.onColumnEvent = function (event) {
    var _this = this;

    this.onEvent(function () {
      switch (event.type) {
        case events_1.Events.EVENT_COLUMN_MOVED:
        case events_1.Events.EVENT_COLUMN_VISIBLE:
        case events_1.Events.EVENT_COLUMN_PINNED:
        case events_1.Events.EVENT_COLUMN_RESIZED:
          var colEvent = event;

          _this.processColumnEvent(colEvent);

          break;

        case events_1.Events.EVENT_COLUMN_GROUP_OPENED:
          var groupOpenedEvent = event;

          _this.processGroupOpenedEvent(groupOpenedEvent);

          break;

        case events_1.Events.EVENT_COLUMN_PIVOT_CHANGED:
          // we cannot support pivoting with aligned grids as the columns will be out of sync as the
          // grids will have columns created based on the row data of the grid.
          console.warn('ag-Grid: pivoting is not supported with aligned grids. ' + 'You can only use one of these features at a time in a grid.');
          break;
      }
    });
  };

  AlignedGridsService.prototype.processGroupOpenedEvent = function (groupOpenedEvent) {
    // likewise for column group
    var masterColumnGroup = groupOpenedEvent.columnGroup;
    var otherColumnGroup;

    if (masterColumnGroup) {
      var groupId = masterColumnGroup.getGroupId();
      otherColumnGroup = this.columnController.getOriginalColumnGroup(groupId);
    }

    if (masterColumnGroup && !otherColumnGroup) {
      return;
    }

    this.logger.log('onColumnEvent-> processing ' + groupOpenedEvent + ' expanded = ' + masterColumnGroup.isExpanded());
    this.columnController.setColumnGroupOpened(otherColumnGroup, masterColumnGroup.isExpanded(), "alignedGridChanged");
  };

  AlignedGridsService.prototype.processColumnEvent = function (colEvent) {
    var _this = this; // the column in the event is from the master grid. need to
    // look up the equivalent from this (other) grid


    var masterColumn = colEvent.column;
    var otherColumn;

    if (masterColumn) {
      otherColumn = this.columnController.getPrimaryColumn(masterColumn.getColId());
    } // if event was with respect to a master column, that is not present in this
    // grid, then we ignore the event


    if (masterColumn && !otherColumn) {
      return;
    } // in time, all the methods below should use the column ids, it's a more generic way
    // of handling columns, and also allows for single or multi column events


    var columnIds = this.getColumnIds(colEvent);
    var masterColumns = this.getMasterColumns(colEvent);

    switch (colEvent.type) {
      case events_1.Events.EVENT_COLUMN_MOVED:
        var movedEvent = colEvent;
        this.logger.log("onColumnEvent-> processing " + colEvent.type + " toIndex = " + movedEvent.toIndex);
        this.columnController.moveColumns(columnIds, movedEvent.toIndex, "alignedGridChanged");
        break;

      case events_1.Events.EVENT_COLUMN_VISIBLE:
        var visibleEvent = colEvent;
        this.logger.log("onColumnEvent-> processing " + colEvent.type + " visible = " + visibleEvent.visible);
        this.columnController.setColumnsVisible(columnIds, visibleEvent.visible, "alignedGridChanged");
        break;

      case events_1.Events.EVENT_COLUMN_PINNED:
        var pinnedEvent = colEvent;
        this.logger.log("onColumnEvent-> processing " + colEvent.type + " pinned = " + pinnedEvent.pinned);
        this.columnController.setColumnsPinned(columnIds, pinnedEvent.pinned, "alignedGridChanged");
        break;

      case events_1.Events.EVENT_COLUMN_RESIZED:
        var resizedEvent_1 = colEvent;
        masterColumns.forEach(function (column) {
          _this.logger.log("onColumnEvent-> processing " + colEvent.type + " actualWidth = " + column.getActualWidth());

          _this.columnController.setColumnWidth(column.getColId(), column.getActualWidth(), false, resizedEvent_1.finished, "alignedGridChanged");
        });
        break;
    }

    var isVerticalScrollShowing = this.gridPanel.isVerticalScrollShowing();
    var alignedGrids = this.gridOptionsWrapper.getAlignedGrids();
    alignedGrids.forEach(function (grid) {
      grid.api.setAlwaysShowVerticalScroll(isVerticalScrollShowing);
    });
  };

  __decorate([context_3.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], AlignedGridsService.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_3.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], AlignedGridsService.prototype, "columnController", void 0);

  __decorate([context_3.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], AlignedGridsService.prototype, "eventService", void 0);

  __decorate([__param(0, context_2.Qualifier('loggerFactory')), __metadata("design:type", Function), __metadata("design:paramtypes", [logger_1.LoggerFactory]), __metadata("design:returntype", void 0)], AlignedGridsService.prototype, "setBeans", null);

  __decorate([context_4.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], AlignedGridsService.prototype, "init", null);

  AlignedGridsService = __decorate([context_1.Bean('alignedGridsService')], AlignedGridsService);
  return AlignedGridsService;
}();

exports.AlignedGridsService = AlignedGridsService;

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var utils_1 = __webpack_require__(6);

var rowNode_1 = __webpack_require__(39);

var beanStub_1 = __webpack_require__(32);

var RowNodeBlock =
/** @class */
function (_super) {
  __extends(RowNodeBlock, _super);

  function RowNodeBlock(blockNumber, rowNodeCacheParams) {
    var _this = _super.call(this) || this;

    _this.version = 0;
    _this.state = RowNodeBlock.STATE_DIRTY;
    _this.rowNodeCacheParams = rowNodeCacheParams;
    _this.blockNumber = blockNumber; // we don't need to calculate these now, as the inputs don't change,
    // however it makes the code easier to read if we work them out up front

    _this.startRow = blockNumber * rowNodeCacheParams.blockSize;
    _this.endRow = _this.startRow + rowNodeCacheParams.blockSize;
    return _this;
  }

  RowNodeBlock.prototype.isAnyNodeOpen = function (rowCount) {
    var result = false;
    this.forEachNodeCallback(function (rowNode) {
      if (rowNode.expanded) {
        result = true;
      }
    }, rowCount);
    return result;
  };

  RowNodeBlock.prototype.forEachNodeCallback = function (callback, rowCount) {
    for (var rowIndex = this.startRow; rowIndex < this.endRow; rowIndex++) {
      // we check against rowCount as this page may be the last one, and if it is, then
      // the last rows are not part of the set
      if (rowIndex < rowCount) {
        var rowNode = this.getRowUsingLocalIndex(rowIndex);
        callback(rowNode, rowIndex);
      }
    }
  };

  RowNodeBlock.prototype.forEachNode = function (callback, sequence, rowCount, deep) {
    this.forEachNodeCallback(function (rowNode) {
      callback(rowNode, sequence.next()); // this will only every happen for server side row model, as infinite
      // row model doesn't have groups

      if (deep && rowNode.childrenCache) {
        rowNode.childrenCache.forEachNodeDeep(callback, sequence);
      }
    }, rowCount);
  };

  RowNodeBlock.prototype.forEachNodeDeep = function (callback, sequence, rowCount) {
    this.forEachNode(callback, sequence, rowCount, true);
  };

  RowNodeBlock.prototype.forEachNodeShallow = function (callback, sequence, rowCount) {
    this.forEachNode(callback, sequence, rowCount, false);
  };

  RowNodeBlock.prototype.getVersion = function () {
    return this.version;
  };

  RowNodeBlock.prototype.getLastAccessed = function () {
    return this.lastAccessed;
  };

  RowNodeBlock.prototype.getRowUsingLocalIndex = function (rowIndex, dontTouchLastAccessed) {
    if (dontTouchLastAccessed === void 0) {
      dontTouchLastAccessed = false;
    }

    if (!dontTouchLastAccessed) {
      this.lastAccessed = this.rowNodeCacheParams.lastAccessedSequence.next();
    }

    var localIndex = rowIndex - this.startRow;
    return this.rowNodes[localIndex];
  };

  RowNodeBlock.prototype.init = function (beans) {
    this.beans = beans;
    this.createRowNodes();
  };

  RowNodeBlock.prototype.getStartRow = function () {
    return this.startRow;
  };

  RowNodeBlock.prototype.getEndRow = function () {
    return this.endRow;
  };

  RowNodeBlock.prototype.getBlockNumber = function () {
    return this.blockNumber;
  };

  RowNodeBlock.prototype.setDirty = function () {
    // in case any current loads in progress, this will have their results ignored
    this.version++;
    this.state = RowNodeBlock.STATE_DIRTY;
  };

  RowNodeBlock.prototype.setDirtyAndPurge = function () {
    this.setDirty();
    this.rowNodes.forEach(function (rowNode) {
      rowNode.setData(null);
    });
  };

  RowNodeBlock.prototype.getState = function () {
    return this.state;
  };

  RowNodeBlock.prototype.setRowNode = function (rowIndex, rowNode) {
    var localIndex = rowIndex - this.startRow;
    this.rowNodes[localIndex] = rowNode;
  };

  RowNodeBlock.prototype.setBlankRowNode = function (rowIndex) {
    var localIndex = rowIndex - this.startRow;
    var newRowNode = this.createBlankRowNode(rowIndex);
    this.rowNodes[localIndex] = newRowNode;
    return newRowNode;
  };

  RowNodeBlock.prototype.setNewData = function (rowIndex, dataItem) {
    var newRowNode = this.setBlankRowNode(rowIndex);
    this.setDataAndId(newRowNode, dataItem, this.startRow + rowIndex);
    return newRowNode;
  };

  RowNodeBlock.prototype.createBlankRowNode = function (rowIndex) {
    var rowNode = new rowNode_1.RowNode();
    this.beans.context.wireBean(rowNode);
    rowNode.setRowHeight(this.rowNodeCacheParams.rowHeight);
    return rowNode;
  }; // creates empty row nodes, data is missing as not loaded yet


  RowNodeBlock.prototype.createRowNodes = function () {
    this.rowNodes = [];

    for (var i = 0; i < this.rowNodeCacheParams.blockSize; i++) {
      var rowIndex = this.startRow + i;
      var rowNode = this.createBlankRowNode(rowIndex);
      this.rowNodes.push(rowNode);
    }
  };

  RowNodeBlock.prototype.load = function () {
    this.state = RowNodeBlock.STATE_LOADING;
    this.loadFromDatasource();
  };

  RowNodeBlock.prototype.pageLoadFailed = function () {
    this.state = RowNodeBlock.STATE_FAILED;
    var event = {
      type: RowNodeBlock.EVENT_LOAD_COMPLETE,
      success: false,
      page: this,
      lastRow: null
    };
    this.dispatchEvent(event);
  };

  RowNodeBlock.prototype.populateWithRowData = function (rows) {
    var _this = this;

    var rowNodesToRefresh = [];
    this.rowNodes.forEach(function (rowNode, index) {
      var data = rows[index];

      if (rowNode.stub) {
        rowNodesToRefresh.push(rowNode);
      }

      _this.setDataAndId(rowNode, data, _this.startRow + index);
    });

    if (rowNodesToRefresh.length > 0) {
      this.beans.rowRenderer.redrawRows(rowNodesToRefresh);
    }
  };

  RowNodeBlock.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this.rowNodes.forEach(function (rowNode) {
      if (rowNode.childrenCache) {
        rowNode.childrenCache.destroy();
        rowNode.childrenCache = null;
      } // this is needed, so row render knows to fade out the row, otherwise it
      // sees row top is present, and thinks the row should be shown. maybe
      // rowNode should have a flag on whether it is visible???


      rowNode.clearRowTop();
    });
  };

  RowNodeBlock.prototype.pageLoaded = function (version, rows, lastRow) {
    // we need to check the version, in case there was an old request
    // from the server that was sent before we refreshed the cache,
    // if the load was done as a result of a cache refresh
    if (version === this.version) {
      this.state = RowNodeBlock.STATE_LOADED;
      this.populateWithRowData(rows);
    }

    lastRow = utils_1._.cleanNumber(lastRow); // check here if lastRow should be set

    var event = {
      type: RowNodeBlock.EVENT_LOAD_COMPLETE,
      success: true,
      page: this,
      lastRow: lastRow
    };
    this.dispatchEvent(event);
  };

  RowNodeBlock.EVENT_LOAD_COMPLETE = 'loadComplete';
  RowNodeBlock.STATE_DIRTY = 'dirty';
  RowNodeBlock.STATE_LOADING = 'loading';
  RowNodeBlock.STATE_LOADED = 'loaded';
  RowNodeBlock.STATE_FAILED = 'failed';
  return RowNodeBlock;
}(beanStub_1.BeanStub);

exports.RowNodeBlock = RowNodeBlock;

/***/ }),
/* 116 */
/***/ (function(module, exports) {

module.exports = function (originalModule) {
  if (!originalModule.webpackPolyfill) {
    var module = Object.create(originalModule); // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function get() {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function get() {
        return module.i;
      }
    });
    Object.defineProperty(module, "exports", {
      enumerable: true
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(62);
/* Built-in method references that are verified to be native. */


var nativeCreate = getNative(Object, 'create');
module.exports = nativeCreate;

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

var listCacheClear = __webpack_require__(343),
    listCacheDelete = __webpack_require__(344),
    listCacheGet = __webpack_require__(345),
    listCacheHas = __webpack_require__(346),
    listCacheSet = __webpack_require__(347);
/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */


function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
} // Add methods to `ListCache`.


ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
module.exports = ListCache;

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

var eq = __webpack_require__(169);
/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */


function assocIndexOf(array, key) {
  var length = array.length;

  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }

  return -1;
}

module.exports = assocIndexOf;

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

var isKeyable = __webpack_require__(349);
/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */


function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}

module.exports = getMapData;

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

var isSymbol = __webpack_require__(167);
/** Used as references for various `Number` constants. */


var INFINITY = 1 / 0;
/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */

function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }

  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}

module.exports = toKey;

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

var defineProperty = __webpack_require__(363);
/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */


function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__(237),
    baseAssignValue = __webpack_require__(122);
/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */


function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});
  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];
    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }

    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }

  return object;
}

module.exports = copyObject;

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = printValue;
var toString = Object.prototype.toString;
var errorToString = Error.prototype.toString;
var regExpToString = RegExp.prototype.toString;
var symbolToString = typeof Symbol !== 'undefined' ? Symbol.prototype.toString : function () {
  return '';
};
var SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;

function printNumber(val) {
  if (val != +val) return 'NaN';
  var isNegativeZero = val === 0 && 1 / val < 0;
  return isNegativeZero ? '-0' : '' + val;
}

function printSimpleValue(val, quoteStrings) {
  if (quoteStrings === void 0) {
    quoteStrings = false;
  }

  if (val == null || val === true || val === false) return '' + val;
  var typeOf = typeof val;
  if (typeOf === 'number') return printNumber(val);
  if (typeOf === 'string') return quoteStrings ? "\"" + val + "\"" : val;
  if (typeOf === 'function') return '[Function ' + (val.name || 'anonymous') + ']';
  if (typeOf === 'symbol') return symbolToString.call(val).replace(SYMBOL_REGEXP, 'Symbol($1)');
  var tag = toString.call(val).slice(8, -1);
  if (tag === 'Date') return isNaN(val.getTime()) ? '' + val : val.toISOString(val);
  if (tag === 'Error' || val instanceof Error) return '[' + errorToString.call(val) + ']';
  if (tag === 'RegExp') return regExpToString.call(val);
  return null;
}

function printValue(value, quoteStrings) {
  var result = printSimpleValue(value, quoteStrings);
  if (result !== null) return result;
  return JSON.stringify(value, function (key, value) {
    var result = printSimpleValue(this[key], quoteStrings);
    if (result !== null) return result;
    return value;
  }, 2);
}

module.exports = exports["default"];

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Based on Kendo UI Core expression code <https://github.com/telerik/kendo-ui-core#license-information>
 */


function Cache(maxSize) {
  this._maxSize = maxSize;
  this.clear();
}

Cache.prototype.clear = function () {
  this._size = 0;
  this._values = {};
};

Cache.prototype.get = function (key) {
  return this._values[key];
};

Cache.prototype.set = function (key, value) {
  this._size >= this._maxSize && this.clear();

  if (!this._values.hasOwnProperty(key)) {
    this._size++;
  }

  return this._values[key] = value;
};

var SPLIT_REGEX = /[^.^\]^[]+|(?=\[\]|\.\.)/g,
    DIGIT_REGEX = /^\d+$/,
    LEAD_DIGIT_REGEX = /^\d/,
    SPEC_CHAR_REGEX = /[~`!#$%\^&*+=\-\[\]\\';,/{}|\\":<>\?]/g,
    CLEAN_QUOTES_REGEX = /^\s*(['"]?)(.*?)(\1)\s*$/,
    MAX_CACHE_SIZE = 512;
var contentSecurityPolicy = false,
    pathCache = new Cache(MAX_CACHE_SIZE),
    setCache = new Cache(MAX_CACHE_SIZE),
    getCache = new Cache(MAX_CACHE_SIZE);

try {
  new Function('');
} catch (error) {
  contentSecurityPolicy = true;
}

module.exports = {
  Cache: Cache,
  expr: expr,
  split: split,
  normalizePath: normalizePath,
  setter: contentSecurityPolicy ? function (path) {
    var parts = normalizePath(path);
    return function (data, value) {
      return setterFallback(parts, data, value);
    };
  } : function (path) {
    return setCache.get(path) || setCache.set(path, new Function('data, value', expr(path, 'data') + ' = value'));
  },
  getter: contentSecurityPolicy ? function (path, safe) {
    var parts = normalizePath(path);
    return function (data) {
      return getterFallback(parts, safe, data);
    };
  } : function (path, safe) {
    var key = path + '_' + safe;
    return getCache.get(key) || getCache.set(key, new Function('data', 'return ' + expr(path, safe, 'data')));
  },
  join: function join(segments) {
    return segments.reduce(function (path, part) {
      return path + (isQuoted(part) || DIGIT_REGEX.test(part) ? '[' + part + ']' : (path ? '.' : '') + part);
    }, '');
  },
  forEach: function forEach(path, cb, thisArg) {
    _forEach(split(path), cb, thisArg);
  }
};

function setterFallback(parts, data, value) {
  var index = 0,
      len = parts.length;

  while (index < len - 1) {
    data = data[parts[index++]];
  }

  data[parts[index]] = value;
}

function getterFallback(parts, safe, data) {
  var index = 0,
      len = parts.length;

  while (index < len) {
    if (data != null || !safe) {
      data = data[parts[index++]];
    } else {
      return;
    }
  }

  return data;
}

function normalizePath(path) {
  return pathCache.get(path) || pathCache.set(path, split(path).map(function (part) {
    return part.replace(CLEAN_QUOTES_REGEX, '$2');
  }));
}

function split(path) {
  return path.match(SPLIT_REGEX);
}

function expr(expression, safe, param) {
  expression = expression || '';

  if (typeof safe === 'string') {
    param = safe;
    safe = false;
  }

  param = param || 'data';
  if (expression && expression.charAt(0) !== '[') expression = '.' + expression;
  return safe ? makeSafe(expression, param) : param + expression;
}

function _forEach(parts, iter, thisArg) {
  var len = parts.length,
      part,
      idx,
      isArray,
      isBracket;

  for (idx = 0; idx < len; idx++) {
    part = parts[idx];

    if (part) {
      if (shouldBeQuoted(part)) {
        part = '"' + part + '"';
      }

      isBracket = isQuoted(part);
      isArray = !isBracket && /^\d+$/.test(part);
      iter.call(thisArg, part, isBracket, isArray, idx, parts);
    }
  }
}

function isQuoted(str) {
  return typeof str === 'string' && str && ["'", '"'].indexOf(str.charAt(0)) !== -1;
}

function makeSafe(path, param) {
  var result = param,
      parts = split(path),
      isLast;

  _forEach(parts, function (part, isBracket, isArray, idx, parts) {
    isLast = idx === parts.length - 1;
    part = isBracket || isArray ? '[' + part + ']' : '.' + part;
    result += part + (!isLast ? ' || {})' : ')');
  });

  return new Array(parts.length + 1).join('(') + result;
}

function hasLeadingNumber(part) {
  return part.match(LEAD_DIGIT_REGEX) && !part.match(DIGIT_REGEX);
}

function hasSpecialChars(part) {
  return SPEC_CHAR_REGEX.test(part);
}

function shouldBeQuoted(part) {
  return !isQuoted(part) && (hasLeadingNumber(part) || hasSpecialChars(part));
}

/***/ }),
/* 126 */,
/* 127 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
/* harmony default export */ __webpack_exports__["a"] = (freeGlobal);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(51)))

/***/ }),
/* 128 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(26);
/* harmony import */ var _stubFalse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(269);


/** Detect free variable `exports`. */

var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */

var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */

var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */

var Buffer = moduleExports ? _root_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].Buffer : undefined;
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */

var isBuffer = nativeIsBuffer || _stubFalse_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"];
/* harmony default export */ __webpack_exports__["a"] = (isBuffer);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(116)(module)))

/***/ }),
/* 129 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return registerTarget; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return registerSource; });
function registerTarget(type, target, manager) {
  var registry = manager.getRegistry();
  var targetId = registry.addTarget(type, target);
  return [targetId, function () {
    return registry.removeTarget(targetId);
  }];
}
function registerSource(type, source, manager) {
  var registry = manager.getRegistry();
  var sourceId = registry.addSource(type, source);
  return [sourceId, function () {
    return registry.removeSource(sourceId);
  }];
}

/***/ }),
/* 130 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}
// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}
// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _slicedToArray; });



function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

/***/ }),
/* 131 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/react-dnd/dist/esm/hooks/internal/useIsomorphicLayoutEffect.js
var useIsomorphicLayoutEffect = __webpack_require__(33);

// EXTERNAL MODULE: ./node_modules/@react-dnd/shallowequal/dist/shallowequal.esm.js
var shallowequal_esm = __webpack_require__(65);

// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(0);

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/internal/useCollector.js
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function _iterableToArrayLimit(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}




/**
 *
 * @param monitor The monitor to collect state from
 * @param collect The collecting function
 * @param onUpdate A method to invoke when updates occur
 */

function useCollector(monitor, collect, onUpdate) {
  var _useState = Object(react["useState"])(function () {
    return collect(monitor);
  }),
      _useState2 = _slicedToArray(_useState, 2),
      collected = _useState2[0],
      setCollected = _useState2[1];

  var updateCollected = Object(react["useCallback"])(function () {
    var nextValue = collect(monitor);

    if (!Object(shallowequal_esm["a" /* shallowEqual */])(collected, nextValue)) {
      setCollected(nextValue);

      if (onUpdate) {
        onUpdate();
      }
    }
  }, [collected, monitor, onUpdate]); // update the collected properties after the first render
  // and the components are attached to dnd-core

  Object(useIsomorphicLayoutEffect["a" /* useIsomorphicLayoutEffect */])(updateCollected, []);
  return [collected, updateCollected];
}
// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/internal/useMonitorOutput.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return useMonitorOutput; });
function useMonitorOutput_slicedToArray(arr, i) {
  return useMonitorOutput_arrayWithHoles(arr) || useMonitorOutput_iterableToArrayLimit(arr, i) || useMonitorOutput_nonIterableRest();
}

function useMonitorOutput_nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function useMonitorOutput_iterableToArrayLimit(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function useMonitorOutput_arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}



function useMonitorOutput(monitor, collect, onCollect) {
  var _useCollector = useCollector(monitor, collect, onCollect),
      _useCollector2 = useMonitorOutput_slicedToArray(_useCollector, 2),
      collected = _useCollector2[0],
      updateCollected = _useCollector2[1];

  Object(useIsomorphicLayoutEffect["a" /* useIsomorphicLayoutEffect */])(function subscribeToMonitorStateChange() {
    var handlerId = monitor.getHandlerId();

    if (handlerId == null) {
      return undefined;
    }

    return monitor.subscribeToStateChange(updateCollected, {
      handlerIds: [handlerId]
    });
  }, [monitor, updateCollected]);
  return collected;
}

/***/ }),
/* 132 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(0);

// EXTERNAL MODULE: ./node_modules/@react-dnd/invariant/dist/invariant.esm.js
var invariant_esm = __webpack_require__(8);

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/utils/cloneWithRef.js



function setRef(ref, node) {
  if (typeof ref === 'function') {
    ref(node);
  } else {
    ref.current = node;
  }
}

function cloneWithRef(element, newRef) {
  var previousRef = element.ref;
  Object(invariant_esm["a" /* invariant */])(typeof previousRef !== 'string', 'Cannot connect React DnD to an element with an existing string ref. ' + 'Please convert it to use a callback ref instead, or wrap it into a <span> or <div>. ' + 'Read more: https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute');

  if (!previousRef) {
    // When there is no ref on the element, use the new ref directly
    return Object(react["cloneElement"])(element, {
      ref: newRef
    });
  } else {
    return Object(react["cloneElement"])(element, {
      ref: function ref(node) {
        setRef(previousRef, node);
        setRef(newRef, node);
      }
    });
  }
}
// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/common/wrapConnectorHooks.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return wrapConnectorHooks; });



function throwIfCompositeComponentElement(element) {
  // Custom components can no longer be wrapped directly in React DnD 2.0
  // so that we don't need to depend on findDOMNode() from react-dom.
  if (typeof element.type === 'string') {
    return;
  }

  var displayName = element.type.displayName || element.type.name || 'the component';
  throw new Error('Only native element nodes can now be passed to React DnD connectors.' + "You can either wrap ".concat(displayName, " into a <div>, or turn it into a ") + 'drag source or a drop target itself.');
}

function wrapHookToRecognizeElement(hook) {
  return function () {
    var elementOrNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null; // When passed a node, call the hook straight away.

    if (!Object(react["isValidElement"])(elementOrNode)) {
      var node = elementOrNode;
      hook(node, options); // return the node so it can be chained (e.g. when within callback refs
      // <div ref={node => connectDragSource(connectDropTarget(node))}/>

      return node;
    } // If passed a ReactElement, clone it and attach this function as a ref.
    // This helps us achieve a neat API where user doesn't even know that refs
    // are being used under the hood.


    var element = elementOrNode;
    throwIfCompositeComponentElement(element); // When no options are passed, use the hook directly

    var ref = options ? function (node) {
      return hook(node, options);
    } : hook;
    return cloneWithRef(element, ref);
  };
}

function wrapConnectorHooks(hooks) {
  var wrappedHooks = {};
  Object.keys(hooks).forEach(function (key) {
    var hook = hooks[key]; // ref objects should be passed straight through without wrapping

    if (key.endsWith('Ref')) {
      wrappedHooks[key] = hooks[key];
    } else {
      var wrappedHook = wrapHookToRecognizeElement(hook);

      wrappedHooks[key] = function () {
        return wrappedHook;
      };
    }
  });
  return wrappedHooks;
}

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isArray = Array.isArray;
var keyList = Object.keys;
var hasProp = Object.prototype.hasOwnProperty;
var hasElementType = typeof Element !== 'undefined';

function equal(a, b) {
  // fast-deep-equal index.js 2.0.1
  if (a === b) return true;

  if (a && b && typeof a == 'object' && typeof b == 'object') {
    var arrA = isArray(a),
        arrB = isArray(b),
        i,
        length,
        key;

    if (arrA && arrB) {
      length = a.length;
      if (length != b.length) return false;

      for (i = length; i-- !== 0;) {
        if (!equal(a[i], b[i])) return false;
      }

      return true;
    }

    if (arrA != arrB) return false;
    var dateA = a instanceof Date,
        dateB = b instanceof Date;
    if (dateA != dateB) return false;
    if (dateA && dateB) return a.getTime() == b.getTime();
    var regexpA = a instanceof RegExp,
        regexpB = b instanceof RegExp;
    if (regexpA != regexpB) return false;
    if (regexpA && regexpB) return a.toString() == b.toString();
    var keys = keyList(a);
    length = keys.length;
    if (length !== keyList(b).length) return false;

    for (i = length; i-- !== 0;) {
      if (!hasProp.call(b, keys[i])) return false;
    } // end fast-deep-equal
    // start react-fast-compare
    // custom handling for DOM elements


    if (hasElementType && a instanceof Element && b instanceof Element) return a === b; // custom handling for React

    for (i = length; i-- !== 0;) {
      key = keys[i];

      if (key === '_owner' && a.$$typeof) {
        // React-specific: avoid traversing React elements' _owner.
        //  _owner contains circular references
        // and is not needed when comparing the actual elements (and not their owners)
        // .$$typeof and ._store on just reasonable markers of a react element
        continue;
      } else {
        // all other properties should be traversed as usual
        if (!equal(a[key], b[key])) return false;
      }
    } // end react-fast-compare
    // fast-deep-equal index.js 2.0.1


    return true;
  }

  return a !== a && b !== b;
} // end fast-deep-equal


module.exports = function exportedEqual(a, b) {
  try {
    return equal(a, b);
  } catch (error) {
    if (error.message && error.message.match(/stack|recursion/i) || error.number === -2146828260) {
      // warn on circular references, don't crash
      // browsers give this different errors name and messages:
      // chrome/safari: "RangeError", "Maximum call stack size exceeded"
      // firefox: "InternalError", too much recursion"
      // edge: "Error", "Out of stack space"
      console.warn('Warning: react-fast-compare does not handle circular references.', error.name, error.message);
      return false;
    } // some other error. we should definitely know about these


    throw error;
  }
};

/***/ }),
/* 134 */,
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/

/* global define */
(function () {
  'use strict';

  var hasOwn = {}.hasOwnProperty;

  function classNames() {
    var classes = [];

    for (var i = 0; i < arguments.length; i++) {
      var arg = arguments[i];
      if (!arg) continue;
      var argType = typeof arg;

      if (argType === 'string' || argType === 'number') {
        classes.push(arg);
      } else if (Array.isArray(arg) && arg.length) {
        var inner = classNames.apply(null, arg);

        if (inner) {
          classes.push(inner);
        }
      } else if (argType === 'object') {
        for (var key in arg) {
          if (hasOwn.call(arg, key) && arg[key]) {
            classes.push(key);
          }
        }
      }
    }

    return classes.join(' ');
  }

  if ( true && module.exports) {
    classNames.default = classNames;
    module.exports = classNames;
  } else if (true) {
    // register as 'classnames', consistent with npm package name
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return classNames;
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})();

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.isValidDelay = isValidDelay;
exports.objectValues = objectValues;
exports.falseOrElement = exports.falseOrDelay = void 0;

var _react = __webpack_require__(0);

function isValidDelay(val) {
  return typeof val === 'number' && !isNaN(val) && val > 0;
}

function objectValues(obj) {
  return Object.keys(obj).map(function (key) {
    return obj[key];
  });
}

function withRequired(fn) {
  fn.isRequired = function (props, propName, componentName) {
    var prop = props[propName];

    if (typeof prop === 'undefined') {
      return new Error("The prop " + propName + " is marked as required in \n      " + componentName + ", but its value is undefined.");
    }

    fn(props, propName, componentName);
  };

  return fn;
}

var falseOrDelay = withRequired(function (props, propName, componentName) {
  var prop = props[propName];

  if (prop !== false && !isValidDelay(prop)) {
    return new Error(componentName + " expect " + propName + " \n      to be a valid Number > 0 or equal to false. " + prop + " given.");
  }

  return null;
});
exports.falseOrDelay = falseOrDelay;
var falseOrElement = withRequired(function (props, propName, componentName) {
  var prop = props[propName];

  if (prop !== false && !(0, _react.isValidElement)(prop)) {
    return new Error(componentName + " expect " + propName + " \n      to be a valid react element or equal to false. " + prop + " given.");
  }

  return null;
});
exports.falseOrElement = falseOrElement;

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});

var events_1 = __webpack_require__(18);

var propertyKeys_1 = __webpack_require__(192);

var gridOptionsWrapper_1 = __webpack_require__(7);

var utils_1 = __webpack_require__(6);

var ComponentUtil =
/** @class */
function () {
  function ComponentUtil() {}

  ComponentUtil.getEventCallbacks = function () {
    if (!ComponentUtil.EVENT_CALLBACKS) {
      ComponentUtil.EVENT_CALLBACKS = [];
      ComponentUtil.EVENT_CALLBACKS_NO_PREFIX = [];
      ComponentUtil.EVENTS.forEach(function (eventName) {
        ComponentUtil.EVENT_CALLBACKS.push(ComponentUtil.getCallbackForEvent(eventName));
        ComponentUtil.EVENT_CALLBACKS_NO_PREFIX.push(eventName);
      });
    }

    return ComponentUtil.EVENT_CALLBACKS;
  };

  ComponentUtil.copyAttributesToGridOptions = function (gridOptions, component, skipEventDeprecationCheck) {
    if (skipEventDeprecationCheck === void 0) {
      skipEventDeprecationCheck = false;
    }

    checkForDeprecated(component); // create empty grid options if none were passed

    if (typeof gridOptions !== 'object') {
      gridOptions = {};
    } // to allow array style lookup in TypeScript, take type away from 'this' and 'gridOptions'


    var pGridOptions = gridOptions; // add in all the simple properties

    ComponentUtil.ARRAY_PROPERTIES.concat(ComponentUtil.STRING_PROPERTIES).concat(ComponentUtil.OBJECT_PROPERTIES).concat(ComponentUtil.FUNCTION_PROPERTIES).forEach(function (key) {
      if (typeof component[key] !== 'undefined') {
        pGridOptions[key] = component[key];
      }
    });
    ComponentUtil.BOOLEAN_PROPERTIES.forEach(function (key) {
      if (typeof component[key] !== 'undefined') {
        pGridOptions[key] = ComponentUtil.toBoolean(component[key]);
      }
    });
    ComponentUtil.NUMBER_PROPERTIES.forEach(function (key) {
      if (typeof component[key] !== 'undefined') {
        pGridOptions[key] = ComponentUtil.toNumber(component[key]);
      }
    });
    ComponentUtil.getEventCallbacks().forEach(function (funcName) {
      if (typeof component[funcName] !== 'undefined') {
        pGridOptions[funcName] = component[funcName];
      }
    }); // purely for event deprecation checks (for frameworks - wouldn't apply for non-fw versions)

    if (!skipEventDeprecationCheck) {
      ComponentUtil.EVENT_CALLBACKS_NO_PREFIX.forEach(function (funcName) {
        // react uses onXXX...not sure why this is diff to the other frameworks
        var onMethodName = ComponentUtil.getCallbackForEvent(funcName);

        if (typeof component[funcName] !== 'undefined' || typeof component[onMethodName] !== 'undefined') {
          gridOptionsWrapper_1.GridOptionsWrapper.checkEventDeprecation(funcName);
        }
      });
    }

    return gridOptions;
  };

  ComponentUtil.getCallbackForEvent = function (eventName) {
    if (!eventName || eventName.length < 2) {
      return eventName;
    } else {
      return 'on' + eventName[0].toUpperCase() + eventName.substr(1);
    }
  };

  ComponentUtil.processOnChange = function (changes, gridOptions, api, columnApi) {
    if (!changes) {
      return;
    }

    checkForDeprecated(changes); // to allow array style lookup in TypeScript, take type away from 'this' and 'gridOptions'

    var pGridOptions = gridOptions; // check if any change for the simple types, and if so, then just copy in the new value

    ComponentUtil.ARRAY_PROPERTIES.concat(ComponentUtil.OBJECT_PROPERTIES).concat(ComponentUtil.STRING_PROPERTIES).forEach(function (key) {
      if (changes[key]) {
        pGridOptions[key] = changes[key].currentValue;
      }
    });
    ComponentUtil.BOOLEAN_PROPERTIES.forEach(function (key) {
      if (changes[key]) {
        pGridOptions[key] = ComponentUtil.toBoolean(changes[key].currentValue);
      }
    });
    ComponentUtil.NUMBER_PROPERTIES.forEach(function (key) {
      if (changes[key]) {
        pGridOptions[key] = ComponentUtil.toNumber(changes[key].currentValue);
      }
    });
    ComponentUtil.getEventCallbacks().forEach(function (funcName) {
      if (changes[funcName]) {
        pGridOptions[funcName] = changes[funcName].currentValue;
      }
    });

    if (changes.enableCellTextSelection) {
      api.setEnableCellTextSelection(ComponentUtil.toBoolean(changes.enableCellTextSelection.currentValue));
    }

    if (changes.showToolPanel) {
      api.showToolPanel(ComponentUtil.toBoolean(changes.showToolPanel.currentValue));
    }

    if (changes.quickFilterText) {
      api.setQuickFilter(changes.quickFilterText.currentValue);
    }

    if (changes.rowData) {
      api.setRowData(changes.rowData.currentValue);
    }

    if (changes.pinnedTopRowData) {
      api.setPinnedTopRowData(changes.pinnedTopRowData.currentValue);
    }

    if (changes.pinnedBottomRowData) {
      api.setPinnedBottomRowData(changes.pinnedBottomRowData.currentValue);
    }

    if (changes.columnDefs) {
      api.setColumnDefs(changes.columnDefs.currentValue, "gridOptionsChanged");
    }

    if (changes.datasource) {
      api.setDatasource(changes.datasource.currentValue);
    }

    if (changes.headerHeight) {
      api.setHeaderHeight(ComponentUtil.toNumber(changes.headerHeight.currentValue));
    }

    if (changes.paginationPageSize) {
      api.paginationSetPageSize(ComponentUtil.toNumber(changes.paginationPageSize.currentValue));
    }

    if (changes.pivotMode) {
      columnApi.setPivotMode(ComponentUtil.toBoolean(changes.pivotMode.currentValue));
    }

    if (changes.groupRemoveSingleChildren) {
      api.setGroupRemoveSingleChildren(ComponentUtil.toBoolean(changes.groupRemoveSingleChildren.currentValue));
    }

    if (changes.suppressRowDrag) {
      api.setSuppressRowDrag(ComponentUtil.toBoolean(changes.suppressRowDrag.currentValue));
    }

    if (changes.gridAutoHeight) {
      api.setGridAutoHeight(ComponentUtil.toBoolean(changes.gridAutoHeight.currentValue));
    }

    if (changes.suppressClipboardPaste) {
      api.setSuppressClipboardPaste(ComponentUtil.toBoolean(changes.suppressClipboardPaste.currentValue));
    }

    if (changes.sideBar) {
      api.setSideBar(changes.sideBar.currentValue);
    }

    if (changes.datasource) {
      api.setDatasource(changes.datasource.currentValue);
    } // copy changes into an event for dispatch


    var event = {
      type: events_1.Events.EVENT_COMPONENT_STATE_CHANGED,
      api: gridOptions.api,
      columnApi: gridOptions.columnApi
    };

    utils_1._.iterateObject(changes, function (key, value) {
      event[key] = value;
    });

    api.dispatchEvent(event);
  };

  ComponentUtil.toBoolean = function (value) {
    if (typeof value === 'boolean') {
      return value;
    } else if (typeof value === 'string') {
      // for boolean, compare to empty String to allow attributes appearing with
      // not value to be treated as 'true'
      return value.toUpperCase() === 'TRUE' || value == '';
    } else {
      return false;
    }
  };

  ComponentUtil.toNumber = function (value) {
    if (typeof value === 'number') {
      return value;
    } else if (typeof value === 'string') {
      return Number(value);
    } else {
      return undefined;
    }
  }; // all the events are populated in here AFTER this class (at the bottom of the file).


  ComponentUtil.EVENTS = [];
  ComponentUtil.STRING_PROPERTIES = propertyKeys_1.PropertyKeys.STRING_PROPERTIES;
  ComponentUtil.OBJECT_PROPERTIES = propertyKeys_1.PropertyKeys.OBJECT_PROPERTIES;
  ComponentUtil.ARRAY_PROPERTIES = propertyKeys_1.PropertyKeys.ARRAY_PROPERTIES;
  ComponentUtil.NUMBER_PROPERTIES = propertyKeys_1.PropertyKeys.NUMBER_PROPERTIES;
  ComponentUtil.BOOLEAN_PROPERTIES = propertyKeys_1.PropertyKeys.BOOLEAN_PROPERTIES;
  ComponentUtil.FUNCTION_PROPERTIES = propertyKeys_1.PropertyKeys.FUNCTION_PROPERTIES;
  ComponentUtil.ALL_PROPERTIES = propertyKeys_1.PropertyKeys.ALL_PROPERTIES;
  return ComponentUtil;
}();

exports.ComponentUtil = ComponentUtil;

utils_1._.iterateObject(events_1.Events, function (key, value) {
  ComponentUtil.EVENTS.push(value);
});

function checkForDeprecated(changes) {
  if (changes.rowDeselected || changes.onRowDeselected) {
    console.warn('ag-grid: as of v3.4 rowDeselected no longer exists. Please check the docs.');
  }
}

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var gridSerializer_1 = __webpack_require__(103);

var downloader_1 = __webpack_require__(158);

var columnController_1 = __webpack_require__(17);

var valueService_1 = __webpack_require__(38);

var gridOptionsWrapper_1 = __webpack_require__(7);

var constants_1 = __webpack_require__(19);

var utils_1 = __webpack_require__(6);

var LINE_SEPARATOR = '\r\n';

var CsvSerializingSession =
/** @class */
function (_super) {
  __extends(CsvSerializingSession, _super);

  function CsvSerializingSession(config) {
    var _this = _super.call(this, {
      columnController: config.columnController,
      valueService: config.valueService,
      gridOptionsWrapper: config.gridOptionsWrapper,
      processCellCallback: config.processCellCallback,
      processHeaderCallback: config.processHeaderCallback
    }) || this;

    _this.result = '';
    _this.lineOpened = false;
    var suppressQuotes = config.suppressQuotes,
        columnSeparator = config.columnSeparator;
    _this.suppressQuotes = suppressQuotes;
    _this.columnSeparator = columnSeparator;
    return _this;
  }

  CsvSerializingSession.prototype.prepare = function (columnsToExport) {};

  CsvSerializingSession.prototype.addCustomHeader = function (customHeader) {
    if (!customHeader) {
      return;
    }

    this.result += customHeader + LINE_SEPARATOR;
  };

  CsvSerializingSession.prototype.addCustomFooter = function (customFooter) {
    if (!customFooter) {
      return;
    }

    this.result += customFooter + LINE_SEPARATOR;
  };

  CsvSerializingSession.prototype.onNewHeaderGroupingRow = function () {
    if (this.lineOpened) {
      this.result += LINE_SEPARATOR;
    }

    return {
      onColumn: this.onNewHeaderGroupingRowColumn.bind(this)
    };
  };

  CsvSerializingSession.prototype.onNewHeaderGroupingRowColumn = function (header, index, span) {
    if (index != 0) {
      this.result += this.columnSeparator;
    }

    this.result += this.putInQuotes(header, this.suppressQuotes);

    for (var i = 1; i <= span; i++) {
      this.result += this.columnSeparator + this.putInQuotes("", this.suppressQuotes);
    }

    this.lineOpened = true;
  };

  CsvSerializingSession.prototype.onNewHeaderRow = function () {
    if (this.lineOpened) {
      this.result += LINE_SEPARATOR;
    }

    return {
      onColumn: this.onNewHeaderRowColumn.bind(this)
    };
  };

  CsvSerializingSession.prototype.onNewHeaderRowColumn = function (column, index, node) {
    if (index != 0) {
      this.result += this.columnSeparator;
    }

    this.result += this.putInQuotes(this.extractHeaderValue(column), this.suppressQuotes);
    this.lineOpened = true;
  };

  CsvSerializingSession.prototype.onNewBodyRow = function () {
    if (this.lineOpened) {
      this.result += LINE_SEPARATOR;
    }

    return {
      onColumn: this.onNewBodyRowColumn.bind(this)
    };
  };

  CsvSerializingSession.prototype.onNewBodyRowColumn = function (column, index, node) {
    if (index != 0) {
      this.result += this.columnSeparator;
    }

    this.result += this.putInQuotes(this.extractRowCellValue(column, index, constants_1.Constants.EXPORT_TYPE_CSV, node), this.suppressQuotes);
    this.lineOpened = true;
  };

  CsvSerializingSession.prototype.putInQuotes = function (value, suppressQuotes) {
    if (suppressQuotes) {
      return value;
    }

    if (value === null || value === undefined) {
      return '""';
    }

    var stringValue;

    if (typeof value === 'string') {
      stringValue = value;
    } else if (typeof value.toString === 'function') {
      stringValue = value.toString();
    } else {
      console.warn('unknown value type during csv conversion');
      stringValue = '';
    } // replace each " with "" (ie two sets of double quotes is how to do double quotes in csv)


    var valueEscaped = stringValue.replace(/"/g, "\"\"");
    return '"' + valueEscaped + '"';
  };

  CsvSerializingSession.prototype.parse = function () {
    return this.result;
  };

  return CsvSerializingSession;
}(gridSerializer_1.BaseGridSerializingSession);

exports.CsvSerializingSession = CsvSerializingSession;

var BaseCreator =
/** @class */
function () {
  function BaseCreator() {}

  BaseCreator.prototype.setBeans = function (beans) {
    this.beans = beans;
  };

  BaseCreator.prototype.export = function (userParams) {
    if (this.isExportSuppressed()) {
      console.warn("ag-grid: Export cancelled. Export is not allowed as per your configuration.");
      return '';
    }

    var _a = this.getMergedParamsAndData(userParams),
        mergedParams = _a.mergedParams,
        data = _a.data;

    var fileNamePresent = mergedParams && mergedParams.fileName && mergedParams.fileName.length !== 0;
    var fileName = fileNamePresent ? mergedParams.fileName : this.getDefaultFileName();

    if (fileName.indexOf(".") === -1) {
      fileName = fileName + "." + this.getDefaultFileExtension();
    }

    this.beans.downloader.download(fileName, this.packageFile(data));
    return data;
  };

  BaseCreator.prototype.getData = function (params) {
    return this.getMergedParamsAndData(params).data;
  };

  BaseCreator.prototype.getMergedParamsAndData = function (userParams) {
    var mergedParams = this.mergeDefaultParams(userParams);
    var data = this.beans.gridSerializer.serialize(this.createSerializingSession(mergedParams), mergedParams);
    return {
      mergedParams: mergedParams,
      data: data
    };
  };

  BaseCreator.prototype.mergeDefaultParams = function (userParams) {
    var baseParams = this.beans.gridOptionsWrapper.getDefaultExportParams();
    var params = {};

    utils_1._.assign(params, baseParams);

    utils_1._.assign(params, userParams);

    return params;
  };

  BaseCreator.prototype.packageFile = function (data) {
    return new Blob(["\uFEFF", data], {
      type: window.navigator.msSaveOrOpenBlob ? this.getMimeType() : 'octet/stream'
    });
  };

  return BaseCreator;
}();

exports.BaseCreator = BaseCreator;

var CsvCreator =
/** @class */
function (_super) {
  __extends(CsvCreator, _super);

  function CsvCreator() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  CsvCreator.prototype.postConstruct = function () {
    this.setBeans({
      downloader: this.downloader,
      gridSerializer: this.gridSerializer,
      gridOptionsWrapper: this.gridOptionsWrapper
    });
  };

  CsvCreator.prototype.exportDataAsCsv = function (params) {
    return this.export(params);
  };

  CsvCreator.prototype.getDataAsCsv = function (params) {
    return this.getData(params);
  };

  CsvCreator.prototype.getMimeType = function () {
    return 'text/csv;charset=utf-8;';
  };

  CsvCreator.prototype.getDefaultFileName = function () {
    return 'export.csv';
  };

  CsvCreator.prototype.getDefaultFileExtension = function () {
    return 'csv';
  };

  CsvCreator.prototype.createSerializingSession = function (params) {
    var _a = this,
        columnController = _a.columnController,
        valueService = _a.valueService,
        gridOptionsWrapper = _a.gridOptionsWrapper;

    var _b = params,
        processCellCallback = _b.processCellCallback,
        processHeaderCallback = _b.processHeaderCallback,
        suppressQuotes = _b.suppressQuotes,
        columnSeparator = _b.columnSeparator;
    return new CsvSerializingSession({
      columnController: columnController,
      valueService: valueService,
      gridOptionsWrapper: gridOptionsWrapper,
      processCellCallback: processCellCallback || undefined,
      processHeaderCallback: processHeaderCallback || undefined,
      suppressQuotes: suppressQuotes || false,
      columnSeparator: columnSeparator || ','
    });
  };

  CsvCreator.prototype.isExportSuppressed = function () {
    return this.gridOptionsWrapper.isSuppressCsvExport();
  };

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], CsvCreator.prototype, "columnController", void 0);

  __decorate([context_1.Autowired('valueService'), __metadata("design:type", valueService_1.ValueService)], CsvCreator.prototype, "valueService", void 0);

  __decorate([context_1.Autowired('downloader'), __metadata("design:type", downloader_1.Downloader)], CsvCreator.prototype, "downloader", void 0);

  __decorate([context_1.Autowired('gridSerializer'), __metadata("design:type", gridSerializer_1.GridSerializer)], CsvCreator.prototype, "gridSerializer", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], CsvCreator.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], CsvCreator.prototype, "postConstruct", null);

  CsvCreator = __decorate([context_1.Bean('csvCreator')], CsvCreator);
  return CsvCreator;
}(BaseCreator);

exports.CsvCreator = CsvCreator;

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var cellComp_1 = __webpack_require__(86);

var rowNode_1 = __webpack_require__(39);

var column_1 = __webpack_require__(24);

var events_1 = __webpack_require__(18);

var component_1 = __webpack_require__(22);

var utils_1 = __webpack_require__(6);

var RowComp =
/** @class */
function (_super) {
  __extends(RowComp, _super);

  function RowComp(parentScope, bodyContainerComp, pinnedLeftContainerComp, pinnedRightContainerComp, fullWidthContainerComp, rowNode, beans, animateIn, useAnimationFrameForCreate, printLayout, embedFullWidth) {
    var _this = _super.call(this) || this;

    _this.eAllRowContainers = [];
    _this.active = true;
    _this.rowContainerReadyCount = 0;
    _this.refreshNeeded = false;
    _this.columnRefreshPending = false;
    _this.cellComps = {}; // for animations, there are bits we want done in the next VM turn, to all DOM to update first.
    // instead of each row doing a setTimeout(func,0), we put the functions here and the rowRenderer
    // executes them all in one timeout

    _this.createSecondPassFuncs = []; // these get called before the row is destroyed - they set up the DOM for the remove animation (ie they
    // set the DOM up for the animation), then the delayedDestroyFunctions get called when the animation is
    // complete (ie removes from the dom).

    _this.removeFirstPassFuncs = []; // for animations, these functions get called 400ms after the row is cleared, called by the rowRenderer
    // so each row isn't setting up it's own timeout

    _this.removeSecondPassFuncs = [];
    _this.initialised = false;
    _this.parentScope = parentScope;
    _this.beans = beans;
    _this.bodyContainerComp = bodyContainerComp;
    _this.pinnedLeftContainerComp = pinnedLeftContainerComp;
    _this.pinnedRightContainerComp = pinnedRightContainerComp;
    _this.fullWidthContainerComp = fullWidthContainerComp;
    _this.rowNode = rowNode;
    _this.rowIsEven = _this.rowNode.rowIndex % 2 === 0;
    _this.paginationPage = _this.beans.paginationProxy.getCurrentPage();
    _this.useAnimationFrameForCreate = useAnimationFrameForCreate;
    _this.printLayout = printLayout;
    _this.embedFullWidth = embedFullWidth;

    _this.setAnimateFlags(animateIn);

    return _this;
  }

  RowComp.prototype.init = function () {
    var _this = this;

    this.rowFocused = this.beans.focusedCellController.isRowFocused(this.rowNode.rowIndex, this.rowNode.rowPinned);
    this.scope = this.createChildScopeOrNull(this.rowNode.data);
    this.setupRowContainers();
    this.addListeners();

    if (this.slideRowIn) {
      this.createSecondPassFuncs.push(function () {
        _this.onTopChanged();
      });
    }

    if (this.fadeRowIn) {
      this.createSecondPassFuncs.push(function () {
        _this.eAllRowContainers.forEach(function (eRow) {
          return utils_1._.removeCssClass(eRow, 'ag-opacity-zero');
        });
      });
    }
  };

  RowComp.prototype.createTemplate = function (contents, extraCssClass) {
    if (extraCssClass === void 0) {
      extraCssClass = null;
    }

    var templateParts = [];
    var rowHeight = this.rowNode.rowHeight;
    var rowClasses = this.getInitialRowClasses(extraCssClass).join(' ');

    var rowIdSanitised = utils_1._.escape(this.rowNode.id);

    var userRowStyles = this.preProcessStylesFromGridOptions();
    var businessKey = this.getRowBusinessKey();

    var businessKeySanitised = utils_1._.escape(businessKey);

    var rowTopStyle = this.getInitialRowTopStyle();
    templateParts.push("<div");
    templateParts.push(" role=\"row\"");
    templateParts.push(" row-index=\"" + this.rowNode.getRowIndexString() + "\"");
    templateParts.push(rowIdSanitised ? " row-id=\"" + rowIdSanitised + "\"" : "");
    templateParts.push(businessKey ? " row-business-key=\"" + businessKeySanitised + "\"" : "");
    templateParts.push(" comp-id=\"" + this.getCompId() + "\"");
    templateParts.push(" class=\"" + rowClasses + "\"");
    templateParts.push(" style=\"height: " + rowHeight + "px; " + rowTopStyle + " " + userRowStyles + "\">"); // add in the template for the cells

    templateParts.push(contents);
    templateParts.push("</div>");
    return templateParts.join('');
  };

  RowComp.prototype.getCellForCol = function (column) {
    var cellComp = this.cellComps[column.getColId()];
    return cellComp ? cellComp.getGui() : null;
  };

  RowComp.prototype.afterFlush = function () {
    if (this.initialised) {
      return;
    }

    this.initialised = true;
    this.executeProcessRowPostCreateFunc();
  };

  RowComp.prototype.executeProcessRowPostCreateFunc = function () {
    var func = this.beans.gridOptionsWrapper.getProcessRowPostCreateFunc();

    if (!func) {
      return;
    }

    var params = {
      eRow: this.eBodyRow,
      ePinnedLeftRow: this.ePinnedLeftRow,
      ePinnedRightRow: this.ePinnedRightRow,
      node: this.rowNode,
      api: this.beans.gridOptionsWrapper.getApi(),
      rowIndex: this.rowNode.rowIndex,
      addRenderedRowListener: this.addEventListener.bind(this),
      columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
      context: this.beans.gridOptionsWrapper.getContext()
    };
    func(params);
  };

  RowComp.prototype.getInitialRowTopStyle = function () {
    // print layout uses normal flow layout for row positioning
    if (this.printLayout) {
      return '';
    } // if sliding in, we take the old row top. otherwise we just set the current row top.


    var pixels = this.slideRowIn ? this.roundRowTopToBounds(this.rowNode.oldRowTop) : this.rowNode.rowTop;
    var afterPaginationPixels = this.applyPaginationOffset(pixels);
    var afterScalingPixels = this.beans.maxDivHeightScaler.getRealPixelPosition(afterPaginationPixels);
    var isSuppressRowTransform = this.beans.gridOptionsWrapper.isSuppressRowTransform();
    return isSuppressRowTransform ? "top: " + afterScalingPixels + "px; " : "transform: translateY(" + afterScalingPixels + "px);";
  };

  RowComp.prototype.getRowBusinessKey = function () {
    var businessKeyForNodeFunc = this.beans.gridOptionsWrapper.getBusinessKeyForNodeFunc();

    if (typeof businessKeyForNodeFunc !== 'function') {
      return;
    }

    return businessKeyForNodeFunc(this.rowNode);
  };

  RowComp.prototype.areAllContainersReady = function () {
    return this.rowContainerReadyCount === 3;
  };

  RowComp.prototype.lazyCreateCells = function (cols, eRow) {
    if (!this.active) {
      return;
    }

    var cellTemplatesAndComps = this.createCells(cols);
    eRow.innerHTML = cellTemplatesAndComps.template;
    this.callAfterRowAttachedOnCells(cellTemplatesAndComps.cellComps, eRow);
    this.rowContainerReadyCount++;

    if (this.areAllContainersReady() && this.refreshNeeded) {
      this.refreshCells();
    }
  };

  RowComp.prototype.createRowContainer = function (rowContainerComp, cols, callback) {
    var _this = this;

    var useAnimationsFrameForCreate = this.useAnimationFrameForCreate;
    var cellTemplatesAndComps = useAnimationsFrameForCreate ? {
      cellComps: [],
      template: ''
    } : this.createCells(cols);
    var rowTemplate = this.createTemplate(cellTemplatesAndComps.template); // the RowRenderer is probably inserting many rows. rather than inserting each template one
    // at a time, the grid inserts all rows together - so the callback here is called by the
    // rowRenderer when all RowComps are created, then all the HTML is inserted in one go,
    // and then all the callbacks are called. this is NOT done in an animation frame.

    rowContainerComp.appendRowTemplate(rowTemplate, function () {
      var eRow = rowContainerComp.getRowElement(_this.getCompId());

      _this.afterRowAttached(rowContainerComp, eRow);

      callback(eRow); // console.log(`createRowContainer ${this.getCompId()}`);

      if (useAnimationsFrameForCreate) {
        _this.beans.taskQueue.addP1Task(_this.lazyCreateCells.bind(_this, cols, eRow), _this.rowNode.rowIndex);
      } else {
        _this.callAfterRowAttachedOnCells(cellTemplatesAndComps.cellComps, eRow);

        _this.rowContainerReadyCount = 3;
      }
    });
  };

  RowComp.prototype.createChildScopeOrNull = function (data) {
    var isAngularCompileRows = this.beans.gridOptionsWrapper.isAngularCompileRows();

    if (!isAngularCompileRows) {
      return null;
    }

    var newChildScope = this.parentScope.$new();
    newChildScope.data = __assign({}, data);
    newChildScope.rowNode = this.rowNode;
    newChildScope.context = this.beans.gridOptionsWrapper.getContext();
    this.addDestroyFunc(function () {
      newChildScope.$destroy();
      newChildScope.data = null;
      newChildScope.rowNode = null;
      newChildScope.context = null;
    });
    return newChildScope;
  };

  RowComp.prototype.setupRowContainers = function () {
    var isFullWidthCellFunc = this.beans.gridOptionsWrapper.getIsFullWidthCellFunc();
    var isFullWidthCell = isFullWidthCellFunc ? isFullWidthCellFunc(this.rowNode) : false;
    var isDetailCell = this.beans.doingMasterDetail && this.rowNode.detail;
    var isGroupSpanningRow = this.rowNode.group && this.beans.gridOptionsWrapper.isGroupUseEntireRow();

    if (this.rowNode.stub) {
      this.createFullWidthRows(RowComp.LOADING_CELL_RENDERER, RowComp.LOADING_CELL_RENDERER_COMP_NAME);
    } else if (isDetailCell) {
      this.createFullWidthRows(RowComp.DETAIL_CELL_RENDERER, RowComp.DETAIL_CELL_RENDERER_COMP_NAME);
    } else if (isFullWidthCell) {
      this.createFullWidthRows(RowComp.FULL_WIDTH_CELL_RENDERER, null);
    } else if (isGroupSpanningRow) {
      this.createFullWidthRows(RowComp.GROUP_ROW_RENDERER, RowComp.GROUP_ROW_RENDERER_COMP_NAME);
    } else {
      this.setupNormalRowContainers();
    }
  };

  RowComp.prototype.setupNormalRowContainers = function () {
    var _this = this;

    var centerCols;
    var leftCols;
    var rightCols;

    if (this.printLayout) {
      centerCols = this.beans.columnController.getAllDisplayedColumns();
      leftCols = [];
      rightCols = [];
    } else {
      centerCols = this.beans.columnController.getAllDisplayedCenterVirtualColumnsForRow(this.rowNode);
      leftCols = this.beans.columnController.getDisplayedLeftColumnsForRow(this.rowNode);
      rightCols = this.beans.columnController.getDisplayedRightColumnsForRow(this.rowNode);
    }

    this.createRowContainer(this.bodyContainerComp, centerCols, function (eRow) {
      return _this.eBodyRow = eRow;
    });
    this.createRowContainer(this.pinnedRightContainerComp, rightCols, function (eRow) {
      return _this.ePinnedRightRow = eRow;
    });
    this.createRowContainer(this.pinnedLeftContainerComp, leftCols, function (eRow) {
      return _this.ePinnedLeftRow = eRow;
    });
  };

  RowComp.prototype.createFullWidthRows = function (type, name) {
    var _this = this;

    this.fullWidthRow = true;

    if (this.embedFullWidth) {
      this.createFullWidthRowContainer(this.bodyContainerComp, null, null, type, name, function (eRow) {
        _this.eFullWidthRowBody = eRow;
      }, function (cellRenderer) {
        _this.fullWidthRowComponentBody = cellRenderer;
      }); // printLayout doesn't put components into the pinned sections

      if (!this.printLayout) {
        this.createFullWidthRowContainer(this.pinnedLeftContainerComp, column_1.Column.PINNED_LEFT, 'ag-cell-last-left-pinned', type, name, function (eRow) {
          _this.eFullWidthRowLeft = eRow;
        }, function (cellRenderer) {
          _this.fullWidthRowComponentLeft = cellRenderer;
        });
        this.createFullWidthRowContainer(this.pinnedRightContainerComp, column_1.Column.PINNED_RIGHT, 'ag-cell-first-right-pinned', type, name, function (eRow) {
          _this.eFullWidthRowRight = eRow;
        }, function (cellRenderer) {
          _this.fullWidthRowComponentRight = cellRenderer;
        });
      }
    } else {
      // otherwise we add to the fullWidth container as normal
      // let previousFullWidth = ensureDomOrder ? this.lastPlacedElements.eFullWidth : null;
      this.createFullWidthRowContainer(this.fullWidthContainerComp, null, null, type, name, function (eRow) {
        _this.eFullWidthRow = eRow;
      }, function (cellRenderer) {
        _this.fullWidthRowComponent = cellRenderer;
      });
    }
  };

  RowComp.prototype.setAnimateFlags = function (animateIn) {
    if (animateIn) {
      var oldRowTopExists = utils_1._.exists(this.rowNode.oldRowTop); // if the row had a previous position, we slide it in (animate row top)


      this.slideRowIn = oldRowTopExists; // if the row had no previous position, we fade it in (animate

      this.fadeRowIn = !oldRowTopExists;
    } else {
      this.slideRowIn = false;
      this.fadeRowIn = false;
    }
  };

  RowComp.prototype.isEditing = function () {
    return this.editingRow;
  };

  RowComp.prototype.stopRowEditing = function (cancel) {
    this.stopEditing(cancel);
  };

  RowComp.prototype.isFullWidth = function () {
    return this.fullWidthRow;
  };

  RowComp.prototype.addListeners = function () {
    this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_HEIGHT_CHANGED, this.onRowHeightChanged.bind(this));
    this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));
    this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_ROW_INDEX_CHANGED, this.onRowIndexChanged.bind(this));
    this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_TOP_CHANGED, this.onTopChanged.bind(this));
    this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_EXPANDED_CHANGED, this.onExpandedChanged.bind(this));
    this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_DATA_CHANGED, this.onRowNodeDataChanged.bind(this));
    this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_CELL_CHANGED, this.onRowNodeCellChanged.bind(this));
    this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_DRAGGING_CHANGED, this.onRowNodeDraggingChanged.bind(this));
    var eventService = this.beans.eventService;
    this.addDestroyableEventListener(eventService, events_1.Events.EVENT_HEIGHT_SCALE_CHANGED, this.onTopChanged.bind(this));
    this.addDestroyableEventListener(eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
    this.addDestroyableEventListener(eventService, events_1.Events.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));
    this.addDestroyableEventListener(eventService, events_1.Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));
    this.addDestroyableEventListener(eventService, events_1.Events.EVENT_CELL_FOCUSED, this.onCellFocusChanged.bind(this));
    this.addDestroyableEventListener(eventService, events_1.Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));
    this.addDestroyableEventListener(eventService, events_1.Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
    this.addDestroyableEventListener(eventService, events_1.Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));
  }; // when grid columns change, then all cells should be cleaned out,
  // as the new columns could have same id as the previous columns and may conflict


  RowComp.prototype.onGridColumnsChanged = function () {
    this.removeRenderedCells(Object.keys(this.cellComps));
  };

  RowComp.prototype.onRowNodeDataChanged = function (event) {
    // if this is an update, we want to refresh, as this will allow the user to put in a transition
    // into the cellRenderer refresh method. otherwise this might be completely new data, in which case
    // we will want to completely replace the cells
    this.forEachCellComp(function (cellComp) {
      return cellComp.refreshCell({
        suppressFlash: !event.update,
        newData: !event.update
      });
    }); // check for selected also, as this could be after lazy loading of the row data, in which case
    // the id might of just gotten set inside the row and the row selected state may of changed
    // as a result. this is what happens when selected rows are loaded in virtual pagination.
    // - niall note - since moving to the stub component, this may no longer be true, as replacing
    // the stub component now replaces the entire row

    this.onRowSelected(); // as data has changed, then the style and class needs to be recomputed

    this.postProcessCss();
  };

  RowComp.prototype.onRowNodeCellChanged = function (event) {
    // as data has changed, then the style and class needs to be recomputed
    this.postProcessCss();
  };

  RowComp.prototype.postProcessCss = function () {
    this.postProcessStylesFromGridOptions();
    this.postProcessClassesFromGridOptions();
    this.postProcessRowClassRules();
    this.postProcessRowDragging();
  };

  RowComp.prototype.onRowNodeDraggingChanged = function () {
    this.postProcessRowDragging();
  };

  RowComp.prototype.postProcessRowDragging = function () {
    var dragging = this.rowNode.dragging;
    this.eAllRowContainers.forEach(function (row) {
      return utils_1._.addOrRemoveCssClass(row, 'ag-row-dragging', dragging);
    });
  };

  RowComp.prototype.onExpandedChanged = function () {
    var rowNode = this.rowNode;
    this.eAllRowContainers.forEach(function (row) {
      return utils_1._.addOrRemoveCssClass(row, 'ag-row-group-expanded', rowNode.expanded);
    });
    this.eAllRowContainers.forEach(function (row) {
      return utils_1._.addOrRemoveCssClass(row, 'ag-row-group-contracted', !rowNode.expanded);
    });
  };

  RowComp.prototype.onDisplayedColumnsChanged = function () {
    if (this.fullWidthRow) {
      return;
    }

    this.refreshCells();
  };

  RowComp.prototype.destroyFullWidthComponents = function () {
    if (this.fullWidthRowComponent) {
      if (this.fullWidthRowComponent.destroy) {
        this.fullWidthRowComponent.destroy();
      }

      this.fullWidthRowComponent = null;
    }

    if (this.fullWidthRowComponentBody) {
      if (this.fullWidthRowComponentBody.destroy) {
        this.fullWidthRowComponentBody.destroy();
      }

      this.fullWidthRowComponent = null;
    }

    if (this.fullWidthRowComponentLeft) {
      if (this.fullWidthRowComponentLeft.destroy) {
        this.fullWidthRowComponentLeft.destroy();
      }

      this.fullWidthRowComponentLeft = null;
    }

    if (this.fullWidthRowComponentRight) {
      if (this.fullWidthRowComponentRight.destroy) {
        this.fullWidthRowComponentRight.destroy();
      }

      this.fullWidthRowComponent = null;
    }
  };

  RowComp.prototype.getContainerForCell = function (pinnedType) {
    switch (pinnedType) {
      case column_1.Column.PINNED_LEFT:
        return this.ePinnedLeftRow;

      case column_1.Column.PINNED_RIGHT:
        return this.ePinnedRightRow;

      default:
        return this.eBodyRow;
    }
  };

  RowComp.prototype.onVirtualColumnsChanged = function () {
    if (this.fullWidthRow) {
      return;
    }

    this.refreshCells();
  };

  RowComp.prototype.onColumnResized = function () {
    if (this.fullWidthRow) {
      return;
    }

    this.refreshCells();
  };

  RowComp.prototype.refreshCells = function () {
    if (!this.areAllContainersReady()) {
      this.refreshNeeded = true;
      return;
    }

    var suppressAnimationFrame = this.beans.gridOptionsWrapper.isSuppressAnimationFrame();
    var skipAnimationFrame = suppressAnimationFrame || this.printLayout;

    if (skipAnimationFrame) {
      this.refreshCellsInAnimationFrame();
    } else {
      if (this.columnRefreshPending) {
        return;
      }

      this.beans.taskQueue.addP1Task(this.refreshCellsInAnimationFrame.bind(this), this.rowNode.rowIndex);
    }
  };

  RowComp.prototype.refreshCellsInAnimationFrame = function () {
    if (!this.active) {
      return;
    }

    this.columnRefreshPending = false;
    var centerCols;
    var leftCols;
    var rightCols;

    if (this.printLayout) {
      centerCols = this.beans.columnController.getAllDisplayedColumns();
      leftCols = [];
      rightCols = [];
    } else {
      centerCols = this.beans.columnController.getAllDisplayedCenterVirtualColumnsForRow(this.rowNode);
      leftCols = this.beans.columnController.getDisplayedLeftColumnsForRow(this.rowNode);
      rightCols = this.beans.columnController.getDisplayedRightColumnsForRow(this.rowNode);
    }

    this.insertCellsIntoContainer(this.eBodyRow, centerCols);
    this.insertCellsIntoContainer(this.ePinnedLeftRow, leftCols);
    this.insertCellsIntoContainer(this.ePinnedRightRow, rightCols);
    var colIdsToRemove = Object.keys(this.cellComps);
    centerCols.forEach(function (col) {
      return utils_1._.removeFromArray(colIdsToRemove, col.getId());
    });
    leftCols.forEach(function (col) {
      return utils_1._.removeFromArray(colIdsToRemove, col.getId());
    });
    rightCols.forEach(function (col) {
      return utils_1._.removeFromArray(colIdsToRemove, col.getId());
    }); // we never remove editing cells, as this would cause the cells to loose their values while editing
    // as the grid is scrolling horizontally.

    var eligibleToBeRemoved = utils_1._.filter(colIdsToRemove, this.isCellEligibleToBeRemoved.bind(this)); // remove old cells from gui, but we don't destroy them, we might use them again


    this.removeRenderedCells(eligibleToBeRemoved);
  };

  RowComp.prototype.removeRenderedCells = function (colIds) {
    var _this = this;

    colIds.forEach(function (key) {
      var cellComp = _this.cellComps[key]; // could be old reference, ie removed cell

      if (utils_1._.missing(cellComp)) {
        return;
      }

      cellComp.detach();
      cellComp.destroy();
      _this.cellComps[key] = null;
    });
  };

  RowComp.prototype.isCellEligibleToBeRemoved = function (indexStr) {
    var displayedColumns = this.beans.columnController.getAllDisplayedColumns();
    var REMOVE_CELL = true;
    var KEEP_CELL = false;
    var renderedCell = this.cellComps[indexStr];

    if (!renderedCell) {
      return REMOVE_CELL;
    } // always remove the cell if it's in the wrong pinned location


    if (this.isCellInWrongRow(renderedCell)) {
      return REMOVE_CELL;
    } // we want to try and keep editing and focused cells


    var editing = renderedCell.isEditing();
    var focused = this.beans.focusedCellController.isCellFocused(renderedCell.getGridCell());
    var mightWantToKeepCell = editing || focused;

    if (mightWantToKeepCell) {
      var column = renderedCell.getColumn();
      var cellStillDisplayed = displayedColumns.indexOf(column) >= 0;
      return cellStillDisplayed ? KEEP_CELL : REMOVE_CELL;
    }

    return REMOVE_CELL;
  };

  RowComp.prototype.ensureCellInCorrectContainer = function (cellComp) {
    // for print layout, we always put cells into centre, otherwise we put in correct pinned section
    if (this.printLayout) {
      return;
    }

    var element = cellComp.getGui();
    var column = cellComp.getColumn();
    var pinnedType = column.getPinned();
    var eContainer = this.getContainerForCell(pinnedType); // if in wrong container, remove it

    var eOldContainer = cellComp.getParentRow();
    var inWrongRow = eOldContainer !== eContainer;

    if (inWrongRow) {
      // take out from old row
      if (eOldContainer) {
        eOldContainer.removeChild(element);
      }

      eContainer.appendChild(element);
      cellComp.setParentRow(eContainer);
    }
  };

  RowComp.prototype.isCellInWrongRow = function (cellComp) {
    var column = cellComp.getColumn();
    var rowWeWant = this.getContainerForCell(column.getPinned()); // if in wrong container, remove it

    var oldRow = cellComp.getParentRow();
    return oldRow !== rowWeWant;
  };

  RowComp.prototype.insertCellsIntoContainer = function (eRow, cols) {
    var _this = this;

    if (!eRow) {
      return;
    }

    var cellTemplates = [];
    var newCellComps = [];
    cols.forEach(function (col) {
      var colId = col.getId();
      var existingCell = _this.cellComps[colId];

      if (existingCell) {
        _this.ensureCellInCorrectContainer(existingCell);
      } else {
        _this.createNewCell(col, eRow, cellTemplates, newCellComps);
      }
    });

    if (cellTemplates.length > 0) {
      utils_1._.appendHtml(eRow, cellTemplates.join(''));

      this.callAfterRowAttachedOnCells(newCellComps, eRow);
    }
  };

  RowComp.prototype.addDomData = function (eRowContainer) {
    var gow = this.beans.gridOptionsWrapper;
    gow.setDomData(eRowContainer, RowComp.DOM_DATA_KEY_RENDERED_ROW, this);
    this.addDestroyFunc(function () {
      gow.setDomData(eRowContainer, RowComp.DOM_DATA_KEY_RENDERED_ROW, null);
    });
  };

  RowComp.prototype.createNewCell = function (col, eContainer, cellTemplates, newCellComps) {
    var newCellComp = new cellComp_1.CellComp(this.scope, this.beans, col, this.rowNode, this, false, this.printLayout);
    var cellTemplate = newCellComp.getCreateTemplate();
    cellTemplates.push(cellTemplate);
    newCellComps.push(newCellComp);
    this.cellComps[col.getId()] = newCellComp;
    newCellComp.setParentRow(eContainer);
  };

  RowComp.prototype.onMouseEvent = function (eventName, mouseEvent) {
    switch (eventName) {
      case 'dblclick':
        this.onRowDblClick(mouseEvent);
        break;

      case 'click':
        this.onRowClick(mouseEvent);
        break;
    }
  };

  RowComp.prototype.createRowEvent = function (type, domEvent) {
    return {
      type: type,
      node: this.rowNode,
      data: this.rowNode.data,
      rowIndex: this.rowNode.rowIndex,
      rowPinned: this.rowNode.rowPinned,
      context: this.beans.gridOptionsWrapper.getContext(),
      api: this.beans.gridOptionsWrapper.getApi(),
      columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
      event: domEvent
    };
  };

  RowComp.prototype.createRowEventWithSource = function (type, domEvent) {
    var event = this.createRowEvent(type, domEvent); // when first developing this, we included the rowComp in the event.
    // this seems very weird. so when introducing the event types, i left the 'source'
    // out of the type, and just include the source in the two places where this event
    // was fired (rowClicked and rowDoubleClicked). it doesn't make sense for any
    // users to be using this, as the rowComp isn't an object we expose, so would be
    // very surprising if a user was using it.

    event.source = this;
    return event;
  };

  RowComp.prototype.onRowDblClick = function (mouseEvent) {
    if (utils_1._.isStopPropagationForAgGrid(mouseEvent)) {
      return;
    }

    var agEvent = this.createRowEventWithSource(events_1.Events.EVENT_ROW_DOUBLE_CLICKED, mouseEvent);
    this.beans.eventService.dispatchEvent(agEvent);
  };

  RowComp.prototype.onRowClick = function (mouseEvent) {
    var stop = utils_1._.isStopPropagationForAgGrid(mouseEvent);

    if (stop) {
      return;
    }

    var agEvent = this.createRowEventWithSource(events_1.Events.EVENT_ROW_CLICKED, mouseEvent);
    this.beans.eventService.dispatchEvent(agEvent); // ctrlKey for windows, metaKey for Apple

    var multiSelectKeyPressed = mouseEvent.ctrlKey || mouseEvent.metaKey;
    var shiftKeyPressed = mouseEvent.shiftKey;

    if ( // we do not allow selecting groups by clicking (as the click here expands the group), or if it's a detail row,
    // so return if it's a group row
    this.rowNode.group || // this is needed so we don't unselect other rows when we click this row, eg if this row is not selectable,
    // and we click it, the selection should not change (ie any currently selected row should stay selected)
    !this.rowNode.selectable || // we also don't allow selection of pinned rows
    this.rowNode.rowPinned || // if no selection method enabled, do nothing
    !this.beans.gridOptionsWrapper.isRowSelection() || // if click selection suppressed, do nothing
    this.beans.gridOptionsWrapper.isSuppressRowClickSelection()) {
      return;
    }

    var multiSelectOnClick = this.beans.gridOptionsWrapper.isRowMultiSelectWithClick();
    var rowDeselectionWithCtrl = this.beans.gridOptionsWrapper.isRowDeselection();

    if (this.rowNode.isSelected()) {
      if (multiSelectOnClick) {
        this.rowNode.setSelectedParams({
          newValue: false
        });
      } else if (multiSelectKeyPressed) {
        if (rowDeselectionWithCtrl) {
          this.rowNode.setSelectedParams({
            newValue: false
          });
        }
      } else {
        // selected with no multi key, must make sure anything else is unselected
        this.rowNode.setSelectedParams({
          newValue: true,
          clearSelection: true
        });
      }
    } else {
      var clearSelection = multiSelectOnClick ? false : !multiSelectKeyPressed;
      this.rowNode.setSelectedParams({
        newValue: true,
        clearSelection: clearSelection,
        rangeSelect: shiftKeyPressed
      });
    }
  };

  RowComp.prototype.createFullWidthRowContainer = function (rowContainerComp, pinned, extraCssClass, cellRendererType, cellRendererName, eRowCallback, cellRendererCallback) {
    var _this = this;

    var rowTemplate = this.createTemplate('', extraCssClass);
    rowContainerComp.appendRowTemplate(rowTemplate, function () {
      var eRow = rowContainerComp.getRowElement(_this.getCompId());

      var params = _this.createFullWidthParams(eRow, pinned);

      var callback = function callback(cellRenderer) {
        if (_this.isAlive()) {
          var gui = cellRenderer.getGui();
          eRow.appendChild(gui);
          cellRendererCallback(cellRenderer);
        } else {
          if (cellRenderer.destroy) {
            cellRenderer.destroy();
          }
        }
      };

      var res = _this.beans.userComponentFactory.newFullWidthCellRenderer(params, cellRendererType, cellRendererName);

      if (!res) {
        console.error('ag-Grid: fullWidthCellRenderer not defined');
        return;
      }

      res.then(callback);

      _this.afterRowAttached(rowContainerComp, eRow);

      eRowCallback(eRow);
      var isDetailRow = _this.beans.doingMasterDetail && _this.rowNode.detail;

      if (!isDetailRow) {
        _this.angular1Compile(eRow);
      }
    });
  };

  RowComp.prototype.angular1Compile = function (element) {
    if (!this.scope) {
      return;
    }

    this.beans.$compile(element)(this.scope);
  };

  RowComp.prototype.createFullWidthParams = function (eRow, pinned) {
    var params = {
      fullWidth: true,
      data: this.rowNode.data,
      node: this.rowNode,
      value: this.rowNode.key,
      $scope: this.scope ? this.scope : this.parentScope,
      $compile: this.beans.$compile,
      rowIndex: this.rowNode.rowIndex,
      api: this.beans.gridOptionsWrapper.getApi(),
      columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
      context: this.beans.gridOptionsWrapper.getContext(),
      // these need to be taken out, as part of 'afterAttached' now
      eGridCell: eRow,
      eParentOfValue: eRow,
      pinned: pinned,
      addRenderedRowListener: this.addEventListener.bind(this)
    };
    return params;
  };

  RowComp.prototype.getInitialRowClasses = function (extraCssClass) {
    var classes = [];
    var isTreeData = this.beans.gridOptionsWrapper.isTreeData();
    var rowNode = this.rowNode;

    if (utils_1._.exists(extraCssClass)) {
      classes.push(extraCssClass);
    }

    classes.push('ag-row');
    classes.push(this.rowFocused ? 'ag-row-focus' : 'ag-row-no-focus');

    if (this.fadeRowIn) {
      classes.push('ag-opacity-zero');
    }

    classes.push(this.rowIsEven ? 'ag-row-even' : 'ag-row-odd');

    if (rowNode.isSelected()) {
      classes.push('ag-row-selected');
    }

    if (rowNode.group) {
      classes.push('ag-row-group'); // if a group, put the level of the group in

      classes.push('ag-row-level-' + rowNode.level);

      if (rowNode.footer) {
        classes.push('ag-row-footer');
      }
    } else {
      // if a leaf, and a parent exists, put a level of the parent, else put level of 0 for top level item
      classes.push('ag-row-level-' + (rowNode.parent ? rowNode.parent.level + 1 : '0'));
    }

    if (rowNode.stub) {
      classes.push('ag-row-stub');
    }

    if (this.fullWidthRow) {
      classes.push('ag-full-width-row');
    }

    var addExpandedClass = isTreeData ? // if doing tree data, we add the expanded classes if any children, as any node can be a parent
    rowNode.allChildrenCount : // if normal row grouping, we add expanded classes to groups only
    rowNode.group && !rowNode.footer;

    if (addExpandedClass) {
      classes.push(rowNode.expanded ? 'ag-row-group-expanded' : 'ag-row-group-contracted');
    }

    if (rowNode.dragging) {
      classes.push('ag-row-dragging');
    }

    utils_1._.pushAll(classes, this.processClassesFromGridOptions());

    utils_1._.pushAll(classes, this.preProcessRowClassRules()); // we use absolute position unless we are doing print layout


    classes.push(this.printLayout ? 'ag-row-position-relative' : 'ag-row-position-absolute');
    this.firstRowOnPage = this.isFirstRowOnPage();
    this.lastRowOnPage = this.isLastRowOnPage();

    if (this.firstRowOnPage) {
      classes.push('ag-row-first');
    }

    if (this.lastRowOnPage) {
      classes.push('ag-row-last');
    }

    return classes;
  };

  RowComp.prototype.isFirstRowOnPage = function () {
    return this.rowNode.rowIndex === this.beans.paginationProxy.getPageFirstRow();
  };

  RowComp.prototype.isLastRowOnPage = function () {
    return this.rowNode.rowIndex === this.beans.paginationProxy.getPageLastRow();
  };

  RowComp.prototype.onModelUpdated = function () {
    var newFirst = this.isFirstRowOnPage();
    var newLast = this.isLastRowOnPage();

    if (this.firstRowOnPage !== newFirst) {
      this.firstRowOnPage = newFirst;
      this.eAllRowContainers.forEach(function (row) {
        return utils_1._.addOrRemoveCssClass(row, 'ag-row-first', newFirst);
      });
    }

    if (this.lastRowOnPage !== newLast) {
      this.lastRowOnPage = newLast;
      this.eAllRowContainers.forEach(function (row) {
        return utils_1._.addOrRemoveCssClass(row, 'ag-row-last', newLast);
      });
    }
  };

  RowComp.prototype.preProcessRowClassRules = function () {
    var res = [];
    this.processRowClassRules(function (className) {
      res.push(className);
    }, function (className) {// not catered for, if creating, no need
      // to remove class as it was never there
    });
    return res;
  };

  RowComp.prototype.processRowClassRules = function (onApplicableClass, onNotApplicableClass) {
    this.beans.stylingService.processClassRules(this.beans.gridOptionsWrapper.rowClassRules(), {
      value: undefined,
      colDef: undefined,
      data: this.rowNode.data,
      node: this.rowNode,
      rowIndex: this.rowNode.rowIndex,
      api: this.beans.gridOptionsWrapper.getApi(),
      $scope: this.scope,
      context: this.beans.gridOptionsWrapper.getContext()
    }, onApplicableClass, onNotApplicableClass);
  };

  RowComp.prototype.stopEditing = function (cancel) {
    if (cancel === void 0) {
      cancel = false;
    }

    this.forEachCellComp(function (renderedCell) {
      renderedCell.stopEditing(cancel);
    });

    if (!this.editingRow) {
      return;
    }

    if (!cancel) {
      var event_1 = this.createRowEvent(events_1.Events.EVENT_ROW_VALUE_CHANGED);
      this.beans.eventService.dispatchEvent(event_1);
    }

    this.setEditingRow(false);
  };

  RowComp.prototype.setEditingRow = function (value) {
    this.editingRow = value;
    this.eAllRowContainers.forEach(function (row) {
      return utils_1._.addOrRemoveCssClass(row, 'ag-row-editing', value);
    });
    var event = value ? this.createRowEvent(events_1.Events.EVENT_ROW_EDITING_STARTED) : this.createRowEvent(events_1.Events.EVENT_ROW_EDITING_STOPPED);
    this.beans.eventService.dispatchEvent(event);
  };

  RowComp.prototype.startRowEditing = function (keyPress, charPress, sourceRenderedCell) {
    if (keyPress === void 0) {
      keyPress = null;
    }

    if (charPress === void 0) {
      charPress = null;
    }

    if (sourceRenderedCell === void 0) {
      sourceRenderedCell = null;
    } // don't do it if already editing


    if (this.editingRow) {
      return;
    }

    this.forEachCellComp(function (renderedCell) {
      var cellStartedEdit = renderedCell === sourceRenderedCell;

      if (cellStartedEdit) {
        renderedCell.startEditingIfEnabled(keyPress, charPress, cellStartedEdit);
      } else {
        renderedCell.startEditingIfEnabled(null, null, cellStartedEdit);
      }
    });
    this.setEditingRow(true);
  };

  RowComp.prototype.forEachCellComp = function (callback) {
    utils_1._.iterateObject(this.cellComps, function (key, cellComp) {
      if (!cellComp) {
        return;
      }

      callback(cellComp);
    });
  };

  RowComp.prototype.postProcessClassesFromGridOptions = function () {
    var _this = this;

    var cssClasses = this.processClassesFromGridOptions();

    if (!cssClasses || !cssClasses.length) {
      return;
    }

    cssClasses.forEach(function (classStr) {
      _this.eAllRowContainers.forEach(function (row) {
        return utils_1._.addCssClass(row, classStr);
      });
    });
  };

  RowComp.prototype.postProcessRowClassRules = function () {
    var _this = this;

    this.processRowClassRules(function (className) {
      _this.eAllRowContainers.forEach(function (row) {
        return utils_1._.addCssClass(row, className);
      });
    }, function (className) {
      _this.eAllRowContainers.forEach(function (row) {
        return utils_1._.removeCssClass(row, className);
      });
    });
  };

  RowComp.prototype.processClassesFromGridOptions = function () {
    var res = [];

    var process = function process(rowCls) {
      if (typeof rowCls === 'string') {
        res.push(rowCls);
      } else if (Array.isArray(rowCls)) {
        rowCls.forEach(function (e) {
          return res.push(e);
        });
      }
    }; // part 1 - rowClass


    var rowClass = this.beans.gridOptionsWrapper.getRowClass();

    if (rowClass) {
      if (typeof rowClass === 'function') {
        console.warn('ag-Grid: rowClass should not be a function, please use getRowClass instead');
        return;
      }

      process(rowClass);
    } // part 2 - rowClassFunc


    var rowClassFunc = this.beans.gridOptionsWrapper.getRowClassFunc();

    if (rowClassFunc) {
      var params = {
        node: this.rowNode,
        data: this.rowNode.data,
        rowIndex: this.rowNode.rowIndex,
        context: this.beans.gridOptionsWrapper.getContext(),
        api: this.beans.gridOptionsWrapper.getApi()
      };
      var rowClassFuncResult = rowClassFunc(params);
      process(rowClassFuncResult);
    }

    return res;
  };

  RowComp.prototype.preProcessStylesFromGridOptions = function () {
    var rowStyles = this.processStylesFromGridOptions();
    return utils_1._.cssStyleObjectToMarkup(rowStyles);
  };

  RowComp.prototype.postProcessStylesFromGridOptions = function () {
    var rowStyles = this.processStylesFromGridOptions();
    this.eAllRowContainers.forEach(function (row) {
      return utils_1._.addStylesToElement(row, rowStyles);
    });
  };

  RowComp.prototype.processStylesFromGridOptions = function () {
    // part 1 - rowStyle
    var rowStyle = this.beans.gridOptionsWrapper.getRowStyle();

    if (rowStyle && typeof rowStyle === 'function') {
      console.warn('ag-Grid: rowStyle should be an object of key/value styles, not be a function, use getRowStyle() instead');
      return;
    } // part 1 - rowStyleFunc


    var rowStyleFunc = this.beans.gridOptionsWrapper.getRowStyleFunc();
    var rowStyleFuncResult;

    if (rowStyleFunc) {
      var params = {
        data: this.rowNode.data,
        node: this.rowNode,
        api: this.beans.gridOptionsWrapper.getApi(),
        context: this.beans.gridOptionsWrapper.getContext(),
        $scope: this.scope
      };
      rowStyleFuncResult = rowStyleFunc(params);
    }

    return utils_1._.assign({}, rowStyle, rowStyleFuncResult);
  };

  RowComp.prototype.createCells = function (cols) {
    var _this = this;

    var templateParts = [];
    var newCellComps = [];
    cols.forEach(function (col) {
      var newCellComp = new cellComp_1.CellComp(_this.scope, _this.beans, col, _this.rowNode, _this, false, _this.printLayout);
      var cellTemplate = newCellComp.getCreateTemplate();
      templateParts.push(cellTemplate);
      newCellComps.push(newCellComp);
      _this.cellComps[col.getId()] = newCellComp;
    });
    var templateAndComps = {
      template: templateParts.join(''),
      cellComps: newCellComps
    };
    return templateAndComps;
  };

  RowComp.prototype.onRowSelected = function () {
    var selected = this.rowNode.isSelected();
    this.eAllRowContainers.forEach(function (row) {
      return utils_1._.addOrRemoveCssClass(row, 'ag-row-selected', selected);
    });
  }; // called:
  // + after row created for first time
  // + after horizontal scroll, so new cells due to column virtualisation


  RowComp.prototype.callAfterRowAttachedOnCells = function (newCellComps, eRow) {
    var _this = this;

    newCellComps.forEach(function (cellComp) {
      cellComp.setParentRow(eRow);
      cellComp.afterAttached(); // if we are editing the row, then the cell needs to turn
      // into edit mode

      if (_this.editingRow) {
        cellComp.startEditingIfEnabled();
      }
    });
  };

  RowComp.prototype.afterRowAttached = function (rowContainerComp, eRow) {
    var _this = this;

    this.addDomData(eRow);
    this.removeSecondPassFuncs.push(function () {
      // console.log(eRow);
      rowContainerComp.removeRowElement(eRow);
    });
    this.removeFirstPassFuncs.push(function () {
      if (utils_1._.exists(_this.rowNode.rowTop)) {
        // the row top is updated anyway, however we set it here again
        // to something more reasonable for the animation - ie if the
        // row top is 10000px away, the row will flash out, so this
        // gives it a rounded value, so row animates out more slowly
        var rowTop = _this.roundRowTopToBounds(_this.rowNode.rowTop);

        _this.setRowTop(rowTop);
      } else {
        utils_1._.addCssClass(eRow, 'ag-opacity-zero');
      }
    });
    this.eAllRowContainers.push(eRow); // adding hover functionality adds listener to this row, so we
    // do it lazily in an animation frame

    if (this.useAnimationFrameForCreate) {
      this.beans.taskQueue.addP2Task(this.addHoverFunctionality.bind(this, eRow));
    } else {
      this.addHoverFunctionality(eRow);
    }
  };

  RowComp.prototype.addHoverFunctionality = function (eRow) {
    var _this = this; // because we use animation frames to do this, it's possible the row no longer exists
    // by the time we get to add it


    if (!this.active) {
      return;
    } // because mouseenter and mouseleave do not propagate, we cannot listen on the gridPanel
    // like we do for all the other mouse events.
    // because of the pinning, we cannot simply add / remove the class based on the eRow. we
    // have to check all eRow's (body & pinned). so the trick is if any of the rows gets a
    // mouse hover, it sets such in the rowNode, and then all three reflect the change as
    // all are listening for event on the row node.
    // step 1 - add listener, to set flag on row node


    this.addDestroyableEventListener(eRow, 'mouseenter', function () {
      return _this.rowNode.onMouseEnter();
    });
    this.addDestroyableEventListener(eRow, 'mouseleave', function () {
      return _this.rowNode.onMouseLeave();
    }); // step 2 - listen for changes on row node (which any eRow can trigger)

    this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_MOUSE_ENTER, function () {
      // if hover turned off, we don't add the class. we do this here so that if the application
      // toggles this property mid way, we remove the hover form the last row, but we stop
      // adding hovers from that point onwards.
      if (!_this.beans.gridOptionsWrapper.isSuppressRowHoverHighlight()) {
        utils_1._.addCssClass(eRow, 'ag-row-hover');
      }
    });
    this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_MOUSE_LEAVE, function () {
      utils_1._.removeCssClass(eRow, 'ag-row-hover');
    });
  }; // for animation, we don't want to animate entry or exit to a very far away pixel,
  // otherwise the row would move so fast, it would appear to disappear. so this method
  // moves the row closer to the viewport if it is far away, so the row slide in / out
  // at a speed the user can see.


  RowComp.prototype.roundRowTopToBounds = function (rowTop) {
    var range = this.beans.gridPanel.getVScrollPosition();
    var minPixel = this.applyPaginationOffset(range.top, true) - 100;
    var maxPixel = this.applyPaginationOffset(range.bottom, true) + 100;
    return Math.min(Math.max(minPixel, rowTop), maxPixel);
  };

  RowComp.prototype.onRowHeightChanged = function () {
    // check for exists first - if the user is resetting the row height, then
    // it will be null (or undefined) momentarily until the next time the flatten
    // stage is called where the row will then update again with a new height
    if (utils_1._.exists(this.rowNode.rowHeight)) {
      var heightPx_1 = this.rowNode.rowHeight + "px";
      this.eAllRowContainers.forEach(function (row) {
        return row.style.height = heightPx_1;
      });
    }
  };

  RowComp.prototype.addEventListener = function (eventType, listener) {
    if (eventType === 'renderedRowRemoved' || eventType === 'rowRemoved') {
      eventType = events_1.Events.EVENT_VIRTUAL_ROW_REMOVED;
      console.warn('ag-Grid: Since version 11, event renderedRowRemoved is now called ' + events_1.Events.EVENT_VIRTUAL_ROW_REMOVED);
    }

    _super.prototype.addEventListener.call(this, eventType, listener);
  };

  RowComp.prototype.removeEventListener = function (eventType, listener) {
    if (eventType === 'renderedRowRemoved' || eventType === 'rowRemoved') {
      eventType = events_1.Events.EVENT_VIRTUAL_ROW_REMOVED;
      console.warn('ag-Grid: Since version 11, event renderedRowRemoved and rowRemoved is now called ' + events_1.Events.EVENT_VIRTUAL_ROW_REMOVED);
    }

    _super.prototype.removeEventListener.call(this, eventType, listener);
  };

  RowComp.prototype.destroy = function (animate) {
    if (animate === void 0) {
      animate = false;
    }

    _super.prototype.destroy.call(this);

    this.active = false; // why do we have this method? shouldn't everything below be added as a destroy func beside
    // the corresponding create logic?

    this.destroyFullWidthComponents();

    if (animate) {
      this.removeFirstPassFuncs.forEach(function (func) {
        return func();
      });
      this.removeSecondPassFuncs.push(this.destroyContainingCells.bind(this));
    } else {
      this.destroyContainingCells(); // we are not animating, so execute the second stage of removal now.
      // we call getAndClear, so that they are only called once

      var delayedDestroyFunctions = this.getAndClearDelayedDestroyFunctions();
      delayedDestroyFunctions.forEach(function (func) {
        return func();
      });
    }

    var event = this.createRowEvent(events_1.Events.EVENT_VIRTUAL_ROW_REMOVED);
    this.dispatchEvent(event);
    this.beans.eventService.dispatchEvent(event);
  };

  RowComp.prototype.destroyContainingCells = function () {
    this.forEachCellComp(function (renderedCell) {
      return renderedCell.destroy();
    });
    this.destroyFullWidthComponents();
  }; // we clear so that the functions are never executed twice


  RowComp.prototype.getAndClearDelayedDestroyFunctions = function () {
    var result = this.removeSecondPassFuncs;
    this.removeSecondPassFuncs = [];
    return result;
  };

  RowComp.prototype.onCellFocusChanged = function () {
    var rowFocused = this.beans.focusedCellController.isRowFocused(this.rowNode.rowIndex, this.rowNode.rowPinned);

    if (rowFocused !== this.rowFocused) {
      this.eAllRowContainers.forEach(function (row) {
        return utils_1._.addOrRemoveCssClass(row, 'ag-row-focus', rowFocused);
      });
      this.eAllRowContainers.forEach(function (row) {
        return utils_1._.addOrRemoveCssClass(row, 'ag-row-no-focus', !rowFocused);
      });
      this.rowFocused = rowFocused;
    } // if we are editing, then moving the focus out of a row will stop editing


    if (!rowFocused && this.editingRow) {
      this.stopEditing(false);
    }
  };

  RowComp.prototype.onPaginationChanged = function () {
    var currentPage = this.beans.paginationProxy.getCurrentPage(); // it is possible this row is in the new page, but the page number has changed, which means
    // it needs to reposition itself relative to the new page

    if (this.paginationPage !== currentPage) {
      this.paginationPage = currentPage;
      this.onTopChanged();
    }
  };

  RowComp.prototype.onTopChanged = function () {
    this.setRowTop(this.rowNode.rowTop);
  }; // applies pagination offset, eg if on second page, and page height is 500px, then removes
  // 500px from the top position, so a row with rowTop 600px is displayed at location 100px.
  // reverse will take the offset away rather than add.


  RowComp.prototype.applyPaginationOffset = function (topPx, reverse) {
    if (reverse === void 0) {
      reverse = false;
    }

    if (this.rowNode.isRowPinned()) {
      return topPx;
    }

    var pixelOffset = this.beans.paginationProxy.getPixelOffset();
    var multiplier = reverse ? 1 : -1;
    return topPx + pixelOffset * multiplier;
  };

  RowComp.prototype.setRowTop = function (pixels) {
    // print layout uses normal flow layout for row positioning
    if (this.printLayout) {
      return;
    } // need to make sure rowTop is not null, as this can happen if the node was once
    // visible (ie parent group was expanded) but is now not visible


    if (utils_1._.exists(pixels)) {
      var afterPaginationPixels = this.applyPaginationOffset(pixels);
      var afterScalingPixels = this.beans.maxDivHeightScaler.getRealPixelPosition(afterPaginationPixels);
      var topPx_1 = afterScalingPixels + "px";

      if (this.beans.gridOptionsWrapper.isSuppressRowTransform()) {
        this.eAllRowContainers.forEach(function (row) {
          return row.style.top = topPx_1;
        });
      } else {
        this.eAllRowContainers.forEach(function (row) {
          return row.style.transform = "translateY(" + topPx_1 + ")";
        });
      }
    }
  }; // we clear so that the functions are never executed twice


  RowComp.prototype.getAndClearNextVMTurnFunctions = function () {
    var result = this.createSecondPassFuncs;
    this.createSecondPassFuncs = [];
    return result;
  };

  RowComp.prototype.getRowNode = function () {
    return this.rowNode;
  };

  RowComp.prototype.getRenderedCellForColumn = function (column) {
    var _this = this;

    var cellComp = this.cellComps[column.getColId()];

    if (cellComp) {
      return cellComp;
    }

    var spanList = Object.keys(this.cellComps).map(function (name) {
      return _this.cellComps[name];
    }).filter(function (cmp) {
      return cmp.getColSpanningList().indexOf(column) !== -1;
    });
    return spanList.length ? spanList[0] : undefined;
  };

  RowComp.prototype.onRowIndexChanged = function () {
    this.onCellFocusChanged();
    this.updateRowIndexes();
  };

  RowComp.prototype.updateRowIndexes = function () {
    var rowIndexStr = this.rowNode.getRowIndexString();
    var rowIsEven = this.rowNode.rowIndex % 2 === 0;
    var rowIsEvenChanged = this.rowIsEven !== rowIsEven;

    if (rowIsEvenChanged) {
      this.rowIsEven = rowIsEven;
    }

    this.eAllRowContainers.forEach(function (eRow) {
      eRow.setAttribute('row-index', rowIndexStr);

      if (!rowIsEvenChanged) {
        return;
      }

      utils_1._.addOrRemoveCssClass(eRow, 'ag-row-even', rowIsEven);

      utils_1._.addOrRemoveCssClass(eRow, 'ag-row-odd', !rowIsEven);
    });
  };

  RowComp.prototype.ensureDomOrder = function () {
    var sides = [{
      el: this.getBodyRowElement(),
      ct: this.bodyContainerComp
    }, {
      el: this.getPinnedLeftRowElement(),
      ct: this.pinnedLeftContainerComp
    }, {
      el: this.getPinnedRightRowElement(),
      ct: this.pinnedRightContainerComp
    }, {
      el: this.getFullWidthRowElement(),
      ct: this.fullWidthContainerComp
    }];
    sides.forEach(function (side) {
      if (!side.el) {
        return;
      }

      side.ct.ensureDomOrder(side.el);
    });
  }; // returns the pinned left container, either the normal one, or the embedded full with one if exists


  RowComp.prototype.getPinnedLeftRowElement = function () {
    return this.ePinnedLeftRow ? this.ePinnedLeftRow : this.eFullWidthRowLeft;
  }; // returns the pinned right container, either the normal one, or the embedded full with one if exists


  RowComp.prototype.getPinnedRightRowElement = function () {
    return this.ePinnedRightRow ? this.ePinnedRightRow : this.eFullWidthRowRight;
  }; // returns the body container, either the normal one, or the embedded full with one if exists


  RowComp.prototype.getBodyRowElement = function () {
    return this.eBodyRow ? this.eBodyRow : this.eFullWidthRowBody;
  }; // returns the full width container


  RowComp.prototype.getFullWidthRowElement = function () {
    return this.eFullWidthRow;
  };

  RowComp.DOM_DATA_KEY_RENDERED_ROW = 'renderedRow';
  RowComp.FULL_WIDTH_CELL_RENDERER = 'fullWidthCellRenderer';
  RowComp.GROUP_ROW_RENDERER = 'groupRowRenderer';
  RowComp.GROUP_ROW_RENDERER_COMP_NAME = 'agGroupRowRenderer';
  RowComp.LOADING_CELL_RENDERER = 'loadingCellRenderer';
  RowComp.LOADING_CELL_RENDERER_COMP_NAME = 'agLoadingCellRenderer';
  RowComp.DETAIL_CELL_RENDERER = 'detailCellRenderer';
  RowComp.DETAIL_CELL_RENDERER_COMP_NAME = 'agDetailCellRenderer';
  return RowComp;
}(component_1.Component);

exports.RowComp = RowComp;

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});

var constants_1 = __webpack_require__(19);

var gridCell_1 = __webpack_require__(52);

var utils_1 = __webpack_require__(6);

var GridRow =
/** @class */
function () {
  function GridRow(rowIndex, floating) {
    this.rowIndex = rowIndex;
    this.floating = utils_1._.makeNull(floating);
  }

  GridRow.prototype.isFloatingTop = function () {
    return this.floating === constants_1.Constants.PINNED_TOP;
  };

  GridRow.prototype.isFloatingBottom = function () {
    return this.floating === constants_1.Constants.PINNED_BOTTOM;
  };

  GridRow.prototype.isNotFloating = function () {
    return !this.isFloatingBottom() && !this.isFloatingTop();
  };

  GridRow.prototype.equals = function (otherSelection) {
    return this.rowIndex === otherSelection.rowIndex && this.floating === otherSelection.floating;
  };

  GridRow.prototype.toString = function () {
    return "rowIndex = " + this.rowIndex + ", floating = " + this.floating;
  };

  GridRow.prototype.getGridCell = function (column) {
    var gridCellDef = {
      rowIndex: this.rowIndex,
      floating: this.floating,
      column: column
    };
    return new gridCell_1.GridCell(gridCellDef);
  }; // tests if this row selection is before the other row selection


  GridRow.prototype.before = function (otherSelection) {
    var otherFloating = otherSelection.floating;

    switch (this.floating) {
      case constants_1.Constants.PINNED_TOP:
        // we we are floating top, and other isn't, then we are always before
        if (otherFloating !== constants_1.Constants.PINNED_TOP) {
          return true;
        }

        break;

      case constants_1.Constants.PINNED_BOTTOM:
        // if we are floating bottom, and the other isn't, then we are never before
        if (otherFloating !== constants_1.Constants.PINNED_BOTTOM) {
          return false;
        }

        break;

      default:
        // if we are not floating, but the other one is floating...
        if (utils_1._.exists(otherFloating)) {
          if (otherFloating === constants_1.Constants.PINNED_TOP) {
            // we are not floating, other is floating top, we are first
            return false;
          } else {
            // we are not floating, other is floating bottom, we are always first
            return true;
          }
        }

        break;
    }

    return this.rowIndex < otherSelection.rowIndex;
  };

  return GridRow;
}();

exports.GridRow = GridRow;

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var component_1 = __webpack_require__(22);

var rowNode_1 = __webpack_require__(39);

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var events_1 = __webpack_require__(18);

var eventService_1 = __webpack_require__(14);

var gridApi_1 = __webpack_require__(20);

var columnApi_1 = __webpack_require__(21);

var utils_1 = __webpack_require__(6);

var CheckboxSelectionComponent =
/** @class */
function (_super) {
  __extends(CheckboxSelectionComponent, _super);

  function CheckboxSelectionComponent() {
    return _super.call(this, "<span class=\"ag-selection-checkbox\" unselectable=\"on\"/>") || this;
  }

  CheckboxSelectionComponent.prototype.createAndAddIcons = function () {
    this.eCheckedIcon = utils_1._.createIconNoSpan('checkboxChecked', this.gridOptionsWrapper, this.column);
    this.eUncheckedIcon = utils_1._.createIconNoSpan('checkboxUnchecked', this.gridOptionsWrapper, this.column);
    this.eIndeterminateIcon = utils_1._.createIconNoSpan('checkboxIndeterminate', this.gridOptionsWrapper, this.column);
    var element = this.getGui();
    element.appendChild(this.eCheckedIcon);
    element.appendChild(this.eUncheckedIcon);
    element.appendChild(this.eIndeterminateIcon);
  };

  CheckboxSelectionComponent.prototype.onDataChanged = function () {
    // when rows are loaded for the second time, this can impact the selection, as a row
    // could be loaded as already selected (if user scrolls down, and then up again).
    this.onSelectionChanged();
  };

  CheckboxSelectionComponent.prototype.onSelectableChanged = function () {
    this.showOrHideSelect();
  };

  CheckboxSelectionComponent.prototype.onSelectionChanged = function () {
    var state = this.rowNode.isSelected();

    utils_1._.setVisible(this.eCheckedIcon, state === true);

    utils_1._.setVisible(this.eUncheckedIcon, state === false);

    utils_1._.setVisible(this.eIndeterminateIcon, typeof state !== 'boolean');
  };

  CheckboxSelectionComponent.prototype.onCheckedClicked = function () {
    var groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();
    var updatedCount = this.rowNode.setSelectedParams({
      newValue: false,
      groupSelectsFiltered: groupSelectsFiltered
    });
    return updatedCount;
  };

  CheckboxSelectionComponent.prototype.onUncheckedClicked = function (event) {
    var groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();
    var updatedCount = this.rowNode.setSelectedParams({
      newValue: true,
      rangeSelect: event.shiftKey,
      groupSelectsFiltered: groupSelectsFiltered
    });
    return updatedCount;
  };

  CheckboxSelectionComponent.prototype.onIndeterminateClicked = function (event) {
    var result = this.onUncheckedClicked(event);

    if (result === 0) {
      this.onCheckedClicked();
    }
  };

  CheckboxSelectionComponent.prototype.init = function (params) {
    this.rowNode = params.rowNode;
    this.column = params.column;
    this.createAndAddIcons();
    this.onSelectionChanged(); // we don't want the row clicked event to fire when selecting the checkbox, otherwise the row
    // would possibly get selected twice

    this.addGuiEventListener('click', function (event) {
      return utils_1._.stopPropagationForAgGrid(event);
    }); // likewise we don't want double click on this icon to open a group

    this.addGuiEventListener('dblclick', function (event) {
      return utils_1._.stopPropagationForAgGrid(event);
    });
    this.addDestroyableEventListener(this.eCheckedIcon, 'click', this.onCheckedClicked.bind(this));
    this.addDestroyableEventListener(this.eUncheckedIcon, 'click', this.onUncheckedClicked.bind(this));
    this.addDestroyableEventListener(this.eIndeterminateIcon, 'click', this.onIndeterminateClicked.bind(this));
    this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_ROW_SELECTED, this.onSelectionChanged.bind(this));
    this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_DATA_CHANGED, this.onDataChanged.bind(this));
    this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_SELECTABLE_CHANGED, this.onSelectableChanged.bind(this));
    this.isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();
    var checkboxVisibleIsDynamic = this.isRowSelectableFunc || this.checkboxCallbackExists();

    if (checkboxVisibleIsDynamic) {
      this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.showOrHideSelect.bind(this));
      this.showOrHideSelect();
    }
  };

  CheckboxSelectionComponent.prototype.showOrHideSelect = function () {
    // if the isRowSelectable() is not provided the row node is selectable by default
    var selectable = this.rowNode.selectable; // checkboxSelection callback is deemed a legacy solution however we will still consider it's result.
    // If selectable, then also check the colDef callback. if not selectable, this it short circuits - no need
    // to call the colDef callback.

    if (selectable && this.checkboxCallbackExists()) {
      selectable = this.column.isCellCheckboxSelection(this.rowNode);
    } // show checkbox if both conditions are true


    this.setVisible(selectable);
  };

  CheckboxSelectionComponent.prototype.checkboxCallbackExists = function () {
    // column will be missing if groupUseEntireRow=true
    var colDef = this.column ? this.column.getColDef() : null;
    return colDef && typeof colDef.checkboxSelection === 'function';
  };

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], CheckboxSelectionComponent.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], CheckboxSelectionComponent.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], CheckboxSelectionComponent.prototype, "gridApi", void 0);

  __decorate([context_1.Autowired('columnApi'), __metadata("design:type", columnApi_1.ColumnApi)], CheckboxSelectionComponent.prototype, "columnApi", void 0);

  return CheckboxSelectionComponent;
}(component_1.Component);

exports.CheckboxSelectionComponent = CheckboxSelectionComponent;

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var popupComponent_1 = __webpack_require__(72);

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var utils_1 = __webpack_require__(6);

var PopupEditorWrapper =
/** @class */
function (_super) {
  __extends(PopupEditorWrapper, _super);

  function PopupEditorWrapper(cellEditor) {
    var _this = _super.call(this, "<div class=\"ag-popup-editor\" tabindex=\"-1\"/>") || this;

    _this.getGuiCalledOnChild = false;
    _this.cellEditor = cellEditor;
    return _this;
  }

  PopupEditorWrapper.prototype.onKeyDown = function (event) {
    if (!utils_1._.isUserSuppressingKeyboardEvent(this.gridOptionsWrapper, event, this.params.node, this.params.column, true)) {
      this.params.onKeyDown(event);
    }
  };

  PopupEditorWrapper.prototype.getGui = function () {
    // we call getGui() on child here (rather than in the constructor)
    // as we should wait for 'init' to be called on child first.
    if (!this.getGuiCalledOnChild) {
      this.appendChild(this.cellEditor.getGui());
      this.getGuiCalledOnChild = true;
    }

    return _super.prototype.getGui.call(this);
  };

  PopupEditorWrapper.prototype.init = function (params) {
    var _this = this;

    this.params = params;
    this.gridOptionsWrapper.setDomData(this.getGui(), PopupEditorWrapper.DOM_KEY_POPUP_EDITOR_WRAPPER, true);
    this.addDestroyFunc(function () {
      if (_this.cellEditor.destroy) {
        _this.cellEditor.destroy();
      }
    });
    this.addDestroyableEventListener( // this needs to be 'super' and not 'this' as if we call 'this',
    // it ends up called 'getGui()' on the child before 'init' was called,
    // which is not good
    _super.prototype.getGui.call(this), 'keydown', this.onKeyDown.bind(this));
  };

  PopupEditorWrapper.prototype.afterGuiAttached = function () {
    if (this.cellEditor.afterGuiAttached) {
      this.cellEditor.afterGuiAttached();
    }
  };

  PopupEditorWrapper.prototype.getValue = function () {
    return this.cellEditor.getValue();
  };

  PopupEditorWrapper.prototype.isCancelBeforeStart = function () {
    if (this.cellEditor.isCancelBeforeStart) {
      return this.cellEditor.isCancelBeforeStart();
    }
  };

  PopupEditorWrapper.prototype.isCancelAfterEnd = function () {
    if (this.cellEditor.isCancelAfterEnd) {
      return this.cellEditor.isCancelAfterEnd();
    }
  };

  PopupEditorWrapper.prototype.focusIn = function () {
    if (this.cellEditor.focusIn) {
      this.cellEditor.focusIn();
    }
  };

  PopupEditorWrapper.prototype.focusOut = function () {
    if (this.cellEditor.focusOut) {
      this.cellEditor.focusOut();
    }
  };

  PopupEditorWrapper.DOM_KEY_POPUP_EDITOR_WRAPPER = 'popupEditorWrapper';

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], PopupEditorWrapper.prototype, "gridOptionsWrapper", void 0);

  return PopupEditorWrapper;
}(popupComponent_1.PopupComponent);

exports.PopupEditorWrapper = PopupEditorWrapper;

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var constants_1 = __webpack_require__(19);

var columnController_1 = __webpack_require__(17);

var gridRow_1 = __webpack_require__(140);

var gridCell_1 = __webpack_require__(52);

var gridOptionsWrapper_1 = __webpack_require__(7);

var pinnedRowModel_1 = __webpack_require__(59);

var utils_1 = __webpack_require__(6);

var CellNavigationService =
/** @class */
function () {
  function CellNavigationService() {} // returns null if no cell to focus on, ie at the end of the grid


  CellNavigationService.prototype.getNextCellToFocus = function (key, lastCellToFocus) {
    // starting with the provided cell, we keep moving until we find a cell we can
    // focus on.
    var pointer = lastCellToFocus;
    var finished = false; // finished will be true when either:
    // a) cell found that we can focus on
    // b) run out of cells (ie the method returns null)

    while (!finished) {
      switch (key) {
        case constants_1.Constants.KEY_UP:
          pointer = this.getCellAbove(pointer);
          break;

        case constants_1.Constants.KEY_DOWN:
          pointer = this.getCellBelow(pointer);
          break;

        case constants_1.Constants.KEY_RIGHT:
          if (this.gridOptionsWrapper.isEnableRtl()) {
            pointer = this.getCellToLeft(pointer);
          } else {
            pointer = this.getCellToRight(pointer);
          }

          break;

        case constants_1.Constants.KEY_LEFT:
          if (this.gridOptionsWrapper.isEnableRtl()) {
            pointer = this.getCellToRight(pointer);
          } else {
            pointer = this.getCellToLeft(pointer);
          }

          break;

        default:
          pointer = null;
          console.warn('ag-Grid: unknown key for navigation ' + key);
          break;
      }

      if (pointer) {
        finished = this.isCellGoodToFocusOn(pointer);
      } else {
        finished = true;
      }
    }

    return pointer;
  };

  CellNavigationService.prototype.isCellGoodToFocusOn = function (gridCell) {
    var column = gridCell.column;
    var rowNode;

    switch (gridCell.floating) {
      case constants_1.Constants.PINNED_TOP:
        rowNode = this.pinnedRowModel.getPinnedTopRow(gridCell.rowIndex);
        break;

      case constants_1.Constants.PINNED_BOTTOM:
        rowNode = this.pinnedRowModel.getPinnedBottomRow(gridCell.rowIndex);
        break;

      default:
        rowNode = this.rowModel.getRow(gridCell.rowIndex);
        break;
    }

    var suppressNavigable = column.isSuppressNavigable(rowNode);
    return !suppressNavigable;
  };

  CellNavigationService.prototype.getCellToLeft = function (lastCell) {
    if (!lastCell) {
      return null;
    }

    var colToLeft = this.columnController.getDisplayedColBefore(lastCell.column);

    if (!colToLeft) {
      return null;
    } else {
      var gridCellDef = {
        rowIndex: lastCell.rowIndex,
        column: colToLeft,
        floating: lastCell.floating
      };
      return new gridCell_1.GridCell(gridCellDef);
    }
  };

  CellNavigationService.prototype.getCellToRight = function (lastCell) {
    if (!lastCell) {
      return null;
    }

    var colToRight = this.columnController.getDisplayedColAfter(lastCell.column); // if already on right, do nothing

    if (!colToRight) {
      return null;
    } else {
      var gridCellDef = {
        rowIndex: lastCell.rowIndex,
        column: colToRight,
        floating: lastCell.floating
      };
      return new gridCell_1.GridCell(gridCellDef);
    }
  };

  CellNavigationService.prototype.getRowBelow = function (lastRow) {
    // if already on top row, do nothing
    if (this.isLastRowInContainer(lastRow)) {
      if (lastRow.isFloatingBottom()) {
        return null;
      } else if (lastRow.isNotFloating()) {
        if (this.pinnedRowModel.isRowsToRender(constants_1.Constants.PINNED_BOTTOM)) {
          return new gridRow_1.GridRow(0, constants_1.Constants.PINNED_BOTTOM);
        } else {
          return null;
        }
      } else {
        if (this.rowModel.isRowsToRender()) {
          return new gridRow_1.GridRow(0, null);
        } else if (this.pinnedRowModel.isRowsToRender(constants_1.Constants.PINNED_BOTTOM)) {
          return new gridRow_1.GridRow(0, constants_1.Constants.PINNED_BOTTOM);
        } else {
          return null;
        }
      }
    } else {
      return new gridRow_1.GridRow(lastRow.rowIndex + 1, lastRow.floating);
    }
  };

  CellNavigationService.prototype.getCellBelow = function (lastCell) {
    if (!lastCell) {
      return null;
    }

    var rowBelow = this.getRowBelow(lastCell.getGridRow());

    if (rowBelow) {
      var gridCellDef = {
        rowIndex: rowBelow.rowIndex,
        column: lastCell.column,
        floating: rowBelow.floating
      };
      return new gridCell_1.GridCell(gridCellDef);
    } else {
      return null;
    }
  };

  CellNavigationService.prototype.isLastRowInContainer = function (gridRow) {
    if (gridRow.isFloatingTop()) {
      var lastTopIndex = this.pinnedRowModel.getPinnedTopRowData().length - 1;
      return lastTopIndex <= gridRow.rowIndex;
    } else if (gridRow.isFloatingBottom()) {
      var lastBottomIndex = this.pinnedRowModel.getPinnedBottomRowData().length - 1;
      return lastBottomIndex <= gridRow.rowIndex;
    } else {
      var lastBodyIndex = this.rowModel.getPageLastRow();
      return lastBodyIndex <= gridRow.rowIndex;
    }
  };

  CellNavigationService.prototype.getRowAbove = function (lastRow) {
    // if already on top row, do nothing
    if (lastRow.rowIndex === 0) {
      if (lastRow.isFloatingTop()) {
        return null;
      } else if (lastRow.isNotFloating()) {
        if (this.pinnedRowModel.isRowsToRender(constants_1.Constants.PINNED_TOP)) {
          return this.getLastFloatingTopRow();
        } else {
          return null;
        }
      } else {
        // last floating bottom
        if (this.rowModel.isRowsToRender()) {
          return this.getLastBodyCell();
        } else if (this.pinnedRowModel.isRowsToRender(constants_1.Constants.PINNED_TOP)) {
          return this.getLastFloatingTopRow();
        } else {
          return null;
        }
      }
    } else {
      return new gridRow_1.GridRow(lastRow.rowIndex - 1, lastRow.floating);
    }
  };

  CellNavigationService.prototype.getCellAbove = function (lastCell) {
    if (!lastCell) {
      return null;
    }

    var rowAbove = this.getRowAbove(lastCell.getGridRow());

    if (rowAbove) {
      var gridCellDef = {
        rowIndex: rowAbove.rowIndex,
        column: lastCell.column,
        floating: rowAbove.floating
      };
      return new gridCell_1.GridCell(gridCellDef);
    } else {
      return null;
    }
  };

  CellNavigationService.prototype.getLastBodyCell = function () {
    var lastBodyRow = this.rowModel.getPageLastRow();
    return new gridRow_1.GridRow(lastBodyRow, null);
  };

  CellNavigationService.prototype.getLastFloatingTopRow = function () {
    var lastFloatingRow = this.pinnedRowModel.getPinnedTopRowData().length - 1;
    return new gridRow_1.GridRow(lastFloatingRow, constants_1.Constants.PINNED_TOP);
  };

  CellNavigationService.prototype.getNextTabbedCell = function (gridCell, backwards) {
    if (backwards) {
      return this.getNextTabbedCellBackwards(gridCell);
    } else {
      return this.getNextTabbedCellForwards(gridCell);
    }
  };

  CellNavigationService.prototype.getNextTabbedCellForwards = function (gridCell) {
    var displayedColumns = this.columnController.getAllDisplayedColumns();
    var newRowIndex = gridCell.rowIndex;
    var newFloating = gridCell.floating; // move along to the next cell

    var newColumn = this.columnController.getDisplayedColAfter(gridCell.column); // check if end of the row, and if so, go forward a row

    if (!newColumn) {
      newColumn = displayedColumns[0];
      var rowBelow = this.getRowBelow(gridCell.getGridRow());

      if (utils_1._.missing(rowBelow)) {
        return null;
      }

      newRowIndex = rowBelow ? rowBelow.rowIndex : null;
      newFloating = rowBelow ? rowBelow.floating : null;
    }

    var gridCellDef = {
      rowIndex: newRowIndex,
      column: newColumn,
      floating: newFloating
    };
    return new gridCell_1.GridCell(gridCellDef);
  };

  CellNavigationService.prototype.getNextTabbedCellBackwards = function (gridCell) {
    var displayedColumns = this.columnController.getAllDisplayedColumns();
    var newRowIndex = gridCell.rowIndex;
    var newFloating = gridCell.floating; // move along to the next cell

    var newColumn = this.columnController.getDisplayedColBefore(gridCell.column); // check if end of the row, and if so, go forward a row

    if (!newColumn) {
      newColumn = displayedColumns[displayedColumns.length - 1];
      var rowAbove = this.getRowAbove(gridCell.getGridRow());

      if (utils_1._.missing(rowAbove)) {
        return null;
      }

      newRowIndex = rowAbove ? rowAbove.rowIndex : null;
      newFloating = rowAbove ? rowAbove.floating : null;
    }

    var gridCellDef = {
      rowIndex: newRowIndex,
      column: newColumn,
      floating: newFloating
    };
    return new gridCell_1.GridCell(gridCellDef);
  };

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], CellNavigationService.prototype, "columnController", void 0);

  __decorate([context_1.Autowired('rowModel'), __metadata("design:type", Object)], CellNavigationService.prototype, "rowModel", void 0);

  __decorate([context_1.Autowired('pinnedRowModel'), __metadata("design:type", pinnedRowModel_1.PinnedRowModel)], CellNavigationService.prototype, "pinnedRowModel", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], CellNavigationService.prototype, "gridOptionsWrapper", void 0);

  CellNavigationService = __decorate([context_1.Bean('cellNavigationService')], CellNavigationService);
  return CellNavigationService;
}();

exports.CellNavigationService = CellNavigationService;

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var component_1 = __webpack_require__(22);

var utils_1 = __webpack_require__(6);

var AnimateSlideCellRenderer =
/** @class */
function (_super) {
  __extends(AnimateSlideCellRenderer, _super);

  function AnimateSlideCellRenderer() {
    var _this = _super.call(this, AnimateSlideCellRenderer.TEMPLATE) || this;

    _this.refreshCount = 0;
    _this.eCurrent = _this.queryForHtmlElement('.ag-value-slide-current');
    return _this;
  }

  AnimateSlideCellRenderer.prototype.init = function (params) {
    this.params = params;
    this.refresh(params);
  };

  AnimateSlideCellRenderer.prototype.addSlideAnimation = function () {
    var _this = this;

    this.refreshCount++; // below we keep checking this, and stop working on the animation
    // if it no longer matches - this means another animation has started
    // and this one is stale.

    var refreshCountCopy = this.refreshCount; // if old animation, remove it

    if (this.ePrevious) {
      this.getGui().removeChild(this.ePrevious);
    }

    this.ePrevious = utils_1._.loadTemplate('<span class="ag-value-slide-previous ag-value-slide-out"></span>');
    this.ePrevious.innerHTML = this.eCurrent.innerHTML;
    this.getGui().insertBefore(this.ePrevious, this.eCurrent); // having timeout of 0 allows use to skip to the next css turn,
    // so we know the previous css classes have been applied. so the
    // complex set of setTimeout below creates the animation

    window.setTimeout(function () {
      if (refreshCountCopy !== _this.refreshCount) {
        return;
      }

      utils_1._.addCssClass(_this.ePrevious, 'ag-value-slide-out-end');
    }, 50);
    window.setTimeout(function () {
      if (refreshCountCopy !== _this.refreshCount) {
        return;
      }

      _this.getGui().removeChild(_this.ePrevious);

      _this.ePrevious = null;
    }, 3000);
  };

  AnimateSlideCellRenderer.prototype.refresh = function (params) {
    var value = params.value;

    if (utils_1._.missing(value)) {
      value = '';
    }

    if (value === this.lastValue) {
      return;
    }

    this.addSlideAnimation();
    this.lastValue = value;

    if (utils_1._.exists(params.valueFormatted)) {
      this.eCurrent.innerHTML = params.valueFormatted;
    } else if (utils_1._.exists(params.value)) {
      this.eCurrent.innerHTML = value;
    } else {
      utils_1._.clearElement(this.eCurrent);
    }

    return true;
  };

  AnimateSlideCellRenderer.TEMPLATE = '<span>' + '<span class="ag-value-slide-current"></span>' + '</span>';
  return AnimateSlideCellRenderer;
}(component_1.Component);

exports.AnimateSlideCellRenderer = AnimateSlideCellRenderer;

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var component_1 = __webpack_require__(22);

var utils_1 = __webpack_require__(6);

var ARROW_UP = "\u2191";
var ARROW_DOWN = "\u2193";

var AnimateShowChangeCellRenderer =
/** @class */
function (_super) {
  __extends(AnimateShowChangeCellRenderer, _super);

  function AnimateShowChangeCellRenderer() {
    var _this = _super.call(this, AnimateShowChangeCellRenderer.TEMPLATE) || this;

    _this.refreshCount = 0;
    return _this;
  }

  AnimateShowChangeCellRenderer.prototype.init = function (params) {
    // this.params = params;
    this.eValue = this.queryForHtmlElement('.ag-value-change-value');
    this.eDelta = this.queryForHtmlElement('.ag-value-change-delta');
    this.refresh(params);
  };

  AnimateShowChangeCellRenderer.prototype.showDelta = function (params, delta) {
    var absDelta = Math.abs(delta);
    var valueFormatted = params.formatValue(absDelta);
    var valueToUse = utils_1._.exists(valueFormatted) ? valueFormatted : absDelta;
    var deltaUp = delta >= 0;

    if (deltaUp) {
      this.eDelta.innerHTML = ARROW_UP + valueToUse;
    } else {
      // because negative, use ABS to remove sign
      this.eDelta.innerHTML = ARROW_DOWN + valueToUse;
    } // class makes it green (in ag-fresh)


    utils_1._.addOrRemoveCssClass(this.eDelta, 'ag-value-change-delta-up', deltaUp); // class makes it red (in ag-fresh)


    utils_1._.addOrRemoveCssClass(this.eDelta, 'ag-value-change-delta-down', !deltaUp);
  };

  AnimateShowChangeCellRenderer.prototype.setTimerToRemoveDelta = function () {
    var _this = this; // the refreshCount makes sure that if the value updates again while
    // the below timer is waiting, then the below timer will realise it
    // is not the most recent and will not try to remove the delta value.


    this.refreshCount++;
    var refreshCountCopy = this.refreshCount;
    window.setTimeout(function () {
      if (refreshCountCopy === _this.refreshCount) {
        _this.hideDeltaValue();
      }
    }, 2000);
  };

  AnimateShowChangeCellRenderer.prototype.hideDeltaValue = function () {
    utils_1._.removeCssClass(this.eValue, 'ag-value-change-value-highlight');

    utils_1._.clearElement(this.eDelta);
  };

  AnimateShowChangeCellRenderer.prototype.refresh = function (params) {
    var value = params.value;

    if (value === this.lastValue) {
      return;
    }

    if (utils_1._.exists(params.valueFormatted)) {
      this.eValue.innerHTML = params.valueFormatted;
    } else if (utils_1._.exists(params.value)) {
      this.eValue.innerHTML = value;
    } else {
      utils_1._.clearElement(this.eValue);
    }

    if (typeof value === 'number' && typeof this.lastValue === 'number') {
      var delta = value - this.lastValue;
      this.showDelta(params, delta);
    } // highlight the current value, but only if it's not new, otherwise it
    // would get highlighted first time the value is shown


    if (this.lastValue) {
      utils_1._.addCssClass(this.eValue, 'ag-value-change-value-highlight');
    }

    this.setTimerToRemoveDelta();
    this.lastValue = value;
    return true;
  };

  AnimateShowChangeCellRenderer.TEMPLATE = '<span>' + '<span class="ag-value-change-delta"></span>' + '<span class="ag-value-change-value"></span>' + '</span>';
  return AnimateShowChangeCellRenderer;
}(component_1.Component);

exports.AnimateShowChangeCellRenderer = AnimateShowChangeCellRenderer;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var gridOptionsWrapper_1 = __webpack_require__(7);

var expressionService_1 = __webpack_require__(43);

var eventService_1 = __webpack_require__(14);

var constants_1 = __webpack_require__(19);

var context_1 = __webpack_require__(2);

var component_1 = __webpack_require__(22);

var rowNode_1 = __webpack_require__(39);

var valueFormatterService_1 = __webpack_require__(90);

var checkboxSelectionComponent_1 = __webpack_require__(141);

var columnController_1 = __webpack_require__(17);

var column_1 = __webpack_require__(24);

var componentAnnotations_1 = __webpack_require__(25);

var mouseEventService_1 = __webpack_require__(91);

var userComponentFactory_1 = __webpack_require__(35);

var utils_1 = __webpack_require__(6);

var GroupCellRenderer =
/** @class */
function (_super) {
  __extends(GroupCellRenderer, _super);

  function GroupCellRenderer() {
    return _super.call(this, GroupCellRenderer.TEMPLATE) || this;
  }

  GroupCellRenderer.prototype.init = function (params) {
    this.params = params;

    if (this.gridOptionsWrapper.isGroupIncludeTotalFooter()) {
      this.assignBlankValueToGroupFooterCell(params);
    }

    var embeddedRowMismatch = this.isEmbeddedRowMismatch(); // This allows for empty strings to appear as groups since
    // it will only return for null or undefined.

    var cellIsEmpty = params.value == null;
    this.cellIsBlank = embeddedRowMismatch || cellIsEmpty;

    if (this.cellIsBlank) {
      return;
    }

    this.setupDragOpenParents();
    this.addExpandAndContract();
    this.addCheckboxIfNeeded();
    this.addValueElement();
    this.setupIndent();
  };

  GroupCellRenderer.prototype.assignBlankValueToGroupFooterCell = function (params) {
    // this is not ideal, but it was the only way we could get footer working for the root node
    if (!params.value && params.node.level == -1) {
      params.value = '';
    }
  }; // if we are doing embedded full width rows, we only show the renderer when
  // in the body, or if pinning in the pinned section, or if pinning and RTL,
  // in the right section. otherwise we would have the cell repeated in each section.


  GroupCellRenderer.prototype.isEmbeddedRowMismatch = function () {
    if (this.params.fullWidth && this.gridOptionsWrapper.isEmbedFullWidthRows()) {
      var pinnedLeftCell = this.params.pinned === column_1.Column.PINNED_LEFT;
      var pinnedRightCell = this.params.pinned === column_1.Column.PINNED_RIGHT;
      var bodyCell = !pinnedLeftCell && !pinnedRightCell;

      if (this.gridOptionsWrapper.isEnableRtl()) {
        if (this.columnController.isPinningLeft()) {
          return !pinnedRightCell;
        } else {
          return !bodyCell;
        }
      } else {
        if (this.columnController.isPinningLeft()) {
          return !pinnedLeftCell;
        } else {
          return !bodyCell;
        }
      }
    } else {
      return false;
    }
  };

  GroupCellRenderer.prototype.setIndent = function () {
    if (this.gridOptionsWrapper.isGroupHideOpenParents()) {
      return;
    }

    var params = this.params;
    var rowNode = params.node;
    var paddingCount = rowNode.uiLevel;
    var userProvidedPaddingPixelsTheDeprecatedWay = params.padding >= 0;

    if (userProvidedPaddingPixelsTheDeprecatedWay) {
      this.setPaddingDeprecatedWay(paddingCount, params.padding);
      return;
    }

    if (this.indentClass) {
      this.removeCssClass(this.indentClass);
    }

    this.indentClass = 'ag-row-group-indent-' + paddingCount;
    this.addCssClass(this.indentClass);
  };

  GroupCellRenderer.prototype.setPaddingDeprecatedWay = function (paddingCount, padding) {
    utils_1._.doOnce(function () {
      return console.warn('ag-Grid: since v14.2, configuring padding for groupCellRenderer should be done with Sass variables and themes. Please see the ag-Grid documentation page for Themes, in particular the property $row-group-indent-size.');
    }, 'groupCellRenderer->doDeprecatedWay');

    var paddingPx = paddingCount * padding;

    if (this.gridOptionsWrapper.isEnableRtl()) {
      // if doing rtl, padding is on the right
      this.getGui().style.paddingRight = paddingPx + 'px';
    } else {
      // otherwise it is on the left
      this.getGui().style.paddingLeft = paddingPx + 'px';
    }
  };

  GroupCellRenderer.prototype.setupIndent = function () {
    // only do this if an indent - as this overwrites the padding that
    // the theme set, which will make things look 'not aligned' for the
    // first group level.
    var node = this.params.node;
    var suppressPadding = this.params.suppressPadding;

    if (!suppressPadding) {
      this.addDestroyableEventListener(node, rowNode_1.RowNode.EVENT_UI_LEVEL_CHANGED, this.setIndent.bind(this));
      this.setIndent();
    }
  };

  GroupCellRenderer.prototype.addValueElement = function () {
    var params = this.params;
    var rowNode = this.displayedGroup;

    if (rowNode.footer) {
      this.createFooterCell();
    } else if (rowNode.hasChildren() || utils_1._.get(params.colDef, 'cellRendererParams.innerRenderer', null) || utils_1._.get(params.colDef, 'cellRendererParams.innerRendererFramework', null)) {
      this.createGroupCell();

      if (rowNode.hasChildren()) {
        this.addChildCount();
      }
    } else {
      this.createLeafCell();
    }
  };

  GroupCellRenderer.prototype.createFooterCell = function () {
    var footerValue;
    var footerValueGetter = this.params.footerValueGetter;

    if (footerValueGetter) {
      // params is same as we were given, except we set the value as the item to display
      var paramsClone = utils_1._.cloneObject(this.params);

      paramsClone.value = this.params.value;

      if (typeof footerValueGetter === 'function') {
        footerValue = footerValueGetter(paramsClone);
      } else if (typeof footerValueGetter === 'string') {
        footerValue = this.expressionService.evaluate(footerValueGetter, paramsClone);
      } else {
        console.warn('ag-Grid: footerValueGetter should be either a function or a string (expression)');
      }
    } else {
      footerValue = 'Total ' + this.params.value;
    }

    this.eValue.innerHTML = footerValue;
  };

  GroupCellRenderer.prototype.createGroupCell = function () {
    var _this = this;

    var params = this.params;
    var rowGroupColumn = this.displayedGroup.rowGroupColumn; // we try and use the cellRenderer of the column used for the grouping if we can

    var columnToUse = rowGroupColumn ? rowGroupColumn : params.column;
    var groupName = this.params.value;
    var valueFormatted = columnToUse ? this.valueFormatterService.formatValue(columnToUse, params.node, params.scope, groupName) : null;
    params.valueFormatted = valueFormatted;
    var rendererPromise;

    if (params.fullWidth == true) {
      rendererPromise = this.useFullWidth(params);
    } else {
      rendererPromise = this.useInnerRenderer(this.params.colDef.cellRendererParams, columnToUse.getColDef(), params);
    } // retain a reference to the created renderer - we'll use this later for cleanup (in destroy)


    if (rendererPromise) {
      rendererPromise.then(function (value) {
        _this.innerCellRenderer = value;
      });
    }
  };

  GroupCellRenderer.prototype.useInnerRenderer = function (groupCellRendererParams, groupedColumnDef, // the column this group row is for, eg 'Country'
  params) {
    // when grouping, the normal case is we use the cell renderer of the grouped column. eg if grouping by country
    // and then rating, we will use the country cell renderer for each country group row and likewise the rating
    // cell renderer for each rating group row.
    //
    // however if the user has innerCellRenderer defined, this gets preference and we don't use cell renderers
    // of the grouped columns.
    //
    // so we check and use in the following order:
    //
    // 1) thisColDef.cellRendererParams.innerRenderer of the column showing the groups (eg auto group column)
    // 2) groupedColDef.cellRenderer of the grouped column
    // 3) groupedColDef.cellRendererParams.innerRenderer
    var _this = this;

    var cellRendererPromise = null; // we check if cell renderer provided for the group cell renderer, eg colDef.cellRendererParams.innerRenderer

    var groupInnerRendererClass = this.userComponentFactory.lookupComponentClassDef(groupCellRendererParams, "innerRenderer");

    if (groupInnerRendererClass && groupInnerRendererClass.component != null && groupInnerRendererClass.source != userComponentFactory_1.ComponentSource.DEFAULT) {
      // use the renderer defined in cellRendererParams.innerRenderer
      cellRendererPromise = this.userComponentFactory.newInnerCellRenderer(groupCellRendererParams, params);
    } else {
      // otherwise see if we can use the cellRenderer of the column we are grouping by
      var groupColumnRendererClass = this.userComponentFactory.lookupComponentClassDef(groupedColumnDef, "cellRenderer");

      if (groupColumnRendererClass && groupColumnRendererClass.source != userComponentFactory_1.ComponentSource.DEFAULT) {
        // Only if the original column is using a specific renderer, it it is a using a DEFAULT one ignore it
        cellRendererPromise = this.userComponentFactory.newCellRenderer(groupedColumnDef, params);
      } else if (groupColumnRendererClass && groupColumnRendererClass.source == userComponentFactory_1.ComponentSource.DEFAULT && utils_1._.get(groupedColumnDef, 'cellRendererParams.innerRenderer', null)) {
        // EDGE CASE - THIS COMES FROM A COLUMN WHICH HAS BEEN GROUPED DYNAMICALLY, THAT HAS AS RENDERER 'group'
        // AND HAS A INNER CELL RENDERER
        cellRendererPromise = this.userComponentFactory.newInnerCellRenderer(groupedColumnDef.cellRendererParams, params);
      } else {
        // This forces the retrieval of the default plain cellRenderer that just renders the values.
        cellRendererPromise = this.userComponentFactory.newCellRenderer({}, params);
      }
    }

    if (cellRendererPromise != null) {
      cellRendererPromise.then(function (rendererToUse) {
        if (rendererToUse == null) {
          _this.eValue.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
          return;
        }

        utils_1._.bindCellRendererToHtmlElement(cellRendererPromise, _this.eValue);
      });
    } else {
      this.eValue.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
    }

    return cellRendererPromise;
  };

  GroupCellRenderer.prototype.useFullWidth = function (params) {
    var cellRendererPromise = this.userComponentFactory.newFullWidthGroupRowInnerCellRenderer(params);

    if (cellRendererPromise != null) {
      utils_1._.bindCellRendererToHtmlElement(cellRendererPromise, this.eValue);
    } else {
      this.eValue.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
    }

    return cellRendererPromise;
  };

  GroupCellRenderer.prototype.addChildCount = function () {
    // only include the child count if it's included, eg if user doing custom aggregation,
    // then this could be left out, or set to -1, ie no child count
    if (this.params.suppressCount) {
      return;
    }

    this.addDestroyableEventListener(this.displayedGroup, rowNode_1.RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, this.updateChildCount.bind(this)); // filtering changes the child count, so need to cater for it

    this.updateChildCount();
  };

  GroupCellRenderer.prototype.updateChildCount = function () {
    var allChildrenCount = this.displayedGroup.allChildrenCount;
    this.eChildCount.innerHTML = allChildrenCount >= 0 ? "(" + allChildrenCount + ")" : "";
  };

  GroupCellRenderer.prototype.createLeafCell = function () {
    if (utils_1._.exists(this.params.value)) {
      this.eValue.innerHTML = this.params.valueFormatted ? this.params.valueFormatted : this.params.value;
    }
  };

  GroupCellRenderer.prototype.isUserWantsSelected = function () {
    var paramsCheckbox = this.params.checkbox;

    if (typeof paramsCheckbox === 'function') {
      return paramsCheckbox(this.params);
    } else {
      return paramsCheckbox === true;
    }
  };

  GroupCellRenderer.prototype.addCheckboxIfNeeded = function () {
    var rowNode = this.displayedGroup;
    var checkboxNeeded = this.isUserWantsSelected() // footers cannot be selected
    && !rowNode.footer // pinned rows cannot be selected
    && !rowNode.rowPinned // details cannot be selected
    && !rowNode.detail;

    if (checkboxNeeded) {
      var cbSelectionComponent_1 = new checkboxSelectionComponent_1.CheckboxSelectionComponent();
      this.getContext().wireBean(cbSelectionComponent_1);
      cbSelectionComponent_1.init({
        rowNode: rowNode,
        column: this.params.column
      });
      this.eCheckbox.appendChild(cbSelectionComponent_1.getGui());
      this.addDestroyFunc(function () {
        return cbSelectionComponent_1.destroy();
      });
    }

    utils_1._.addOrRemoveCssClass(this.eCheckbox, 'ag-invisible', !checkboxNeeded);
  };

  GroupCellRenderer.prototype.addExpandAndContract = function () {
    var params = this.params;
    var eGroupCell = params.eGridCell;

    var eExpandedIcon = utils_1._.createIconNoSpan('groupExpanded', this.gridOptionsWrapper, null);

    var eContractedIcon = utils_1._.createIconNoSpan('groupContracted', this.gridOptionsWrapper, null);

    this.eExpanded.appendChild(eExpandedIcon);
    this.eContracted.appendChild(eContractedIcon);
    this.addDestroyableEventListener(this.eExpanded, 'click', this.onExpandClicked.bind(this));
    this.addDestroyableEventListener(this.eContracted, 'click', this.onExpandClicked.bind(this)); // expand / contract as the user hits enter

    this.addDestroyableEventListener(eGroupCell, 'keydown', this.onKeyDown.bind(this), {
      capture: true
    });
    this.addDestroyableEventListener(params.node, rowNode_1.RowNode.EVENT_EXPANDED_CHANGED, this.showExpandAndContractIcons.bind(this));
    this.showExpandAndContractIcons(); // because we don't show the expand / contract when there are no children, we need to check every time
    // the number of children change.

    this.addDestroyableEventListener(this.displayedGroup, rowNode_1.RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, this.onAllChildrenCountChanged.bind(this)); // if editing groups, then double click is to start editing

    if (!this.gridOptionsWrapper.isEnableGroupEdit() && this.isExpandable() && !params.suppressDoubleClickExpand) {
      this.addDestroyableEventListener(eGroupCell, 'dblclick', this.onCellDblClicked.bind(this));
    }
  };

  GroupCellRenderer.prototype.onAllChildrenCountChanged = function () {
    // maybe if no children now, we should hide the expand / contract icons
    this.showExpandAndContractIcons(); // if we have no children, this impacts the indent

    this.setIndent();
  };

  GroupCellRenderer.prototype.onKeyDown = function (event) {
    if (!event.defaultPrevented && utils_1._.isKeyPressed(event, constants_1.Constants.KEY_ENTER)) {
      var cellEditable = this.params.column.isCellEditable(this.params.node);

      if (cellEditable) {
        return;
      }

      event.preventDefault();
      this.onExpandOrContract();
    }
  };

  GroupCellRenderer.prototype.setupDragOpenParents = function () {
    var column = this.params.column;
    var rowNode = this.params.node;

    if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {
      this.draggedFromHideOpenParents = false;
    } else if (!rowNode.hasChildren()) {
      // if we are here, and we are not a group, then we must of been dragged down,
      // as otherwise the cell would be blank, and if cell is blank, this method is never called.
      this.draggedFromHideOpenParents = true;
    } else {
      var rowGroupColumn = rowNode.rowGroupColumn; // if the displayGroup column for this col matches the rowGroupColumn we grouped by for this node,
      // then nothing was dragged down

      this.draggedFromHideOpenParents = !column.isRowGroupDisplayed(rowGroupColumn.getId());
    }

    if (this.draggedFromHideOpenParents) {
      var pointer = rowNode.parent;

      while (true) {
        if (utils_1._.missing(pointer)) {
          break;
        }

        if (pointer.rowGroupColumn && column.isRowGroupDisplayed(pointer.rowGroupColumn.getId())) {
          this.displayedGroup = pointer;
          break;
        }

        pointer = pointer.parent;
      }
    } // if we didn't find a displayed group, set it to the row node


    if (utils_1._.missing(this.displayedGroup)) {
      this.displayedGroup = rowNode;
    }
  };

  GroupCellRenderer.prototype.onExpandClicked = function (mouseEvent) {
    if (utils_1._.isStopPropagationForAgGrid(mouseEvent)) {
      return;
    } // so if we expand a node, it does not also get selected.


    utils_1._.stopPropagationForAgGrid(mouseEvent);

    this.onExpandOrContract();
  };

  GroupCellRenderer.prototype.onCellDblClicked = function (mouseEvent) {
    if (utils_1._.isStopPropagationForAgGrid(mouseEvent)) {
      return;
    } // we want to avoid acting on double click events on the expand / contract icon,
    // as that icons already has expand / collapse functionality on it. otherwise if
    // the icon was double clicked, we would get 'click', 'click', 'dblclick' which
    // is open->close->open, however double click should be open->close only.


    var targetIsExpandIcon = utils_1._.isElementInEventPath(this.eExpanded, mouseEvent) || utils_1._.isElementInEventPath(this.eContracted, mouseEvent);

    if (!targetIsExpandIcon) {
      this.onExpandOrContract();
    }
  };

  GroupCellRenderer.prototype.onExpandOrContract = function () {
    // must use the displayedGroup, so if data was dragged down, we expand the parent, not this row
    var rowNode = this.displayedGroup;
    rowNode.setExpanded(!rowNode.expanded);
  };

  GroupCellRenderer.prototype.isExpandable = function () {
    var rowNode = this.params.node;
    var reducedLeafNode = this.columnController.isPivotMode() && rowNode.leafGroup;
    return this.draggedFromHideOpenParents || rowNode.isExpandable() && !rowNode.footer && !reducedLeafNode;
  };

  GroupCellRenderer.prototype.showExpandAndContractIcons = function () {
    var rowNode = this.params.node;

    if (this.isExpandable()) {
      // if expandable, show one based on expand state.
      // if we were dragged down, means our parent is always expanded
      var expanded = this.draggedFromHideOpenParents ? true : rowNode.expanded;

      utils_1._.setVisible(this.eContracted, !expanded);

      utils_1._.setVisible(this.eExpanded, expanded);
    } else {
      // it not expandable, show neither
      utils_1._.setVisible(this.eExpanded, false);

      utils_1._.setVisible(this.eContracted, false);
    }

    var displayedGroup = this.displayedGroup; // compensation padding for leaf nodes, so there is blank space instead of the expand icon

    var pivotModeAndLeafGroup = this.columnController.isPivotMode() && displayedGroup.leafGroup;
    var notExpandable = !displayedGroup.isExpandable();
    var addLeafIndentClass = displayedGroup.footer || notExpandable || pivotModeAndLeafGroup;
    this.addOrRemoveCssClass('ag-row-group-leaf-indent', addLeafIndentClass);
  };

  GroupCellRenderer.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    if (this.innerCellRenderer && this.innerCellRenderer.destroy) {
      this.innerCellRenderer.destroy();
    }
  };

  GroupCellRenderer.prototype.refresh = function () {
    return false;
  };

  GroupCellRenderer.TEMPLATE = '<span>' + '<span class="ag-group-expanded" ref="eExpanded"></span>' + '<span class="ag-group-contracted" ref="eContracted"></span>' + '<span class="ag-group-checkbox ag-invisible" ref="eCheckbox"></span>' + '<span class="ag-group-value" ref="eValue"></span>' + '<span class="ag-group-child-count" ref="eChildCount"></span>' + '</span>';

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], GroupCellRenderer.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('expressionService'), __metadata("design:type", expressionService_1.ExpressionService)], GroupCellRenderer.prototype, "expressionService", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], GroupCellRenderer.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('valueFormatterService'), __metadata("design:type", valueFormatterService_1.ValueFormatterService)], GroupCellRenderer.prototype, "valueFormatterService", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], GroupCellRenderer.prototype, "columnController", void 0);

  __decorate([context_1.Autowired('mouseEventService'), __metadata("design:type", mouseEventService_1.MouseEventService)], GroupCellRenderer.prototype, "mouseEventService", void 0);

  __decorate([context_1.Autowired('userComponentFactory'), __metadata("design:type", userComponentFactory_1.UserComponentFactory)], GroupCellRenderer.prototype, "userComponentFactory", void 0);

  __decorate([componentAnnotations_1.RefSelector('eExpanded'), __metadata("design:type", HTMLElement)], GroupCellRenderer.prototype, "eExpanded", void 0);

  __decorate([componentAnnotations_1.RefSelector('eContracted'), __metadata("design:type", HTMLElement)], GroupCellRenderer.prototype, "eContracted", void 0);

  __decorate([componentAnnotations_1.RefSelector('eCheckbox'), __metadata("design:type", HTMLElement)], GroupCellRenderer.prototype, "eCheckbox", void 0);

  __decorate([componentAnnotations_1.RefSelector('eValue'), __metadata("design:type", HTMLElement)], GroupCellRenderer.prototype, "eValue", void 0);

  __decorate([componentAnnotations_1.RefSelector('eChildCount'), __metadata("design:type", HTMLElement)], GroupCellRenderer.prototype, "eChildCount", void 0);

  return GroupCellRenderer;
}(component_1.Component);

exports.GroupCellRenderer = GroupCellRenderer;

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var textCellEditor_1 = __webpack_require__(148);

var context_1 = __webpack_require__(2);

var dateFilter_1 = __webpack_require__(149);

var headerComp_1 = __webpack_require__(293);

var headerGroupComp_1 = __webpack_require__(294);

var floatingFilter_1 = __webpack_require__(193);

var groupCellRenderer_1 = __webpack_require__(146);

var animateShowChangeCellRenderer_1 = __webpack_require__(145);

var animateSlideCellRenderer_1 = __webpack_require__(144);

var loadingCellRenderer_1 = __webpack_require__(295);

var selectCellEditor_1 = __webpack_require__(150);

var popupTextCellEditor_1 = __webpack_require__(194);

var popupSelectCellEditor_1 = __webpack_require__(195);

var largeTextCellEditor_1 = __webpack_require__(196);

var textFilter_1 = __webpack_require__(197);

var numberFilter_1 = __webpack_require__(198);

var loadingOverlayComponent_1 = __webpack_require__(296);

var noRowsOverlayComponent_1 = __webpack_require__(297);

var tooltipComponent_1 = __webpack_require__(298);

var utils_1 = __webpack_require__(6);

var RegisteredComponentSource;

(function (RegisteredComponentSource) {
  RegisteredComponentSource[RegisteredComponentSource["DEFAULT"] = 0] = "DEFAULT";
  RegisteredComponentSource[RegisteredComponentSource["REGISTERED"] = 1] = "REGISTERED";
})(RegisteredComponentSource = exports.RegisteredComponentSource || (exports.RegisteredComponentSource = {}));

var UserComponentRegistry =
/** @class */
function () {
  function UserComponentRegistry() {
    this.agGridDefaults = {
      //date
      agDateInput: dateFilter_1.DefaultDateComponent,
      //header
      agColumnHeader: headerComp_1.HeaderComp,
      agColumnGroupHeader: headerGroupComp_1.HeaderGroupComp,
      //floating filters
      agSetColumnFloatingFilter: floatingFilter_1.SetFloatingFilterComp,
      agTextColumnFloatingFilter: floatingFilter_1.TextFloatingFilterComp,
      agNumberColumnFloatingFilter: floatingFilter_1.NumberFloatingFilterComp,
      agDateColumnFloatingFilter: floatingFilter_1.DateFloatingFilterComp,
      // renderers
      agAnimateShowChangeCellRenderer: animateShowChangeCellRenderer_1.AnimateShowChangeCellRenderer,
      agAnimateSlideCellRenderer: animateSlideCellRenderer_1.AnimateSlideCellRenderer,
      agGroupCellRenderer: groupCellRenderer_1.GroupCellRenderer,
      agGroupRowRenderer: groupCellRenderer_1.GroupCellRenderer,
      agLoadingCellRenderer: loadingCellRenderer_1.LoadingCellRenderer,
      //editors
      agCellEditor: textCellEditor_1.TextCellEditor,
      agTextCellEditor: textCellEditor_1.TextCellEditor,
      agSelectCellEditor: selectCellEditor_1.SelectCellEditor,
      agPopupTextCellEditor: popupTextCellEditor_1.PopupTextCellEditor,
      agPopupSelectCellEditor: popupSelectCellEditor_1.PopupSelectCellEditor,
      agLargeTextCellEditor: largeTextCellEditor_1.LargeTextCellEditor,
      //filter
      agTextColumnFilter: textFilter_1.TextFilter,
      agNumberColumnFilter: numberFilter_1.NumberFilter,
      agDateColumnFilter: dateFilter_1.DateFilter,
      //overlays
      agLoadingOverlay: loadingOverlayComponent_1.LoadingOverlayComponent,
      agNoRowsOverlay: noRowsOverlayComponent_1.NoRowsOverlayComponent,
      // tooltips
      agTooltipComponent: tooltipComponent_1.TooltipComponent
    };
    this.agDeprecatedNames = {
      set: {
        newComponentName: 'agSetColumnFilter',
        propertyHolder: 'filter'
      },
      text: {
        newComponentName: 'agTextColumnFilter',
        propertyHolder: 'filter'
      },
      number: {
        newComponentName: 'agNumberColumnFilter',
        propertyHolder: 'filter'
      },
      date: {
        newComponentName: 'agDateColumnFilter',
        propertyHolder: 'filter'
      },
      group: {
        newComponentName: 'agGroupCellRenderer',
        propertyHolder: 'cellRenderer'
      },
      animateShowChange: {
        newComponentName: 'agAnimateShowChangeCellRenderer',
        propertyHolder: 'cellRenderer'
      },
      animateSlide: {
        newComponentName: 'agAnimateSlideCellRenderer',
        propertyHolder: 'cellRenderer'
      },
      select: {
        newComponentName: 'agSelectCellEditor',
        propertyHolder: 'cellEditor'
      },
      largeText: {
        newComponentName: 'agLargeTextCellEditor',
        propertyHolder: 'cellEditor'
      },
      popupSelect: {
        newComponentName: 'agPopupSelectCellEditor',
        propertyHolder: 'cellEditor'
      },
      popupText: {
        newComponentName: 'agPopupTextCellEditor',
        propertyHolder: 'cellEditor'
      },
      richSelect: {
        newComponentName: 'agRichSelectCellEditor',
        propertyHolder: 'cellEditor'
      },
      headerComponent: {
        newComponentName: 'agColumnHeader',
        propertyHolder: 'headerComponent'
      }
    };
    this.jsComponents = {};
    this.frameworkComponents = {};
  }

  UserComponentRegistry.prototype.init = function () {
    var _this = this;

    var enterpriseDefaultComponents = this.context.getEnterpriseDefaultComponents();

    if (enterpriseDefaultComponents) {
      utils_1._.forEach(enterpriseDefaultComponents, function (config) {
        _this.registerDefaultComponent(config.componentName, config.theClass);
      });
    }

    if (this.gridOptions.components != null) {
      Object.keys(this.gridOptions.components).forEach(function (it) {
        _this.registerComponent(it, _this.gridOptions.components[it]);
      });
    }

    if (this.gridOptions.frameworkComponents != null) {
      Object.keys(this.gridOptions.frameworkComponents).forEach(function (it) {
        _this.registerFwComponent(it, _this.gridOptions.frameworkComponents[it]);
      });
    }
  };

  UserComponentRegistry.prototype.registerDefaultComponent = function (rawName, component) {
    var name = this.translateIfDeprecated(rawName);

    if (this.agGridDefaults[name]) {
      console.error("Trying to overwrite a default component. You should call registerComponent");
      return;
    }

    this.agGridDefaults[name] = component;
  };

  UserComponentRegistry.prototype.registerComponent = function (rawName, component) {
    var name = this.translateIfDeprecated(rawName);

    if (this.frameworkComponents[name]) {
      console.error("Trying to register a component that you have already registered for frameworks: " + name);
      return;
    }

    this.jsComponents[name] = component;
  };
  /**
   * B the business interface (ie IHeader)
   * A the agGridComponent interface (ie IHeaderComp). The final object acceptable by ag-grid
   */


  UserComponentRegistry.prototype.registerFwComponent = function (rawName, component) {
    var name = this.translateIfDeprecated(rawName);

    if (this.jsComponents[name]) {
      console.error("Trying to register a component that you have already registered for plain javascript: " + name);
      return;
    }

    this.frameworkComponents[name] = component;
  };
  /**
   * B the business interface (ie IHeader)
   * A the agGridComponent interface (ie IHeaderComp). The final object acceptable by ag-grid
   */


  UserComponentRegistry.prototype.retrieve = function (rawName) {
    var name = this.translateIfDeprecated(rawName);

    if (this.frameworkComponents[name]) {
      return {
        componentFromFramework: true,
        component: this.frameworkComponents[name],
        source: RegisteredComponentSource.REGISTERED
      };
    }

    if (this.jsComponents[name]) {
      return {
        componentFromFramework: false,
        component: this.jsComponents[name],
        source: RegisteredComponentSource.REGISTERED
      };
    }

    if (this.agGridDefaults[name]) {
      return this.agGridDefaults[name] ? {
        componentFromFramework: false,
        component: this.agGridDefaults[name],
        source: RegisteredComponentSource.DEFAULT
      } : null;
    }

    if (Object.keys(this.agGridDefaults).indexOf(name) < 0) {
      console.warn("ag-grid: Looking for component [" + name + "] but it wasn't found.");
    }

    return null;
  };

  UserComponentRegistry.prototype.translateIfDeprecated = function (raw) {
    var deprecatedInfo = this.agDeprecatedNames[raw];

    if (deprecatedInfo != null) {
      utils_1._.doOnce(function () {
        console.warn("ag-grid. Since v15.0 component names have been renamed to be namespaced. You should rename " + deprecatedInfo.propertyHolder + ":" + raw + " to " + deprecatedInfo.propertyHolder + ":" + deprecatedInfo.newComponentName);
      }, 'DEPRECATE_COMPONENT_' + raw);

      return deprecatedInfo.newComponentName;
    }

    return raw;
  };

  __decorate([context_1.Autowired('gridOptions'), __metadata("design:type", Object)], UserComponentRegistry.prototype, "gridOptions", void 0);

  __decorate([context_1.Autowired('context'), __metadata("design:type", context_1.Context)], UserComponentRegistry.prototype, "context", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], UserComponentRegistry.prototype, "init", null);

  UserComponentRegistry = __decorate([context_1.Bean('userComponentRegistry')], UserComponentRegistry);
  return UserComponentRegistry;
}();

exports.UserComponentRegistry = UserComponentRegistry;

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var constants_1 = __webpack_require__(19);

var popupComponent_1 = __webpack_require__(72);

var utils_1 = __webpack_require__(6);

var TextCellEditor =
/** @class */
function (_super) {
  __extends(TextCellEditor, _super);

  function TextCellEditor() {
    var _this = _super.call(this, TextCellEditor.TEMPLATE) || this;

    _this.eInput = _this.getGui().querySelector('input');
    return _this;
  }

  TextCellEditor.prototype.init = function (params) {
    this.params = params;
    var eInput = this.eInput;
    var startValue; // cellStartedEdit is only false if we are doing fullRow editing

    if (params.cellStartedEdit) {
      this.focusAfterAttached = true;
      var keyPressBackspaceOrDelete = params.keyPress === constants_1.Constants.KEY_BACKSPACE || params.keyPress === constants_1.Constants.KEY_DELETE;

      if (keyPressBackspaceOrDelete) {
        startValue = '';
      } else if (params.charPress) {
        startValue = params.charPress;
      } else {
        startValue = this.getStartValue(params);

        if (params.keyPress !== constants_1.Constants.KEY_F2) {
          this.highlightAllOnFocus = true;
        }
      }
    } else {
      this.focusAfterAttached = false;
      startValue = this.getStartValue(params);
    }

    if (utils_1._.exists(startValue)) {
      eInput.value = startValue;
    }

    this.addDestroyableEventListener(eInput, 'keydown', function (event) {
      var isNavigationKey = event.keyCode === constants_1.Constants.KEY_LEFT || event.keyCode === constants_1.Constants.KEY_RIGHT || event.keyCode === constants_1.Constants.KEY_UP || event.keyCode === constants_1.Constants.KEY_DOWN || event.keyCode === constants_1.Constants.KEY_PAGE_DOWN || event.keyCode === constants_1.Constants.KEY_PAGE_UP || event.keyCode === constants_1.Constants.KEY_PAGE_HOME || event.keyCode === constants_1.Constants.KEY_PAGE_END;

      if (isNavigationKey) {
        // this stops the grid from executing keyboard navigation
        event.stopPropagation(); // this stops the browser from scrolling up / down

        var pageUp = event.keyCode === constants_1.Constants.KEY_PAGE_UP;
        var pageDown = event.keyCode === constants_1.Constants.KEY_PAGE_DOWN;

        if (pageUp || pageDown) {
          event.preventDefault();
        }
      }
    });
  };

  TextCellEditor.prototype.afterGuiAttached = function () {
    if (!this.focusAfterAttached) {
      return;
    }

    var eInput = this.eInput;
    eInput.focus();

    if (this.highlightAllOnFocus) {
      eInput.select();
    } else {
      // when we started editing, we want the caret at the end, not the start.
      // this comes into play in two scenarios: a) when user hits F2 and b)
      // when user hits a printable character, then on IE (and only IE) the caret
      // was placed after the first character, thus 'apply' would end up as 'pplea'
      var length_1 = eInput.value ? eInput.value.length : 0;

      if (length_1 > 0) {
        eInput.setSelectionRange(length_1, length_1);
      }
    }
  }; // gets called when tabbing trough cells and in full row edit mode


  TextCellEditor.prototype.focusIn = function () {
    var eInput = this.eInput;
    eInput.focus();
    eInput.select();
  };

  TextCellEditor.prototype.getValue = function () {
    var eInput = this.eInput;
    return this.params.parseValue(eInput.value);
  };

  TextCellEditor.prototype.getStartValue = function (params) {
    var formatValue = params.useFormatter || params.column.getColDef().refData;
    return formatValue ? params.formatValue(params.value) : params.value;
  };

  TextCellEditor.prototype.isPopup = function () {
    return false;
  };

  TextCellEditor.TEMPLATE = '<div class="ag-input-text-wrapper"><input class="ag-cell-edit-input" type="text"/></div>';
  return TextCellEditor;
}(popupComponent_1.PopupComponent);

exports.TextCellEditor = TextCellEditor;

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var component_1 = __webpack_require__(22);

var componentAnnotations_1 = __webpack_require__(25);

var baseFilter_1 = __webpack_require__(109);

var context_1 = __webpack_require__(2);

var userComponentFactory_1 = __webpack_require__(35);

var utils_1 = __webpack_require__(6);

var DateFilter =
/** @class */
function (_super) {
  __extends(DateFilter, _super);

  function DateFilter() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  DateFilter.prototype.modelFromFloatingFilter = function (from) {
    return {
      dateFrom: from,
      dateTo: this.getDateTo(),
      type: this.selectedFilter,
      filterType: 'date'
    };
  };

  DateFilter.prototype.getApplicableFilterTypes = function () {
    return [baseFilter_1.BaseFilter.EQUALS, baseFilter_1.BaseFilter.GREATER_THAN, baseFilter_1.BaseFilter.LESS_THAN, baseFilter_1.BaseFilter.NOT_EQUAL, baseFilter_1.BaseFilter.IN_RANGE];
  };

  DateFilter.prototype.bodyTemplate = function (type) {
    var fromPanelId = type == baseFilter_1.FilterConditionType.MAIN ? "filterDateFromPanel" : "filterDateFromConditionPanel";
    var toPanelId = type == baseFilter_1.FilterConditionType.MAIN ? "filterDateToPanel" : "filterDateToConditionPanel";
    return "<div class=\"ag-filter-body\">\n                    <div class=\"ag-filter-date-from\" id=\"" + fromPanelId + "\">\n                    </div>\n                    <div class=\"ag-filter-date-to\" id=\"" + toPanelId + "\">\n                    </div>\n                </div>";
  };

  DateFilter.prototype.initialiseFilterBodyUi = function (type) {
    _super.prototype.initialiseFilterBodyUi.call(this, type);

    this.createComponents(type);

    if (type === baseFilter_1.FilterConditionType.MAIN) {
      this.setDateFrom_date(this.dateFrom, baseFilter_1.FilterConditionType.MAIN);
      this.setDateTo_date(this.dateTo, baseFilter_1.FilterConditionType.MAIN);
      this.setFilterType(this.selectedFilter, baseFilter_1.FilterConditionType.MAIN);
    } else {
      this.setDateFrom_date(this.dateFromCondition, baseFilter_1.FilterConditionType.CONDITION);
      this.setDateTo_date(this.dateToCondition, baseFilter_1.FilterConditionType.CONDITION);
      this.setFilterType(this.selectedFilterCondition, baseFilter_1.FilterConditionType.CONDITION);
    }
  };

  DateFilter.prototype.createComponents = function (type) {
    var _this = this;

    var dateComponentParams = {
      onDateChanged: function onDateChanged() {
        _this.onDateChanged(type);
      },
      filterParams: this.filterParams
    };
    this.userComponentFactory.newDateComponent(dateComponentParams).then(function (dateToComponent) {
      if (type === baseFilter_1.FilterConditionType.MAIN) {
        _this.dateToComponent = dateToComponent;
      } else {
        _this.dateToConditionComponent = dateToComponent;
      }

      var dateToElement = dateToComponent.getGui();

      if (type === baseFilter_1.FilterConditionType.MAIN) {
        _this.eDateToPanel.appendChild(dateToElement);

        if (_this.dateToComponent.afterGuiAttached) {
          _this.dateToComponent.afterGuiAttached();
        }
      } else {
        _this.eDateToConditionPanel.appendChild(dateToElement);

        if (_this.dateToConditionComponent.afterGuiAttached) {
          _this.dateToConditionComponent.afterGuiAttached();
        }
      }
    });
    this.userComponentFactory.newDateComponent(dateComponentParams).then(function (dateComponent) {
      if (type === baseFilter_1.FilterConditionType.MAIN) {
        _this.dateFromComponent = dateComponent;
      } else {
        _this.dateFromConditionComponent = dateComponent;
      }

      var dateFromElement = dateComponent.getGui();

      if (type === baseFilter_1.FilterConditionType.MAIN) {
        _this.eDateFromPanel.appendChild(dateFromElement);

        if (_this.dateFromComponent.afterGuiAttached) {
          _this.dateFromComponent.afterGuiAttached();
        }
      } else {
        _this.eDateFromConditionPanel.appendChild(dateFromElement);

        if (_this.dateFromConditionComponent.afterGuiAttached) {
          _this.dateFromConditionComponent.afterGuiAttached();
        }
      }
    });
  };

  DateFilter.prototype.onDateChanged = function (type) {
    if (type === baseFilter_1.FilterConditionType.MAIN) {
      this.dateFrom = DateFilter.removeTimezone(this.dateFromComponent.getDate());
      this.dateTo = DateFilter.removeTimezone(this.dateToComponent.getDate());
    } else {
      this.dateFromCondition = DateFilter.removeTimezone(this.dateFromComponent.getDate());
      this.dateToCondition = DateFilter.removeTimezone(this.dateToComponent.getDate());
    }

    this.onFilterChanged();
  };

  DateFilter.prototype.refreshFilterBodyUi = function (type) {
    var panel;
    var filterType;

    if (type === baseFilter_1.FilterConditionType.MAIN) {
      panel = this.eDateToPanel;
      filterType = this.selectedFilter;
    } else {
      panel = this.eDateToConditionPanel;
      filterType = this.selectedFilterCondition;
    } // show / hide in-range filter


    if (panel) {
      var visible = filterType === baseFilter_1.BaseFilter.IN_RANGE;

      utils_1._.setVisible(panel, visible);
    } // show / hide filter input, i.e. if custom filter has 'hideFilterInputField = true' or an empty filter


    var filterInput = type === baseFilter_1.FilterConditionType.MAIN ? this.eDateFromPanel : this.eDateFromConditionPanel;

    if (filterInput) {
      var showFilterInput = !this.doesFilterHaveHiddenInput(filterType) && filterType !== baseFilter_1.BaseFilter.EMPTY;

      utils_1._.setVisible(filterInput, showFilterInput);
    }
  };

  DateFilter.prototype.comparator = function () {
    return this.filterParams.comparator ? this.filterParams.comparator : this.defaultComparator.bind(this);
  };

  DateFilter.prototype.defaultComparator = function (filterDate, cellValue) {
    //The default comparator assumes that the cellValue is a date
    var cellAsDate = cellValue;

    if (cellAsDate < filterDate) {
      return -1;
    }

    if (cellAsDate > filterDate) {
      return 1;
    }

    return cellValue != null ? 0 : -1;
  };

  DateFilter.prototype.serialize = function (type) {
    var dateToComponent = type === baseFilter_1.FilterConditionType.MAIN ? this.dateToComponent : this.dateToConditionComponent;
    var dateFromComponent = type === baseFilter_1.FilterConditionType.MAIN ? this.dateFromComponent : this.dateFromConditionComponent;
    var filterType = type === baseFilter_1.FilterConditionType.MAIN ? this.selectedFilter : this.selectedFilterCondition;
    return {
      dateTo: utils_1._.serializeDateToYyyyMmDd(dateToComponent.getDate(), "-"),
      dateFrom: utils_1._.serializeDateToYyyyMmDd(dateFromComponent.getDate(), "-"),
      type: filterType ? filterType : this.defaultFilter,
      filterType: 'date'
    };
  };

  DateFilter.prototype.filterValues = function (type) {
    if (type === baseFilter_1.FilterConditionType.MAIN) {
      if (!this.dateFromComponent) {
        return null;
      }

      return this.selectedFilter !== baseFilter_1.BaseFilter.IN_RANGE ? this.dateFromComponent.getDate() : [this.dateFromComponent.getDate(), this.dateToComponent.getDate()];
    }

    if (!this.dateFromConditionComponent) {
      return null;
    }

    return this.selectedFilterCondition !== baseFilter_1.BaseFilter.IN_RANGE ? this.dateFromConditionComponent.getDate() : [this.dateFromConditionComponent.getDate(), this.dateToConditionComponent.getDate()];
  }; // not used by ag-Grid, but exposed as part of the filter API for the client if they want it


  DateFilter.prototype.getDateFrom = function () {
    return utils_1._.serializeDateToYyyyMmDd(this.dateFromComponent.getDate(), "-");
  }; // not used by ag-Grid, but exposed as part of the filter API for the client if they want it


  DateFilter.prototype.getDateTo = function () {
    return utils_1._.serializeDateToYyyyMmDd(this.dateToComponent.getDate(), "-");
  }; // not used by ag-Grid, but exposed as part of the filter API for the client if they want it


  DateFilter.prototype.getFilterType = function () {
    return this.selectedFilter;
  };

  DateFilter.prototype.setDateFrom = function (date, type) {
    var parsedDate = utils_1._.parseYyyyMmDdToDate(date, "-");

    this.setDateFrom_date(parsedDate, type);
  };

  DateFilter.prototype.setDateFrom_date = function (parsedDate, type) {
    if (type === baseFilter_1.FilterConditionType.MAIN) {
      this.dateFrom = parsedDate;

      if (!this.dateFromComponent) {
        return;
      }

      this.dateFromComponent.setDate(this.dateFrom);
    } else {
      this.dateFromCondition = parsedDate;

      if (!this.dateFromConditionComponent) {
        return;
      }

      this.dateFromConditionComponent.setDate(this.dateFromCondition);
    }
  };

  DateFilter.prototype.setDateTo = function (date, type) {
    var parsedDate = utils_1._.parseYyyyMmDdToDate(date, "-");

    this.setDateTo_date(parsedDate, type);
  };

  DateFilter.prototype.setDateTo_date = function (parsedDate, type) {
    if (type === baseFilter_1.FilterConditionType.MAIN) {
      this.dateTo = parsedDate;

      if (!this.dateToComponent) {
        return;
      }

      this.dateToComponent.setDate(this.dateTo);
    } else {
      this.dateToCondition = parsedDate;

      if (!this.dateToConditionComponent) {
        return;
      }

      this.dateToConditionComponent.setDate(this.dateToCondition);
    }
  };

  DateFilter.prototype.resetState = function (resetConditionFilterOnly) {
    if (resetConditionFilterOnly === void 0) {
      resetConditionFilterOnly = false;
    }

    if (!resetConditionFilterOnly) {
      this.setDateFrom(null, baseFilter_1.FilterConditionType.MAIN);
      this.setDateTo(null, baseFilter_1.FilterConditionType.MAIN);
      this.setFilterType(this.defaultFilter, baseFilter_1.FilterConditionType.MAIN);
    }

    this.setFilterType(this.defaultFilter, baseFilter_1.FilterConditionType.CONDITION);
    this.setDateFrom(null, baseFilter_1.FilterConditionType.CONDITION);
    this.setDateTo(null, baseFilter_1.FilterConditionType.CONDITION);
  };

  DateFilter.prototype.parse = function (model, type) {
    this.setDateFrom(model.dateFrom, type);
    this.setDateTo(model.dateTo, type);
    this.setFilterType(model.type, type);
  };

  DateFilter.prototype.setType = function (filterType, type) {
    this.setFilterType(filterType, type);
  };

  DateFilter.removeTimezone = function (from) {
    if (!from) {
      return null;
    }

    return new Date(from.getFullYear(), from.getMonth(), from.getDate());
  };

  __decorate([context_1.Autowired('userComponentFactory'), __metadata("design:type", userComponentFactory_1.UserComponentFactory)], DateFilter.prototype, "userComponentFactory", void 0);

  __decorate([componentAnnotations_1.QuerySelector('#filterDateFromPanel'), __metadata("design:type", HTMLElement)], DateFilter.prototype, "eDateFromPanel", void 0);

  __decorate([componentAnnotations_1.QuerySelector('#filterDateFromConditionPanel'), __metadata("design:type", HTMLElement)], DateFilter.prototype, "eDateFromConditionPanel", void 0);

  __decorate([componentAnnotations_1.QuerySelector('#filterDateToPanel'), __metadata("design:type", HTMLElement)], DateFilter.prototype, "eDateToPanel", void 0);

  __decorate([componentAnnotations_1.QuerySelector('#filterDateToConditionPanel'), __metadata("design:type", HTMLElement)], DateFilter.prototype, "eDateToConditionPanel", void 0);

  return DateFilter;
}(baseFilter_1.ScalarBaseFilter);

exports.DateFilter = DateFilter;

var DefaultDateComponent =
/** @class */
function (_super) {
  __extends(DefaultDateComponent, _super);

  function DefaultDateComponent() {
    return _super.call(this, "<div class=\"ag-input-text-wrapper\"><input class=\"ag-filter-filter\" type=\"text\" placeholder=\"yyyy-mm-dd\"></div>") || this;
  }

  DefaultDateComponent.prototype.init = function (params) {
    this.eDateInput = this.getGui().querySelector('input');

    if (utils_1._.isBrowserChrome() || params.filterParams.browserDatePicker) {
      if (utils_1._.isBrowserIE()) {
        console.warn('ag-grid: browserDatePicker is specified to true, but it is not supported in IE 11, reverting to plain text date picker');
      } else {
        this.eDateInput.type = 'date';
      }
    }

    this.listener = params.onDateChanged;
    this.addGuiEventListener('input', this.listener);
  };

  DefaultDateComponent.prototype.getDate = function () {
    return utils_1._.parseYyyyMmDdToDate(this.eDateInput.value, "-");
  };

  DefaultDateComponent.prototype.setDate = function (date) {
    this.eDateInput.value = utils_1._.serializeDateToYyyyMmDd(date, "-");
  };

  return DefaultDateComponent;
}(component_1.Component);

exports.DefaultDateComponent = DefaultDateComponent;

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var popupComponent_1 = __webpack_require__(72);

var constants_1 = __webpack_require__(19);

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var valueFormatterService_1 = __webpack_require__(90);

var utils_1 = __webpack_require__(6);

var SelectCellEditor =
/** @class */
function (_super) {
  __extends(SelectCellEditor, _super);

  function SelectCellEditor() {
    var _this = _super.call(this, '<div class="ag-cell-edit-input"><select class="ag-cell-edit-input"/></div>') || this;

    _this.eSelect = _this.getGui().querySelector('select');
    return _this;
  }

  SelectCellEditor.prototype.init = function (params) {
    var _this = this;

    this.focusAfterAttached = params.cellStartedEdit;

    if (utils_1._.missing(params.values)) {
      console.warn('ag-Grid: no values found for select cellEditor');
      return;
    }

    params.values.forEach(function (value) {
      var option = document.createElement('option');
      option.value = value;

      var valueFormatted = _this.valueFormatterService.formatValue(params.column, null, null, value);

      var valueFormattedExits = valueFormatted !== null && valueFormatted !== undefined;
      option.text = valueFormattedExits ? valueFormatted : value;

      if (params.value === value) {
        option.selected = true;
      }

      _this.eSelect.appendChild(option);
    }); // we don't want to add this if full row editing, otherwise selecting will stop the
    // full row editing.

    if (!this.gridOptionsWrapper.isFullRowEdit()) {
      this.addDestroyableEventListener(this.eSelect, 'change', function () {
        return params.stopEditing();
      });
    }

    this.addDestroyableEventListener(this.eSelect, 'keydown', function (event) {
      var isNavigationKey = event.keyCode === constants_1.Constants.KEY_UP || event.keyCode === constants_1.Constants.KEY_DOWN;

      if (isNavigationKey) {
        event.stopPropagation();
      }
    });
    this.addDestroyableEventListener(this.eSelect, 'mousedown', function (event) {
      event.stopPropagation();
    });
  };

  SelectCellEditor.prototype.afterGuiAttached = function () {
    if (this.focusAfterAttached) {
      this.eSelect.focus();
    }
  };

  SelectCellEditor.prototype.focusIn = function () {
    this.eSelect.focus();
  };

  SelectCellEditor.prototype.getValue = function () {
    return this.eSelect.value;
  };

  SelectCellEditor.prototype.isPopup = function () {
    return false;
  };

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], SelectCellEditor.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('valueFormatterService'), __metadata("design:type", valueFormatterService_1.ValueFormatterService)], SelectCellEditor.prototype, "valueFormatterService", void 0);

  return SelectCellEditor;
}(popupComponent_1.PopupComponent);

exports.SelectCellEditor = SelectCellEditor;

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var componentMetadataProvider_1 = __webpack_require__(152);

var utils_1 = __webpack_require__(6);

var AgComponentUtils =
/** @class */
function () {
  function AgComponentUtils() {}

  AgComponentUtils.prototype.adaptFunction = function (propertyName, hardcodedJsFunction, componentFromFramework, source) {
    if (hardcodedJsFunction == null) {
      return {
        component: null,
        componentFromFramework: componentFromFramework,
        source: source,
        paramsFromSelector: null
      };
    }

    var metadata = this.componentMetadataProvider.retrieve(propertyName);

    if (metadata && metadata.functionAdapter) {
      return {
        componentFromFramework: componentFromFramework,
        component: metadata.functionAdapter(hardcodedJsFunction),
        source: source,
        paramsFromSelector: null
      };
    }

    return null;
  };

  AgComponentUtils.prototype.adaptCellRendererFunction = function (callback) {
    var Adapter =
    /** @class */
    function () {
      function Adapter() {}

      Adapter.prototype.refresh = function (params) {
        return false;
      };

      Adapter.prototype.getGui = function () {
        var callbackResult = callback(this.params);
        var type = typeof callbackResult;

        if (type === 'string' || type === 'number' || type === 'boolean') {
          return utils_1._.loadTemplate('<span>' + callbackResult + '</span>');
        } else {
          return callbackResult;
        }
      };

      Adapter.prototype.init = function (params) {
        this.params = params;
      };

      return Adapter;
    }();

    return Adapter;
  };

  AgComponentUtils.prototype.doesImplementIComponent = function (candidate) {
    if (!candidate) {
      return false;
    }

    return candidate.prototype && 'getGui' in candidate.prototype;
  };

  __decorate([context_1.Autowired("componentMetadataProvider"), __metadata("design:type", componentMetadataProvider_1.ComponentMetadataProvider)], AgComponentUtils.prototype, "componentMetadataProvider", void 0);

  AgComponentUtils = __decorate([context_1.Bean("agComponentUtils")], AgComponentUtils);
  return AgComponentUtils;
}();

exports.AgComponentUtils = AgComponentUtils;

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var agComponentUtils_1 = __webpack_require__(151);

var ComponentMetadataProvider =
/** @class */
function () {
  function ComponentMetadataProvider() {}

  ComponentMetadataProvider.prototype.postConstruct = function () {
    this.componentMetaData = {
      dateComponent: {
        mandatoryMethodList: ['getDate', 'setDate'],
        optionalMethodList: ['afterGuiAttached']
      },
      detailCellRenderer: {
        mandatoryMethodList: [],
        optionalMethodList: []
      },
      headerComponent: {
        mandatoryMethodList: [],
        optionalMethodList: []
      },
      headerGroupComponent: {
        mandatoryMethodList: [],
        optionalMethodList: []
      },
      loadingCellRenderer: {
        mandatoryMethodList: [],
        optionalMethodList: []
      },
      loadingOverlayComponent: {
        mandatoryMethodList: [],
        optionalMethodList: []
      },
      noRowsOverlayComponent: {
        mandatoryMethodList: [],
        optionalMethodList: []
      },
      floatingFilterComponent: {
        mandatoryMethodList: ['onParentModelChanged'],
        optionalMethodList: ['afterGuiAttached']
      },
      floatingFilterWrapperComponent: {
        mandatoryMethodList: [],
        optionalMethodList: []
      },
      cellRenderer: {
        mandatoryMethodList: [],
        optionalMethodList: ['refresh', 'afterGuiAttached'],
        functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
      },
      cellEditor: {
        mandatoryMethodList: ['getValue'],
        optionalMethodList: ['isPopup', 'isCancelBeforeStart', 'isCancelAfterEnd', 'focusIn', 'focusOut', 'afterGuiAttached']
      },
      innerRenderer: {
        mandatoryMethodList: [],
        optionalMethodList: ['afterGuiAttached'],
        functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
      },
      fullWidthCellRenderer: {
        mandatoryMethodList: [],
        optionalMethodList: ['afterGuiAttached'],
        functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
      },
      pinnedRowCellRenderer: {
        mandatoryMethodList: [],
        optionalMethodList: ['refresh', 'afterGuiAttached'],
        functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
      },
      groupRowInnerRenderer: {
        mandatoryMethodList: [],
        optionalMethodList: ['afterGuiAttached'],
        functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
      },
      groupRowRenderer: {
        mandatoryMethodList: [],
        optionalMethodList: ['afterGuiAttached'],
        functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
      },
      filter: {
        mandatoryMethodList: ['isFilterActive', 'doesFilterPass', 'getModel', 'setModel'],
        optionalMethodList: ['afterGuiAttached', 'onNewRowsLoaded', 'getModelAsString', 'onFloatingFilterChanged']
      },
      filterComponent: {
        mandatoryMethodList: ['isFilterActive', 'doesFilterPass', 'getModel', 'setModel'],
        optionalMethodList: ['afterGuiAttached', 'onNewRowsLoaded', 'getModelAsString', 'onFloatingFilterChanged']
      },
      statusPanel: {
        mandatoryMethodList: [],
        optionalMethodList: ['afterGuiAttached']
      },
      toolPanel: {
        mandatoryMethodList: [],
        optionalMethodList: ['refresh', 'afterGuiAttached']
      },
      tooltipComponent: {
        mandatoryMethodList: [],
        optionalMethodList: []
      }
    };
  };

  ComponentMetadataProvider.prototype.retrieve = function (name) {
    return this.componentMetaData[name];
  };

  __decorate([context_1.Autowired("agComponentUtils"), __metadata("design:type", agComponentUtils_1.AgComponentUtils)], ComponentMetadataProvider.prototype, "agComponentUtils", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], ComponentMetadataProvider.prototype, "postConstruct", null);

  ComponentMetadataProvider = __decorate([context_1.Bean("componentMetadataProvider")], ComponentMetadataProvider);
  return ComponentMetadataProvider;
}();

exports.ComponentMetadataProvider = ComponentMetadataProvider;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var expressionService_1 = __webpack_require__(43);

var StylingService =
/** @class */
function () {
  function StylingService() {}

  StylingService.prototype.processAllCellClasses = function (colDef, params, onApplicableClass, onNotApplicableClass) {
    this.processClassRules(colDef.cellClassRules, params, onApplicableClass, onNotApplicableClass);
    this.processStaticCellClasses(colDef, params, onApplicableClass);
  };

  StylingService.prototype.processClassRules = function (classRules, params, onApplicableClass, onNotApplicableClass) {
    if (typeof classRules === 'object' && classRules !== null) {
      var classNames = Object.keys(classRules);

      for (var i = 0; i < classNames.length; i++) {
        var className = classNames[i];
        var rule = classRules[className];
        var resultOfRule = void 0;

        if (typeof rule === 'string') {
          resultOfRule = this.expressionService.evaluate(rule, params);
        } else if (typeof rule === 'function') {
          resultOfRule = rule(params);
        }

        if (resultOfRule) {
          onApplicableClass(className);
        } else if (onNotApplicableClass) {
          onNotApplicableClass(className);
        }
      }
    }
  };

  StylingService.prototype.processStaticCellClasses = function (colDef, params, onApplicableClass) {
    var cellClass = colDef.cellClass;

    if (cellClass) {
      var classOrClasses = void 0;

      if (typeof colDef.cellClass === 'function') {
        var cellClassFunc = colDef.cellClass;
        classOrClasses = cellClassFunc(params);
      } else {
        classOrClasses = colDef.cellClass;
      }

      if (typeof classOrClasses === 'string') {
        onApplicableClass(classOrClasses);
      } else if (Array.isArray(classOrClasses)) {
        classOrClasses.forEach(function (cssClassItem) {
          onApplicableClass(cssClassItem);
        });
      }
    }
  };

  __decorate([context_1.Autowired('expressionService'), __metadata("design:type", expressionService_1.ExpressionService)], StylingService.prototype, "expressionService", void 0);

  StylingService = __decorate([context_1.Bean('stylingService')], StylingService);
  return StylingService;
}();

exports.StylingService = StylingService;

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var popupService_1 = __webpack_require__(54);

var userComponentFactory_1 = __webpack_require__(35);

var gridOptionsWrapper_1 = __webpack_require__(7);

var columnApi_1 = __webpack_require__(21);

var gridApi_1 = __webpack_require__(20);

var utils_1 = __webpack_require__(6);

var TooltipManager =
/** @class */
function () {
  function TooltipManager() {
    this.DEFAULT_HIDE_TOOLTIP_TIMEOUT = 10000;
    this.MOUSEOUT_HIDE_TOOLTIP_TIMEOUT = 1000;
    this.MOUSEOVER_SHOW_TOOLTIP_TIMEOUT = 2000;
    this.HIDE_SHOW_ONLY = true;
    this.showTimeoutId = 0;
    this.hideTimeoutId = 0; // map of compId to [tooltip component, close function]

    this.registeredComponents = {};
  }

  TooltipManager.prototype.registerTooltip = function (targetCmp) {
    var _this = this;

    var el = targetCmp.getGui();
    var id = targetCmp.getCompId();
    targetCmp.addDestroyableEventListener(el, 'mouseover', function (e) {
      return _this.processMouseOver(e, targetCmp);
    });
    targetCmp.addDestroyableEventListener(el, 'mousemove', function (e) {
      return _this.processMouseMove(e);
    });
    targetCmp.addDestroyableEventListener(el, 'mousedown', this.hideTooltip.bind(this));
    targetCmp.addDestroyableEventListener(el, 'mouseout', this.processMouseOut.bind(this));
    this.registeredComponents[id] = {
      tooltipComp: undefined,
      destroyFunc: undefined
    };
    targetCmp.addDestroyFunc(function () {
      return _this.unregisterTooltip(targetCmp);
    });
  };

  TooltipManager.prototype.unregisterTooltip = function (targetCmp) {
    var id = targetCmp.getCompId(); // hide the tooltip if it's being displayed while unregistering the component

    if (this.activeComponent === targetCmp) {
      this.hideTooltip();
    }

    delete this.registeredComponents[id];
  };

  TooltipManager.prototype.processMouseOver = function (e, targetCmp) {
    var delay = this.MOUSEOVER_SHOW_TOOLTIP_TIMEOUT;

    if (this.activeComponent) {
      // lastHoveredComponent will be the activeComponent when we are hovering
      // a component with many child elements like the grid header
      if (this.lastHoveredComponent === this.activeComponent) {
        return;
      }

      delay = 200;
    } else if (this.showTimeoutId && this.lastHoveredComponent === targetCmp) {
      return;
    }

    this.clearTimers(this.HIDE_SHOW_ONLY); // lastHoveredComponent will be the targetCmp when a click hid the tooltip
    // and the lastHoveredComponent has many child elements

    if (this.lastHoveredComponent === targetCmp) {
      return;
    }

    this.lastHoveredComponent = targetCmp;
    this.lastMouseEvent = e;
    this.showTimeoutId = window.setTimeout(this.showTooltip.bind(this), delay, e);
  };

  TooltipManager.prototype.processMouseOut = function (e) {
    var activeComponent = this.activeComponent;
    var relatedTarget = e.relatedTarget;

    if (!activeComponent) {
      if (this.lastHoveredComponent) {
        var containsElement = this.lastHoveredComponent.getGui().contains(relatedTarget);

        if (this.showTimeoutId && containsElement) {
          // if we are hovering within a component with multiple child elements before
          // the tooltip has been displayed, we should cancel this event
          return;
        } else if (!containsElement) {
          // when a click hides the tooltip we need to reset the lastHoveredComponent
          // otherwise the tooltip won't appear until another registered component is hovered.
          this.lastHoveredComponent = undefined;
        }
      }

      this.clearTimers();
      return;
    } // the mouseout was called from within the activeComponent so we do nothing


    if (activeComponent.getGui().contains(relatedTarget)) {
      return;
    }

    var registeredComponent = this.registeredComponents[activeComponent.getCompId()];

    utils_1._.addCssClass(registeredComponent.tooltipComp.getGui(), 'ag-tooltip-hiding');

    this.lastHoveredComponent = undefined;
    this.clearTimers();
    this.hideTimeoutId = window.setTimeout(this.hideTooltip.bind(this), this.MOUSEOUT_HIDE_TOOLTIP_TIMEOUT);
  };

  TooltipManager.prototype.processMouseMove = function (e) {
    // there is a delay from the time we mouseOver a component and the time the
    // tooltip is displayed, so we need to track mousemove to be able to correctly
    // position the tooltip when showTooltip is called.
    this.lastMouseEvent = e;
  };

  TooltipManager.prototype.showTooltip = function (e) {
    var targetCmp = this.lastHoveredComponent;
    var cell = targetCmp;
    var registeredComponent = this.registeredComponents[targetCmp.getCompId()];
    this.hideTooltip();
    var params = {
      api: this.gridApi,
      columnApi: this.columnApi,
      colDef: targetCmp.getComponentHolder(),
      column: cell.getColumn && cell.getColumn(),
      context: this.gridOptionsWrapper.getContext(),
      rowIndex: cell.getGridCell && cell.getGridCell().rowIndex,
      value: targetCmp.getTooltipText()
    };
    this.createTooltipComponent(params, registeredComponent, e);
  };

  TooltipManager.prototype.createTooltipComponent = function (params, cmp, e) {
    var _this = this;

    this.userComponentFactory.newTooltipComponent(params).then(function (tooltipComp) {
      // if the component was unregistered while creating
      // the tooltip (async) we should return undefined here.
      if (!cmp) {
        return;
      }

      cmp.tooltipComp = tooltipComp;
      var eGui = tooltipComp.getGui();

      var closeFnc = _this.popupService.addPopup(false, eGui, false);

      cmp.destroyFunc = function () {
        closeFnc();

        if (tooltipComp.destroy) {
          tooltipComp.destroy();
        }
      };

      _this.popupService.positionPopupUnderMouseEvent({
        type: 'tooltip',
        mouseEvent: _this.lastMouseEvent,
        ePopup: eGui,
        nudgeY: 18
      });

      _this.activeComponent = _this.lastHoveredComponent;
      _this.hideTimeoutId = window.setTimeout(_this.hideTooltip.bind(_this), _this.DEFAULT_HIDE_TOOLTIP_TIMEOUT);
    });
  };

  TooltipManager.prototype.hideTooltip = function () {
    var activeComponent = this.activeComponent;
    this.clearTimers();

    if (!activeComponent) {
      return;
    }

    var id = activeComponent.getCompId();
    var registeredComponent = this.registeredComponents[id];
    this.activeComponent = undefined;

    if (!registeredComponent) {
      return;
    }

    if (registeredComponent.destroyFunc) {
      registeredComponent.destroyFunc();
    }

    this.clearRegisteredComponent(registeredComponent);
  };

  TooltipManager.prototype.clearRegisteredComponent = function (registeredComponent) {
    delete registeredComponent.destroyFunc;
    delete registeredComponent.tooltipComp;
  };

  TooltipManager.prototype.clearTimers = function (showOnly) {
    if (showOnly === void 0) {
      showOnly = false;
    }

    if (this.hideTimeoutId && !showOnly) {
      window.clearTimeout(this.hideTimeoutId);
      this.hideTimeoutId = 0;
    }

    if (this.showTimeoutId) {
      window.clearTimeout(this.showTimeoutId);
      this.showTimeoutId = 0;
    }
  };

  __decorate([context_1.Autowired('popupService'), __metadata("design:type", popupService_1.PopupService)], TooltipManager.prototype, "popupService", void 0);

  __decorate([context_1.Autowired('userComponentFactory'), __metadata("design:type", userComponentFactory_1.UserComponentFactory)], TooltipManager.prototype, "userComponentFactory", void 0);

  __decorate([context_1.Autowired('columnApi'), __metadata("design:type", columnApi_1.ColumnApi)], TooltipManager.prototype, "columnApi", void 0);

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], TooltipManager.prototype, "gridApi", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], TooltipManager.prototype, "gridOptionsWrapper", void 0);

  TooltipManager = __decorate([context_1.Bean('tooltipManager')], TooltipManager);
  return TooltipManager;
}();

exports.TooltipManager = TooltipManager;

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});

var utils_1 = __webpack_require__(6);

var CssClassApplier =
/** @class */
function () {
  function CssClassApplier() {}

  CssClassApplier.addHeaderClassesFromColDef = function (abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup) {
    if (utils_1._.missing(abstractColDef)) {
      return;
    }

    this.addColumnClassesFromCollDef(abstractColDef.headerClass, abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup);
  };

  CssClassApplier.addToolPanelClassesFromColDef = function (abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup) {
    if (utils_1._.missing(abstractColDef)) {
      return;
    }

    this.addColumnClassesFromCollDef(abstractColDef.toolPanelClass, abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup);
  };

  CssClassApplier.addColumnClassesFromCollDef = function (classesOrFunc, abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup) {
    if (utils_1._.missing(classesOrFunc)) {
      return;
    }

    var classToUse;

    if (typeof classesOrFunc === 'function') {
      var params = {
        // bad naming, as colDef here can be a group or a column,
        // however most people won't appreciate the difference,
        // so keeping it as colDef to avoid confusion.
        colDef: abstractColDef,
        column: column,
        columnGroup: columnGroup,
        context: gridOptionsWrapper.getContext(),
        api: gridOptionsWrapper.getApi()
      };
      var headerClassFunc = classesOrFunc;
      classToUse = headerClassFunc(params);
    } else {
      classToUse = classesOrFunc;
    }

    if (typeof classToUse === 'string') {
      utils_1._.addCssClass(eHeaderCell, classToUse);
    } else if (Array.isArray(classToUse)) {
      classToUse.forEach(function (cssClassItem) {
        utils_1._.addCssClass(eHeaderCell, cssClassItem);
      });
    }
  };

  return CssClassApplier;
}();

exports.CssClassApplier = CssClassApplier;

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var beanStub_1 = __webpack_require__(32);

var context_1 = __webpack_require__(2);

var columnHoverService_1 = __webpack_require__(93);

var HoverFeature =
/** @class */
function (_super) {
  __extends(HoverFeature, _super);

  function HoverFeature(columns, element) {
    var _this = _super.call(this) || this;

    _this.columns = columns;

    _this.addMouseHoverListeners(element);

    return _this;
  }

  HoverFeature.prototype.addMouseHoverListeners = function (element) {
    this.addDestroyableEventListener(element, 'mouseout', this.onMouseOut.bind(this));
    this.addDestroyableEventListener(element, 'mouseover', this.onMouseOver.bind(this));
  };

  HoverFeature.prototype.onMouseOut = function () {
    this.columnHoverService.clearMouseOver();
  };

  HoverFeature.prototype.onMouseOver = function () {
    this.columnHoverService.setMouseOver(this.columns);
  };

  __decorate([context_1.Autowired('columnHoverService'), __metadata("design:type", columnHoverService_1.ColumnHoverService)], HoverFeature.prototype, "columnHoverService", void 0);

  return HoverFeature;
}(beanStub_1.BeanStub);

exports.HoverFeature = HoverFeature;

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
}); // class returns unique instance id's for columns.
// eg, the following calls (in this order) will result in:
//
// getInstanceIdForKey('country') => 0
// getInstanceIdForKey('country') => 1
// getInstanceIdForKey('country') => 2
// getInstanceIdForKey('country') => 3
// getInstanceIdForKey('age') => 0
// getInstanceIdForKey('age') => 1
// getInstanceIdForKey('country') => 4

var GroupInstanceIdCreator =
/** @class */
function () {
  function GroupInstanceIdCreator() {
    // this map contains keys to numbers, so we remember what the last call was
    this.existingIds = {};
  }

  GroupInstanceIdCreator.prototype.getInstanceIdForKey = function (key) {
    var lastResult = this.existingIds[key];
    var result;

    if (typeof lastResult !== 'number') {
      // first time this key
      result = 0;
    } else {
      result = lastResult + 1;
    }

    this.existingIds[key] = result;
    return result;
  };

  return GroupInstanceIdCreator;
}();

exports.GroupInstanceIdCreator = GroupInstanceIdCreator;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var Downloader =
/** @class */
function () {
  function Downloader() {}

  Downloader.prototype.download = function (fileName, content) {
    if (window.navigator.msSaveOrOpenBlob) {
      window.navigator.msSaveOrOpenBlob(content, fileName);
    } else {
      // Chrome
      var element = document.createElement("a");
      var url = window.URL.createObjectURL(content);
      element.setAttribute("href", url);
      element.setAttribute("download", fileName);
      element.style.display = "none";
      document.body.appendChild(element);
      element.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(element);
    }
  };

  Downloader = __decorate([context_1.Bean("downloader")], Downloader);
  return Downloader;
}();

exports.Downloader = Downloader;

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var beans_1 = __webpack_require__(60);

var cellComp_1 = __webpack_require__(86);

var columnController_1 = __webpack_require__(17);

var utils_1 = __webpack_require__(6);

var AutoHeightCalculator =
/** @class */
function () {
  function AutoHeightCalculator() {}

  AutoHeightCalculator.prototype.registerGridComp = function (gridPanel) {
    this.gridPanel = gridPanel;
  };

  AutoHeightCalculator.prototype.getPreferredHeightForRow = function (rowNode) {
    var _this = this;

    if (!this.eDummyContainer) {
      this.eDummyContainer = document.createElement('div'); // so any styles on row also get applied in dummy, otherwise
      // the content in dummy may differ to the real

      utils_1._.addCssClass(this.eDummyContainer, 'ag-row ag-row-no-focus');
    } // we put the dummy into the body container, so it will inherit all the
    // css styles that the real cells are inheriting


    var eBodyContainer = this.gridPanel.getCenterContainer();
    eBodyContainer.appendChild(this.eDummyContainer);
    var cellComps = [];
    var autoRowHeightCols = this.columnController.getAllAutoRowHeightCols();
    var visibleAutoRowHeightCols = autoRowHeightCols.filter(function (col) {
      return col.isVisible();
    });
    visibleAutoRowHeightCols.forEach(function (col) {
      var cellComp = new cellComp_1.CellComp(_this.$scope, _this.beans, col, rowNode, null, true, false);
      cellComp.setParentRow(_this.eDummyContainer);
      cellComps.push(cellComp);
    });
    var template = cellComps.map(function (cellComp) {
      return cellComp.getCreateTemplate();
    }).join(' ');
    this.eDummyContainer.innerHTML = template; // this gets any cellComps that are using components to put the components in

    cellComps.forEach(function (cellComp) {
      return cellComp.afterAttached();
    }); // we should be able to just take the height of the row at this point, however
    // the row isn't expanding to cover the cell heights, i don't know why, i couldn't
    // figure it out so instead looking at the individual cells instead

    var maxCellHeight = 0;

    for (var i = 0; i < this.eDummyContainer.children.length; i++) {
      var child = this.eDummyContainer.children[i];

      if (child.offsetHeight > maxCellHeight) {
        maxCellHeight = child.offsetHeight;
      }
    } // we are finished with the dummy container, so get rid of it


    eBodyContainer.removeChild(this.eDummyContainer);
    cellComps.forEach(function (cellComp) {
      // dunno why we need to detach first, doing it here to be consistent with code in RowComp
      cellComp.detach();
      cellComp.destroy();
    }); // in case anything left over from last time

    utils_1._.clearElement(this.eDummyContainer);

    return maxCellHeight;
  };

  __decorate([context_1.Autowired('beans'), __metadata("design:type", beans_1.Beans)], AutoHeightCalculator.prototype, "beans", void 0);

  __decorate([context_1.Autowired("$scope"), __metadata("design:type", Object)], AutoHeightCalculator.prototype, "$scope", void 0);

  __decorate([context_1.Autowired("columnController"), __metadata("design:type", columnController_1.ColumnController)], AutoHeightCalculator.prototype, "columnController", void 0);

  AutoHeightCalculator = __decorate([context_1.Bean('autoHeightCalculator')], AutoHeightCalculator);
  return AutoHeightCalculator;
}();

exports.AutoHeightCalculator = AutoHeightCalculator;

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});

var gridOptionsWrapper_1 = __webpack_require__(7);

var selectionController_1 = __webpack_require__(44);

var columnApi_1 = __webpack_require__(21);

var columnController_1 = __webpack_require__(17);

var rowRenderer_1 = __webpack_require__(37);

var headerRootComp_1 = __webpack_require__(161);

var filterManager_1 = __webpack_require__(40);

var valueService_1 = __webpack_require__(38);

var eventService_1 = __webpack_require__(14);

var gridPanel_1 = __webpack_require__(162);

var gridApi_1 = __webpack_require__(20);

var columnFactory_1 = __webpack_require__(84);

var displayedGroupCreator_1 = __webpack_require__(104);

var expressionService_1 = __webpack_require__(43);

var templateService_1 = __webpack_require__(105);

var popupService_1 = __webpack_require__(54);

var logger_1 = __webpack_require__(30);

var columnUtils_1 = __webpack_require__(69);

var autoWidthCalculator_1 = __webpack_require__(85);

var horizontalResizeService_1 = __webpack_require__(111);

var context_1 = __webpack_require__(2);

var csvCreator_1 = __webpack_require__(138);

var gridCore_1 = __webpack_require__(212);

var standardMenu_1 = __webpack_require__(213);

var dragAndDropService_1 = __webpack_require__(34);

var dragService_1 = __webpack_require__(87);

var sortController_1 = __webpack_require__(49);

var focusedCellController_1 = __webpack_require__(48);

var mouseEventService_1 = __webpack_require__(91);

var cellNavigationService_1 = __webpack_require__(143);

var filterStage_1 = __webpack_require__(214);

var sortStage_1 = __webpack_require__(216);

var flattenStage_1 = __webpack_require__(218);

var events_1 = __webpack_require__(18);

var infiniteRowModel_1 = __webpack_require__(219);

var clientSideRowModel_1 = __webpack_require__(221);

var cellRendererFactory_1 = __webpack_require__(108);

var valueFormatterService_1 = __webpack_require__(90);

var agCheckbox_1 = __webpack_require__(113);

var baseFrameworkFactory_1 = __webpack_require__(223);

var scrollVisibleService_1 = __webpack_require__(89);

var downloader_1 = __webpack_require__(158);

var xmlFactory_1 = __webpack_require__(224);

var gridSerializer_1 = __webpack_require__(103);

var stylingService_1 = __webpack_require__(153);

var columnHoverService_1 = __webpack_require__(93);

var columnAnimationService_1 = __webpack_require__(107);

var sortService_1 = __webpack_require__(217);

var filterService_1 = __webpack_require__(215);

var autoGroupColService_1 = __webpack_require__(200);

var paginationProxy_1 = __webpack_require__(53);

var immutableService_1 = __webpack_require__(201);

var constants_1 = __webpack_require__(19);

var valueCache_1 = __webpack_require__(71);

var changeDetectionService_1 = __webpack_require__(308);

var alignedGridsService_1 = __webpack_require__(114);

var pinnedRowModel_1 = __webpack_require__(59);

var userComponentFactory_1 = __webpack_require__(35);

var userComponentRegistry_1 = __webpack_require__(147);

var agComponentUtils_1 = __webpack_require__(151);

var componentMetadataProvider_1 = __webpack_require__(152);

var beans_1 = __webpack_require__(60);

var environment_1 = __webpack_require__(88);

var animationFrameService_1 = __webpack_require__(73);

var navigationService_1 = __webpack_require__(210);

var maxDivHeightScaler_1 = __webpack_require__(110);

var selectableService_1 = __webpack_require__(164);

var autoHeightCalculator_1 = __webpack_require__(159);

var paginationComp_1 = __webpack_require__(309);

var resizeObserverService_1 = __webpack_require__(163);

var zipContainer_1 = __webpack_require__(225);

var utils_1 = __webpack_require__(6);

var tooltipManager_1 = __webpack_require__(154);

var overlayWrapperComponent_1 = __webpack_require__(211);

var Grid =
/** @class */
function () {
  function Grid(eGridDiv, gridOptions, params) {
    if (!eGridDiv) {
      console.error('ag-Grid: no div element provided to the grid');
    }

    if (!gridOptions) {
      console.error('ag-Grid: no gridOptions provided to the grid');
    }

    this.gridOptions = gridOptions;
    var rowModelClass = this.getRowModelClass(gridOptions);

    var enterprise = utils_1._.exists(Grid.enterpriseBeans);

    var frameworkFactory = params ? params.frameworkFactory : null;

    if (utils_1._.missing(frameworkFactory)) {
      frameworkFactory = new baseFrameworkFactory_1.BaseFrameworkFactory();
    }

    var overrideBeans = [];

    if (Grid.enterpriseBeans) {
      overrideBeans = overrideBeans.concat(Grid.enterpriseBeans);
    }

    if (Grid.frameworkBeans) {
      overrideBeans = overrideBeans.concat(Grid.frameworkBeans);
    }

    var seed = {
      enterprise: enterprise,
      gridOptions: gridOptions,
      eGridDiv: eGridDiv,
      $scope: params ? params.$scope : null,
      $compile: params ? params.$compile : null,
      quickFilterOnScope: params ? params.quickFilterOnScope : null,
      globalEventListener: params ? params.globalEventListener : null,
      frameworkFactory: frameworkFactory
    };

    if (params && params.seedBeanInstances) {
      utils_1._.assign(seed, params.seedBeanInstances);
    }

    var components = [{
      componentName: 'AgCheckbox',
      theClass: agCheckbox_1.AgCheckbox
    }, {
      componentName: 'AgGridComp',
      theClass: gridPanel_1.GridPanel
    }, {
      componentName: 'AgHeaderRoot',
      theClass: headerRootComp_1.HeaderRootComp
    }, {
      componentName: 'AgPagination',
      theClass: paginationComp_1.PaginationComp
    }, {
      componentName: 'AgOverlayWrapper',
      theClass: overlayWrapperComponent_1.OverlayWrapperComponent
    }];

    if (Grid.enterpriseComponents) {
      components = components.concat(Grid.enterpriseComponents);
    }

    var contextParams = {
      overrideBeans: overrideBeans,
      seed: seed,
      //Careful with the order of the beans here, there are dependencies between them that need to be kept
      beans: [// this should only contain SERVICES, it should NEVER contain COMPONENTS
      rowModelClass, beans_1.Beans, paginationProxy_1.PaginationAutoPageSizeService, gridApi_1.GridApi, userComponentRegistry_1.UserComponentRegistry, agComponentUtils_1.AgComponentUtils, componentMetadataProvider_1.ComponentMetadataProvider, resizeObserverService_1.ResizeObserverService, userComponentRegistry_1.UserComponentRegistry, userComponentFactory_1.UserComponentFactory, maxDivHeightScaler_1.MaxDivHeightScaler, autoHeightCalculator_1.AutoHeightCalculator, cellRendererFactory_1.CellRendererFactory, horizontalResizeService_1.HorizontalResizeService, pinnedRowModel_1.PinnedRowModel, dragService_1.DragService, displayedGroupCreator_1.DisplayedGroupCreator, eventService_1.EventService, gridOptionsWrapper_1.GridOptionsWrapper, popupService_1.PopupService, selectionController_1.SelectionController, filterManager_1.FilterManager, columnController_1.ColumnController, paginationProxy_1.PaginationProxy, rowRenderer_1.RowRenderer, expressionService_1.ExpressionService, columnFactory_1.ColumnFactory, csvCreator_1.CsvCreator, downloader_1.Downloader, xmlFactory_1.XmlFactory, gridSerializer_1.GridSerializer, templateService_1.TemplateService, alignedGridsService_1.AlignedGridsService, navigationService_1.NavigationService, popupService_1.PopupService, valueCache_1.ValueCache, valueService_1.ValueService, logger_1.LoggerFactory, columnUtils_1.ColumnUtils, autoWidthCalculator_1.AutoWidthCalculator, standardMenu_1.StandardMenuFactory, dragAndDropService_1.DragAndDropService, columnApi_1.ColumnApi, focusedCellController_1.FocusedCellController, mouseEventService_1.MouseEventService, environment_1.Environment, cellNavigationService_1.CellNavigationService, filterStage_1.FilterStage, sortStage_1.SortStage, flattenStage_1.FlattenStage, filterService_1.FilterService, valueFormatterService_1.ValueFormatterService, stylingService_1.StylingService, scrollVisibleService_1.ScrollVisibleService, sortController_1.SortController, columnHoverService_1.ColumnHoverService, columnAnimationService_1.ColumnAnimationService, sortService_1.SortService, selectableService_1.SelectableService, autoGroupColService_1.AutoGroupColService, immutableService_1.ImmutableService, changeDetectionService_1.ChangeDetectionService, animationFrameService_1.AnimationFrameService, tooltipManager_1.TooltipManager, zipContainer_1.ZipContainer],
      components: components,
      enterpriseDefaultComponents: Grid.enterpriseDefaultComponents,
      debug: !!gridOptions.debug
    };
    this.logger = new logger_1.Logger('ag-Grid', function () {
      return gridOptions.debug;
    });
    var contextLogger = new logger_1.Logger('Context', function () {
      return contextParams.debug;
    });
    this.context = new context_1.Context(contextParams, contextLogger);
    var gridCore = new gridCore_1.GridCore();
    this.context.wireBean(gridCore);
    this.setColumnsAndData();
    this.dispatchGridReadyEvent(gridOptions);
    this.logger.log("initialised successfully, enterprise = " + enterprise);
  }

  Grid.setEnterpriseBeans = function (enterpriseBeans, rowModelClasses) {
    this.enterpriseBeans = enterpriseBeans; // the enterprise can inject additional row models. this is how it injects the viewportRowModel

    utils_1._.iterateObject(rowModelClasses, function (key, value) {
      return Grid.RowModelClasses[key] = value;
    });
  };

  Grid.setEnterpriseComponents = function (components) {
    this.enterpriseComponents = components;
  };

  Grid.setFrameworkBeans = function (frameworkBeans) {
    this.frameworkBeans = frameworkBeans;
  };

  Grid.setEnterpriseDefaultComponents = function (enterpriseDefaultComponents) {
    this.enterpriseDefaultComponents = enterpriseDefaultComponents;
  };

  Grid.prototype.setColumnsAndData = function () {
    var gridOptionsWrapper = this.context.getBean('gridOptionsWrapper');
    var columnController = this.context.getBean('columnController');
    var rowModel = this.context.getBean('rowModel');
    var columnDefs = gridOptionsWrapper.getColumnDefs();
    var rowData = gridOptionsWrapper.getRowData();

    var nothingToSet = utils_1._.missing(columnDefs) && utils_1._.missing(rowData);

    if (nothingToSet) {
      return;
    }

    if (utils_1._.exists(columnDefs)) {
      columnController.setColumnDefs(columnDefs, "gridInitializing");
    }

    if (utils_1._.exists(rowData) && rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
      var clientSideRowModel = rowModel;
      clientSideRowModel.setRowData(rowData);
    }
  };

  Grid.prototype.dispatchGridReadyEvent = function (gridOptions) {
    var eventService = this.context.getBean('eventService');
    var readyEvent = {
      type: events_1.Events.EVENT_GRID_READY,
      api: gridOptions.api,
      columnApi: gridOptions.columnApi
    };
    eventService.dispatchEvent(readyEvent);
  };

  Grid.prototype.getRowModelClass = function (gridOptions) {
    var rowModelType = gridOptions.rowModelType; //TODO: temporary measure before 'enterprise' is completely removed (similar handling in gridOptionsWrapper is also required)

    rowModelType = rowModelType === 'enterprise' ? constants_1.Constants.ROW_MODEL_TYPE_SERVER_SIDE : rowModelType;

    if (utils_1._.exists(rowModelType)) {
      var rowModelClass = Grid.RowModelClasses[rowModelType];

      if (utils_1._.exists(rowModelClass)) {
        return rowModelClass;
      } else {
        if (rowModelType === 'normal') {
          console.warn("ag-Grid: normal rowModel deprecated. Should now be called client side row model instead.");
          return clientSideRowModel_1.ClientSideRowModel;
        }

        console.error('ag-Grid: could not find matching row model for rowModelType ' + rowModelType);

        if (rowModelType === constants_1.Constants.ROW_MODEL_TYPE_VIEWPORT) {
          console.error('ag-Grid: rowModelType viewport is only available in ag-Grid Enterprise');
        }

        if (rowModelType === constants_1.Constants.ROW_MODEL_TYPE_SERVER_SIDE) {
          console.error('ag-Grid: rowModelType server side is only available in ag-Grid Enterprise');
        }
      }
    }

    return clientSideRowModel_1.ClientSideRowModel;
  };

  Grid.prototype.destroy = function () {
    this.gridOptions.api.destroy();
  }; // the default is ClientSideRowModel, which is also used for pagination.
  // the enterprise adds viewport to this list.


  Grid.RowModelClasses = {
    infinite: infiniteRowModel_1.InfiniteRowModel,
    clientSide: clientSideRowModel_1.ClientSideRowModel
  };
  return Grid;
}();

exports.Grid = Grid;

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var gridOptionsWrapper_1 = __webpack_require__(7);

var columnController_1 = __webpack_require__(17);

var column_1 = __webpack_require__(24);

var context_1 = __webpack_require__(2);

var headerContainer_1 = __webpack_require__(205);

var eventService_1 = __webpack_require__(14);

var events_1 = __webpack_require__(18);

var component_1 = __webpack_require__(22);

var componentAnnotations_1 = __webpack_require__(25);

var gridApi_1 = __webpack_require__(20);

var autoWidthCalculator_1 = __webpack_require__(85);

var constants_1 = __webpack_require__(19);

var utils_1 = __webpack_require__(6);

var HeaderRootComp =
/** @class */
function (_super) {
  __extends(HeaderRootComp, _super);

  function HeaderRootComp() {
    return _super.call(this, HeaderRootComp.TEMPLATE) || this;
  }

  HeaderRootComp.prototype.registerGridComp = function (gridPanel) {
    this.gridPanel = gridPanel;
    this.childContainers.forEach(function (c) {
      return c.registerGridComp(gridPanel);
    });
  };

  HeaderRootComp.prototype.postConstruct = function () {
    var _this = this;

    this.printLayout = this.gridOptionsWrapper.getDomLayout() === constants_1.Constants.DOM_LAYOUT_PRINT;
    this.gridApi.registerHeaderRootComp(this);
    this.autoWidthCalculator.registerHeaderRootComp(this);
    var centerContainer = new headerContainer_1.HeaderContainer(this.eHeaderContainer, this.eHeaderViewport, null);
    var pinnedLeftContainer = new headerContainer_1.HeaderContainer(this.ePinnedLeftHeader, null, column_1.Column.PINNED_LEFT);
    var pinnedRightContainer = new headerContainer_1.HeaderContainer(this.ePinnedRightHeader, null, column_1.Column.PINNED_RIGHT);
    this.childContainers = [centerContainer, pinnedLeftContainer, pinnedRightContainer];
    this.childContainers.forEach(function (container) {
      return _this.getContext().wireBean(container);
    }); // shotgun way to get labels to change, eg from sum(amount) to avg(amount)

    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_COLUMN_VALUE_CHANGED, this.refreshHeader.bind(this));
    this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_DOM_LAYOUT, this.onDomLayoutChanged.bind(this)); // for setting ag-pivot-on / ag-pivot-off CSS classes

    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onPivotModeChanged.bind(this));
    this.onPivotModeChanged();
    this.addPreventHeaderScroll();

    if (this.columnController.isReady()) {
      this.refreshHeader();
    }
  };

  HeaderRootComp.prototype.onDomLayoutChanged = function () {
    var newValue = this.gridOptionsWrapper.getDomLayout() === constants_1.Constants.DOM_LAYOUT_PRINT;

    if (this.printLayout !== newValue) {
      this.printLayout = newValue;
      this.refreshHeader();
    }
  };

  HeaderRootComp.prototype.setHorizontalScroll = function (offset) {
    this.eHeaderContainer.style.transform = "translateX(" + offset + "px)";
  };

  HeaderRootComp.prototype.forEachHeaderElement = function (callback) {
    this.childContainers.forEach(function (childContainer) {
      return childContainer.forEachHeaderElement(callback);
    });
  };

  HeaderRootComp.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this.childContainers.forEach(function (container) {
      return container.destroy();
    });
  };

  HeaderRootComp.prototype.refreshHeader = function () {
    this.childContainers.forEach(function (container) {
      return container.refresh();
    });
  };

  HeaderRootComp.prototype.onPivotModeChanged = function () {
    var pivotMode = this.columnController.isPivotMode();

    utils_1._.addOrRemoveCssClass(this.getGui(), 'ag-pivot-on', pivotMode);

    utils_1._.addOrRemoveCssClass(this.getGui(), 'ag-pivot-off', !pivotMode);
  };

  HeaderRootComp.prototype.setHeight = function (height) {
    var px = height + "px";
    this.getGui().style.height = px;
    this.getGui().style.minHeight = px;
  }; // if the user is in floating filter and hits tab a few times, the header can
  // end up scrolling to show items off the screen, leaving the grid and header
  // and the grid columns no longer in sync.


  HeaderRootComp.prototype.addPreventHeaderScroll = function () {
    var _this = this;

    this.addDestroyableEventListener(this.eHeaderViewport, 'scroll', function () {
      // if the header scrolls, the header will be out of sync. so we reset the
      // header scroll, and then scroll the body, which will in turn set the offset
      // on the header, giving the impression that the header scrolled as expected.
      var scrollLeft = _this.eHeaderViewport.scrollLeft;

      if (scrollLeft !== 0) {
        _this.gridPanel.scrollHorizontally(scrollLeft);

        _this.eHeaderViewport.scrollLeft = 0;
      }
    });
  };

  HeaderRootComp.prototype.setHeaderContainerWidth = function (width) {
    this.eHeaderContainer.style.width = width + "px";
  };

  HeaderRootComp.prototype.setLeftVisible = function (visible) {
    utils_1._.setVisible(this.ePinnedLeftHeader, visible);
  };

  HeaderRootComp.prototype.setRightVisible = function (visible) {
    utils_1._.setVisible(this.ePinnedRightHeader, visible);
  };

  HeaderRootComp.TEMPLATE = "<div class=\"ag-header\" role=\"row\">\n            <div class=\"ag-pinned-left-header\" ref=\"ePinnedLeftHeader\" role=\"presentation\"></div>\n            <div class=\"ag-header-viewport\" ref=\"eHeaderViewport\" role=\"presentation\">\n                <div class=\"ag-header-container\" ref=\"eHeaderContainer\" role=\"presentation\"></div>\n            </div>\n            <div class=\"ag-pinned-right-header\" ref=\"ePinnedRightHeader\" role=\"presentation\"></div>\n        </div>";

  __decorate([componentAnnotations_1.RefSelector('ePinnedLeftHeader'), __metadata("design:type", HTMLElement)], HeaderRootComp.prototype, "ePinnedLeftHeader", void 0);

  __decorate([componentAnnotations_1.RefSelector('ePinnedRightHeader'), __metadata("design:type", HTMLElement)], HeaderRootComp.prototype, "ePinnedRightHeader", void 0);

  __decorate([componentAnnotations_1.RefSelector('eHeaderContainer'), __metadata("design:type", HTMLElement)], HeaderRootComp.prototype, "eHeaderContainer", void 0);

  __decorate([componentAnnotations_1.RefSelector('eHeaderViewport'), __metadata("design:type", HTMLElement)], HeaderRootComp.prototype, "eHeaderViewport", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], HeaderRootComp.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], HeaderRootComp.prototype, "columnController", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], HeaderRootComp.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], HeaderRootComp.prototype, "gridApi", void 0);

  __decorate([context_1.Autowired('autoWidthCalculator'), __metadata("design:type", autoWidthCalculator_1.AutoWidthCalculator)], HeaderRootComp.prototype, "autoWidthCalculator", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], HeaderRootComp.prototype, "postConstruct", null);

  return HeaderRootComp;
}(component_1.Component);

exports.HeaderRootComp = HeaderRootComp;

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var gridOptionsWrapper_1 = __webpack_require__(7);

var columnController_1 = __webpack_require__(17);

var columnApi_1 = __webpack_require__(21);

var rowRenderer_1 = __webpack_require__(37);

var context_1 = __webpack_require__(2);

var eventService_1 = __webpack_require__(14);

var events_1 = __webpack_require__(18);

var dragService_1 = __webpack_require__(87);

var constants_1 = __webpack_require__(19);

var mouseEventService_1 = __webpack_require__(91);

var focusedCellController_1 = __webpack_require__(48);

var scrollVisibleService_1 = __webpack_require__(89);

var rowContainerComponent_1 = __webpack_require__(304);

var paginationProxy_1 = __webpack_require__(53);

var popupEditorWrapper_1 = __webpack_require__(142);

var alignedGridsService_1 = __webpack_require__(114);

var pinnedRowModel_1 = __webpack_require__(59);

var gridApi_1 = __webpack_require__(20);

var animationFrameService_1 = __webpack_require__(73);

var rowComp_1 = __webpack_require__(139);

var navigationService_1 = __webpack_require__(210);

var valueService_1 = __webpack_require__(38);

var touchListener_1 = __webpack_require__(92);

var dragAndDropService_1 = __webpack_require__(34);

var rowDragFeature_1 = __webpack_require__(305);

var maxDivHeightScaler_1 = __webpack_require__(110);

var overlayWrapperComponent_1 = __webpack_require__(211);

var component_1 = __webpack_require__(22);

var autoHeightCalculator_1 = __webpack_require__(159);

var columnAnimationService_1 = __webpack_require__(107);

var autoWidthCalculator_1 = __webpack_require__(85);

var beans_1 = __webpack_require__(60);

var componentAnnotations_1 = __webpack_require__(25);

var headerRootComp_1 = __webpack_require__(161);

var resizeObserverService_1 = __webpack_require__(163);

var utils_1 = __webpack_require__(6); // in the html below, it is important that there are no white space between some of the divs, as if there is white space,
// it won't render correctly in safari, as safari renders white space as a gap


var GRID_PANEL_NORMAL_TEMPLATE = "<div class=\"ag-root ag-unselectable\" role=\"grid\" unselectable=\"on\">\n        <ag-header-root ref=\"headerRoot\" unselectable=\"on\"></ag-header-root>\n        <div class=\"ag-floating-top\" ref=\"eTop\" role=\"presentation\" unselectable=\"on\">\n            <div class=\"ag-pinned-left-floating-top\" ref=\"eLeftTop\" role=\"presentation\" unselectable=\"on\"></div>\n            <div class=\"ag-floating-top-viewport\" ref=\"eTopViewport\" role=\"presentation\" unselectable=\"on\">\n                <div class=\"ag-floating-top-container\" ref=\"eTopContainer\" role=\"presentation\" unselectable=\"on\"></div>\n            </div>\n            <div class=\"ag-pinned-right-floating-top\" ref=\"eRightTop\" role=\"presentation\" unselectable=\"on\"></div>\n            <div class=\"ag-floating-top-full-width-container\" ref=\"eTopFullWidthContainer\" role=\"presentation\" unselectable=\"on\"></div>\n        </div>\n        <div class=\"ag-body-viewport\" ref=\"eBodyViewport\" role=\"presentation\" unselectable=\"on\">\n            <div class=\"ag-pinned-left-cols-container\" ref=\"eLeftContainer\" role=\"presentation\" unselectable=\"on\"></div>\n            <div class=\"ag-center-cols-clipper\" ref=\"eCenterColsClipper\">\n                <div class=\"ag-center-cols-viewport\" ref=\"eCenterViewport\" role=\"presentation\" unselectable=\"on\">\n                    <div class=\"ag-center-cols-container\" ref=\"eCenterContainer\" role=\"presentation\" unselectable=\"on\"></div>\n                </div>\n            </div>\n            <div class=\"ag-pinned-right-cols-container\" ref=\"eRightContainer\" role=\"presentation\" unselectable=\"on\"></div>\n            <div class=\"ag-full-width-container\" ref=\"eFullWidthContainer\" role=\"presentation\" unselectable=\"on\"></div>\n        </div>\n        <div class=\"ag-floating-bottom\" ref=\"eBottom\" role=\"presentation\" unselectable=\"on\">\n            <div class=\"ag-pinned-left-floating-bottom\" ref=\"eLeftBottom\" role=\"presentation\" unselectable=\"on\"></div>\n            <div class=\"ag-floating-bottom-viewport\" ref=\"eBottomViewport\" role=\"presentation\" unselectable=\"on\">\n                <div class=\"ag-floating-bottom-container\" ref=\"eBottomContainer\" role=\"presentation\" unselectable=\"on\"></div>\n            </div>\n            <div class=\"ag-pinned-right-floating-bottom\" ref=\"eRightBottom\" role=\"presentation\" unselectable=\"on\"></div>\n            <div class=\"ag-floating-bottom-full-width-container\" ref=\"eBottomFullWidthContainer\" role=\"presentation\" unselectable=\"on\"></div>\n        </div>\n        <div class=\"ag-body-horizontal-scroll\" ref=\"eHorizontalScrollBody\">\n            <div class=\"ag-horizontal-left-spacer\" ref=\"eHorizontalLeftSpacer\"></div>\n            <div class=\"ag-body-horizontal-scroll-viewport\" ref=\"eBodyHorizontalScrollViewport\">\n                <div class=\"ag-body-horizontal-scroll-container\" ref=\"eBodyHorizontalScrollContainer\"></div>\n            </div>\n            <div class=\"ag-horizontal-right-spacer\" ref=\"eHorizontalRightSpacer\"></div>\n        </div>\n        <ag-overlay-wrapper ref=\"overlayWrapper\"></ag-overlay-wrapper>\n    </div>";

var GridPanel =
/** @class */
function (_super) {
  __extends(GridPanel, _super);

  function GridPanel() {
    var _this = _super.call(this, GRID_PANEL_NORMAL_TEMPLATE) || this;

    _this.scrollLeft = -1;
    _this.scrollTop = -1;
    _this.resetLastHorizontalScrollElementDebounce = utils_1._.debounce(_this.resetLastHorizontalScrollElement.bind(_this), 500);
    return _this;
  }

  GridPanel.prototype.getVScrollPosition = function () {
    var result = {
      top: this.eBodyViewport.scrollTop,
      bottom: this.eBodyViewport.scrollTop + this.eBodyViewport.offsetHeight
    };
    return result;
  };

  GridPanel.prototype.getHScrollPosition = function () {
    var result = {
      left: this.eCenterViewport.scrollLeft,
      right: this.eCenterViewport.scrollLeft + this.eCenterViewport.offsetWidth
    };
    return result;
  };

  GridPanel.prototype.onRowDataChanged = function () {
    this.showOrHideOverlay();
  };

  GridPanel.prototype.showOrHideOverlay = function () {
    var isEmpty = this.paginationProxy.isEmpty();
    var isSuppressNoRowsOverlay = this.gridOptionsWrapper.isSuppressNoRowsOverlay();
    var method = isEmpty && !isSuppressNoRowsOverlay ? 'showNoRowsOverlay' : 'hideOverlay';
    this[method]();
  };

  GridPanel.prototype.onNewColumnsLoaded = function () {
    // hide overlay if columns and rows exist, this can happen if columns are loaded after data.
    // this problem exists before of the race condition between the services (column controller in this case)
    // and the view (grid panel). if the model beans were all initialised first, and then the view beans second,
    // this race condition would not happen.
    if (this.columnController.isReady() && !this.paginationProxy.isEmpty()) {
      this.hideOverlay();
    }
  };

  GridPanel.prototype.init = function () {
    var _this = this;

    this.scrollWidth = this.gridOptionsWrapper.getScrollbarWidth();
    this.enableRtl = this.gridOptionsWrapper.isEnableRtl();
    this.printLayout = this.gridOptionsWrapper.getDomLayout() === constants_1.Constants.DOM_LAYOUT_PRINT; // these elements have different CSS when layout changes

    this.gridOptionsWrapper.addLayoutElement(this.getGui());
    this.gridOptionsWrapper.addLayoutElement(this.eBodyViewport);
    this.suppressScrollOnFloatingRow();
    this.setupRowAnimationCssClass();
    this.buildRowContainerComponents();
    this.addEventListeners();
    this.addDragListeners();
    this.addScrollListener();

    if (this.gridOptionsWrapper.isRowModelDefault() && !this.gridOptionsWrapper.getRowData()) {
      this.showLoadingOverlay();
    }

    this.setCellTextSelection(this.gridOptionsWrapper.isEnableCellTextSelect());
    this.setPinnedContainerSize();
    this.setHeaderAndFloatingHeights();
    this.disableBrowserDragging();
    this.addMouseListeners();
    this.addKeyboardEvents();
    this.addBodyViewportListener();
    this.addStopEditingWhenGridLosesFocus();
    this.mockContextMenuForIPad();
    this.addRowDragListener();

    if (this.$scope) {
      this.addAngularApplyCheck();
    }

    this.onDisplayedColumnsWidthChanged();
    this.gridApi.registerGridComp(this);
    this.alignedGridsService.registerGridComp(this);
    this.headerRootComp.registerGridComp(this);
    this.navigationService.registerGridComp(this);
    this.heightScaler.registerGridComp(this);
    this.autoHeightCalculator.registerGridComp(this);
    this.columnAnimationService.registerGridComp(this);
    this.autoWidthCalculator.registerGridComp(this);
    this.paginationAutoPageSizeService.registerGridComp(this);
    this.beans.registerGridComp(this);
    this.rowRenderer.registerGridComp(this);

    if (this.rangeController) {
      this.rangeController.registerGridComp(this);
    }

    [this.eCenterViewport, this.eBodyViewport].forEach(function (viewport) {
      var unsubscribeFromResize = _this.resizeObserverService.observeResize(viewport, _this.onCenterViewportResized.bind(_this));

      _this.addDestroyFunc(function () {
        return unsubscribeFromResize();
      });
    });
  };

  GridPanel.prototype.onDomLayoutChanged = function () {
    var newPrintLayout = this.gridOptionsWrapper.getDomLayout() === constants_1.Constants.DOM_LAYOUT_PRINT;

    if (this.printLayout !== newPrintLayout) {
      this.printLayout = newPrintLayout;
      this.setWidthsOfContainers(); // pinned containers are always hidden for print layout

      this.setPinnedContainerSize();
    }
  };

  GridPanel.prototype.onCenterViewportResized = function () {
    this.checkViewportAndScrolls();
  }; // used by ColumnAnimationService


  GridPanel.prototype.setColumnMovingCss = function (moving) {
    this.addOrRemoveCssClass('ag-column-moving', moving);
  };

  GridPanel.prototype.setCellTextSelection = function (selectable) {
    if (selectable === void 0) {
      selectable = false;
    }

    [this.eTop, this.eCenterContainer, this.eBottom].forEach(function (ct) {
      return utils_1._.addOrRemoveCssClass(ct, 'ag-selectable', selectable);
    });
  };

  GridPanel.prototype.addRowDragListener = function () {
    var rowDragFeature = new rowDragFeature_1.RowDragFeature(this.eBodyViewport, this);
    this.getContext().wireBean(rowDragFeature);
    this.dragAndDropService.addDropTarget(rowDragFeature);
  };

  GridPanel.prototype.addStopEditingWhenGridLosesFocus = function () {
    var _this = this;

    if (!this.gridOptionsWrapper.isStopEditingWhenGridLosesFocus()) {
      return;
    }

    var focusOutListener = function focusOutListener(event) {
      // this is the element the focus is moving to
      var elementWithFocus = event.relatedTarget; // see if the element the focus is going to is part of the grid

      var clickInsideGrid = false;
      var pointer = elementWithFocus;

      while (utils_1._.exists(pointer) && !clickInsideGrid) {
        var isPopup = !!_this.gridOptionsWrapper.getDomData(pointer, popupEditorWrapper_1.PopupEditorWrapper.DOM_KEY_POPUP_EDITOR_WRAPPER);
        var isBody = _this.eBodyViewport === pointer || _this.eBottom === pointer || _this.eTop === pointer;
        clickInsideGrid = isPopup || isBody;
        pointer = pointer.parentNode;
      }

      if (!clickInsideGrid) {
        _this.rowRenderer.stopEditing();
      }
    };

    this.addDestroyableEventListener(this.eBodyViewport, 'focusout', focusOutListener);
    this.addDestroyableEventListener(this.eTop, 'focusout', focusOutListener);
    this.addDestroyableEventListener(this.eBottom, 'focusout', focusOutListener);
  };

  GridPanel.prototype.addAngularApplyCheck = function () {
    var _this = this; // this makes sure if we queue up requests, we only execute oe


    var applyTriggered = false;

    var listener = function listener() {
      // only need to do one apply at a time
      if (applyTriggered) {
        return;
      }

      applyTriggered = true; // mark 'need apply' to true

      window.setTimeout(function () {
        applyTriggered = false;

        _this.$scope.$apply();
      }, 0);
    }; // these are the events we need to do an apply after - these are the ones that can end up
    // with columns added or removed


    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_VIRTUAL_COLUMNS_CHANGED, listener);
  }; // if we do not do this, then the user can select a pic in the grid (eg an image in a custom cell renderer)
  // and then that will start the browser native drag n' drop, which messes up with our own drag and drop.


  GridPanel.prototype.disableBrowserDragging = function () {
    this.addGuiEventListener('dragstart', function (event) {
      if (event.target instanceof HTMLImageElement) {
        event.preventDefault();
        return false;
      }
    });
  };

  GridPanel.prototype.addEventListeners = function () {
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_PINNED_ROW_DATA_CHANGED, this.setHeaderAndFloatingHeights.bind(this));
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_ROW_DATA_CHANGED, this.onRowDataChanged.bind(this));
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_ROW_DATA_UPDATED, this.onRowDataChanged.bind(this));
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));
    this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_HEADER_HEIGHT, this.setHeaderAndFloatingHeights.bind(this));
    this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, this.setHeaderAndFloatingHeights.bind(this));
    this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, this.setHeaderAndFloatingHeights.bind(this));
    this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, this.setHeaderAndFloatingHeights.bind(this));
    this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, this.setHeaderAndFloatingHeights.bind(this));
    this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_DOM_LAYOUT, this.onDomLayoutChanged.bind(this));
  };

  GridPanel.prototype.addDragListeners = function () {
    var _this = this;

    if (!this.gridOptionsWrapper.isEnableRangeSelection() || // no range selection if no property
    utils_1._.missing(this.rangeController) // no range selection if not enterprise version
    ) {
        return;
      }

    var containers = [this.eLeftContainer, this.eRightContainer, this.eCenterContainer, this.eTop, this.eBottom];
    containers.forEach(function (container) {
      var params = {
        eElement: container,
        onDragStart: _this.rangeController.onDragStart.bind(_this.rangeController),
        onDragStop: _this.rangeController.onDragStop.bind(_this.rangeController),
        onDragging: _this.rangeController.onDragging.bind(_this.rangeController),
        // for range selection by dragging the mouse, we want to ignore the event if shift key is pressed,
        // as shift key click is another type of range selection
        skipMouseEvent: function skipMouseEvent(mouseEvent) {
          return mouseEvent.shiftKey;
        }
      };

      _this.dragService.addDragSource(params);

      _this.addDestroyFunc(function () {
        return _this.dragService.removeDragSource(params);
      });
    });
  };

  GridPanel.prototype.addMouseListeners = function () {
    var _this = this;

    var eventNames = ['click', 'mousedown', 'dblclick', 'contextmenu', 'mouseover', 'mouseout'];
    eventNames.forEach(function (eventName) {
      var listener = _this.processMouseEvent.bind(_this, eventName);

      _this.eAllCellContainers.forEach(function (container) {
        return _this.addDestroyableEventListener(container, eventName, listener);
      });
    });
  };

  GridPanel.prototype.addKeyboardEvents = function () {
    var _this = this;

    var eventNames = ['keydown', 'keypress'];
    eventNames.forEach(function (eventName) {
      var listener = _this.processKeyboardEvent.bind(_this, eventName);

      _this.eAllCellContainers.forEach(function (container) {
        _this.addDestroyableEventListener(container, eventName, listener, true);
      });
    });
  };

  GridPanel.prototype.addBodyViewportListener = function () {
    var _this = this; // we want to listen for clicks directly on the eBodyViewport, so the user has a way of showing
    // the context menu if no rows or columns are displayed, or user simply clicks outside of a cell


    var listener = function listener(mouseEvent) {
      var target = utils_1._.getTarget(mouseEvent);

      if (target === _this.eBodyViewport || target === _this.eCenterViewport) {
        // show it
        _this.onContextMenu(mouseEvent, null, null, null, null);

        _this.preventDefaultOnContextMenu(mouseEvent);
      }
    }; //For some reason listening only to this.eBody doesn't work... Maybe because the event is consumed somewhere else?
    //In any case, not expending much time on this, if anyone comes across this and knows how to make this work with
    //one listener please go ahead and change it...


    this.addDestroyableEventListener(this.eBodyViewport, 'contextmenu', listener);
  }; // + rangeController - used to know when to scroll when user is dragging outside the
  // main viewport while doing a range selection


  GridPanel.prototype.getBodyClientRect = function () {
    if (!this.eBodyViewport) {
      return;
    }

    return this.eBodyViewport.getBoundingClientRect();
  };

  GridPanel.prototype.getRowForEvent = function (event) {
    var sourceElement = utils_1._.getTarget(event);

    while (sourceElement) {
      var renderedRow = this.gridOptionsWrapper.getDomData(sourceElement, rowComp_1.RowComp.DOM_DATA_KEY_RENDERED_ROW);

      if (renderedRow) {
        return renderedRow;
      }

      sourceElement = sourceElement.parentElement;
    }

    return null;
  };

  GridPanel.prototype.processKeyboardEvent = function (eventName, keyboardEvent) {
    var cellComp = utils_1._.getCellCompForEvent(this.gridOptionsWrapper, keyboardEvent);

    var rowNode = cellComp.getRenderedRow().getRowNode();
    var column = cellComp.getColumn();
    var editing = cellComp.isEditing();

    if (!cellComp) {
      return;
    }

    var gridProcessingAllowed = !utils_1._.isUserSuppressingKeyboardEvent(this.gridOptionsWrapper, keyboardEvent, rowNode, column, editing);

    if (gridProcessingAllowed) {
      switch (eventName) {
        case 'keydown':
          // first see if it's a scroll key, page up / down, home / end etc
          var wasScrollKey = this.navigationService.handlePageScrollingKey(keyboardEvent); // if not a scroll key, then we pass onto cell

          if (!wasScrollKey) {
            cellComp.onKeyDown(keyboardEvent);
          }

          this.doClipboardOperations(keyboardEvent, cellComp);
          break;

        case 'keypress':
          cellComp.onKeyPress(keyboardEvent);
          break;
      }
    } else {
      keyboardEvent.preventDefault();
    }

    if (eventName === 'keydown') {
      var cellKeyDownEvent = cellComp.createEvent(keyboardEvent, events_1.Events.EVENT_CELL_KEY_DOWN);
      this.beans.eventService.dispatchEvent(cellKeyDownEvent);
    }

    if (eventName === 'keypress') {
      var cellKeyPressEvent = cellComp.createEvent(keyboardEvent, events_1.Events.EVENT_CELL_KEY_PRESS);
      this.beans.eventService.dispatchEvent(cellKeyPressEvent);
    }
  };

  GridPanel.prototype.doClipboardOperations = function (keyboardEvent, cellComp) {
    // check if ctrl or meta key pressed
    if (!keyboardEvent.ctrlKey && !keyboardEvent.metaKey) {
      return;
    } // if the cell the event came from is editing, then we do not
    // want to do the default shortcut keys, otherwise the editor
    // (eg a text field) would not be able to do the normal cut/copy/paste


    if (cellComp.isEditing()) {
      return;
    } // for copy / paste, we don't want to execute when the event
    // was from a child grid (happens in master detail)


    if (!this.mouseEventService.isEventFromThisGrid(keyboardEvent)) {
      return;
    }

    switch (keyboardEvent.which) {
      case constants_1.Constants.KEY_A:
        return this.onCtrlAndA(keyboardEvent);

      case constants_1.Constants.KEY_C:
        return this.onCtrlAndC(keyboardEvent);

      case constants_1.Constants.KEY_V:
        return this.onCtrlAndV();

      case constants_1.Constants.KEY_D:
        return this.onCtrlAndD(keyboardEvent);
    }
  }; // gets called by rowRenderer when new data loaded, as it will want to scroll to the top


  GridPanel.prototype.scrollToTop = function () {
    this.eBodyViewport.scrollTop = 0;
  };

  GridPanel.prototype.processMouseEvent = function (eventName, mouseEvent) {
    if (!this.mouseEventService.isEventFromThisGrid(mouseEvent) || utils_1._.isStopPropagationForAgGrid(mouseEvent)) {
      return;
    }

    var rowComp = this.getRowForEvent(mouseEvent);
    var cellComp = this.mouseEventService.getRenderedCellForEvent(mouseEvent);

    if (eventName === "contextmenu") {
      this.handleContextMenuMouseEvent(mouseEvent, null, rowComp, cellComp);
    } else {
      if (cellComp) {
        cellComp.onMouseEvent(eventName, mouseEvent);
      }

      if (rowComp) {
        rowComp.onMouseEvent(eventName, mouseEvent);
      }
    }

    this.preventDefaultOnContextMenu(mouseEvent);
  };

  GridPanel.prototype.mockContextMenuForIPad = function () {
    var _this = this; // we do NOT want this when not in iPad, otherwise we will be doing


    if (!utils_1._.isUserAgentIPad()) {
      return;
    }

    this.eAllCellContainers.forEach(function (container) {
      var touchListener = new touchListener_1.TouchListener(container);

      var longTapListener = function longTapListener(event) {
        var rowComp = _this.getRowForEvent(event.touchEvent);

        var cellComp = _this.mouseEventService.getRenderedCellForEvent(event.touchEvent);

        _this.handleContextMenuMouseEvent(null, event.touchEvent, rowComp, cellComp);
      };

      _this.addDestroyableEventListener(touchListener, touchListener_1.TouchListener.EVENT_LONG_TAP, longTapListener);

      _this.addDestroyFunc(function () {
        return touchListener.destroy();
      });
    });
  };

  GridPanel.prototype.handleContextMenuMouseEvent = function (mouseEvent, touchEvent, rowComp, cellComp) {
    var rowNode = rowComp ? rowComp.getRowNode() : null;
    var column = cellComp ? cellComp.getColumn() : null;
    var value = null;

    if (column) {
      var event_1 = mouseEvent ? mouseEvent : touchEvent;
      cellComp.dispatchCellContextMenuEvent(event_1);
      value = this.valueService.getValue(column, rowNode);
    }

    this.onContextMenu(mouseEvent, touchEvent, rowNode, column, value);
  };

  GridPanel.prototype.onContextMenu = function (mouseEvent, touchEvent, rowNode, column, value) {
    // to allow us to debug in chrome, we ignore the event if ctrl is pressed.
    // not everyone wants this, so first 'if' below allows to turn this hack off.
    if (!this.gridOptionsWrapper.isAllowContextMenuWithControlKey()) {
      // then do the check
      if (mouseEvent && (mouseEvent.ctrlKey || mouseEvent.metaKey)) {
        return;
      }
    }

    if (this.contextMenuFactory && !this.gridOptionsWrapper.isSuppressContextMenu()) {
      var eventOrTouch = mouseEvent ? mouseEvent : touchEvent.touches[0];
      this.contextMenuFactory.showMenu(rowNode, column, value, eventOrTouch);
      var event_2 = mouseEvent ? mouseEvent : touchEvent;
      event_2.preventDefault();
    }
  };

  GridPanel.prototype.preventDefaultOnContextMenu = function (mouseEvent) {
    // if we don't do this, then middle click will never result in a 'click' event, as 'mousedown'
    // will be consumed by the browser to mean 'scroll' (as you can scroll with the middle mouse
    // button in the browser). so this property allows the user to receive middle button clicks if
    // they want.
    if (this.gridOptionsWrapper.isSuppressMiddleClickScrolls() && mouseEvent.which === 2) {
      mouseEvent.preventDefault();
    }
  };

  GridPanel.prototype.onCtrlAndA = function (event) {
    var _a = this,
        columnController = _a.columnController,
        pinnedRowModel = _a.pinnedRowModel,
        paginationProxy = _a.paginationProxy,
        rangeController = _a.rangeController;

    var PINNED_BOTTOM = constants_1.Constants.PINNED_BOTTOM,
        PINNED_TOP = constants_1.Constants.PINNED_TOP;

    if (rangeController && paginationProxy.isRowsToRender()) {
      var _b = [pinnedRowModel.isEmpty(PINNED_TOP), pinnedRowModel.isEmpty(PINNED_BOTTOM)],
          isEmptyPinnedTop = _b[0],
          isEmptyPinnedBottom = _b[1];
      var floatingStart = isEmptyPinnedTop ? null : PINNED_TOP;
      var floatingEnd = void 0;
      var rowEnd = void 0;

      if (isEmptyPinnedBottom) {
        floatingEnd = null;
        rowEnd = this.paginationProxy.getTotalRowCount() - 1;
      } else {
        floatingEnd = PINNED_BOTTOM;
        rowEnd = pinnedRowModel.getPinnedBottomRowData().length - 1;
      }

      var allDisplayedColumns = columnController.getAllDisplayedColumns();

      if (utils_1._.missingOrEmpty(allDisplayedColumns)) {
        return;
      }

      rangeController.setRange({
        rowStart: 0,
        floatingStart: floatingStart,
        rowEnd: rowEnd,
        floatingEnd: floatingEnd,
        columnStart: allDisplayedColumns[0],
        columnEnd: allDisplayedColumns[allDisplayedColumns.length - 1]
      });
    }

    event.preventDefault();
  };

  GridPanel.prototype.onCtrlAndC = function (event) {
    if (!this.clipboardService || this.gridOptionsWrapper.isEnableCellTextSelection()) {
      return;
    }

    var focusedCell = this.focusedCellController.getFocusedCell();
    this.clipboardService.copyToClipboard();
    event.preventDefault(); // the copy operation results in loosing focus on the cell,
    // because of the trickery the copy logic uses with a temporary
    // widget. so we set it back again.

    if (focusedCell) {
      this.focusedCellController.setFocusedCell(focusedCell.rowIndex, focusedCell.column, focusedCell.floating, true);
    }
  };

  GridPanel.prototype.onCtrlAndV = function () {
    if (!this.enterprise || this.gridOptionsWrapper.isSuppressClipboardPaste()) {
      return;
    }

    this.clipboardService.pasteFromClipboard();
  };

  GridPanel.prototype.onCtrlAndD = function (event) {
    if (!this.enterprise) {
      return;
    }

    this.clipboardService.copyRangeDown();
    event.preventDefault();
  }; // Valid values for position are bottom, middle and top
  // position should be {'top','middle','bottom', or undefined/null}.
  // if undefined/null, then the grid will to the minimal amount of scrolling,
  // eg if grid needs to scroll up, it scrolls until row is on top,
  //    if grid needs to scroll down, it scrolls until row is on bottom,
  //    if row is already in view, grid does not scroll
  // fixme - how does this work in the new way


  GridPanel.prototype.ensureIndexVisible = function (index, position) {
    // if for print or auto height, everything is always visible
    if (this.printLayout) {
      return;
    }

    var rowCount = this.paginationProxy.getTotalRowCount();

    if (typeof index !== 'number' || index < 0 || index >= rowCount) {
      console.warn('invalid row index for ensureIndexVisible: ' + index);
      return;
    }

    this.paginationProxy.goToPageWithIndex(index);
    var rowNode = this.paginationProxy.getRow(index);
    var rowGotShiftedDuringOperation;

    do {
      var startingRowTop = rowNode.rowTop;
      var startingRowHeight = rowNode.rowHeight;
      var paginationOffset = this.paginationProxy.getPixelOffset();
      var rowTopPixel = rowNode.rowTop - paginationOffset;
      var rowBottomPixel = rowTopPixel + rowNode.rowHeight;
      var scrollPosition = this.getVScrollPosition();
      var heightOffset = this.heightScaler.getOffset();
      var vScrollTop = scrollPosition.top + heightOffset;
      var vScrollBottom = scrollPosition.bottom + heightOffset;
      var viewportHeight = vScrollBottom - vScrollTop; // work out the pixels for top, middle and bottom up front,
      // make the if/else below easier to read

      var pxTop = this.heightScaler.getScrollPositionForPixel(rowTopPixel);
      var pxBottom = this.heightScaler.getScrollPositionForPixel(rowBottomPixel - viewportHeight); // make sure if middle, the row is not outside the top of the grid

      var pxMiddle = Math.min((pxTop + pxBottom) / 2, rowTopPixel);
      var rowBelowViewport = vScrollTop > rowTopPixel;
      var rowAboveViewport = vScrollBottom < rowBottomPixel;
      var newScrollPosition = null;

      if (position === 'top') {
        newScrollPosition = pxTop;
      } else if (position === 'bottom') {
        newScrollPosition = pxBottom;
      } else if (position === 'middle') {
        newScrollPosition = pxMiddle;
      } else if (rowBelowViewport) {
        // if row is before, scroll up with row at top
        newScrollPosition = pxTop;
      } else if (rowAboveViewport) {
        // if row is below, scroll down with row at bottom
        newScrollPosition = pxBottom;
      }

      if (newScrollPosition !== null) {
        this.eBodyViewport.scrollTop = newScrollPosition;
        this.rowRenderer.redrawAfterScroll();
      } // the row can get shifted if during the rendering (during rowRenderer.redrawAfterScroll()),
      // the height of a row changes due to lazy calculation of row heights when using
      // colDef.autoHeight or gridOptions.getRowHeight.
      // if row was shifted, then the position we scrolled to is incorrect.


      rowGotShiftedDuringOperation = startingRowTop !== rowNode.rowTop || startingRowHeight !== rowNode.rowHeight;
    } while (rowGotShiftedDuringOperation); // so when we return back to user, the cells have rendered


    this.animationFrameService.flushAllFrames();
  }; // + moveColumnController


  GridPanel.prototype.getCenterWidth = function () {
    return this.eCenterViewport.clientWidth;
  };

  GridPanel.prototype.isVerticalScrollShowing = function () {
    var isAlwaysShowVerticalScroll = this.gridOptionsWrapper.isAlwaysShowVerticalScroll();

    utils_1._.addOrRemoveCssClass(this.eBodyViewport, 'ag-force-vertical-scroll', isAlwaysShowVerticalScroll);

    return isAlwaysShowVerticalScroll || utils_1._.isVerticalScrollShowing(this.eBodyViewport);
  };

  GridPanel.prototype.isHorizontalScrollShowing = function () {
    return utils_1._.isHorizontalScrollShowing(this.eCenterViewport);
  }; // gets called every time the viewport size changes. we use this to check visibility of scrollbars
  // in the grid panel, and also to check size and position of viewport for row and column virtualisation.


  GridPanel.prototype.checkViewportAndScrolls = function () {
    // results in updating anything that depends on scroll showing
    this.updateScrollVisibleService(); // fires event if height changes, used by PaginationService, HeightScalerService, RowRenderer

    this.checkBodyHeight(); // check for virtual columns for ColumnController

    this.onHorizontalViewportChanged();
    this.setPinnedContainerSize();
  };

  GridPanel.prototype.updateScrollVisibleService = function () {
    // because of column animation (which takes 200ms), we have to do this twice.
    // eg if user removes cols anywhere except at the RHS, then the cols on the RHS
    // will animate to the left to fill the gap. this animation means just after
    // the cols are removed, the remaining cols are still in the original location
    // at the start of the animation, so pre animation the H scrollbar is still needed,
    // but post animation it is not.
    this.updateScrollVisibleServiceImpl();
    setTimeout(this.updateScrollVisibleServiceImpl.bind(this), 500);
  };

  GridPanel.prototype.updateScrollVisibleServiceImpl = function () {
    var params = {
      horizontalScrollShowing: false,
      verticalScrollShowing: false
    };
    params.verticalScrollShowing = this.isVerticalScrollShowing();
    params.horizontalScrollShowing = this.isHorizontalScrollShowing();
    this.scrollVisibleService.setScrollsVisible(params);
    this.setHorizontalScrollVisible(params.horizontalScrollShowing);
    this.setVerticalScrollPaddingVisible(params.verticalScrollShowing);
  };

  GridPanel.prototype.setHorizontalScrollVisible = function (visible) {
    var isSuppressHorizontalScroll = this.gridOptionsWrapper.isSuppressHorizontalScroll();
    var scrollSize = visible ? this.gridOptionsWrapper.getScrollbarWidth() || 0 : 0;
    var scrollContainerSize = !isSuppressHorizontalScroll ? scrollSize : 0;
    var addIEPadding = utils_1._.isBrowserIE() && visible;
    this.eCenterViewport.style.height = "calc(100% + " + scrollSize + "px)";

    utils_1._.setFixedHeight(this.eHorizontalScrollBody, scrollContainerSize); // we have to add an extra pixel to the scroller viewport on IE because
    // if the container has the same size as the scrollbar, the scroll button won't work


    utils_1._.setFixedHeight(this.eBodyHorizontalScrollViewport, scrollContainerSize + (addIEPadding ? 1 : 0));

    if (addIEPadding) {
      this.eBodyHorizontalScrollViewport.style.bottom = '1px';
    }

    utils_1._.setFixedHeight(this.eBodyHorizontalScrollContainer, scrollContainerSize);
  };

  GridPanel.prototype.setVerticalScrollPaddingVisible = function (show) {
    var scroller = show ? "scroll" : "hidden";
    this.eTop.style.overflowY = this.eBottom.style.overflowY = scroller;
    this.setFakeHScrollSpacerWidths();
  };

  GridPanel.prototype.ensureColumnVisible = function (key) {
    var column = this.columnController.getGridColumn(key);

    if (!column) {
      return;
    }

    if (column.isPinned()) {
      console.warn('calling ensureIndexVisible on a ' + column.getPinned() + ' pinned column doesn\'t make sense for column ' + column.getColId());
      return;
    }

    if (!this.columnController.isColumnDisplayed(column)) {
      console.warn('column is not currently visible');
      return;
    }

    var colLeftPixel = column.getLeft();
    var colRightPixel = colLeftPixel + column.getActualWidth();
    var viewportWidth = this.eCenterViewport.clientWidth;
    var scrollPosition = this.getCenterViewportScrollLeft();
    var bodyWidth = this.columnController.getBodyContainerWidth();
    var viewportLeftPixel;
    var viewportRightPixel; // the logic of working out left and right viewport px is both here and in the ColumnController,
    // need to refactor it out to one place

    if (this.enableRtl) {
      viewportLeftPixel = bodyWidth - scrollPosition - viewportWidth;
      viewportRightPixel = bodyWidth - scrollPosition;
    } else {
      viewportLeftPixel = scrollPosition;
      viewportRightPixel = viewportWidth + scrollPosition;
    }

    var viewportScrolledPastCol = viewportLeftPixel > colLeftPixel;
    var viewportScrolledBeforeCol = viewportRightPixel < colRightPixel;
    var colToSmallForViewport = viewportWidth < column.getActualWidth();
    var alignColToLeft = viewportScrolledPastCol || colToSmallForViewport;
    var alignColToRight = viewportScrolledBeforeCol;
    var newScrollPosition = this.getCenterViewportScrollLeft();

    if (alignColToLeft || alignColToRight) {
      if (this.enableRtl) {
        newScrollPosition = alignColToLeft ? bodyWidth - viewportWidth - colLeftPixel : bodyWidth - colRightPixel;
      } else {
        newScrollPosition = alignColToLeft ? colLeftPixel : colRightPixel - viewportWidth;
      }

      this.setCenterViewportScrollLeft(newScrollPosition);
    } else {} // otherwise, col is already in view, so do nothing
    // this will happen anyway, as the move will cause a 'scroll' event on the body, however
    // it is possible that the ensureColumnVisible method is called from within ag-Grid and
    // the caller will need to have the columns rendered to continue, which will be before
    // the event has been worked on (which is the case for cell navigation).


    this.onHorizontalViewportChanged(); // so when we return back to user, the cells have rendered

    this.animationFrameService.flushAllFrames();
  };

  GridPanel.prototype.showLoadingOverlay = function () {
    if (!this.gridOptionsWrapper.isSuppressLoadingOverlay()) {
      this.overlayWrapper.showLoadingOverlay();
    }
  };

  GridPanel.prototype.showNoRowsOverlay = function () {
    if (!this.gridOptionsWrapper.isSuppressNoRowsOverlay()) {
      this.overlayWrapper.showNoRowsOverlay();
    }
  };

  GridPanel.prototype.hideOverlay = function () {
    this.overlayWrapper.hideOverlay();
  }; // method will call itself if no available width. this covers if the grid
  // isn't visible, but is just about to be visible.


  GridPanel.prototype.sizeColumnsToFit = function (nextTimeout) {
    var _this = this;

    var availableWidth = this.eBodyViewport.clientWidth;

    if (availableWidth > 0) {
      this.columnController.sizeColumnsToFit(availableWidth, "sizeColumnsToFit");
      return;
    }

    if (nextTimeout === undefined) {
      window.setTimeout(function () {
        _this.sizeColumnsToFit(100);
      }, 0);
    } else if (nextTimeout === 100) {
      window.setTimeout(function () {
        _this.sizeColumnsToFit(500);
      }, 100);
    } else if (nextTimeout === 500) {
      window.setTimeout(function () {
        _this.sizeColumnsToFit(-1);
      }, 500);
    } else {
      console.warn('ag-Grid: tried to call sizeColumnsToFit() but the grid is coming back with ' + 'zero width, maybe the grid is not visible yet on the screen?');
    }
  }; // used by autoWidthCalculator and autoHeightCalculator


  GridPanel.prototype.getCenterContainer = function () {
    return this.eCenterContainer;
  };

  GridPanel.prototype.getDropTargetBodyContainers = function () {
    return [this.eCenterViewport, this.eTopViewport, this.eBottomViewport];
  };

  GridPanel.prototype.getDropTargetLeftContainers = function () {
    return [this.eLeftContainer, this.eLeftBottom, this.eLeftTop];
  };

  GridPanel.prototype.getDropTargetRightContainers = function () {
    return [this.eRightContainer, this.eRightBottom, this.eRightTop];
  };

  GridPanel.prototype.buildRowContainerComponents = function () {
    var _this = this;

    this.eAllCellContainers = [this.eLeftContainer, this.eRightContainer, this.eCenterContainer, this.eTop, this.eBottom, this.eFullWidthContainer];
    this.rowContainerComponents = {
      body: new rowContainerComponent_1.RowContainerComponent({
        eContainer: this.eCenterContainer,
        eWrapper: this.eCenterColsClipper,
        eViewport: this.eBodyViewport
      }),
      fullWidth: new rowContainerComponent_1.RowContainerComponent({
        eContainer: this.eFullWidthContainer
      }),
      pinnedLeft: new rowContainerComponent_1.RowContainerComponent({
        eContainer: this.eLeftContainer
      }),
      pinnedRight: new rowContainerComponent_1.RowContainerComponent({
        eContainer: this.eRightContainer
      }),
      floatingTop: new rowContainerComponent_1.RowContainerComponent({
        eContainer: this.eTopContainer
      }),
      floatingTopPinnedLeft: new rowContainerComponent_1.RowContainerComponent({
        eContainer: this.eLeftTop
      }),
      floatingTopPinnedRight: new rowContainerComponent_1.RowContainerComponent({
        eContainer: this.eRightTop
      }),
      floatingTopFullWidth: new rowContainerComponent_1.RowContainerComponent({
        eContainer: this.eTopFullWidthContainer,
        hideWhenNoChildren: true
      }),
      floatingBottom: new rowContainerComponent_1.RowContainerComponent({
        eContainer: this.eBottomContainer
      }),
      floatingBottomPinnedLeft: new rowContainerComponent_1.RowContainerComponent({
        eContainer: this.eLeftBottom
      }),
      floatingBottomPinnedRight: new rowContainerComponent_1.RowContainerComponent({
        eContainer: this.eRightBottom
      }),
      floatingBottomFullWith: new rowContainerComponent_1.RowContainerComponent({
        eContainer: this.eBottomFullWidthContainer,
        hideWhenNoChildren: true
      })
    };

    utils_1._.iterateObject(this.rowContainerComponents, function (key, container) {
      if (container) {
        _this.getContext().wireBean(container);
      }
    });
  };

  GridPanel.prototype.setupRowAnimationCssClass = function () {
    var _this = this;

    var listener = function listener() {
      // we don't want to use row animation if scaling, as rows jump strangely as you scroll,
      // when scaling and doing row animation.
      var animateRows = _this.gridOptionsWrapper.isAnimateRows() && !_this.heightScaler.isScaling();

      utils_1._.addOrRemoveCssClass(_this.eBodyViewport, 'ag-row-animation', animateRows);

      utils_1._.addOrRemoveCssClass(_this.eBodyViewport, 'ag-row-no-animation', !animateRows);
    };

    listener();
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_HEIGHT_SCALE_CHANGED, listener);
  }; // when editing a pinned row, if the cell is half outside the scrollable area, the browser can
  // scroll the column into view. we do not want this, the pinned sections should never scroll.
  // so we listen to scrolls on these containers and reset the scroll if we find one.


  GridPanel.prototype.suppressScrollOnFloatingRow = function () {
    var _this = this;

    var resetTopScroll = function resetTopScroll() {
      return _this.eTopViewport.scrollLeft = 0;
    };

    var resetBottomScroll = function resetBottomScroll() {
      return _this.eTopViewport.scrollLeft = 0;
    };

    this.addDestroyableEventListener(this.eTopViewport, 'scroll', resetTopScroll);
    this.addDestroyableEventListener(this.eBottomViewport, 'scroll', resetBottomScroll);
  };

  GridPanel.prototype.getRowContainers = function () {
    return this.rowContainerComponents;
  };

  GridPanel.prototype.getFloatingTopBottom = function () {
    return [this.eTop, this.eBottom];
  };

  GridPanel.prototype.onDisplayedColumnsChanged = function () {
    this.setPinnedContainerSize();
    this.setHeaderAndFloatingHeights();
    this.onHorizontalViewportChanged();
    this.updateScrollVisibleService();
  };

  GridPanel.prototype.onDisplayedColumnsWidthChanged = function () {
    this.setWidthsOfContainers();
    this.onHorizontalViewportChanged();
    this.updateScrollVisibleService();

    if (this.enableRtl) {
      // because RTL is all backwards, a change in the width of the row
      // can cause a change in the scroll position, without a scroll event,
      // because the scroll position in RTL is a function that depends on
      // the width. to be convinced of this, take out this line, enable RTL,
      // scroll all the way to the left and then resize a column
      this.horizontallyScrollHeaderCenterAndFloatingCenter();
    }
  };

  GridPanel.prototype.setWidthsOfContainers = function () {
    this.setCenterWidth();
    this.setPinnedContainerSize();
  };

  GridPanel.prototype.setCenterWidth = function () {
    var width = this.columnController.getBodyContainerWidth();

    if (this.printLayout) {
      var pinnedContainerWidths = this.columnController.getPinnedLeftContainerWidth() + this.columnController.getPinnedRightContainerWidth();
      width += pinnedContainerWidths;
    }

    this.headerRootComp.setHeaderContainerWidth(width);
    var widthPx = width + "px";
    this.eCenterContainer.style.width = widthPx;
    this.eBottomContainer.style.width = widthPx;
    this.eTopContainer.style.width = widthPx;

    if (!this.printLayout) {
      this.eBodyHorizontalScrollContainer.style.width = widthPx;
    }
  };

  GridPanel.prototype.setPinnedLeftWidth = function () {
    var _this = this;

    var oldPinning = this.pinningLeft;
    var widthOfCols = this.columnController.getPinnedLeftContainerWidth();
    var newPinning = this.pinningLeft = !this.printLayout && widthOfCols > 0;
    var containers = [this.eLeftContainer, this.eLeftTop, this.eLeftBottom];

    if (oldPinning !== newPinning) {
      this.headerRootComp.setLeftVisible(newPinning);
    }

    containers.forEach(function (e) {
      return utils_1._.setVisible(e, _this.pinningLeft);
    });

    if (newPinning) {
      containers.forEach(function (ct) {
        return utils_1._.setFixedWidth(ct, widthOfCols);
      });
    }
  };

  GridPanel.prototype.setPinnedRightWidth = function () {
    var oldPinning = this.pinningRight;
    var widthOfCols = this.columnController.getPinnedRightContainerWidth();
    var newPinning = this.pinningRight = !this.printLayout && widthOfCols > 0;
    var containers = [this.eRightContainer, this.eRightTop, this.eRightBottom];

    if (oldPinning !== newPinning) {
      this.headerRootComp.setRightVisible(newPinning);
    }

    containers.forEach(function (ct) {
      return utils_1._.setVisible(ct, newPinning);
    });

    if (newPinning) {
      containers.forEach(function (ct) {
        return utils_1._.setFixedWidth(ct, widthOfCols);
      });
    }
  };

  GridPanel.prototype.setPinnedContainerSize = function () {
    this.setPinnedLeftWidth();
    this.setPinnedRightWidth();
    this.setFakeHScrollSpacerWidths();
  };

  GridPanel.prototype.setFakeHScrollSpacerWidths = function () {
    // we pad the right based on a) if cols are pinned to the right and
    // b) if v scroll is showing on the right (normal position of scroll)
    var rightSpacing = this.columnController.getPinnedRightContainerWidth();
    var scrollOnRight = !this.enableRtl && this.isVerticalScrollShowing();

    if (scrollOnRight) {
      rightSpacing += this.scrollWidth;
    }

    utils_1._.setFixedWidth(this.eHorizontalRightSpacer, rightSpacing);

    utils_1._.addOrRemoveCssClass(this.eHorizontalRightSpacer, 'ag-scroller-corner', rightSpacing <= this.scrollWidth); // we pad the left based on a) if cols are pinned to the left and
    // b) if v scroll is showing on the left (happens in LTR layout only)


    var leftSpacing = this.columnController.getPinnedLeftContainerWidth();
    var scrollOnLeft = this.enableRtl && this.isVerticalScrollShowing();

    if (scrollOnLeft) {
      leftSpacing += this.scrollWidth;
    }

    utils_1._.setFixedWidth(this.eHorizontalLeftSpacer, leftSpacing);

    utils_1._.addOrRemoveCssClass(this.eHorizontalLeftSpacer, 'ag-scroller-corner', leftSpacing <= this.scrollWidth);
  };

  GridPanel.prototype.checkBodyHeight = function () {
    var bodyHeight = this.eBodyViewport.clientHeight;

    if (this.bodyHeight !== bodyHeight) {
      this.bodyHeight = bodyHeight;
      var event_3 = {
        type: events_1.Events.EVENT_BODY_HEIGHT_CHANGED,
        api: this.gridApi,
        columnApi: this.columnApi
      };
      this.eventService.dispatchEvent(event_3);
    }
  };

  GridPanel.prototype.setHeaderAndFloatingHeights = function () {
    var _a = this,
        columnController = _a.columnController,
        gridOptionsWrapper = _a.gridOptionsWrapper,
        pinnedRowModel = _a.pinnedRowModel,
        eTop = _a.eTop,
        eBottom = _a.eBottom;

    var numberOfFloating = 0;
    var headerRowCount = columnController.getHeaderRowCount();
    var totalHeaderHeight;
    var groupHeight;
    var headerHeight;

    if (!columnController.isPivotMode()) {
      if (gridOptionsWrapper.isFloatingFilter()) {
        headerRowCount++;
      }

      numberOfFloating = gridOptionsWrapper.isFloatingFilter() ? 1 : 0;
      groupHeight = gridOptionsWrapper.getGroupHeaderHeight();
      headerHeight = gridOptionsWrapper.getHeaderHeight();
    } else {
      numberOfFloating = 0;
      groupHeight = gridOptionsWrapper.getPivotGroupHeaderHeight();
      headerHeight = gridOptionsWrapper.getPivotHeaderHeight();
    }

    var numberOfNonGroups = 1 + numberOfFloating;
    var numberOfGroups = headerRowCount - numberOfNonGroups;
    totalHeaderHeight = numberOfFloating * gridOptionsWrapper.getFloatingFiltersHeight();
    totalHeaderHeight += numberOfGroups * groupHeight;
    totalHeaderHeight += headerHeight;
    this.headerRootComp.setHeight(totalHeaderHeight);
    var floatingTopHeight = pinnedRowModel.getPinnedTopTotalHeight();

    if (floatingTopHeight) {
      // adding 1px for cell bottom border
      floatingTopHeight += 1;
    }

    var floatingBottomHeight = pinnedRowModel.getPinnedBottomTotalHeight();

    if (floatingBottomHeight) {
      // adding 1px for cell bottom border
      floatingBottomHeight += 1;
    }

    var floatingTopHeightString = floatingTopHeight + "px";
    var floatingBottomHeightString = floatingBottomHeight + "px";
    eTop.style.minHeight = floatingTopHeightString;
    eTop.style.height = floatingTopHeightString;
    eTop.style.display = floatingTopHeight ? 'inherit' : 'none';
    eBottom.style.minHeight = floatingBottomHeightString;
    eBottom.style.height = floatingBottomHeightString;
    eBottom.style.display = floatingBottomHeight ? 'inherit' : 'none';
    this.checkBodyHeight();
  };

  GridPanel.prototype.getBodyHeight = function () {
    return this.bodyHeight;
  }; // called by scrollHorizontally method and alignedGridsService


  GridPanel.prototype.setHorizontalScrollPosition = function (hScrollPosition) {
    this.eCenterViewport.scrollLeft = hScrollPosition; // we need to manually do the event handling (rather than wait for the event)
    // for the alignedGridsService, as if we don't, the aligned grid service gets
    // notified async, and then it's 'consuming' flag doesn't get used right, and
    // we can end up with an infinite loop

    this.doHorizontalScroll(hScrollPosition);
  };

  GridPanel.prototype.setVerticalScrollPosition = function (vScrollPosition) {
    this.eBodyViewport.scrollTop = vScrollPosition;
  }; // called by the headerRootComp and moveColumnController


  GridPanel.prototype.scrollHorizontally = function (pixels) {
    var oldScrollPosition = this.eCenterViewport.scrollLeft;
    this.setHorizontalScrollPosition(oldScrollPosition + pixels);
    return this.eCenterViewport.scrollLeft - oldScrollPosition;
  }; // called by rowDragFeature


  GridPanel.prototype.scrollVertically = function (pixels) {
    var oldScrollPosition = this.eBodyViewport.scrollTop;
    this.setVerticalScrollPosition(oldScrollPosition + pixels);
    return this.eBodyViewport.scrollTop - oldScrollPosition;
  };

  GridPanel.prototype.addScrollListener = function () {
    this.addDestroyableEventListener(this.eCenterViewport, 'scroll', this.onCenterViewportScroll.bind(this));
    this.addDestroyableEventListener(this.eBodyHorizontalScrollViewport, 'scroll', this.onFakeHorizontalScroll.bind(this));
    this.addDestroyableEventListener(this.eBodyViewport, 'scroll', this.onVerticalScroll.bind(this));
  };

  GridPanel.prototype.onVerticalScroll = function () {
    var scrollTop = this.eBodyViewport.scrollTop;
    this.scrollTop = scrollTop;
    this.animationFrameService.setScrollTop(scrollTop);
    this.redrawRowsAfterScroll();
  };

  GridPanel.prototype.isControllingScroll = function (eDiv) {
    if (!this.lastHorizontalScrollElement) {
      this.lastHorizontalScrollElement = eDiv;
      return true;
    }

    return eDiv === this.lastHorizontalScrollElement;
  };

  GridPanel.prototype.onFakeHorizontalScroll = function () {
    if (!this.isControllingScroll(this.eBodyHorizontalScrollViewport)) {
      return;
    }

    this.onBodyHorizontalScroll(this.eBodyHorizontalScrollViewport);
  };

  GridPanel.prototype.onCenterViewportScroll = function () {
    if (!this.isControllingScroll(this.eCenterViewport)) {
      return;
    }

    this.onBodyHorizontalScroll(this.eCenterViewport);
  };

  GridPanel.prototype.onBodyHorizontalScroll = function (eSource) {
    var _a = this.eCenterViewport,
        scrollWidth = _a.scrollWidth,
        clientWidth = _a.clientWidth; // in chrome, fractions can be in the scroll left, eg 250.342234 - which messes up our 'scrollWentPastBounds'
    // formula. so we floor it to allow the formula to work.

    var scrollLeft = Math.floor(utils_1._.getScrollLeft(eSource, this.enableRtl)); // touch devices allow elastic scroll - which temporally scrolls the panel outside of the viewport
    // (eg user uses touch to go to the left of the grid, but drags past the left, the rows will actually
    // scroll past the left until the user releases the mouse). when this happens, we want ignore the scroll,
    // as otherwise it was causing the rows and header to flicker.

    var scrollWentPastBounds = scrollLeft < 0 || scrollLeft + clientWidth > scrollWidth;

    if (scrollWentPastBounds) {
      return;
    }

    this.doHorizontalScroll(scrollLeft);
    this.resetLastHorizontalScrollElementDebounce();
  };

  GridPanel.prototype.resetLastHorizontalScrollElement = function () {
    this.lastHorizontalScrollElement = null;
  };

  GridPanel.prototype.doHorizontalScroll = function (scrollLeft) {
    this.scrollLeft = scrollLeft;
    var event = {
      type: events_1.Events.EVENT_BODY_SCROLL,
      api: this.gridApi,
      columnApi: this.columnApi,
      direction: 'horizontal',
      left: this.scrollLeft,
      top: this.scrollTop
    };
    this.eventService.dispatchEvent(event);
    this.horizontallyScrollHeaderCenterAndFloatingCenter(scrollLeft);
    this.onHorizontalViewportChanged();
  };

  GridPanel.prototype.redrawRowsAfterScroll = function () {
    var event = {
      type: events_1.Events.EVENT_BODY_SCROLL,
      direction: 'vertical',
      api: this.gridApi,
      columnApi: this.columnApi,
      left: this.scrollLeft,
      top: this.scrollTop
    };
    this.eventService.dispatchEvent(event);
  }; // this gets called whenever a change in the viewport, so we can inform column controller it has to work
  // out the virtual columns again. gets called from following locations:
  // + ensureColVisible, scroll, init, layoutChanged, displayedColumnsChanged, API (doLayout)


  GridPanel.prototype.onHorizontalViewportChanged = function () {
    var scrollWidth = this.eCenterViewport.clientWidth;
    var scrollPosition = this.getCenterViewportScrollLeft();
    this.columnController.setVirtualViewportPosition(scrollWidth, scrollPosition);
  };

  GridPanel.prototype.getCenterViewportScrollLeft = function () {
    // we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser
    return utils_1._.getScrollLeft(this.eCenterViewport, this.enableRtl);
  };

  GridPanel.prototype.setCenterViewportScrollLeft = function (value) {
    // we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser
    utils_1._.setScrollLeft(this.eCenterViewport, value, this.enableRtl);
  };

  GridPanel.prototype.horizontallyScrollHeaderCenterAndFloatingCenter = function (scrollLeft) {
    if (scrollLeft === undefined) {
      scrollLeft = this.getCenterViewportScrollLeft();
    }

    var offset = this.enableRtl ? scrollLeft : -scrollLeft;
    var _a = this.eCenterViewport,
        clientWidth = _a.clientWidth,
        scrollWidth = _a.scrollWidth;
    var scrollWentPastBounds = Math.abs(offset) + clientWidth > scrollWidth;

    if (scrollWentPastBounds || this.enableRtl && offset < 0 || !this.enableRtl && offset > 0) {
      return;
    }

    this.headerRootComp.setHorizontalScroll(offset);
    this.eBottomContainer.style.transform = "translateX(" + offset + "px)";
    this.eTopContainer.style.transform = "translateX(" + offset + "px)";
    var partner = this.lastHorizontalScrollElement === this.eCenterViewport ? this.eBodyHorizontalScrollViewport : this.eCenterViewport;

    utils_1._.setScrollLeft(partner, scrollLeft, this.enableRtl);
  }; // + rangeController


  GridPanel.prototype.addScrollEventListener = function (listener) {
    this.eBodyViewport.addEventListener('scroll', listener);
  }; // + rangeController


  GridPanel.prototype.removeScrollEventListener = function (listener) {
    this.eBodyViewport.removeEventListener('scroll', listener);
  };

  __decorate([context_1.Autowired('alignedGridsService'), __metadata("design:type", alignedGridsService_1.AlignedGridsService)], GridPanel.prototype, "alignedGridsService", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], GridPanel.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], GridPanel.prototype, "columnController", void 0);

  __decorate([context_1.Autowired('rowRenderer'), __metadata("design:type", rowRenderer_1.RowRenderer)], GridPanel.prototype, "rowRenderer", void 0);

  __decorate([context_1.Autowired('pinnedRowModel'), __metadata("design:type", pinnedRowModel_1.PinnedRowModel)], GridPanel.prototype, "pinnedRowModel", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], GridPanel.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('animationFrameService'), __metadata("design:type", animationFrameService_1.AnimationFrameService)], GridPanel.prototype, "animationFrameService", void 0);

  __decorate([context_1.Autowired('navigationService'), __metadata("design:type", navigationService_1.NavigationService)], GridPanel.prototype, "navigationService", void 0);

  __decorate([context_1.Autowired('autoHeightCalculator'), __metadata("design:type", autoHeightCalculator_1.AutoHeightCalculator)], GridPanel.prototype, "autoHeightCalculator", void 0);

  __decorate([context_1.Autowired('columnAnimationService'), __metadata("design:type", columnAnimationService_1.ColumnAnimationService)], GridPanel.prototype, "columnAnimationService", void 0);

  __decorate([context_1.Autowired('autoWidthCalculator'), __metadata("design:type", autoWidthCalculator_1.AutoWidthCalculator)], GridPanel.prototype, "autoWidthCalculator", void 0);

  __decorate([context_1.Autowired('paginationAutoPageSizeService'), __metadata("design:type", paginationProxy_1.PaginationAutoPageSizeService)], GridPanel.prototype, "paginationAutoPageSizeService", void 0);

  __decorate([context_1.Autowired('beans'), __metadata("design:type", beans_1.Beans)], GridPanel.prototype, "beans", void 0);

  __decorate([context_1.Autowired('paginationProxy'), __metadata("design:type", paginationProxy_1.PaginationProxy)], GridPanel.prototype, "paginationProxy", void 0);

  __decorate([context_1.Autowired('columnApi'), __metadata("design:type", columnApi_1.ColumnApi)], GridPanel.prototype, "columnApi", void 0);

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], GridPanel.prototype, "gridApi", void 0);

  __decorate([context_1.Autowired('dragService'), __metadata("design:type", dragService_1.DragService)], GridPanel.prototype, "dragService", void 0);

  __decorate([context_1.Autowired('mouseEventService'), __metadata("design:type", mouseEventService_1.MouseEventService)], GridPanel.prototype, "mouseEventService", void 0);

  __decorate([context_1.Autowired('focusedCellController'), __metadata("design:type", focusedCellController_1.FocusedCellController)], GridPanel.prototype, "focusedCellController", void 0);

  __decorate([context_1.Autowired('$scope'), __metadata("design:type", Object)], GridPanel.prototype, "$scope", void 0);

  __decorate([context_1.Autowired('scrollVisibleService'), __metadata("design:type", scrollVisibleService_1.ScrollVisibleService)], GridPanel.prototype, "scrollVisibleService", void 0);

  __decorate([context_1.Autowired('valueService'), __metadata("design:type", valueService_1.ValueService)], GridPanel.prototype, "valueService", void 0);

  __decorate([context_1.Autowired('dragAndDropService'), __metadata("design:type", dragAndDropService_1.DragAndDropService)], GridPanel.prototype, "dragAndDropService", void 0);

  __decorate([context_1.Autowired('maxDivHeightScaler'), __metadata("design:type", maxDivHeightScaler_1.MaxDivHeightScaler)], GridPanel.prototype, "heightScaler", void 0);

  __decorate([context_1.Autowired('enterprise'), __metadata("design:type", Boolean)], GridPanel.prototype, "enterprise", void 0);

  __decorate([context_1.Autowired('resizeObserverService'), __metadata("design:type", resizeObserverService_1.ResizeObserverService)], GridPanel.prototype, "resizeObserverService", void 0);

  __decorate([context_1.Optional('rangeController'), __metadata("design:type", Object)], GridPanel.prototype, "rangeController", void 0);

  __decorate([context_1.Optional('contextMenuFactory'), __metadata("design:type", Object)], GridPanel.prototype, "contextMenuFactory", void 0);

  __decorate([context_1.Optional('clipboardService'), __metadata("design:type", Object)], GridPanel.prototype, "clipboardService", void 0);

  __decorate([componentAnnotations_1.RefSelector('eBodyViewport'), __metadata("design:type", HTMLElement)], GridPanel.prototype, "eBodyViewport", void 0);

  __decorate([componentAnnotations_1.RefSelector('eCenterContainer'), __metadata("design:type", HTMLElement)], GridPanel.prototype, "eCenterContainer", void 0);

  __decorate([componentAnnotations_1.RefSelector('eCenterViewport'), __metadata("design:type", HTMLElement)], GridPanel.prototype, "eCenterViewport", void 0);

  __decorate([componentAnnotations_1.RefSelector('eLeftContainer'), __metadata("design:type", HTMLElement)], GridPanel.prototype, "eLeftContainer", void 0);

  __decorate([componentAnnotations_1.RefSelector('eRightContainer'), __metadata("design:type", HTMLElement)], GridPanel.prototype, "eRightContainer", void 0);

  __decorate([componentAnnotations_1.RefSelector('eCenterColsClipper'), __metadata("design:type", HTMLElement)], GridPanel.prototype, "eCenterColsClipper", void 0);

  __decorate([componentAnnotations_1.RefSelector('eHorizontalScrollBody'), __metadata("design:type", HTMLElement)], GridPanel.prototype, "eHorizontalScrollBody", void 0);

  __decorate([componentAnnotations_1.RefSelector('eHorizontalLeftSpacer'), __metadata("design:type", HTMLElement)], GridPanel.prototype, "eHorizontalLeftSpacer", void 0);

  __decorate([componentAnnotations_1.RefSelector('eHorizontalRightSpacer'), __metadata("design:type", HTMLElement)], GridPanel.prototype, "eHorizontalRightSpacer", void 0);

  __decorate([componentAnnotations_1.RefSelector('eBodyHorizontalScrollViewport'), __metadata("design:type", HTMLElement)], GridPanel.prototype, "eBodyHorizontalScrollViewport", void 0);

  __decorate([componentAnnotations_1.RefSelector('eBodyHorizontalScrollContainer'), __metadata("design:type", HTMLElement)], GridPanel.prototype, "eBodyHorizontalScrollContainer", void 0);

  __decorate([componentAnnotations_1.RefSelector('eFullWidthContainer'), __metadata("design:type", HTMLElement)], GridPanel.prototype, "eFullWidthContainer", void 0);

  __decorate([componentAnnotations_1.RefSelector('eTop'), __metadata("design:type", HTMLElement)], GridPanel.prototype, "eTop", void 0);

  __decorate([componentAnnotations_1.RefSelector('eLeftTop'), __metadata("design:type", HTMLElement)], GridPanel.prototype, "eLeftTop", void 0);

  __decorate([componentAnnotations_1.RefSelector('eRightTop'), __metadata("design:type", HTMLElement)], GridPanel.prototype, "eRightTop", void 0);

  __decorate([componentAnnotations_1.RefSelector('eTopContainer'), __metadata("design:type", HTMLElement)], GridPanel.prototype, "eTopContainer", void 0);

  __decorate([componentAnnotations_1.RefSelector('eTopViewport'), __metadata("design:type", HTMLElement)], GridPanel.prototype, "eTopViewport", void 0);

  __decorate([componentAnnotations_1.RefSelector('eTopFullWidthContainer'), __metadata("design:type", HTMLElement)], GridPanel.prototype, "eTopFullWidthContainer", void 0);

  __decorate([componentAnnotations_1.RefSelector('eBottom'), __metadata("design:type", HTMLElement)], GridPanel.prototype, "eBottom", void 0);

  __decorate([componentAnnotations_1.RefSelector('eLeftBottom'), __metadata("design:type", HTMLElement)], GridPanel.prototype, "eLeftBottom", void 0);

  __decorate([componentAnnotations_1.RefSelector('eRightBottom'), __metadata("design:type", HTMLElement)], GridPanel.prototype, "eRightBottom", void 0);

  __decorate([componentAnnotations_1.RefSelector('eBottomContainer'), __metadata("design:type", HTMLElement)], GridPanel.prototype, "eBottomContainer", void 0);

  __decorate([componentAnnotations_1.RefSelector('eBottomViewport'), __metadata("design:type", HTMLElement)], GridPanel.prototype, "eBottomViewport", void 0);

  __decorate([componentAnnotations_1.RefSelector('eBottomFullWidthContainer'), __metadata("design:type", HTMLElement)], GridPanel.prototype, "eBottomFullWidthContainer", void 0);

  __decorate([componentAnnotations_1.RefSelector('headerRoot'), __metadata("design:type", headerRootComp_1.HeaderRootComp)], GridPanel.prototype, "headerRootComp", void 0);

  __decorate([componentAnnotations_1.RefSelector('overlayWrapper'), __metadata("design:type", overlayWrapperComponent_1.OverlayWrapperComponent)], GridPanel.prototype, "overlayWrapper", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], GridPanel.prototype, "init", null);

  return GridPanel;
}(component_1.Component);

exports.GridPanel = GridPanel;

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var utils_1 = __webpack_require__(6);

var ResizeObserverService =
/** @class */
function () {
  function ResizeObserverService() {}

  ResizeObserverService.prototype.observeResize = function (element, callback) {
    // put in variable, so available to usePolyfill() function below
    var frameworkFactory = this.frameworkFactory;

    var useBrowserResizeObserver = function useBrowserResizeObserver() {
      var resizeObserver = new window.ResizeObserver(callback);
      resizeObserver.observe(element);
      return function () {
        return resizeObserver.disconnect();
      };
    };

    var usePolyfill = function usePolyfill() {
      // initialise to the current width and height, so first call will have no changes
      var widthLastTime = utils_1._.offsetWidth(element);

      var heightLastTime = utils_1._.offsetHeight(element); // when finished, this gets turned to false.


      var running = true;

      var periodicallyCheckWidthAndHeight = function periodicallyCheckWidthAndHeight() {
        if (running) {
          var newWidth = utils_1._.offsetWidth(element);

          var newHeight = utils_1._.offsetHeight(element);

          var changed = newWidth !== widthLastTime || newHeight !== heightLastTime;

          if (changed) {
            widthLastTime = newWidth;
            heightLastTime = newHeight;
            callback();
          }

          frameworkFactory.setTimeout(periodicallyCheckWidthAndHeight, 500);
        }
      };

      periodicallyCheckWidthAndHeight(); // the callback function we return sets running to false

      return function () {
        return running = false;
      };
    };

    var suppressResize = this.gridOptionsWrapper.isSuppressBrowserResizeObserver();
    var resizeObserverExists = !!window.ResizeObserver;

    if (resizeObserverExists && !suppressResize) {
      return useBrowserResizeObserver();
    } else {
      return usePolyfill();
    }
  };

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], ResizeObserverService.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('frameworkFactory'), __metadata("design:type", Object)], ResizeObserverService.prototype, "frameworkFactory", void 0);

  ResizeObserverService = __decorate([context_1.Bean('resizeObserverService')], ResizeObserverService);
  return ResizeObserverService;
}();

exports.ResizeObserverService = ResizeObserverService;

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var utils_1 = __webpack_require__(6);

var SelectableService =
/** @class */
function () {
  function SelectableService() {}

  SelectableService.prototype.init = function () {
    this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
    this.isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();
  };

  SelectableService.prototype.updateSelectableAfterGrouping = function (rowNode) {
    if (this.isRowSelectableFunc) {
      var nextChildrenFunc = function nextChildrenFunc(rowNode) {
        return rowNode.childrenAfterGroup;
      };

      this.recurseDown(rowNode.childrenAfterGroup, nextChildrenFunc);
    }
  };

  SelectableService.prototype.updateSelectableAfterFiltering = function (rowNode) {
    if (this.isRowSelectableFunc) {
      var nextChildrenFunc = function nextChildrenFunc(rowNode) {
        return rowNode.childrenAfterFilter;
      };

      this.recurseDown(rowNode.childrenAfterGroup, nextChildrenFunc);
    }
  };

  SelectableService.prototype.recurseDown = function (children, nextChildrenFunc) {
    var _this = this;

    children.forEach(function (child) {
      if (!child.group) {
        return;
      } // only interested in groups


      if (child.hasChildren()) {
        _this.recurseDown(nextChildrenFunc(child), nextChildrenFunc);
      }

      var rowSelectable;

      if (_this.groupSelectsChildren) {
        // have this group selectable if at least one direct child is selectable
        var firstSelectable = utils_1._.find(nextChildrenFunc(child), 'selectable', true);

        rowSelectable = utils_1._.exists(firstSelectable);
      } else {
        // directly retrieve selectable value from user callback
        rowSelectable = _this.isRowSelectableFunc ? _this.isRowSelectableFunc(child) : false;
      }

      child.setRowSelectable(rowSelectable);
    });
  };

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], SelectableService.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], SelectableService.prototype, "init", null);

  SelectableService = __decorate([context_1.Bean('selectableService')], SelectableService);
  return SelectableService;
}();

exports.SelectableService = SelectableService;

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var beanStub_1 = __webpack_require__(32);

var rowNodeBlock_1 = __webpack_require__(115);

var utils_1 = __webpack_require__(6);

var RowNodeCache =
/** @class */
function (_super) {
  __extends(RowNodeCache, _super);

  function RowNodeCache(cacheParams) {
    var _this = _super.call(this) || this;

    _this.maxRowFound = false;
    _this.blocks = {};
    _this.blockCount = 0;
    _this.virtualRowCount = cacheParams.initialRowCount;
    _this.cacheParams = cacheParams;
    return _this;
  }

  RowNodeCache.prototype.destroy = function () {
    var _this = this;

    _super.prototype.destroy.call(this);

    this.forEachBlockInOrder(function (block) {
      return _this.destroyBlock(block);
    });
  };

  RowNodeCache.prototype.init = function () {
    var _this = this;

    this.active = true;
    this.addDestroyFunc(function () {
      return _this.active = false;
    });
  };

  RowNodeCache.prototype.isActive = function () {
    return this.active;
  };

  RowNodeCache.prototype.getVirtualRowCount = function () {
    return this.virtualRowCount;
  };

  RowNodeCache.prototype.hack_setVirtualRowCount = function (virtualRowCount) {
    this.virtualRowCount = virtualRowCount;
  };

  RowNodeCache.prototype.isMaxRowFound = function () {
    return this.maxRowFound;
  }; // listener on EVENT_LOAD_COMPLETE


  RowNodeCache.prototype.onPageLoaded = function (event) {
    this.cacheParams.rowNodeBlockLoader.loadComplete();
    this.checkBlockToLoad(); // if we are not active, then we ignore all events, otherwise we could end up getting the
    // grid to refresh even though we are no longer the active cache

    if (!this.isActive()) {
      return;
    }

    this.logger.log("onPageLoaded: page = " + event.page.getBlockNumber() + ", lastRow = " + event.lastRow);

    if (event.success) {
      this.checkVirtualRowCount(event.page, event.lastRow);
    }
  };

  RowNodeCache.prototype.purgeBlocksIfNeeded = function (blockToExclude) {
    var _this = this; // put all candidate blocks into a list for sorting


    var blocksForPurging = [];
    this.forEachBlockInOrder(function (block) {
      // we exclude checking for the page just created, as this has yet to be accessed and hence
      // the lastAccessed stamp will not be updated for the first time yet
      if (block === blockToExclude) {
        return;
      }

      blocksForPurging.push(block);
    }); // note: need to verify that this sorts items in the right order

    blocksForPurging.sort(function (a, b) {
      return b.getLastAccessed() - a.getLastAccessed();
    }); // we remove (maxBlocksInCache - 1) as we already excluded the 'just created' page.
    // in other words, after the splice operation below, we have taken out the blocks
    // we want to keep, which means we are left with blocks that we can potentially purge

    var maxBlocksProvided = this.cacheParams.maxBlocksInCache > 0;
    var blocksToKeep = maxBlocksProvided ? this.cacheParams.maxBlocksInCache - 1 : null;
    var emptyBlocksToKeep = RowNodeCache.MAX_EMPTY_BLOCKS_TO_KEEP - 1;
    blocksForPurging.forEach(function (block, index) {
      var purgeBecauseBlockEmpty = block.getState() === rowNodeBlock_1.RowNodeBlock.STATE_DIRTY && index >= emptyBlocksToKeep;
      var purgeBecauseCacheFull = maxBlocksProvided ? index >= blocksToKeep : false;

      if (purgeBecauseBlockEmpty || purgeBecauseCacheFull) {
        // we never purge blocks if they are open, as purging them would mess up with
        // our indexes, it would be very messy to restore the purged block to it's
        // previous state if it had open children (and what if open children of open
        // children, jeeeesus, just thinking about it freaks me out) so best is have a
        // rule, if block is open, we never purge.
        if (block.isAnyNodeOpen(_this.virtualRowCount)) {
          return;
        } // at this point, block is not needed, and no open nodes, so burn baby burn


        _this.removeBlockFromCache(block);
      }
    });
  };

  RowNodeCache.prototype.postCreateBlock = function (newBlock) {
    newBlock.addEventListener(rowNodeBlock_1.RowNodeBlock.EVENT_LOAD_COMPLETE, this.onPageLoaded.bind(this));
    this.setBlock(newBlock.getBlockNumber(), newBlock);
    this.purgeBlocksIfNeeded(newBlock);
    this.checkBlockToLoad();
  };

  RowNodeCache.prototype.removeBlockFromCache = function (blockToRemove) {
    if (!blockToRemove) {
      return;
    }

    this.destroyBlock(blockToRemove); // we do not want to remove the 'loaded' event listener, as the
    // concurrent loads count needs to be updated when the load is complete
    // if the purged page is in loading state
  }; // gets called after: 1) block loaded 2) block created 3) cache refresh


  RowNodeCache.prototype.checkBlockToLoad = function () {
    this.cacheParams.rowNodeBlockLoader.checkBlockToLoad();
  };

  RowNodeCache.prototype.checkVirtualRowCount = function (block, lastRow) {
    // if client provided a last row, we always use it, as it could change between server calls
    // if user deleted data and then called refresh on the grid.
    if (typeof lastRow === 'number' && lastRow >= 0) {
      this.virtualRowCount = lastRow;
      this.maxRowFound = true;
      this.onCacheUpdated();
    } else if (!this.maxRowFound) {
      // otherwise, see if we need to add some virtual rows
      var lastRowIndex = (block.getBlockNumber() + 1) * this.cacheParams.blockSize;
      var lastRowIndexPlusOverflow = lastRowIndex + this.cacheParams.overflowSize;

      if (this.virtualRowCount < lastRowIndexPlusOverflow) {
        this.virtualRowCount = lastRowIndexPlusOverflow;
        this.onCacheUpdated();
      } else if (this.cacheParams.dynamicRowHeight) {
        // the only other time is if dynamic row height, as loading rows
        // will change the height of the block, given the height of the rows
        // is only known after the row is loaded.
        this.onCacheUpdated();
      }
    }
  };

  RowNodeCache.prototype.setVirtualRowCount = function (rowCount, maxRowFound) {
    this.virtualRowCount = rowCount; // if undefined is passed, we do not set this value, if one of {true,false}
    // is passed, we do set the value.

    if (utils_1._.exists(maxRowFound)) {
      this.maxRowFound = maxRowFound;
    } // if we are still searching, then the row count must not end at the end
    // of a particular page, otherwise the searching will not pop into the
    // next page


    if (!this.maxRowFound) {
      if (this.virtualRowCount % this.cacheParams.blockSize === 0) {
        this.virtualRowCount++;
      }
    }

    this.onCacheUpdated();
  };

  RowNodeCache.prototype.forEachNodeDeep = function (callback, sequence) {
    var _this = this;

    this.forEachBlockInOrder(function (block) {
      block.forEachNodeDeep(callback, sequence, _this.virtualRowCount);
    });
  };

  RowNodeCache.prototype.forEachBlockInOrder = function (callback) {
    var ids = this.getBlockIdsSorted();
    this.forEachBlockId(ids, callback);
  };

  RowNodeCache.prototype.forEachBlockInReverseOrder = function (callback) {
    var ids = this.getBlockIdsSorted().reverse();
    this.forEachBlockId(ids, callback);
  };

  RowNodeCache.prototype.forEachBlockId = function (ids, callback) {
    var _this = this;

    ids.forEach(function (id) {
      var block = _this.blocks[id];
      callback(block, id);
    });
  };

  RowNodeCache.prototype.getBlockIdsSorted = function () {
    // get all page id's as NUMBERS (not strings, as we need to sort as numbers) and in descending order
    var numberComparator = function numberComparator(a, b) {
      return a - b;
    }; // default comparator for array is string comparison


    var blockIds = Object.keys(this.blocks).map(function (idStr) {
      return parseInt(idStr, 10);
    }).sort(numberComparator);
    return blockIds;
  };

  RowNodeCache.prototype.getBlock = function (blockId) {
    return this.blocks[blockId];
  };

  RowNodeCache.prototype.setBlock = function (id, block) {
    this.blocks[id] = block;
    this.blockCount++;
    this.cacheParams.rowNodeBlockLoader.addBlock(block);
  };

  RowNodeCache.prototype.destroyBlock = function (block) {
    delete this.blocks[block.getBlockNumber()];
    block.destroy();
    this.blockCount--;
    this.cacheParams.rowNodeBlockLoader.removeBlock(block);
  }; // gets called 1) row count changed 2) cache purged 3) items inserted


  RowNodeCache.prototype.onCacheUpdated = function () {
    if (this.isActive()) {
      // this results in both row models (infinite and server side) firing ModelUpdated,
      // however server side row model also updates the row indexes first
      var event_1 = {
        type: RowNodeCache.EVENT_CACHE_UPDATED
      };
      this.dispatchEvent(event_1);
    }
  };

  RowNodeCache.prototype.purgeCache = function () {
    var _this = this;

    this.forEachBlockInOrder(function (block) {
      return _this.removeBlockFromCache(block);
    }); // re-initialise cache - this ensures a cache with no rows can reload when purged!

    this.virtualRowCount = this.cacheParams.initialRowCount;
    this.maxRowFound = false;
    this.onCacheUpdated();
  };

  RowNodeCache.prototype.getRowNodesInRange = function (firstInRange, lastInRange) {
    var _this = this;

    var result = [];
    var lastBlockId = -1;
    var inActiveRange = false;
    var numberSequence = new utils_1.NumberSequence(); // if only one node passed, we start the selection at the top

    if (utils_1._.missing(firstInRange)) {
      inActiveRange = true;
    }

    var foundGapInSelection = false;
    this.forEachBlockInOrder(function (block, id) {
      if (foundGapInSelection) {
        return;
      }

      if (inActiveRange && lastBlockId + 1 !== id) {
        foundGapInSelection = true;
        return;
      }

      lastBlockId = id;
      block.forEachNodeShallow(function (rowNode) {
        var hitFirstOrLast = rowNode === firstInRange || rowNode === lastInRange;

        if (inActiveRange || hitFirstOrLast) {
          result.push(rowNode);
        }

        if (hitFirstOrLast) {
          inActiveRange = !inActiveRange;
        }
      }, numberSequence, _this.virtualRowCount);
    }); // inActiveRange will be still true if we never hit the second rowNode

    var invalidRange = foundGapInSelection || inActiveRange;
    return invalidRange ? [] : result;
  };

  RowNodeCache.EVENT_CACHE_UPDATED = 'cacheUpdated'; // this property says how many empty blocks should be in a cache, eg if scrolls down fast and creates 10
  // blocks all for loading, the grid will only load the last 2 - it will assume the blocks the user quickly
  // scrolled over are not needed to be loaded.

  RowNodeCache.MAX_EMPTY_BLOCKS_TO_KEEP = 2;
  return RowNodeCache;
}(beanStub_1.BeanStub);

exports.RowNodeCache = RowNodeCache;

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

var isArray = __webpack_require__(45),
    isSymbol = __webpack_require__(167);
/** Used to match property names within property paths. */


var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;
/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */

function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }

  var type = typeof value;

  if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
    return true;
  }

  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}

module.exports = isKey;

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(75),
    isObjectLike = __webpack_require__(55);
/** `Object#toString` result references. */


var symbolTag = '[object Symbol]';
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */

function isSymbol(value) {
  return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
}

module.exports = isSymbol;

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

var mapCacheClear = __webpack_require__(332),
    mapCacheDelete = __webpack_require__(348),
    mapCacheGet = __webpack_require__(350),
    mapCacheHas = __webpack_require__(351),
    mapCacheSet = __webpack_require__(352);
/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */


function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
} // Add methods to `MapCache`.


MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
module.exports = MapCache;

/***/ }),
/* 169 */
/***/ (function(module, exports) {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || value !== value && other !== other;
}

module.exports = eq;

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(62),
    root = __webpack_require__(46);
/* Built-in method references that are verified to be native. */


var Map = getNative(root, 'Map');
module.exports = Map;

/***/ }),
/* 171 */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */

function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(118),
    stackClear = __webpack_require__(357),
    stackDelete = __webpack_require__(358),
    stackGet = __webpack_require__(359),
    stackHas = __webpack_require__(360),
    stackSet = __webpack_require__(361);
/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */


function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
} // Add methods to `Stack`.


Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;
module.exports = Stack;

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(46),
    stubFalse = __webpack_require__(366);
/** Detect free variable `exports`. */


var freeExports =  true && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */

var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */

var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */

var Buffer = moduleExports ? root.Buffer : undefined;
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */

var isBuffer = nativeIsBuffer || stubFalse;
module.exports = isBuffer;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(174)(module)))

/***/ }),
/* 174 */
/***/ (function(module, exports) {

module.exports = function (module) {
  if (!module.webpackPolyfill) {
    module.deprecate = function () {};

    module.paths = []; // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function get() {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function get() {
        return module.i;
      }
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ }),
/* 175 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function (value) {
    return func(value);
  };
}

module.exports = baseUnary;

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __webpack_require__(231);
/** Detect free variable `exports`. */


var freeExports =  true && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */

var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */

var moduleExports = freeModule && freeModule.exports === freeExports;
/** Detect free variable `process` from Node.js. */

var freeProcess = moduleExports && freeGlobal.process;
/** Used to access faster Node.js helpers. */

var nodeUtil = function () {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    } // Legacy `process.binding('util')` for Node.js < 10.


    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}();

module.exports = nodeUtil;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(174)(module)))

/***/ }),
/* 177 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;
/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */

function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
  return value === proto;
}

module.exports = isPrototype;

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(232),
    isLength = __webpack_require__(171);
/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */


function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

var arrayFilter = __webpack_require__(375),
    stubArray = __webpack_require__(243);
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Built-in value references. */

var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeGetSymbols = Object.getOwnPropertySymbols;
/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */

var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
  if (object == null) {
    return [];
  }

  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function (symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};
module.exports = getSymbols;

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

var Uint8Array = __webpack_require__(249);
/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */


function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

module.exports = cloneArrayBuffer;

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(27);

exports.__esModule = true;
exports.propagateErrors = propagateErrors;
exports.settled = settled;
exports.collectErrors = collectErrors;
exports.default = runValidations;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(__webpack_require__(182));

var _synchronousPromise = __webpack_require__(254);

var _ValidationError = _interopRequireDefault(__webpack_require__(183));

var promise = function promise(sync) {
  return sync ? _synchronousPromise.SynchronousPromise : Promise;
};

var unwrapError = function unwrapError(errors) {
  if (errors === void 0) {
    errors = [];
  }

  return errors.inner && errors.inner.length ? errors.inner : [].concat(errors);
};

function scopeToValue(promises, value, sync) {
  //console.log('scopeToValue', promises, value)
  var p = promise(sync).all(promises); //console.log('scopeToValue B', p)

  var b = p.catch(function (err) {
    if (err.name === 'ValidationError') err.value = value;
    throw err;
  }); //console.log('scopeToValue c', b)

  var c = b.then(function () {
    return value;
  }); //console.log('scopeToValue d', c)

  return c;
}
/**
 * If not failing on the first error, catch the errors
 * and collect them in an array
 */


function propagateErrors(endEarly, errors) {
  return endEarly ? null : function (err) {
    errors.push(err);
    return err.value;
  };
}

function settled(promises, sync) {
  var Promise = promise(sync);
  return Promise.all(promises.map(function (p) {
    return Promise.resolve(p).then(function (value) {
      return {
        fulfilled: true,
        value: value
      };
    }, function (value) {
      return {
        fulfilled: false,
        value: value
      };
    });
  }));
}

function collectErrors(_ref) {
  var validations = _ref.validations,
      value = _ref.value,
      path = _ref.path,
      sync = _ref.sync,
      errors = _ref.errors,
      sort = _ref.sort;
  errors = unwrapError(errors);
  return settled(validations, sync).then(function (results) {
    var nestedErrors = results.filter(function (r) {
      return !r.fulfilled;
    }).reduce(function (arr, _ref2) {
      var error = _ref2.value; // we are only collecting validation errors

      if (!_ValidationError.default.isError(error)) {
        throw error;
      }

      return arr.concat(error);
    }, []);
    if (sort) nestedErrors.sort(sort); //show parent errors after the nested ones: name.first, name

    errors = nestedErrors.concat(errors);
    if (errors.length) throw new _ValidationError.default(errors, value, path);
    return value;
  });
}

function runValidations(_ref3) {
  var endEarly = _ref3.endEarly,
      options = (0, _objectWithoutPropertiesLoose2.default)(_ref3, ["endEarly"]);
  if (endEarly) return scopeToValue(options.validations, options.value, options.sync);
  return collectErrors(options);
}

/***/ }),
/* 182 */
/***/ (function(module, exports) {

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

module.exports = _objectWithoutPropertiesLoose;

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(27);

exports.__esModule = true;
exports.default = ValidationError;

var _printValue = _interopRequireDefault(__webpack_require__(124));

var strReg = /\$\{\s*(\w+)\s*\}/g;

var replace = function replace(str) {
  return function (params) {
    return str.replace(strReg, function (_, key) {
      return (0, _printValue.default)(params[key]);
    });
  };
};

function ValidationError(errors, value, field, type) {
  var _this = this;

  this.name = 'ValidationError';
  this.value = value;
  this.path = field;
  this.type = type;
  this.errors = [];
  this.inner = [];
  if (errors) [].concat(errors).forEach(function (err) {
    _this.errors = _this.errors.concat(err.errors || err);
    if (err.inner) _this.inner = _this.inner.concat(err.inner.length ? err.inner : err);
  });
  this.message = this.errors.length > 1 ? this.errors.length + " errors occurred" : this.errors[0];
  if (Error.captureStackTrace) Error.captureStackTrace(this, ValidationError);
}

ValidationError.prototype = Object.create(Error.prototype);
ValidationError.prototype.constructor = ValidationError;

ValidationError.isError = function (err) {
  return err && err.name === 'ValidationError';
};

ValidationError.formatError = function (message, params) {
  if (typeof message === 'string') message = replace(message);

  var fn = function fn(params) {
    params.path = params.label || params.path || 'this';
    return typeof message === 'function' ? message(params) : message;
  };

  return arguments.length === 1 ? fn : fn(params);
};

module.exports = exports["default"];

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var reactIs = __webpack_require__(320);
/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */


var REACT_STATICS = {
  childContextTypes: true,
  contextType: true,
  contextTypes: true,
  defaultProps: true,
  displayName: true,
  getDefaultProps: true,
  getDerivedStateFromError: true,
  getDerivedStateFromProps: true,
  mixins: true,
  propTypes: true,
  type: true
};
var KNOWN_STATICS = {
  name: true,
  length: true,
  prototype: true,
  caller: true,
  callee: true,
  arguments: true,
  arity: true
};
var FORWARD_REF_STATICS = {
  '$$typeof': true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  '$$typeof': true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;

function getStatics(component) {
  if (reactIs.isMemo(component)) {
    return MEMO_STATICS;
  }

  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
}

var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;

function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
  if (typeof sourceComponent !== 'string') {
    // don't hoist over string (html) components
    if (objectPrototype) {
      var inheritedComponent = getPrototypeOf(sourceComponent);

      if (inheritedComponent && inheritedComponent !== objectPrototype) {
        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
      }
    }

    var keys = getOwnPropertyNames(sourceComponent);

    if (getOwnPropertySymbols) {
      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
    }

    var targetStatics = getStatics(targetComponent);
    var sourceStatics = getStatics(sourceComponent);

    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];

      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

        try {
          // Avoid failures from read-only properties
          defineProperty(targetComponent, key, descriptor);
        } catch (e) {}
      }
    }
  }

  return targetComponent;
}

module.exports = hoistNonReactStatics;

/***/ }),
/* 185 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, module) {/* harmony import */ var _ponyfill_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(271);
/* global window */

var root;

if (typeof self !== 'undefined') {
  root = self;
} else if (typeof window !== 'undefined') {
  root = window;
} else if (typeof global !== 'undefined') {
  root = global;
} else if (true) {
  root = module;
} else {}

var result = Object(_ponyfill_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(root);
/* harmony default export */ __webpack_exports__["a"] = (result);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(51), __webpack_require__(116)(module)))

/***/ }),
/* 186 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return rawAsap; });
// Use the fastest means possible to execute a task in its own turn, with
// priority over other events including IO, animation, reflow, and redraw
// events in browsers.
//
// An exception thrown by a task will permanently interrupt the processing of
// subsequent tasks. The higher level `asap` function ensures that if an
// exception is thrown by a task, that the task queue will continue flushing as
// soon as possible, but if you use `rawAsap` directly, you are responsible to
// either ensure that no exceptions are thrown from your task, or to manually
// call `rawAsap.requestFlush` if an exception is thrown.
function rawAsap(task) {
  if (!queue.length) {
    requestFlush();
    flushing = true;
  } // Equivalent to push, but avoids a function call.


  queue[queue.length] = task;
}
var queue = []; // Once a flush has been requested, no further calls to `requestFlush` are
// necessary until the next `flush` completes.
// @ts-ignore

var flushing = false; // `requestFlush` is an implementation-specific method that attempts to kick
// off a `flush` event as quickly as possible. `flush` will attempt to exhaust
// the event queue before yielding to the browser's own event loop.

var requestFlush; // The position of the next task to execute in the task queue. This is
// preserved between calls to `flush` so that it can be resumed if
// a task throws an exception.

var index = 0; // If a task schedules additional tasks recursively, the task queue can grow
// unbounded. To prevent memory exhaustion, the task queue will periodically
// truncate already-completed tasks.

var capacity = 1024; // The flush function processes all tasks that have been scheduled with
// `rawAsap` unless and until one of those tasks throws an exception.
// If a task throws an exception, `flush` ensures that its state will remain
// consistent and will resume where it left off when called again.
// However, `flush` does not make any arrangements to be called again if an
// exception is thrown.

function flush() {
  while (index < queue.length) {
    var currentIndex = index; // Advance the index before calling the task. This ensures that we will
    // begin flushing on the next task the task throws an error.

    index = index + 1;
    queue[currentIndex].call(); // Prevent leaking memory for long chains of recursive calls to `asap`.
    // If we call `asap` within tasks scheduled by `asap`, the queue will
    // grow, but to avoid an O(n) walk for every task we execute, we don't
    // shift tasks off the queue after they have been executed.
    // Instead, we periodically shift 1024 tasks off the queue.

    if (index > capacity) {
      // Manually shift all values starting at the index back to the
      // beginning of the queue.
      for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
        queue[scan] = queue[scan + index];
      }

      queue.length -= index;
      index = 0;
    }
  }

  queue.length = 0;
  index = 0;
  flushing = false;
} // `requestFlush` is implemented using a strategy based on data collected from
// every available SauceLabs Selenium web driver worker at time of writing.
// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593
// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
// have WebKitMutationObserver but not un-prefixed MutationObserver.
// Must use `global` or `self` instead of `window` to work in both frames and web
// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.

/* globals self */


var scope = typeof global !== 'undefined' ? global : self;
var BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver; // MutationObservers are desirable because they have high priority and work
// reliably everywhere they are implemented.
// They are implemented in all modern browsers.
//
// - Android 4-4.3
// - Chrome 26-34
// - Firefox 14-29
// - Internet Explorer 11
// - iPad Safari 6-7.1
// - iPhone Safari 7-7.1
// - Safari 6-7

if (typeof BrowserMutationObserver === 'function') {
  requestFlush = makeRequestCallFromMutationObserver(flush); // MessageChannels are desirable because they give direct access to the HTML
  // task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera
  // 11-12, and in web workers in many engines.
  // Although message channels yield to any queued rendering and IO tasks, they
  // would be better than imposing the 4ms delay of timers.
  // However, they do not work reliably in Internet Explorer or Safari.
  // Internet Explorer 10 is the only browser that has setImmediate but does
  // not have MutationObservers.
  // Although setImmediate yields to the browser's renderer, it would be
  // preferrable to falling back to setTimeout since it does not have
  // the minimum 4ms penalty.
  // Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and
  // Desktop to a lesser extent) that renders both setImmediate and
  // MessageChannel useless for the purposes of ASAP.
  // https://github.com/kriskowal/q/issues/396
  // Timers are implemented universally.
  // We fall back to timers in workers in most engines, and in foreground
  // contexts in the following browsers.
  // However, note that even this simple case requires nuances to operate in a
  // broad spectrum of browsers.
  //
  // - Firefox 3-13
  // - Internet Explorer 6-9
  // - iPad Safari 4.3
  // - Lynx 2.8.7
} else {
  requestFlush = makeRequestCallFromTimer(flush);
} // `requestFlush` requests that the high priority event queue be flushed as
// soon as possible.
// This is useful to prevent an error thrown in a task from stalling the event
// queue if the exception handled by Node.js’s
// `process.on("uncaughtException")` or by a domain.


rawAsap.requestFlush = requestFlush; // To request a high priority event, we induce a mutation observer by toggling
// the text of a text node between "1" and "-1".

function makeRequestCallFromMutationObserver(callback) {
  var toggle = 1;
  var observer = new BrowserMutationObserver(callback);
  var node = document.createTextNode('');
  observer.observe(node, {
    characterData: true
  });
  return function requestCall() {
    toggle = -toggle;
    node.data = toggle;
  };
} // The message channel technique was discovered by Malte Ubl and was the
// original foundation for this library.
// http://www.nonblocking.io/2011/06/windownexttick.html
// Safari 6.0.5 (at least) intermittently fails to create message ports on a
// page's first load. Thankfully, this version of Safari supports
// MutationObservers, so we don't need to fall back in that case.
// function makeRequestCallFromMessageChannel(callback) {
//     var channel = new MessageChannel();
//     channel.port1.onmessage = callback;
//     return function requestCall() {
//         channel.port2.postMessage(0);
//     };
// }
// For reasons explained above, we are also unable to use `setImmediate`
// under any circumstances.
// Even if we were, there is another bug in Internet Explorer 10.
// It is not sufficient to assign `setImmediate` to `requestFlush` because
// `setImmediate` must be called *by name* and therefore must be wrapped in a
// closure.
// Never forget.
// function makeRequestCallFromSetImmediate(callback) {
//     return function requestCall() {
//         setImmediate(callback);
//     };
// }
// Safari 6.0 has a problem where timers will get lost while the user is
// scrolling. This problem does not impact ASAP because Safari 6.0 supports
// mutation observers, so that implementation is used instead.
// However, if we ever elect to use timers in Safari, the prevalent work-around
// is to add a scroll event listener that calls for a flush.
// `setTimeout` does not call the passed callback if the delay is less than
// approximately 7 in web workers in Firefox 8 through 18, and sometimes not
// even then.


function makeRequestCallFromTimer(callback) {
  return function requestCall() {
    // We dispatch a timeout with a specified delay of 0 for engines that
    // can reliably accommodate that request. This will usually be snapped
    // to a 4 milisecond delay, but once we're flushing, there's no delay
    // between events.
    var timeoutHandle = setTimeout(handleTimer, 0); // However, since this timer gets frequently dropped in Firefox
    // workers, we enlist an interval handle that will try to fire
    // an event 20 times per second until it succeeds.

    var intervalHandle = setInterval(handleTimer, 50);

    function handleTimer() {
      // Whichever timer succeeds will cancel both timers and
      // execute the callback.
      clearTimeout(timeoutHandle);
      clearInterval(intervalHandle);
      callback();
    }
  };
} // This is for `asap.js` only.
// Its name will be periodically randomized to break any code that depends on
// its existence.


rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer; // ASAP was originally a nextTick shim included in Q. This was factored out
// into this ASAP package. It was later adapted to RSVP which made further
// amendments. These decisions, particularly to marginalize MessageChannel and
// to capture the MutationObserver implementation in a closure, were integrated
// back into ASAP proper.
// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(51)))

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* eslint-disable no-unused-vars */

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError('Object.assign cannot be called with null or undefined');
  }

  return Object(val);
}

function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    } // Detect buggy property enumeration order in older V8 versions.
    // https://bugs.chromium.org/p/v8/issues/detail?id=4118


    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

    test1[5] = 'de';

    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test2 = {};

    for (var i = 0; i < 10; i++) {
      test2['_' + String.fromCharCode(i)] = i;
    }

    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
      return test2[n];
    });

    if (order2.join('') !== '0123456789') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test3 = {};
    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
      test3[letter] = letter;
    });

    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
      return false;
    }

    return true;
  } catch (err) {
    // We don't expect any of the above to throw, but better to be safe.
    return false;
  }
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
  var from;
  var to = toObject(target);
  var symbols;

  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }

    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);

      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }

  return to;
};

/***/ }),
/* 188 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "polyfill", function() { return polyfill; });
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
function componentWillMount() {
  // Call this.constructor.gDSFP to support sub-classes.
  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);

  if (state !== null && state !== undefined) {
    this.setState(state);
  }
}

function componentWillReceiveProps(nextProps) {
  // Call this.constructor.gDSFP to support sub-classes.
  // Use the setState() updater to ensure state isn't stale in certain edge cases.
  function updater(prevState) {
    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
    return state !== null && state !== undefined ? state : null;
  } // Binding "this" is important for shallow renderer support.


  this.setState(updater.bind(this));
}

function componentWillUpdate(nextProps, nextState) {
  try {
    var prevProps = this.props;
    var prevState = this.state;
    this.props = nextProps;
    this.state = nextState;
    this.__reactInternalSnapshotFlag = true;
    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(prevProps, prevState);
  } finally {
    this.props = prevProps;
    this.state = prevState;
  }
} // React may warn about cWM/cWRP/cWU methods being deprecated.
// Add a flag to suppress these warnings for this special case.


componentWillMount.__suppressDeprecationWarning = true;
componentWillReceiveProps.__suppressDeprecationWarning = true;
componentWillUpdate.__suppressDeprecationWarning = true;

function polyfill(Component) {
  var prototype = Component.prototype;

  if (!prototype || !prototype.isReactComponent) {
    throw new Error('Can only polyfill class components');
  }

  if (typeof Component.getDerivedStateFromProps !== 'function' && typeof prototype.getSnapshotBeforeUpdate !== 'function') {
    return Component;
  } // If new component APIs are defined, "unsafe" lifecycles won't be called.
  // Error if any of these lifecycles are present,
  // Because they would work differently between older and newer (16.3+) versions of React.


  var foundWillMountName = null;
  var foundWillReceivePropsName = null;
  var foundWillUpdateName = null;

  if (typeof prototype.componentWillMount === 'function') {
    foundWillMountName = 'componentWillMount';
  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
    foundWillMountName = 'UNSAFE_componentWillMount';
  }

  if (typeof prototype.componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'componentWillReceiveProps';
  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
  }

  if (typeof prototype.componentWillUpdate === 'function') {
    foundWillUpdateName = 'componentWillUpdate';
  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
    foundWillUpdateName = 'UNSAFE_componentWillUpdate';
  }

  if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
    var componentName = Component.displayName || Component.name;
    var newApiName = typeof Component.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
    throw Error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + componentName + ' uses ' + newApiName + ' but also contains the following legacy lifecycles:' + (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') + (foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '') + (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') + '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-async-component-lifecycle-hooks');
  } // React <= 16.2 does not support static getDerivedStateFromProps.
  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
  // Newer versions of React will ignore these lifecycles if gDSFP exists.


  if (typeof Component.getDerivedStateFromProps === 'function') {
    prototype.componentWillMount = componentWillMount;
    prototype.componentWillReceiveProps = componentWillReceiveProps;
  } // React <= 16.2 does not support getSnapshotBeforeUpdate.
  // As a workaround, use cWU to invoke the new lifecycle.
  // Newer versions of React will ignore that lifecycle if gSBU exists.


  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
    if (typeof prototype.componentDidUpdate !== 'function') {
      throw new Error('Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype');
    }

    prototype.componentWillUpdate = componentWillUpdate;
    var componentDidUpdate = prototype.componentDidUpdate;

    prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {
      // 16.3+ will not execute our will-update method;
      // It will pass a snapshot value to did-update though.
      // Older versions will require our polyfilled will-update value.
      // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
      // Because for <= 15.x versions this might be a "prevContext" object.
      // We also can't just check "__reactInternalSnapshot",
      // Because get-snapshot might return a falsy value.
      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
      var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;
      componentDidUpdate.call(this, prevProps, prevState, snapshot);
    };
  }

  return Component;
}



/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Flip = exports.Zoom = exports.Slide = exports.Bounce = void 0;

var _cssTransition = _interopRequireDefault(__webpack_require__(190));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var Bounce = (0, _cssTransition.default)({
  enter: 'Toastify__bounce-enter',
  exit: 'Toastify__bounce-exit',
  appendPosition: true
});
exports.Bounce = Bounce;
var Slide = (0, _cssTransition.default)({
  enter: 'Toastify__slide-enter',
  exit: 'Toastify__slide-exit',
  duration: [450, 750],
  appendPosition: true
});
exports.Slide = Slide;
var Zoom = (0, _cssTransition.default)({
  enter: 'Toastify__zoom-enter',
  exit: 'Toastify__zoom-exit'
});
exports.Zoom = Zoom;
var Flip = (0, _cssTransition.default)({
  enter: 'Toastify__flip-enter',
  exit: 'Toastify__flip-exit'
});
exports.Flip = Flip;

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = _default;

var _react = _interopRequireDefault(__webpack_require__(0));

var _Transition = _interopRequireDefault(__webpack_require__(288));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var noop = function noop() {};

function _default(_ref) {
  var enter = _ref.enter,
      exit = _ref.exit,
      _ref$duration = _ref.duration,
      duration = _ref$duration === void 0 ? 750 : _ref$duration,
      _ref$appendPosition = _ref.appendPosition,
      appendPosition = _ref$appendPosition === void 0 ? false : _ref$appendPosition;
  return function Animation(_ref2) {
    var children = _ref2.children,
        position = _ref2.position,
        preventExitTransition = _ref2.preventExitTransition,
        props = _objectWithoutPropertiesLoose(_ref2, ["children", "position", "preventExitTransition"]);

    var enterClassName = appendPosition ? enter + "--" + position : enter;
    var exitClassName = appendPosition ? exit + "--" + position : exit;
    var enterDuration, exitDuration;

    if (Array.isArray(duration) && duration.length === 2) {
      enterDuration = duration[0];
      exitDuration = duration[1];
    } else {
      enterDuration = exitDuration = duration;
    }

    var onEnter = function onEnter(node) {
      node.classList.add(enterClassName);
      node.style.animationFillMode = 'forwards';
      node.style.animationDuration = enterDuration * 0.001 + "s";
    };

    var onEntered = function onEntered(node) {
      node.classList.remove(enterClassName);
      node.style.cssText = '';
    };

    var onExit = function onExit(node) {
      node.classList.add(exitClassName);
      node.style.animationFillMode = 'forwards';
      node.style.animationDuration = exitDuration * 0.001 + "s";
    };

    return _react.default.createElement(_Transition.default, _extends({}, props, {
      timeout: preventExitTransition ? 0 : {
        enter: enterDuration,
        exit: exitDuration
      },
      onEnter: onEnter,
      onEntered: onEntered,
      onExit: preventExitTransition ? noop : onExit
    }), children);
  };
}

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;
var eventManager = {
  list: new Map(),
  on: function on(event, callback) {
    this.list.has(event) || this.list.set(event, []);
    this.list.get(event).push(callback);
    return this;
  },
  off: function off(event) {
    this.list.delete(event);
    return this;
  },
  emit: function emit(event) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (!this.list.has(event)) {
      return false;
    }

    this.list.get(event).forEach(function (callback) {
      return setTimeout(function () {
        return callback.call.apply(callback, [null].concat(args));
      }, 0);
    });
    return true;
  }
};
var _default = eventManager;
exports.default = _default;

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});

var PropertyKeys =
/** @class */
function () {
  function PropertyKeys() {}

  PropertyKeys.STRING_PROPERTIES = ['sortingOrder', 'rowClass', 'rowSelection', 'overlayLoadingTemplate', 'overlayNoRowsTemplate', 'quickFilterText', 'rowModelType', 'editType', 'domLayout', 'clipboardDeliminator', 'rowGroupPanelShow', 'multiSortKey', 'pivotColumnGroupTotals', 'pivotRowTotals', 'pivotPanelShow'];
  PropertyKeys.OBJECT_PROPERTIES = ['components', 'frameworkComponents', 'rowStyle', 'context', 'autoGroupColumnDef', 'groupColumnDef', 'localeText', 'icons', 'datasource', 'serverSideDatasource', 'viewportDatasource', 'groupRowRendererParams', 'aggFuncs', 'fullWidthCellRendererParams', 'defaultColGroupDef', 'defaultColDef', 'defaultExportParams', 'columnTypes', 'rowClassRules', 'detailGridOptions', 'detailCellRendererParams', 'loadingCellRendererParams', 'loadingOverlayComponentParams', 'noRowsOverlayComponentParams', 'popupParent', 'colResizeDefault', 'reduxStore', 'statusBar', 'sideBar'];
  PropertyKeys.ARRAY_PROPERTIES = ['slaveGrids', 'alignedGrids', 'rowData', 'columnDefs', 'excelStyles', 'pinnedTopRowData', 'pinnedBottomRowData'
  /** @deprecated */
  ];
  PropertyKeys.NUMBER_PROPERTIES = ['rowHeight', 'detailRowHeight', 'rowBuffer', 'colWidth', 'headerHeight', 'groupHeaderHeight', 'floatingFiltersHeight', 'pivotHeaderHeight', 'pivotGroupHeaderHeight', 'groupDefaultExpanded', 'minColWidth', 'maxColWidth', 'viewportRowModelPageSize', 'viewportRowModelBufferSize', 'autoSizePadding', 'maxBlocksInCache', 'maxConcurrentDatasourceRequests', 'cacheOverflowSize', 'paginationPageSize', 'cacheBlockSize', 'infiniteInitialRowCount', 'scrollbarWidth', 'paginationStartPage', 'infiniteBlockSize', 'batchUpdateWaitMillis', 'blockLoadDebounceMillis'];
  PropertyKeys.BOOLEAN_PROPERTIES = ['toolPanelSuppressRowGroups', 'toolPanelSuppressValues', 'toolPanelSuppressPivots', 'toolPanelSuppressPivotMode', 'toolPanelSuppressSideButtons', 'toolPanelSuppressColumnFilter', 'toolPanelSuppressColumnSelectAll', 'toolPanelSuppressColumnExpandAll', 'suppressMakeColumnVisibleAfterUnGroup', 'suppressRowClickSelection', 'suppressCellSelection', 'suppressHorizontalScroll', 'debug', 'enableBrowserTooltips', 'enableColResize', 'enableCellExpressions', 'enableSorting', 'enableServerSideSorting', 'enableFilter', 'enableServerSideFilter', 'angularCompileRows', 'angularCompileFilters', 'angularCompileHeaders', 'groupSuppressAutoColumn', 'groupSelectsChildren', 'groupIncludeFooter', 'groupIncludeTotalFooter', 'groupUseEntireRow', 'groupSuppressRow', 'groupSuppressBlankHeader', 'forPrint', 'suppressMenuHide', 'rowDeselection', 'unSortIcon', 'suppressMultiSort', 'singleClickEdit', 'suppressLoadingOverlay', 'suppressNoRowsOverlay', 'suppressAutoSize', 'suppressParentsInRowNodes', 'showToolPanel', 'suppressColumnMoveAnimation', 'suppressMovableColumns', 'suppressFieldDotNotation', 'enableRangeSelection', 'deltaSort', 'suppressTouch', 'suppressAsyncEvents', 'allowContextMenuWithControlKey', 'suppressContextMenu', 'suppressMenuFilterPanel', 'suppressMenuMainPanel', 'suppressMenuColumnPanel', 'rememberGroupStateWhenNewData', 'enableCellChangeFlash', 'suppressDragLeaveHidesColumns', 'suppressMiddleClickScrolls', 'suppressPreventDefaultOnMouseWheel', 'suppressUseColIdForGroups', 'suppressCopyRowsToClipboard', 'copyHeadersToClipboard', 'pivotMode', 'suppressAggFuncInHeader', 'suppressColumnVirtualisation', 'suppressAggAtRootLevel', 'suppressFocusAfterRefresh', 'functionsPassive', 'functionsReadOnly', 'animateRows', 'groupSelectsFiltered', 'groupRemoveSingleChildren', 'groupRemoveLowestSingleChildren', 'enableRtl', 'suppressClickEdit', 'rowDragManaged', 'suppressRowDrag', 'enableGroupEdit', 'embedFullWidthRows', 'deprecatedEmbedFullWidthRows', 'suppressTabbing', 'suppressPaginationPanel', 'floatingFilter', 'groupHideOpenParents', 'groupMultiAutoColumn', 'pagination', 'stopEditingWhenGridLosesFocus', 'paginationAutoPageSize', 'suppressScrollOnNewData', 'purgeClosedRowNodes', 'cacheQuickFilter', 'deltaRowDataMode', 'ensureDomOrder', 'accentedSort', 'pivotTotals', 'suppressChangeDetection', 'valueCache', 'valueCacheNeverExpires', 'aggregateOnlyChangedColumns', 'suppressAnimationFrame', 'suppressExcelExport', 'suppressCsvExport', 'treeData', 'masterDetail', 'suppressMultiRangeSelection', 'enterMovesDownAfterEdit', 'enterMovesDown', 'suppressPropertyNamesCheck', 'rowMultiSelectWithClick', 'contractColumnSelection', 'suppressEnterpriseResetOnNewColumns', 'enableOldSetFilterModel', 'suppressRowHoverHighlight', 'gridAutoHeight', 'suppressRowTransform', 'suppressClipboardPaste', 'serverSideSortingAlwaysResets', 'reactNext', 'suppressSetColumnStateEvents', 'enableCharts', 'deltaColumnMode', 'suppressMaintainUnsortedOrder', 'enableCellTextSelection', 'suppressBrowserResizeObserver', 'suppressMaxRenderedRowRestriction', 'excludeChildrenWhenTreeDataFiltering'];
  PropertyKeys.FUNCTION_PROPERTIES = ['localeTextFunc', 'groupRowInnerRenderer', 'groupRowInnerRendererFramework', 'dateComponent', 'dateComponentFramework', 'groupRowRenderer', 'groupRowRendererFramework', 'isExternalFilterPresent', 'getRowHeight', 'doesExternalFilterPass', 'getRowClass', 'getRowStyle', 'getRowClassRules', 'traverseNode', 'getContextMenuItems', 'getMainMenuItems', 'processRowPostCreate', 'processCellForClipboard', 'getNodeChildDetails', 'groupRowAggNodes', 'getRowNodeId', 'isFullWidthCell', 'fullWidthCellRenderer', 'fullWidthCellRendererFramework', 'doesDataFlower', 'processSecondaryColDef', 'processSecondaryColGroupDef', 'getBusinessKeyForNode', 'sendToClipboard', 'navigateToNextCell', 'tabToNextCell', 'getDetailRowData', 'processCellFromClipboard', 'getDocument', 'postProcessPopup', 'getChildCount', 'getDataPath', 'loadingCellRenderer', 'loadingCellRendererFramework', 'loadingOverlayComponent', 'loadingOverlayComponentFramework', 'noRowsOverlayComponent', 'noRowsOverlayComponentFramework', 'detailCellRenderer', 'detailCellRendererFramework', 'onGridReady', 'defaultGroupSortComparator', 'isRowMaster', 'isRowSelectable', 'postSort', 'processHeaderForClipboard', 'paginationNumberFormatter', 'processDataFromClipboard', 'getServerSideGroupKey', 'isServerSideGroup', 'suppressKeyboardEvent'];
  PropertyKeys.ALL_PROPERTIES = PropertyKeys.ARRAY_PROPERTIES.concat(PropertyKeys.OBJECT_PROPERTIES).concat(PropertyKeys.STRING_PROPERTIES).concat(PropertyKeys.NUMBER_PROPERTIES).concat(PropertyKeys.FUNCTION_PROPERTIES).concat(PropertyKeys.BOOLEAN_PROPERTIES); // used when doing property checks - this causes noise when using frameworks which can add their own fw specific
  // properties to colDefs, gridOptions etc

  PropertyKeys.FRAMEWORK_PROPERTIES = ['__ob__', '__metadata__', 'mappedColumnProperties', 'hasChildColumns', 'toColDef', 'createColDefFromGridColumn'];
  return PropertyKeys;
}();

exports.PropertyKeys = PropertyKeys;

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var dateFilter_1 = __webpack_require__(149);

var componentAnnotations_1 = __webpack_require__(25);

var userComponentFactory_1 = __webpack_require__(35);

var component_1 = __webpack_require__(22);

var constants_1 = __webpack_require__(19);

var utils_1 = __webpack_require__(6);

var InputTextFloatingFilterComp =
/** @class */
function (_super) {
  __extends(InputTextFloatingFilterComp, _super);

  function InputTextFloatingFilterComp() {
    var _this = _super.call(this, "<div class=\"ag-input-text-wrapper\"><input ref=\"eColumnFloatingFilter\" class=\"ag-floating-filter-input\"></div>") || this;

    _this.lastKnownModel = null;
    return _this;
  }

  InputTextFloatingFilterComp.prototype.init = function (params) {
    this.onFloatingFilterChanged = params.onFloatingFilterChanged;
    this.currentParentModel = params.currentParentModel;
    var debounceMs = params.debounceMs != null ? params.debounceMs : 500;

    var toDebounce = utils_1._.debounce(this.syncUpWithParentFilter.bind(this), debounceMs);

    this.addDestroyableEventListener(this.eColumnFloatingFilter, 'input', toDebounce);
    this.addDestroyableEventListener(this.eColumnFloatingFilter, 'keypress', toDebounce);
    this.addDestroyableEventListener(this.eColumnFloatingFilter, 'keydown', toDebounce);
    var columnDef = params.column.getDefinition();

    if (columnDef.filterParams && columnDef.filterParams.filterOptions && columnDef.filterParams.filterOptions.length === 1 && columnDef.filterParams.filterOptions[0] === 'inRange') {
      this.eColumnFloatingFilter.disabled = true;
    }
  };

  InputTextFloatingFilterComp.prototype.onParentModelChanged = function (parentModel, combinedFilter) {
    if (combinedFilter != null) {
      this.eColumnFloatingFilter.value = this.parseAsText(combinedFilter.condition1) + " " + combinedFilter.operator + " " + this.parseAsText(combinedFilter.condition2);
      this.eColumnFloatingFilter.disabled = true;
      this.lastKnownModel = null;
      this.eColumnFloatingFilter.title = this.eColumnFloatingFilter.value;
      this.eColumnFloatingFilter.style.cursor = 'default';
      return;
    } else {
      this.eColumnFloatingFilter.disabled = false;
    }

    if (this.equalModels(this.lastKnownModel, parentModel)) {
      // ensure column floating filter text is blanked out when both ranges are empty
      if (!this.lastKnownModel && !parentModel) {
        this.eColumnFloatingFilter.value = '';
      }

      return;
    }

    this.lastKnownModel = parentModel;
    var incomingTextValue = this.asFloatingFilterText(parentModel);

    if (incomingTextValue === this.eColumnFloatingFilter.value) {
      return;
    }

    this.eColumnFloatingFilter.value = incomingTextValue;
    this.eColumnFloatingFilter.title = '';
  };

  InputTextFloatingFilterComp.prototype.syncUpWithParentFilter = function (e) {
    var model = this.asParentModel();

    if (this.equalModels(this.lastKnownModel, model)) {
      return;
    }

    var modelUpdated = null;

    if (utils_1._.isKeyPressed(e, constants_1.Constants.KEY_ENTER)) {
      modelUpdated = this.onFloatingFilterChanged({
        model: model,
        apply: true
      });
    } else {
      modelUpdated = this.onFloatingFilterChanged({
        model: model,
        apply: false
      });
    }

    if (modelUpdated) {
      this.lastKnownModel = model;
    }
  };

  InputTextFloatingFilterComp.prototype.equalModels = function (left, right) {
    if (utils_1._.referenceCompare(left, right)) {
      return true;
    }

    if (!left || !right) {
      return false;
    }

    if (Array.isArray(left) || Array.isArray(right)) {
      return false;
    }

    return utils_1._.referenceCompare(left.type, right.type) && utils_1._.referenceCompare(left.filter, right.filter) && utils_1._.referenceCompare(left.filterTo, right.filterTo) && utils_1._.referenceCompare(left.filterType, right.filterType);
  };

  __decorate([componentAnnotations_1.RefSelector('eColumnFloatingFilter'), __metadata("design:type", HTMLInputElement)], InputTextFloatingFilterComp.prototype, "eColumnFloatingFilter", void 0);

  return InputTextFloatingFilterComp;
}(component_1.Component);

exports.InputTextFloatingFilterComp = InputTextFloatingFilterComp;

var TextFloatingFilterComp =
/** @class */
function (_super) {
  __extends(TextFloatingFilterComp, _super);

  function TextFloatingFilterComp() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TextFloatingFilterComp.prototype.asFloatingFilterText = function (parentModel) {
    if (!parentModel) {
      return '';
    }

    return parentModel.filter;
  };

  TextFloatingFilterComp.prototype.asParentModel = function () {
    var currentParentModel = this.currentParentModel();
    return {
      type: currentParentModel.type,
      filter: this.eColumnFloatingFilter.value,
      filterType: 'text'
    };
  };

  TextFloatingFilterComp.prototype.parseAsText = function (model) {
    return this.asFloatingFilterText(model);
  };

  return TextFloatingFilterComp;
}(InputTextFloatingFilterComp);

exports.TextFloatingFilterComp = TextFloatingFilterComp;

var DateFloatingFilterComp =
/** @class */
function (_super) {
  __extends(DateFloatingFilterComp, _super);

  function DateFloatingFilterComp() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.lastKnownModel = null;
    return _this;
  }

  DateFloatingFilterComp.prototype.init = function (params) {
    this.onFloatingFilterChanged = params.onFloatingFilterChanged;
    this.currentParentModel = params.currentParentModel;
    var debounceMs = params.debounceMs != null ? params.debounceMs : 500;

    var toDebounce = utils_1._.debounce(this.onDateChanged.bind(this), debounceMs);

    var dateComponentParams = {
      onDateChanged: toDebounce,
      filterParams: params.column.getColDef().filterParams
    };
    this.dateComponentPromise = this.userComponentFactory.newDateComponent(dateComponentParams);

    var body = utils_1._.loadTemplate('<div></div>');

    this.dateComponentPromise.then(function (dateComponent) {
      body.appendChild(dateComponent.getGui());
      var columnDef = params.column.getDefinition();
      var isInRange = columnDef.filterParams && columnDef.filterParams.filterOptions && columnDef.filterParams.filterOptions.length === 1 && columnDef.filterParams.filterOptions[0] === 'inRange';

      if (dateComponent.eDateInput) {
        dateComponent.eDateInput.disabled = isInRange;
      }
    });
    body.style.width = '100%';
    body.style.height = '100%';
    this.setTemplateFromElement(body);
  };

  DateFloatingFilterComp.prototype.onDateChanged = function () {
    var parentModel = this.currentParentModel();
    var model = this.asParentModel();

    if (this.equalModels(parentModel, model)) {
      return;
    }

    this.onFloatingFilterChanged({
      model: model,
      apply: true
    });
    this.lastKnownModel = model;
  };

  DateFloatingFilterComp.prototype.equalModels = function (left, right) {
    if (utils_1._.referenceCompare(left, right)) {
      return true;
    }

    if (!left || !right) {
      return false;
    }

    if (Array.isArray(left) || Array.isArray(right)) {
      return false;
    }

    return utils_1._.referenceCompare(left.type, right.type) && utils_1._.referenceCompare(left.dateFrom, right.dateFrom) && utils_1._.referenceCompare(left.dateTo, right.dateTo) && utils_1._.referenceCompare(left.filterType, right.filterType);
  };

  DateFloatingFilterComp.prototype.asParentModel = function () {
    var currentParentModel = this.currentParentModel();
    var filterValueDate = this.dateComponentPromise.resolveNow(null, function (dateComponent) {
      return dateComponent.getDate();
    });

    var filterValueText = utils_1._.serializeDateToYyyyMmDd(dateFilter_1.DateFilter.removeTimezone(filterValueDate), "-");

    return {
      type: currentParentModel.type,
      dateFrom: filterValueText,
      dateTo: currentParentModel ? currentParentModel.dateTo : null,
      filterType: 'date'
    };
  };

  DateFloatingFilterComp.prototype.onParentModelChanged = function (parentModel) {
    var _this = this;

    this.lastKnownModel = parentModel;
    this.dateComponentPromise.then(function (dateComponent) {
      if (!parentModel || !parentModel.dateFrom) {
        dateComponent.setDate(null);
        return;
      }

      _this.enrichDateInput(parentModel.type, parentModel.dateFrom, parentModel.dateTo, dateComponent);

      dateComponent.setDate(utils_1._.parseYyyyMmDdToDate(parentModel.dateFrom, '-'));
    });
  };

  DateFloatingFilterComp.prototype.enrichDateInput = function (type, dateFrom, dateTo, dateComponent) {
    if (dateComponent.eDateInput) {
      if (type === 'inRange') {
        dateComponent.eDateInput.title = dateFrom + " to " + dateTo;
        dateComponent.eDateInput.disabled = true;
      } else {
        dateComponent.eDateInput.title = '';
        dateComponent.eDateInput.disabled = false;
      }
    }
  };

  __decorate([context_1.Autowired('userComponentFactory'), __metadata("design:type", userComponentFactory_1.UserComponentFactory)], DateFloatingFilterComp.prototype, "userComponentFactory", void 0);

  return DateFloatingFilterComp;
}(component_1.Component);

exports.DateFloatingFilterComp = DateFloatingFilterComp;

var NumberFloatingFilterComp =
/** @class */
function (_super) {
  __extends(NumberFloatingFilterComp, _super);

  function NumberFloatingFilterComp() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  NumberFloatingFilterComp.prototype.asFloatingFilterText = function (toParse) {
    var currentParentModel = this.currentParentModel();

    if (toParse == null && currentParentModel == null) {
      return '';
    }

    if (toParse == null && currentParentModel != null && currentParentModel.type !== 'inRange') {
      this.eColumnFloatingFilter.disabled = false;
      return '';
    }

    if (currentParentModel != null && currentParentModel.type === 'inRange') {
      this.eColumnFloatingFilter.disabled = true;
      return this.parseAsText(currentParentModel);
    }

    this.eColumnFloatingFilter.disabled = false;
    return this.parseAsText(toParse);
  };

  NumberFloatingFilterComp.prototype.parseAsText = function (model) {
    var number = this.asNumber(model.filter);

    if (model.type && model.type === 'inRange') {
      var numberTo = this.asNumber(model.filterTo);
      return (number ? number + '' : '') + '-' + (numberTo ? numberTo + '' : '');
    }

    return number != null ? number + '' : '';
  };

  NumberFloatingFilterComp.prototype.asParentModel = function () {
    var currentParentModel = this.currentParentModel();
    var filterValueNumber = this.asNumber(this.eColumnFloatingFilter.value);
    var filterValueText = this.eColumnFloatingFilter.value;
    var modelFilterValue = null;

    if (filterValueNumber == null && filterValueText === '') {
      modelFilterValue = null;
    } else if (filterValueNumber == null) {
      modelFilterValue = currentParentModel.filter;
    } else {
      modelFilterValue = filterValueNumber;
    }

    return {
      type: currentParentModel.type,
      filter: modelFilterValue,
      filterTo: !currentParentModel ? null : currentParentModel.filterTo,
      filterType: 'number'
    };
  };

  NumberFloatingFilterComp.prototype.asNumber = function (value) {
    if (value == null) {
      return null;
    }

    if (value === '') {
      return null;
    }

    var asNumber = Number(value);
    var invalidNumber = !utils_1._.isNumeric(asNumber);
    return invalidNumber ? null : asNumber;
  };

  return NumberFloatingFilterComp;
}(InputTextFloatingFilterComp);

exports.NumberFloatingFilterComp = NumberFloatingFilterComp;

var SetFloatingFilterComp =
/** @class */
function (_super) {
  __extends(SetFloatingFilterComp, _super);

  function SetFloatingFilterComp() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  SetFloatingFilterComp.prototype.init = function (params) {
    _super.prototype.init.call(this, params);

    this.eColumnFloatingFilter.disabled = true;
  };

  SetFloatingFilterComp.prototype.asFloatingFilterText = function (parentModel) {
    this.eColumnFloatingFilter.disabled = true;

    if (!parentModel) {
      return '';
    } // also supporting old filter model for backwards compatibility


    var values = parentModel instanceof Array ? parentModel : parentModel.values;

    if (values.length === 0) {
      return '';
    }

    var arrayToDisplay = values.length > 10 ? values.slice(0, 10).concat('...') : values;
    return "(" + values.length + ") " + arrayToDisplay.join(",");
  };

  SetFloatingFilterComp.prototype.parseAsText = function (model) {
    return this.asFloatingFilterText(model);
  };

  SetFloatingFilterComp.prototype.asParentModel = function () {
    if (this.eColumnFloatingFilter.value == null || this.eColumnFloatingFilter.value === '') {
      return {
        values: [],
        filterType: 'set'
      };
    }

    return {
      values: this.eColumnFloatingFilter.value.split(","),
      filterType: 'set'
    };
  };

  SetFloatingFilterComp.prototype.equalModels = function (left, right) {
    return false;
  };

  return SetFloatingFilterComp;
}(InputTextFloatingFilterComp);

exports.SetFloatingFilterComp = SetFloatingFilterComp;

var ReadModelAsStringFloatingFilterComp =
/** @class */
function (_super) {
  __extends(ReadModelAsStringFloatingFilterComp, _super);

  function ReadModelAsStringFloatingFilterComp() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ReadModelAsStringFloatingFilterComp.prototype.init = function (params) {
    _super.prototype.init.call(this, params);

    this.eColumnFloatingFilter.disabled = true;
  };

  ReadModelAsStringFloatingFilterComp.prototype.onParentModelChanged = function (parentModel) {
    this.eColumnFloatingFilter.value = this.asFloatingFilterText(this.currentParentModel());
  };

  ReadModelAsStringFloatingFilterComp.prototype.asFloatingFilterText = function (parentModel) {
    return parentModel;
  };

  ReadModelAsStringFloatingFilterComp.prototype.parseAsText = function (model) {
    return model;
  };

  ReadModelAsStringFloatingFilterComp.prototype.asParentModel = function () {
    return null;
  };

  return ReadModelAsStringFloatingFilterComp;
}(InputTextFloatingFilterComp);

exports.ReadModelAsStringFloatingFilterComp = ReadModelAsStringFloatingFilterComp;

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var textCellEditor_1 = __webpack_require__(148);

var PopupTextCellEditor =
/** @class */
function (_super) {
  __extends(PopupTextCellEditor, _super);

  function PopupTextCellEditor() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  PopupTextCellEditor.prototype.isPopup = function () {
    return true;
  };

  return PopupTextCellEditor;
}(textCellEditor_1.TextCellEditor);

exports.PopupTextCellEditor = PopupTextCellEditor;

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var selectCellEditor_1 = __webpack_require__(150);

var PopupSelectCellEditor =
/** @class */
function (_super) {
  __extends(PopupSelectCellEditor, _super);

  function PopupSelectCellEditor() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  PopupSelectCellEditor.prototype.isPopup = function () {
    return true;
  };

  return PopupSelectCellEditor;
}(selectCellEditor_1.SelectCellEditor);

exports.PopupSelectCellEditor = PopupSelectCellEditor;

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var popupComponent_1 = __webpack_require__(72);

var constants_1 = __webpack_require__(19);

var utils_1 = __webpack_require__(6);

var LargeTextCellEditor =
/** @class */
function (_super) {
  __extends(LargeTextCellEditor, _super);

  function LargeTextCellEditor() {
    return _super.call(this, LargeTextCellEditor.TEMPLATE) || this;
  }

  LargeTextCellEditor.prototype.init = function (params) {
    this.params = params;
    this.focusAfterAttached = params.cellStartedEdit;
    this.textarea = document.createElement("textarea");
    this.textarea.maxLength = params.maxLength ? params.maxLength : "200";
    this.textarea.cols = params.cols ? params.cols : "60";
    this.textarea.rows = params.rows ? params.rows : "10";

    if (utils_1._.exists(params.value)) {
      this.textarea.value = params.value.toString();
    }

    this.getGui().querySelector('.ag-large-textarea').appendChild(this.textarea);
    this.addGuiEventListener('keydown', this.onKeyDown.bind(this));
  };

  LargeTextCellEditor.prototype.onKeyDown = function (event) {
    var key = event.which || event.keyCode;

    if (key == constants_1.Constants.KEY_LEFT || key == constants_1.Constants.KEY_UP || key == constants_1.Constants.KEY_RIGHT || key == constants_1.Constants.KEY_DOWN || event.shiftKey && key == constants_1.Constants.KEY_ENTER) {
      // shift+enter allows for newlines
      event.stopPropagation();
    }
  };

  LargeTextCellEditor.prototype.afterGuiAttached = function () {
    if (this.focusAfterAttached) {
      this.textarea.focus();
    }
  };

  LargeTextCellEditor.prototype.getValue = function () {
    return this.params.parseValue(this.textarea.value);
  };

  LargeTextCellEditor.TEMPLATE = // tab index is needed so we can focus, which is needed for keyboard events
  '<div class="ag-large-text" tabindex="0">' + '<div class="ag-large-textarea"></div>' + '</div>';
  return LargeTextCellEditor;
}(popupComponent_1.PopupComponent);

exports.LargeTextCellEditor = LargeTextCellEditor;

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var baseFilter_1 = __webpack_require__(109);

var componentAnnotations_1 = __webpack_require__(25);

var utils_1 = __webpack_require__(6);

var TextFilter =
/** @class */
function (_super) {
  __extends(TextFilter, _super);

  function TextFilter() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TextFilter.prototype.getDefaultType = function () {
    return baseFilter_1.BaseFilter.CONTAINS;
  };

  TextFilter.prototype.customInit = function () {
    this.comparator = this.filterParams.textCustomComparator ? this.filterParams.textCustomComparator : TextFilter.DEFAULT_COMPARATOR;
    this.formatter = this.filterParams.textFormatter ? this.filterParams.textFormatter : this.filterParams.caseSensitive == true ? TextFilter.DEFAULT_FORMATTER : TextFilter.DEFAULT_LOWERCASE_FORMATTER;

    _super.prototype.customInit.call(this);
  };

  TextFilter.prototype.modelFromFloatingFilter = function (from) {
    return {
      type: this.selectedFilter,
      filter: from,
      filterType: 'text'
    };
  };

  TextFilter.prototype.getApplicableFilterTypes = function () {
    return [baseFilter_1.BaseFilter.EQUALS, baseFilter_1.BaseFilter.NOT_EQUAL, baseFilter_1.BaseFilter.STARTS_WITH, baseFilter_1.BaseFilter.ENDS_WITH, baseFilter_1.BaseFilter.CONTAINS, baseFilter_1.BaseFilter.NOT_CONTAINS];
  };

  TextFilter.prototype.bodyTemplate = function (type) {
    var translate = this.translate.bind(this);
    var fieldId = type == baseFilter_1.FilterConditionType.MAIN ? "filterText" : "filterConditionText";
    return "<div class=\"ag-filter-body\">\n            <div class=\"ag-input-text-wrapper\">\n                <input class=\"ag-filter-filter\" id=" + fieldId + " type=\"text\" placeholder=\"" + translate('filterOoo', 'Filter...') + "\"/>\n            </div>\n        </div>";
  };

  TextFilter.prototype.initialiseFilterBodyUi = function (type) {
    _super.prototype.initialiseFilterBodyUi.call(this, type);

    this.addFilterChangedListener(type);
    this.setFilter(this.filterConditionText, baseFilter_1.FilterConditionType.CONDITION);
    this.setFilterType(this.selectedFilterCondition, baseFilter_1.FilterConditionType.CONDITION);
  };

  TextFilter.prototype.addFilterChangedListener = function (type) {
    var _this = this;

    var eElement = type === baseFilter_1.FilterConditionType.MAIN ? this.eFilterTextField : this.eFilterConditionTextField;
    var debounceMs = this.getDebounceMs(this.filterParams);

    var toDebounce = utils_1._.debounce(function () {
      return _this.onFilterTextFieldChanged(type);
    }, debounceMs);

    this.addDestroyableEventListener(eElement, 'input', toDebounce);
  };

  TextFilter.prototype.refreshFilterBodyUi = function (type) {
    var filterType = type === baseFilter_1.FilterConditionType.MAIN ? this.selectedFilter : this.selectedFilterCondition;

    if (this.eFilterConditionTextField) {
      this.addFilterChangedListener(baseFilter_1.FilterConditionType.CONDITION);
    } // show / hide filter input, i.e. if custom filter has 'hideFilterInputField = true' or an empty filter


    var filterInput = type === baseFilter_1.FilterConditionType.MAIN ? this.eFilterTextField : this.eFilterConditionTextField;

    if (filterInput) {
      var showFilterInput = !this.doesFilterHaveHiddenInput(filterType) && filterType !== baseFilter_1.BaseFilter.EMPTY;

      utils_1._.setVisible(filterInput, showFilterInput);
    }
  };

  TextFilter.prototype.afterGuiAttached = function () {
    this.eFilterTextField.focus();
  };

  TextFilter.prototype.filterValues = function (type) {
    return type === baseFilter_1.FilterConditionType.MAIN ? this.filterText : this.filterConditionText;
  };

  TextFilter.prototype.individualFilterPasses = function (params, type) {
    var filterText = type == baseFilter_1.FilterConditionType.MAIN ? this.filterText : this.filterConditionText;
    var filter = type == baseFilter_1.FilterConditionType.MAIN ? this.selectedFilter : this.selectedFilterCondition;
    var customFilterOption = this.customFilterOptions[filter];

    if (customFilterOption) {
      // only execute the custom filter if a value exists or a value isn't required, i.e. input is hidden
      if (filterText != null || customFilterOption.hideFilterInput) {
        var cellValue = this.filterParams.valueGetter(params.node);
        var formattedCellValue = this.formatter(cellValue);
        return customFilterOption.test(filterText, formattedCellValue);
      }
    }

    if (!filterText) {
      return type === baseFilter_1.FilterConditionType.MAIN ? true : this.conditionValue === 'AND';
    } else {
      return this.checkIndividualFilter(params, filter, filterText);
    }
  };

  TextFilter.prototype.checkIndividualFilter = function (params, filterType, filterText) {
    var cellValue = this.filterParams.valueGetter(params.node);
    var filterTextFormatted = this.formatter(filterText);

    if (cellValue == null || cellValue === undefined) {
      return filterType === baseFilter_1.BaseFilter.NOT_EQUAL || filterType === baseFilter_1.BaseFilter.NOT_CONTAINS;
    }

    var valueFormatted = this.formatter(cellValue);
    return this.comparator(filterType, valueFormatted, filterTextFormatted);
  };

  TextFilter.prototype.onFilterTextFieldChanged = function (type) {
    var value = type === baseFilter_1.FilterConditionType.MAIN ? this.eFilterTextField.value : this.eFilterConditionTextField.value;
    var current = type === baseFilter_1.FilterConditionType.MAIN ? this.filterText : this.filterConditionText;

    var filterText = utils_1._.makeNull(value);

    if (filterText && filterText.trim() === '') {
      filterText = null;
    }

    if (current !== filterText) {
      var newLowerCase = filterText && this.filterParams.caseSensitive != true ? filterText.toLowerCase() : filterText;
      var previousLowerCase = current && this.filterParams.caseSensitive != true ? current.toLowerCase() : current;

      if (type === baseFilter_1.FilterConditionType.MAIN) {
        this.filterText = this.formatter(filterText);
      } else {
        this.filterConditionText = this.formatter(filterText);
      }

      if (previousLowerCase !== newLowerCase) {
        this.onFilterChanged();
      }
    }
  };

  TextFilter.prototype.setFilter = function (filter, type) {
    filter = utils_1._.makeNull(filter);

    if (type === baseFilter_1.FilterConditionType.MAIN) {
      if (filter) {
        this.filterText = this.formatter(filter);

        if (!this.eFilterTextField) {
          return;
        }

        this.eFilterTextField.value = filter;
      } else {
        this.filterText = null;

        if (!this.eFilterTextField) {
          return;
        }

        this.eFilterTextField.value = null;
      }
    } else {
      if (filter) {
        this.filterConditionText = this.formatter(filter);

        if (!this.eFilterConditionTextField) {
          return;
        }

        this.eFilterConditionTextField.value = filter;
      } else {
        this.filterConditionText = null;

        if (!this.eFilterConditionTextField) {
          return;
        }

        this.eFilterConditionTextField.value = null;
      }
    }
  };

  TextFilter.prototype.getFilter = function () {
    return this.filterText;
  };

  TextFilter.prototype.resetState = function (resetConditionFilterOnly) {
    if (resetConditionFilterOnly === void 0) {
      resetConditionFilterOnly = false;
    }

    if (!resetConditionFilterOnly) {
      this.setFilterType(this.defaultFilter, baseFilter_1.FilterConditionType.MAIN);
      this.setFilter(null, baseFilter_1.FilterConditionType.MAIN);
    }

    this.setFilterType(this.defaultFilter, baseFilter_1.FilterConditionType.CONDITION);
    this.setFilter(null, baseFilter_1.FilterConditionType.CONDITION);
  };

  TextFilter.prototype.serialize = function (type) {
    var filter = type === baseFilter_1.FilterConditionType.MAIN ? this.selectedFilter : this.selectedFilterCondition;
    var filterText = type === baseFilter_1.FilterConditionType.MAIN ? this.filterText : this.filterConditionText;
    return {
      type: filter ? filter : this.defaultFilter,
      filter: filterText,
      filterType: 'text'
    };
  };

  TextFilter.prototype.parse = function (model, type) {
    this.setFilterType(model.type, type);
    this.setFilter(model.filter, type);
  };

  TextFilter.prototype.setType = function (filterType, type) {
    this.setFilterType(filterType, type);
  };

  TextFilter.DEFAULT_FORMATTER = function (from) {
    return from;
  };

  TextFilter.DEFAULT_LOWERCASE_FORMATTER = function (from) {
    if (from == null) {
      return null;
    }

    return from.toString().toLowerCase();
  };

  TextFilter.DEFAULT_COMPARATOR = function (filter, value, filterText) {
    switch (filter) {
      case TextFilter.CONTAINS:
        return value.indexOf(filterText) >= 0;

      case TextFilter.NOT_CONTAINS:
        return value.indexOf(filterText) === -1;

      case TextFilter.EQUALS:
        return value === filterText;

      case TextFilter.NOT_EQUAL:
        return value != filterText;

      case TextFilter.STARTS_WITH:
        return value.indexOf(filterText) === 0;

      case TextFilter.ENDS_WITH:
        var index = value.lastIndexOf(filterText);
        return index >= 0 && index === value.length - filterText.length;

      default:
        // should never happen
        console.warn('invalid filter type ' + filter);
        return false;
    }
  };

  __decorate([componentAnnotations_1.QuerySelector('#filterText'), __metadata("design:type", HTMLInputElement)], TextFilter.prototype, "eFilterTextField", void 0);

  __decorate([componentAnnotations_1.QuerySelector('#filterConditionText'), __metadata("design:type", HTMLInputElement)], TextFilter.prototype, "eFilterConditionTextField", void 0);

  return TextFilter;
}(baseFilter_1.ComparableBaseFilter);

exports.TextFilter = TextFilter;

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var componentAnnotations_1 = __webpack_require__(25);

var baseFilter_1 = __webpack_require__(109);

var utils_1 = __webpack_require__(6);

var NumberFilter =
/** @class */
function (_super) {
  __extends(NumberFilter, _super);

  function NumberFilter() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  NumberFilter.prototype.modelFromFloatingFilter = function (from) {
    return {
      type: this.selectedFilter,
      filter: Number(from),
      filterTo: this.filterNumberTo,
      filterType: 'number'
    };
  };

  NumberFilter.prototype.getApplicableFilterTypes = function () {
    return [baseFilter_1.BaseFilter.EQUALS, baseFilter_1.BaseFilter.NOT_EQUAL, baseFilter_1.BaseFilter.LESS_THAN, baseFilter_1.BaseFilter.LESS_THAN_OR_EQUAL, baseFilter_1.BaseFilter.GREATER_THAN, baseFilter_1.BaseFilter.GREATER_THAN_OR_EQUAL, baseFilter_1.BaseFilter.IN_RANGE];
  };

  NumberFilter.prototype.bodyTemplate = function (type) {
    var translate = this.translate.bind(this);
    var fieldId = type == baseFilter_1.FilterConditionType.MAIN ? "filterText" : "filterConditionText";
    var filterNumberToPanelId = type == baseFilter_1.FilterConditionType.MAIN ? "filterNumberToPanel" : "filterNumberToPanelCondition";
    var fieldToId = type == baseFilter_1.FilterConditionType.MAIN ? "filterToText" : "filterToConditionText";
    return "<div class=\"ag-filter-body\">\n            <div class=\"ag-input-text-wrapper\">\n                <input class=\"ag-filter-filter\" id=\"" + fieldId + "\" type=\"text\" placeholder=\"" + translate('filterOoo') + "\"/>\n            </div>\n             <div class=\"ag-input-text-wrapper ag-filter-number-to\" id=\"" + filterNumberToPanelId + "\">\n                <input class=\"ag-filter-filter\" id=\"" + fieldToId + "\" type=\"text\" placeholder=\"" + translate('filterOoo') + "\"/>\n            </div>\n        </div>";
  };

  NumberFilter.prototype.initialiseFilterBodyUi = function (type) {
    _super.prototype.initialiseFilterBodyUi.call(this, type);

    if (type === baseFilter_1.FilterConditionType.MAIN) {
      this.eFilterTextField = this.queryForHtmlInputElement("#filterText");
      this.addFilterChangedEventListeners(type, this.eFilterTextField, this.eFilterToTextField);
    } else {
      this.eFilterTextConditionField = this.queryForHtmlInputElement("#filterConditionText");
      this.addFilterChangedEventListeners(type, this.eFilterTextConditionField, this.eFilterToConditionText);
      this.setFilter(this.filterNumberCondition, baseFilter_1.FilterConditionType.CONDITION);
      this.setFilterTo(this.filterNumberConditionTo, baseFilter_1.FilterConditionType.CONDITION);
      this.setFilterType(this.selectedFilterCondition, baseFilter_1.FilterConditionType.CONDITION);
    }
  };

  NumberFilter.prototype.addFilterChangedEventListeners = function (type, filterElement, filterToElement) {
    var _this = this;

    var debounceMs = this.getDebounceMs(this.filterParams);

    var toDebounce = utils_1._.debounce(function () {
      return _this.onTextFieldsChanged(type, filterElement, filterToElement);
    }, debounceMs);

    this.addDestroyableEventListener(filterElement, "input", toDebounce);
    this.addDestroyableEventListener(filterToElement, "input", toDebounce);
  };

  NumberFilter.prototype.afterGuiAttached = function () {
    this.eFilterTextField.focus();
  };

  NumberFilter.prototype.comparator = function () {
    return function (left, right) {
      if (left === right) {
        return 0;
      }

      if (left < right) {
        return 1;
      }

      if (left > right) {
        return -1;
      }
    };
  };

  NumberFilter.prototype.onTextFieldsChanged = function (type, filterElement, filterToElement) {
    var newFilter = this.stringToFloat(filterElement.value);
    var newFilterTo = this.stringToFloat(filterToElement.value);

    if (type === baseFilter_1.FilterConditionType.MAIN) {
      if (this.filterNumber !== newFilter || this.filterNumberTo !== newFilterTo) {
        this.filterNumber = newFilter;
        this.filterNumberTo = newFilterTo;
        this.onFilterChanged();
      }
    } else {
      if (this.filterNumberCondition !== newFilter || this.filterNumberConditionTo !== newFilterTo) {
        this.filterNumberCondition = newFilter;
        this.filterNumberConditionTo = newFilterTo;
        this.onFilterChanged();
      }
    }
  };

  NumberFilter.prototype.filterValues = function (type) {
    if (type === baseFilter_1.FilterConditionType.MAIN) {
      return this.selectedFilter !== baseFilter_1.BaseFilter.IN_RANGE ? this.asNumber(this.filterNumber) : [this.asNumber(this.filterNumber), this.asNumber(this.filterNumberTo)];
    }

    return this.selectedFilterCondition !== baseFilter_1.BaseFilter.IN_RANGE ? this.asNumber(this.filterNumberCondition) : [this.asNumber(this.filterNumberCondition), this.asNumber(this.filterNumberConditionTo)];
  };

  NumberFilter.prototype.asNumber = function (value) {
    return utils_1._.isNumeric(value) ? value : null;
  };

  NumberFilter.prototype.stringToFloat = function (value) {
    var filterText = utils_1._.makeNull(value);

    if (filterText && filterText.trim() === '') {
      filterText = null;
    }

    var newFilter;

    if (filterText !== null && filterText !== undefined) {
      newFilter = parseFloat(filterText);
    } else {
      newFilter = null;
    }

    return newFilter;
  };

  NumberFilter.prototype.setFilter = function (filter, type) {
    filter = utils_1._.makeNull(filter);

    if (filter !== null && !(typeof filter === 'number')) {
      filter = parseFloat(filter);
    }

    if (type === baseFilter_1.FilterConditionType.MAIN) {
      this.filterNumber = filter;

      if (!this.eFilterTextField) {
        return;
      }

      this.eFilterTextField.value = filter;
    } else {
      this.filterNumberCondition = filter;

      if (!this.eFilterTextConditionField) {
        return;
      }

      this.eFilterTextConditionField.value = filter;
    }
  };

  NumberFilter.prototype.setFilterTo = function (filter, type) {
    filter = utils_1._.makeNull(filter);

    if (filter !== null && !(typeof filter === 'number')) {
      filter = parseFloat(filter);
    }

    if (type === baseFilter_1.FilterConditionType.MAIN) {
      this.filterNumberTo = filter;

      if (!this.eFilterToTextField) {
        return;
      }

      this.eFilterToTextField.value = filter;
    } else {
      this.filterNumberConditionTo = filter;

      if (!this.eFilterToConditionText) {
        return;
      }

      this.eFilterToConditionText.value = filter;
    }
  };

  NumberFilter.prototype.getFilter = function (type) {
    return type === baseFilter_1.FilterConditionType.MAIN ? this.filterNumber : this.filterNumberCondition;
  };

  NumberFilter.prototype.serialize = function (type) {
    var selectedFilter = type === baseFilter_1.FilterConditionType.MAIN ? this.selectedFilter : this.selectedFilterCondition;
    var filterNumber = type === baseFilter_1.FilterConditionType.MAIN ? this.filterNumber : this.filterNumberCondition;
    var filterNumberTo = type === baseFilter_1.FilterConditionType.MAIN ? this.filterNumberTo : this.filterNumberConditionTo;
    return {
      type: selectedFilter ? selectedFilter : this.defaultFilter,
      filter: filterNumber,
      filterTo: filterNumberTo,
      filterType: 'number'
    };
  };

  NumberFilter.prototype.parse = function (model, type) {
    this.setFilterType(model.type, type);
    this.setFilter(model.filter, type);
    this.setFilterTo(model.filterTo, type);
  };

  NumberFilter.prototype.refreshFilterBodyUi = function (type) {
    var filterType = type === baseFilter_1.FilterConditionType.MAIN ? this.selectedFilter : this.selectedFilterCondition; // show / hide in-range filter

    var panel = type === baseFilter_1.FilterConditionType.MAIN ? this.eNumberToPanel : this.eNumberToConditionPanel;

    if (panel) {
      var visible = filterType === NumberFilter.IN_RANGE;

      utils_1._.setVisible(panel, visible);
    } // show / hide filter input, i.e. if custom filter has 'hideFilterInputField = true' or an empty filter


    var filterInput = type === baseFilter_1.FilterConditionType.MAIN ? this.eFilterTextField : this.eFilterTextConditionField;

    if (filterInput) {
      var showFilterInput = !this.doesFilterHaveHiddenInput(filterType) && filterType !== baseFilter_1.BaseFilter.EMPTY;

      utils_1._.setVisible(filterInput, showFilterInput);
    }
  };

  NumberFilter.prototype.resetState = function (resetConditionFilterOnly) {
    if (resetConditionFilterOnly === void 0) {
      resetConditionFilterOnly = false;
    }

    if (!resetConditionFilterOnly) {
      this.setFilterType(this.defaultFilter, baseFilter_1.FilterConditionType.MAIN);
      this.setFilter(null, baseFilter_1.FilterConditionType.MAIN);
      this.setFilterTo(null, baseFilter_1.FilterConditionType.MAIN);
    }

    this.setFilterType(this.defaultFilter, baseFilter_1.FilterConditionType.CONDITION);
    this.setFilter(null, baseFilter_1.FilterConditionType.CONDITION);
    this.setFilterTo(null, baseFilter_1.FilterConditionType.CONDITION);
  };

  NumberFilter.prototype.setType = function (filterType, type) {
    this.setFilterType(filterType, type);
  };

  NumberFilter.LESS_THAN = 'lessThan';

  __decorate([componentAnnotations_1.QuerySelector('#filterText'), __metadata("design:type", HTMLInputElement)], NumberFilter.prototype, "eFilterTextField", void 0);

  __decorate([componentAnnotations_1.QuerySelector('#filterTextCondition'), __metadata("design:type", HTMLInputElement)], NumberFilter.prototype, "eFilterTextConditionField", void 0);

  __decorate([componentAnnotations_1.QuerySelector('#filterToText'), __metadata("design:type", HTMLInputElement)], NumberFilter.prototype, "eFilterToTextField", void 0);

  __decorate([componentAnnotations_1.QuerySelector('#filterToConditionText'), __metadata("design:type", HTMLInputElement)], NumberFilter.prototype, "eFilterToConditionText", void 0);

  __decorate([componentAnnotations_1.QuerySelector('#filterNumberToPanel'), __metadata("design:type", HTMLElement)], NumberFilter.prototype, "eNumberToPanel", void 0);

  __decorate([componentAnnotations_1.QuerySelector('#filterNumberToPanelCondition'), __metadata("design:type", HTMLElement)], NumberFilter.prototype, "eNumberToConditionPanel", void 0);

  return NumberFilter;
}(baseFilter_1.ScalarBaseFilter);

exports.NumberFilter = NumberFilter;

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var component_1 = __webpack_require__(22);

var context_1 = __webpack_require__(2);

var column_1 = __webpack_require__(24);

var dragAndDropService_1 = __webpack_require__(34);

var columnApi_1 = __webpack_require__(21);

var columnController_1 = __webpack_require__(17);

var horizontalResizeService_1 = __webpack_require__(111);

var gridOptionsWrapper_1 = __webpack_require__(7);

var cssClassApplier_1 = __webpack_require__(155);

var setLeftFeature_1 = __webpack_require__(112);

var gridApi_1 = __webpack_require__(20);

var sortController_1 = __webpack_require__(49);

var eventService_1 = __webpack_require__(14);

var userComponentFactory_1 = __webpack_require__(35);

var agCheckbox_1 = __webpack_require__(113);

var componentAnnotations_1 = __webpack_require__(25);

var selectAllFeature_1 = __webpack_require__(299);

var events_1 = __webpack_require__(18);

var columnHoverService_1 = __webpack_require__(93);

var beans_1 = __webpack_require__(60);

var hoverFeature_1 = __webpack_require__(156);

var touchListener_1 = __webpack_require__(92);

var utils_1 = __webpack_require__(6);

var HeaderWrapperComp =
/** @class */
function (_super) {
  __extends(HeaderWrapperComp, _super);

  function HeaderWrapperComp(column, dragSourceDropTarget, pinned) {
    var _this = _super.call(this, HeaderWrapperComp.TEMPLATE) || this;

    _this.column = column;
    _this.dragSourceDropTarget = dragSourceDropTarget;
    _this.pinned = pinned;
    return _this;
  }

  HeaderWrapperComp.prototype.getColumn = function () {
    return this.column;
  };

  HeaderWrapperComp.prototype.getComponentHolder = function () {
    return this.column.getColDef();
  };

  HeaderWrapperComp.prototype.init = function () {
    var colDef = this.getComponentHolder();
    var displayName = this.columnController.getDisplayNameForColumn(this.column, 'header', true);
    var enableSorting = colDef.sortable;
    var enableMenu = this.menuFactory.isMenuEnabled(this.column) && !colDef.suppressMenu;
    this.appendHeaderComp(displayName, enableSorting, enableMenu);
    this.setupWidth();
    this.setupMovingCss();
    this.setupTooltip();
    this.setupResize();
    this.setupMenuClass();
    this.setupSortableClass(enableSorting);
    this.addColumnHoverListener();
    this.addFeature(this.getContext(), new hoverFeature_1.HoverFeature([this.column], this.getGui()));
    this.addDestroyableEventListener(this.column, column_1.Column.EVENT_FILTER_ACTIVE_CHANGED, this.onFilterChanged.bind(this));
    this.onFilterChanged();
    this.addFeature(this.getContext(), new selectAllFeature_1.SelectAllFeature(this.cbSelectAll, this.column));
    var setLeftFeature = new setLeftFeature_1.SetLeftFeature(this.column, this.getGui(), this.beans);
    setLeftFeature.init();
    this.addDestroyFunc(setLeftFeature.destroy.bind(setLeftFeature));
    this.addAttributes();
    cssClassApplier_1.CssClassApplier.addHeaderClassesFromColDef(colDef, this.getGui(), this.gridOptionsWrapper, this.column, null);
  };

  HeaderWrapperComp.prototype.addColumnHoverListener = function () {
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_COLUMN_HOVER_CHANGED, this.onColumnHover.bind(this));
    this.onColumnHover();
  };

  HeaderWrapperComp.prototype.onColumnHover = function () {
    var isHovered = this.columnHoverService.isHovered(this.column);

    utils_1._.addOrRemoveCssClass(this.getGui(), 'ag-column-hover', isHovered);
  };

  HeaderWrapperComp.prototype.setupSortableClass = function (enableSorting) {
    if (enableSorting) {
      var element = this.getGui();

      utils_1._.addCssClass(element, 'ag-header-cell-sortable');
    }
  };

  HeaderWrapperComp.prototype.onFilterChanged = function () {
    var filterPresent = this.column.isFilterActive();

    utils_1._.addOrRemoveCssClass(this.getGui(), 'ag-header-cell-filtered', filterPresent);
  };

  HeaderWrapperComp.prototype.appendHeaderComp = function (displayName, enableSorting, enableMenu) {
    var _this = this;

    var params = {
      column: this.column,
      displayName: displayName,
      enableSorting: enableSorting,
      enableMenu: enableMenu,
      showColumnMenu: function showColumnMenu(source) {
        _this.gridApi.showColumnMenuAfterButtonClick(_this.column, source);
      },
      progressSort: function progressSort(multiSort) {
        _this.sortController.progressSort(_this.column, !!multiSort, "uiColumnSorted");
      },
      setSort: function setSort(sort, multiSort) {
        _this.sortController.setSortForColumn(_this.column, sort, !!multiSort, "uiColumnSorted");
      },
      api: this.gridApi,
      columnApi: this.columnApi,
      context: this.gridOptionsWrapper.getContext()
    };
    var callback = this.afterHeaderCompCreated.bind(this, displayName);
    this.userComponentFactory.newHeaderComponent(params).then(callback);
  };

  HeaderWrapperComp.prototype.afterHeaderCompCreated = function (displayName, headerComp) {
    this.appendChild(headerComp);
    this.setupMove(headerComp.getGui(), displayName);
  };

  HeaderWrapperComp.prototype.onColumnMovingChanged = function () {
    // this function adds or removes the moving css, based on if the col is moving.
    // this is what makes the header go dark when it is been moved (gives impression to
    // user that the column was picked up).
    if (this.column.isMoving()) {
      utils_1._.addCssClass(this.getGui(), 'ag-header-cell-moving');
    } else {
      utils_1._.removeCssClass(this.getGui(), 'ag-header-cell-moving');
    }
  };

  HeaderWrapperComp.prototype.setupMove = function (eHeaderCellLabel, displayName) {
    var _this = this;

    var suppressMove = this.gridOptionsWrapper.isSuppressMovableColumns() || this.getComponentHolder().suppressMovable || this.column.isLockPosition();

    if (suppressMove) {
      return;
    }

    if (eHeaderCellLabel) {
      var dragSource_1 = {
        type: dragAndDropService_1.DragSourceType.HeaderCell,
        eElement: eHeaderCellLabel,
        dragItemCallback: function dragItemCallback() {
          return _this.createDragItem();
        },
        dragItemName: displayName,
        dragSourceDropTarget: this.dragSourceDropTarget,
        dragStarted: function dragStarted() {
          return _this.column.setMoving(true, "uiColumnMoved");
        },
        dragStopped: function dragStopped() {
          return _this.column.setMoving(false, "uiColumnMoved");
        }
      };
      this.dragAndDropService.addDragSource(dragSource_1, true);
      this.addDestroyFunc(function () {
        return _this.dragAndDropService.removeDragSource(dragSource_1);
      });
    }
  };

  HeaderWrapperComp.prototype.createDragItem = function () {
    var visibleState = {};
    visibleState[this.column.getId()] = this.column.isVisible();
    return {
      columns: [this.column],
      visibleState: visibleState
    };
  };

  HeaderWrapperComp.prototype.setupResize = function () {
    var _this = this;

    var colDef = this.getComponentHolder(); // if no eResize in template, do nothing

    if (!this.eResize) {
      return;
    }

    if (!this.column.isResizable()) {
      utils_1._.removeFromParent(this.eResize);

      return;
    }

    var finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({
      eResizeBar: this.eResize,
      onResizeStart: this.onResizeStart.bind(this),
      onResizing: this.onResizing.bind(this, false),
      onResizeEnd: this.onResizing.bind(this, true)
    });
    this.addDestroyFunc(finishedWithResizeFunc);
    var weWantAutoSize = !this.gridOptionsWrapper.isSuppressAutoSize() && !colDef.suppressAutoSize;

    if (weWantAutoSize) {
      this.addDestroyableEventListener(this.eResize, 'dblclick', function () {
        _this.columnController.autoSizeColumn(_this.column, "uiColumnResized");
      });
      var touchListener = new touchListener_1.TouchListener(this.eResize);
      this.addDestroyableEventListener(touchListener, touchListener_1.TouchListener.EVENT_DOUBLE_TAP, function () {
        _this.columnController.autoSizeColumn(_this.column, "uiColumnResized");
      });
      this.addDestroyFunc(touchListener.destroy.bind(touchListener));
    }
  };

  HeaderWrapperComp.prototype.onResizing = function (finished, resizeAmount) {
    var resizeAmountNormalised = this.normaliseResizeAmount(resizeAmount);
    var newWidth = this.resizeStartWidth + resizeAmountNormalised;
    this.columnController.setColumnWidth(this.column, newWidth, this.resizeWithShiftKey, finished, "uiColumnDragged");

    if (finished) {
      utils_1._.removeCssClass(this.getGui(), 'ag-column-resizing');
    }
  };

  HeaderWrapperComp.prototype.onResizeStart = function (shiftKey) {
    this.resizeStartWidth = this.column.getActualWidth();
    this.resizeWithShiftKey = shiftKey;

    utils_1._.addCssClass(this.getGui(), 'ag-column-resizing');
  };

  HeaderWrapperComp.prototype.getTooltipText = function () {
    var colDef = this.getComponentHolder();
    return colDef.headerTooltip;
  };

  HeaderWrapperComp.prototype.setupTooltip = function () {
    var tooltipText = this.getTooltipText(); // add tooltip if exists

    if (tooltipText == null) {
      return;
    }

    if (this.gridOptionsWrapper.isEnableBrowserTooltips()) {
      this.getGui().setAttribute('title', tooltipText);
    } else {
      this.beans.tooltipManager.registerTooltip(this);
    }
  };

  HeaderWrapperComp.prototype.setupMovingCss = function () {
    this.addDestroyableEventListener(this.column, column_1.Column.EVENT_MOVING_CHANGED, this.onColumnMovingChanged.bind(this));
    this.onColumnMovingChanged();
  };

  HeaderWrapperComp.prototype.addAttributes = function () {
    this.getGui().setAttribute("col-id", this.column.getColId());
  };

  HeaderWrapperComp.prototype.setupWidth = function () {
    this.addDestroyableEventListener(this.column, column_1.Column.EVENT_WIDTH_CHANGED, this.onColumnWidthChanged.bind(this));
    this.onColumnWidthChanged();
  };

  HeaderWrapperComp.prototype.setupMenuClass = function () {
    this.addDestroyableEventListener(this.column, column_1.Column.EVENT_MENU_VISIBLE_CHANGED, this.onMenuVisible.bind(this));
    this.onColumnWidthChanged();
  };

  HeaderWrapperComp.prototype.onMenuVisible = function () {
    this.addOrRemoveCssClass('ag-column-menu-visible', this.column.isMenuVisible());
  };

  HeaderWrapperComp.prototype.onColumnWidthChanged = function () {
    this.getGui().style.width = this.column.getActualWidth() + 'px';
  }; // optionally inverts the drag, depending on pinned and RTL
  // note - this method is duplicated in RenderedHeaderGroupCell - should refactor out?


  HeaderWrapperComp.prototype.normaliseResizeAmount = function (dragChange) {
    var result = dragChange;

    if (this.gridOptionsWrapper.isEnableRtl()) {
      // for RTL, dragging left makes the col bigger, except when pinning left
      if (this.pinned !== column_1.Column.PINNED_LEFT) {
        result *= -1;
      }
    } else {
      // for LTR (ie normal), dragging left makes the col smaller, except when pinning right
      if (this.pinned === column_1.Column.PINNED_RIGHT) {
        result *= -1;
      }
    }

    return result;
  };

  HeaderWrapperComp.TEMPLATE = '<div class="ag-header-cell" role="presentation" unselectable="on">' + '<div ref="eResize" class="ag-header-cell-resize" role="presentation"></div>' + '<ag-checkbox ref="cbSelectAll" class="ag-header-select-all" role="presentation"></ag-checkbox>' + // <inner component goes here>
  '</div>';

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], HeaderWrapperComp.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('dragAndDropService'), __metadata("design:type", dragAndDropService_1.DragAndDropService)], HeaderWrapperComp.prototype, "dragAndDropService", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], HeaderWrapperComp.prototype, "columnController", void 0);

  __decorate([context_1.Autowired('horizontalResizeService'), __metadata("design:type", horizontalResizeService_1.HorizontalResizeService)], HeaderWrapperComp.prototype, "horizontalResizeService", void 0);

  __decorate([context_1.Autowired('menuFactory'), __metadata("design:type", Object)], HeaderWrapperComp.prototype, "menuFactory", void 0);

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], HeaderWrapperComp.prototype, "gridApi", void 0);

  __decorate([context_1.Autowired('columnApi'), __metadata("design:type", columnApi_1.ColumnApi)], HeaderWrapperComp.prototype, "columnApi", void 0);

  __decorate([context_1.Autowired('sortController'), __metadata("design:type", sortController_1.SortController)], HeaderWrapperComp.prototype, "sortController", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], HeaderWrapperComp.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('userComponentFactory'), __metadata("design:type", userComponentFactory_1.UserComponentFactory)], HeaderWrapperComp.prototype, "userComponentFactory", void 0);

  __decorate([context_1.Autowired('columnHoverService'), __metadata("design:type", columnHoverService_1.ColumnHoverService)], HeaderWrapperComp.prototype, "columnHoverService", void 0);

  __decorate([context_1.Autowired('beans'), __metadata("design:type", beans_1.Beans)], HeaderWrapperComp.prototype, "beans", void 0);

  __decorate([componentAnnotations_1.RefSelector('eResize'), __metadata("design:type", HTMLElement)], HeaderWrapperComp.prototype, "eResize", void 0);

  __decorate([componentAnnotations_1.RefSelector('cbSelectAll'), __metadata("design:type", agCheckbox_1.AgCheckbox)], HeaderWrapperComp.prototype, "cbSelectAll", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], HeaderWrapperComp.prototype, "init", null);

  return HeaderWrapperComp;
}(component_1.Component);

exports.HeaderWrapperComp = HeaderWrapperComp;

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var column_1 = __webpack_require__(24);

var gridOptionsWrapper_1 = __webpack_require__(7);

var columnController_1 = __webpack_require__(17);

var columnFactory_1 = __webpack_require__(84);

var constants_1 = __webpack_require__(19);

var utils_1 = __webpack_require__(6);

var AutoGroupColService =
/** @class */
function () {
  function AutoGroupColService() {}

  AutoGroupColService_1 = AutoGroupColService;

  AutoGroupColService.prototype.createAutoGroupColumns = function (rowGroupColumns) {
    var _this = this;

    var groupAutoColumns = [];
    var doingTreeData = this.gridOptionsWrapper.isTreeData();
    var doingMultiAutoColumn = this.gridOptionsWrapper.isGroupMultiAutoColumn();

    if (doingTreeData && doingMultiAutoColumn) {
      console.warn('ag-Grid: you cannot mix groupMultiAutoColumn with treeData, only one column can be used to display groups when doing tree data');
      doingMultiAutoColumn = false;
    } // if doing groupMultiAutoColumn, then we call the method multiple times, once
    // for each column we are grouping by


    if (doingMultiAutoColumn) {
      rowGroupColumns.forEach(function (rowGroupCol, index) {
        groupAutoColumns.push(_this.createOneAutoGroupColumn(rowGroupCol, index));
      });
    } else {
      groupAutoColumns.push(this.createOneAutoGroupColumn());
    }

    return groupAutoColumns;
  }; // rowGroupCol and index are missing if groupMultiAutoColumn=false


  AutoGroupColService.prototype.createOneAutoGroupColumn = function (rowGroupCol, index) {
    // if one provided by user, use it, otherwise create one
    var defaultAutoColDef = this.generateDefaultColDef(rowGroupCol); // if doing multi, set the field

    var colId;

    if (rowGroupCol) {
      colId = constants_1.Constants.GROUP_AUTO_COLUMN_ID + "-" + rowGroupCol.getId();
    } else {
      colId = AutoGroupColService_1.GROUP_AUTO_COLUMN_BUNDLE_ID;
    }

    var userAutoColDef = this.gridOptionsWrapper.getAutoGroupColumnDef();

    utils_1._.mergeDeep(defaultAutoColDef, userAutoColDef);

    defaultAutoColDef = this.columnFactory.mergeColDefs(defaultAutoColDef);
    defaultAutoColDef.colId = colId; // For tree data the filter is always allowed

    if (!this.gridOptionsWrapper.isTreeData()) {
      // we would only allow filter if the user has provided field or value getter. otherwise the filter
      // would not be able to work.
      var noFieldOrValueGetter = utils_1._.missing(defaultAutoColDef.field) && utils_1._.missing(defaultAutoColDef.valueGetter) && utils_1._.missing(defaultAutoColDef.filterValueGetter);

      if (noFieldOrValueGetter) {
        defaultAutoColDef.filter = false;
      }
    } // if showing many cols, we don't want to show more than one with a checkbox for selection


    if (index && index > 0) {
      defaultAutoColDef.headerCheckboxSelection = false;
    }

    var newCol = new column_1.Column(defaultAutoColDef, null, colId, true);
    this.context.wireBean(newCol);
    return newCol;
  };

  AutoGroupColService.prototype.generateDefaultColDef = function (rowGroupCol) {
    var userAutoColDef = this.gridOptionsWrapper.getAutoGroupColumnDef();
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    var defaultAutoColDef = {
      headerName: localeTextFunc('group', 'Group'),
      // this is needed for charting, so that the group column can be used as a dimension
      enableRowGroup: true
    };
    var userHasProvidedGroupCellRenderer = userAutoColDef && (userAutoColDef.cellRenderer || userAutoColDef.cellRendererFramework); // only add the default group cell renderer if user hasn't provided one

    if (!userHasProvidedGroupCellRenderer) {
      defaultAutoColDef.cellRenderer = 'agGroupCellRenderer';
    } // we never allow moving the group column
    // defaultAutoColDef.suppressMovable = true;


    if (rowGroupCol) {
      var rowGroupColDef = rowGroupCol.getColDef();

      utils_1._.assign(defaultAutoColDef, {
        // cellRendererParams.groupKey: colDefToCopy.field;
        headerName: this.columnController.getDisplayNameForColumn(rowGroupCol, 'header'),
        headerValueGetter: rowGroupColDef.headerValueGetter
      });

      if (rowGroupColDef.cellRenderer) {
        utils_1._.assign(defaultAutoColDef, {
          cellRendererParams: {
            innerRenderer: rowGroupColDef.cellRenderer,
            innerRendererParams: rowGroupColDef.cellRendererParams
          }
        });
      }

      defaultAutoColDef.showRowGroup = rowGroupCol.getColId();
    } else {
      defaultAutoColDef.showRowGroup = true;
    }

    return defaultAutoColDef;
  };

  var AutoGroupColService_1;
  AutoGroupColService.GROUP_AUTO_COLUMN_BUNDLE_ID = constants_1.Constants.GROUP_AUTO_COLUMN_ID;

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], AutoGroupColService.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('context'), __metadata("design:type", context_1.Context)], AutoGroupColService.prototype, "context", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], AutoGroupColService.prototype, "columnController", void 0);

  __decorate([context_1.Autowired('columnFactory'), __metadata("design:type", columnFactory_1.ColumnFactory)], AutoGroupColService.prototype, "columnFactory", void 0);

  AutoGroupColService = AutoGroupColService_1 = __decorate([context_1.Bean('autoGroupColService')], AutoGroupColService);
  return AutoGroupColService;
}();

exports.AutoGroupColService = AutoGroupColService;

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var constants_1 = __webpack_require__(19);

var gridOptionsWrapper_1 = __webpack_require__(7);

var utils_1 = __webpack_require__(6);

var ImmutableService =
/** @class */
function () {
  function ImmutableService() {}

  ImmutableService.prototype.postConstruct = function () {
    if (this.rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
      this.clientSideRowModel = this.rowModel;
    }
  }; // converts the setRowData() command to a transaction


  ImmutableService.prototype.createTransactionForRowData = function (data) {
    if (utils_1._.missing(this.clientSideRowModel)) {
      console.error('ag-Grid: ImmutableService only works with ClientSideRowModel');
      return;
    }

    var getRowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();

    if (!getRowNodeIdFunc || utils_1._.missing(getRowNodeIdFunc)) {
      console.error('ag-Grid: ImmutableService requires getRowNodeId() callback to be implemented, your row data need IDs!');
      return;
    } // convert the data into a transaction object by working out adds, removes and updates


    var transaction = {
      remove: [],
      update: [],
      add: []
    };
    var existingNodesMap = this.clientSideRowModel.getCopyOfNodesMap();
    var suppressSortOrder = this.gridOptionsWrapper.isSuppressMaintainUnsortedOrder();
    var orderMap = suppressSortOrder ? null : {};

    if (utils_1._.exists(data)) {
      // split all the new data in the following:
      // if new, push to 'add'
      // if update, push to 'update'
      // if not changed, do not include in the transaction
      data.forEach(function (dataItem, index) {
        var id = getRowNodeIdFunc(dataItem);
        var existingNode = existingNodesMap[id];

        if (orderMap) {
          orderMap[id] = index;
        }

        if (existingNode) {
          var dataHasChanged = existingNode.data !== dataItem;

          if (dataHasChanged) {
            transaction.update.push(dataItem);
          } // otherwise, if data not changed, we just don't include it anywhere, as it's not a delta
          // remove from list, so we know the item is not to be removed


          existingNodesMap[id] = undefined;
        } else {
          transaction.add.push(dataItem);
        }
      });
    } // at this point, all rows that are left, should be removed


    utils_1._.iterateObject(existingNodesMap, function (id, rowNode) {
      if (rowNode) {
        transaction.remove.push(rowNode.data);
      }
    });

    return [transaction, orderMap];
  };

  __decorate([context_1.Autowired('rowModel'), __metadata("design:type", Object)], ImmutableService.prototype, "rowModel", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], ImmutableService.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], ImmutableService.prototype, "postConstruct", null);

  ImmutableService = __decorate([context_1.Bean('immutableService')], ImmutableService);
  return ImmutableService;
}();

exports.ImmutableService = ImmutableService;

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});

var ColDefUtil =
/** @class */
function () {
  function ColDefUtil() {}

  ColDefUtil.STRING_PROPERTIES = ['headerName', 'columnGroupShow', 'headerClass', 'toolPanelClass', 'headerValueGetter', 'pivotKeys', 'groupId', 'colId', 'sort', 'field', 'type', 'tooltipComponent', 'tooltipField', 'headerTooltip', 'cellClass', 'showRowGroup', 'template', 'templateUrl', 'filter', 'aggFunc', 'cellRenderer', 'cellEditor', 'pinned'];
  ColDefUtil.OBJECT_PROPERTIES = ['headerGroupComponent', 'headerGroupComponentFramework', 'headerGroupComponentParams', 'cellStyle', 'cellRendererParams', 'cellEditorFramework', 'cellEditorParams', 'pinnedRowCellRendererFramework', 'pinnedRowCellRendererParams', 'filterFramework', 'filterParams', 'pivotValueColumn', 'headerComponent', 'headerComponentFramework', 'headerComponentParams', 'floatingFilterComponent', 'floatingFilterComponentParams', 'floatingFilterComponentFramework', 'tooltipComponent', 'tooltipComponentParams', 'tooltipComponentFramework', 'refData'];
  ColDefUtil.ARRAY_PROPERTIES = ['children', 'sortingOrder', 'allowedAggFuncs', 'menuTabs', 'pivotTotalColumnIds', 'cellClassRules', 'icons'];
  ColDefUtil.NUMBER_PROPERTIES = ['sortedAt', 'width', 'minWidth', 'maxWidth', 'rowGroupIndex', 'pivotIndex'];
  ColDefUtil.BOOLEAN_PROPERTIES = ['suppressCellFlash', 'suppressToolPanel', 'openByDefault', 'marryChildren', 'hide', 'rowGroup', 'pivot', 'checkboxSelection', 'headerCheckboxSelection', 'headerCheckboxSelectionFilteredOnly', 'suppressMenu', 'suppressSorting', 'suppressMovable', 'suppressFilter', 'lockPosition', 'lockVisible', 'lockPinned', 'unSortIcon', 'suppressSizeToFit', 'suppressResize', 'suppressAutoSize', 'enableRowGroup', 'enablePivot', 'enableValue', 'editable', 'suppressPaste', 'suppressNavigable', 'enableCellChangeFlash', 'rowDrag', 'autoHeight', 'sortable', 'resizable', 'singleClickEdit'];
  ColDefUtil.FUNCTION_PROPERTIES = ['valueGetter', 'valueSetter', 'filterValueGetter', 'keyCreator', 'cellRenderer', 'cellRendererFramework', 'pinnedRowCellRenderer', 'valueFormatter', 'pinnedRowValueFormatter', 'valueParser', 'comparator', 'equals', 'pivotComparator', 'suppressKeyboardEvent', 'colSpan', 'rowSpan', 'getQuickFilterText', 'newValueHandler', 'onCellValueChanged', 'onCellClicked', 'onCellDoubleClicked', 'onCellContextMenu', 'tooltip', 'tooltipValueGetter', 'tooltipComponent', 'tooltipComponentFramework', 'cellRendererSelector', 'cellEditorSelector'];
  ColDefUtil.ALL_PROPERTIES = ColDefUtil.ARRAY_PROPERTIES.concat(ColDefUtil.OBJECT_PROPERTIES).concat(ColDefUtil.STRING_PROPERTIES).concat(ColDefUtil.NUMBER_PROPERTIES).concat(ColDefUtil.FUNCTION_PROPERTIES).concat(ColDefUtil.BOOLEAN_PROPERTIES); // used when doing property checks - this causes noise when using frameworks which can add their own fw specific
  // properties to colDefs, gridOptions etc

  ColDefUtil.FRAMEWORK_PROPERTIES = ['__ob__', '__metadata__', 'mappedColumnProperties', 'hasChildColumns', 'toColDef', 'createColDefFromGridColumn'];
  return ColDefUtil;
}();

exports.ColDefUtil = ColDefUtil;

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});

var SideBarDefParser =
/** @class */
function () {
  function SideBarDefParser() {}

  SideBarDefParser.parse = function (toParse) {
    if (!toParse) {
      return null;
    }

    if (toParse === true) {
      return {
        toolPanels: [SideBarDefParser.DEFAULT_COLUMN_COMP, SideBarDefParser.DEFAULT_FILTER_COMP],
        defaultToolPanel: 'columns'
      };
    }

    if (typeof toParse === 'string') {
      return SideBarDefParser.parse([toParse]);
    }

    if (Array.isArray(toParse)) {
      var comps_1 = [];
      toParse.forEach(function (key) {
        var lookupResult = SideBarDefParser.DEFAULT_BY_KEY[key];

        if (!lookupResult) {
          console.warn("ag-grid: the key " + key + " is not a valid key for specifying a tool panel, valid keys are: " + Object.keys(SideBarDefParser.DEFAULT_BY_KEY).join(','));
          return;
        }

        comps_1.push(lookupResult);
      });

      if (comps_1.length === 0) {
        return null;
      }

      return {
        toolPanels: comps_1,
        defaultToolPanel: comps_1[0].id
      };
    }

    var result = {
      toolPanels: SideBarDefParser.parseComponents(toParse.toolPanels),
      defaultToolPanel: toParse.defaultToolPanel,
      hiddenByDefault: toParse.hiddenByDefault
    };
    return result;
  };

  SideBarDefParser.parseComponents = function (from) {
    var result = [];
    from.forEach(function (it) {
      var toAdd = null;

      if (typeof it === 'string') {
        var lookupResult = SideBarDefParser.DEFAULT_BY_KEY[it];

        if (!lookupResult) {
          console.warn("ag-grid: the key " + it + " is not a valid key for specifying a tool panel, valid keys are: " + Object.keys(SideBarDefParser.DEFAULT_BY_KEY).join(','));
          return;
        }

        toAdd = lookupResult;
      } else {
        toAdd = it;
      }

      result.push(toAdd);
    });
    return result;
  };

  SideBarDefParser.DEFAULT_COLUMN_COMP = {
    id: 'columns',
    labelDefault: 'Columns',
    labelKey: 'columns',
    iconKey: 'columns',
    toolPanel: 'agColumnsToolPanel'
  };
  SideBarDefParser.DEFAULT_FILTER_COMP = {
    id: 'filters',
    labelDefault: 'Filters',
    labelKey: 'filters',
    iconKey: 'filter',
    toolPanel: 'agFiltersToolPanel'
  };
  SideBarDefParser.DEFAULT_BY_KEY = {
    columns: SideBarDefParser.DEFAULT_COLUMN_COMP,
    filters: SideBarDefParser.DEFAULT_FILTER_COMP
  };
  return SideBarDefParser;
}();

exports.SideBarDefParser = SideBarDefParser;

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
}); // class returns a unique id to use for the column. it checks the existing columns, and if the requested
// id is already taken, it will start appending numbers until it gets a unique id.
// eg, if the col field is 'name', it will try ids: {name, name_1, name_2...}
// if no field or id provided in the col, it will try the ids of natural numbers

var utils_1 = __webpack_require__(6);

var ColumnKeyCreator =
/** @class */
function () {
  function ColumnKeyCreator() {
    this.existingKeys = [];
  }

  ColumnKeyCreator.prototype.addExistingKeys = function (keys) {
    this.existingKeys = this.existingKeys.concat(keys);
  };

  ColumnKeyCreator.prototype.getUniqueKey = function (colId, colField) {
    // in case user passed in number for colId, convert to string
    colId = utils_1._.toStringOrNull(colId);
    var count = 0;

    while (true) {
      var idToTry = void 0;

      if (colId) {
        idToTry = colId;

        if (count !== 0) {
          idToTry += '_' + count;
        }
      } else if (colField) {
        idToTry = colField;

        if (count !== 0) {
          idToTry += '_' + count;
        }
      } else {
        idToTry = '' + count;
      }

      if (this.existingKeys.indexOf(idToTry) < 0) {
        this.existingKeys.push(idToTry);
        return idToTry;
      }

      count++;
    }
  };

  return ColumnKeyCreator;
}();

exports.ColumnKeyCreator = ColumnKeyCreator;

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var gridOptionsWrapper_1 = __webpack_require__(7);

var context_1 = __webpack_require__(2);

var dragAndDropService_1 = __webpack_require__(34);

var columnController_1 = __webpack_require__(17);

var eventService_1 = __webpack_require__(14);

var events_1 = __webpack_require__(18);

var headerRowComp_1 = __webpack_require__(206);

var bodyDropTarget_1 = __webpack_require__(207);

var column_1 = __webpack_require__(24);

var scrollVisibleService_1 = __webpack_require__(89);

var utils_1 = __webpack_require__(6);

var HeaderContainer =
/** @class */
function () {
  function HeaderContainer(eContainer, eViewport, pinned) {
    this.headerRowComps = [];
    this.eContainer = eContainer;
    this.pinned = pinned;
    this.eViewport = eViewport;
  }

  HeaderContainer.prototype.registerGridComp = function (gridPanel) {
    this.setupDragAndDrop(gridPanel);
  };

  HeaderContainer.prototype.forEachHeaderElement = function (callback) {
    this.headerRowComps.forEach(function (headerRowComp) {
      return headerRowComp.forEachHeaderElement(callback);
    });
  };

  HeaderContainer.prototype.init = function () {
    this.scrollWidth = this.gridOptionsWrapper.getScrollbarWidth(); // if value changes, then if not pivoting, we at least need to change the label eg from sum() to avg(),
    // if pivoting, then the columns have changed

    this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_VALUE_CHANGED, this.onColumnValueChanged.bind(this));
    this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onColumnRowGroupChanged.bind(this));
    this.eventService.addEventListener(events_1.Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
    this.eventService.addEventListener(events_1.Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
    this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));
    this.eventService.addEventListener(events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
  }; // if row group changes, that means we may need to add aggFuncs to the column headers,
  // if the grid goes from no aggregation (ie no grouping) to grouping


  HeaderContainer.prototype.onColumnRowGroupChanged = function () {
    this.onGridColumnsChanged();
  }; // if the agg func of a column changes, then we may need to update the agg func in columns header


  HeaderContainer.prototype.onColumnValueChanged = function () {
    this.onGridColumnsChanged();
  };

  HeaderContainer.prototype.onColumnResized = function () {
    this.setWidthOfPinnedContainer();
  };

  HeaderContainer.prototype.onDisplayedColumnsChanged = function () {
    this.setWidthOfPinnedContainer();
  };

  HeaderContainer.prototype.onScrollVisibilityChanged = function () {
    this.setWidthOfPinnedContainer();
  };

  HeaderContainer.prototype.setWidthOfPinnedContainer = function () {
    var pinningLeft = this.pinned === column_1.Column.PINNED_LEFT;
    var pinningRight = this.pinned === column_1.Column.PINNED_RIGHT;
    var controller = this.columnController;
    var isRtl = this.gridOptionsWrapper.isEnableRtl();

    if (pinningLeft || pinningRight) {
      // size to fit all columns
      var width = controller[pinningLeft ? 'getPinnedLeftContainerWidth' : 'getPinnedRightContainerWidth'](); // if there is a scroll showing (and taking up space, so Windows, and not iOS)
      // in the body, then we add extra space to keep header aligned with the body,
      // as body width fits the cols and the scrollbar

      var addPaddingForScrollbar = this.scrollVisibleService.isVerticalScrollShowing() && (isRtl && pinningLeft || !isRtl && pinningRight);

      if (addPaddingForScrollbar) {
        width += this.scrollWidth;
      }

      utils_1._.setFixedWidth(this.eContainer, width);
    }
  };

  HeaderContainer.prototype.destroy = function () {
    this.removeHeaderRowComps();
  }; // grid cols have changed - this also means the number of rows in the header can have
  // changed. so we remove all the old rows and insert new ones for a complete refresh


  HeaderContainer.prototype.onGridColumnsChanged = function () {
    this.removeAndCreateAllRowComps();
  };

  HeaderContainer.prototype.removeAndCreateAllRowComps = function () {
    this.removeHeaderRowComps();
    this.createHeaderRowComps();
  }; // we expose this for gridOptions.api.refreshHeader() to call


  HeaderContainer.prototype.refresh = function () {
    this.removeAndCreateAllRowComps();
  };

  HeaderContainer.prototype.setupDragAndDrop = function (gridComp) {
    var dropContainer = this.eViewport ? this.eViewport : this.eContainer;
    var bodyDropTarget = new bodyDropTarget_1.BodyDropTarget(this.pinned, dropContainer);
    this.context.wireBean(bodyDropTarget);
    bodyDropTarget.registerGridComp(gridComp);
  };

  HeaderContainer.prototype.removeHeaderRowComps = function () {
    this.headerRowComps.forEach(function (headerRowComp) {
      headerRowComp.destroy();
    });
    this.headerRowComps.length = 0;

    utils_1._.clearElement(this.eContainer);
  };

  HeaderContainer.prototype.createHeaderRowComps = function () {
    // if we are displaying header groups, then we have many rows here.
    // go through each row of the header, one by one.
    var rowCount = this.columnController.getHeaderRowCount();

    for (var dept = 0; dept < rowCount; dept++) {
      var groupRow = dept !== rowCount - 1;
      var type = groupRow ? headerRowComp_1.HeaderRowType.COLUMN_GROUP : headerRowComp_1.HeaderRowType.COLUMN;
      var headerRowComp = new headerRowComp_1.HeaderRowComp(dept, type, this.pinned, this.dropTarget);
      this.context.wireBean(headerRowComp);
      this.headerRowComps.push(headerRowComp);
      this.eContainer.appendChild(headerRowComp.getGui());
    }

    var includeFloatingFilterRow = this.gridOptionsWrapper.isFloatingFilter() && !this.columnController.isPivotMode();

    if (includeFloatingFilterRow) {
      var headerRowComp = new headerRowComp_1.HeaderRowComp(rowCount, headerRowComp_1.HeaderRowType.FLOATING_FILTER, this.pinned, this.dropTarget);
      this.context.wireBean(headerRowComp);
      this.headerRowComps.push(headerRowComp);
      this.eContainer.appendChild(headerRowComp.getGui());
    }
  };

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], HeaderContainer.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('context'), __metadata("design:type", context_1.Context)], HeaderContainer.prototype, "context", void 0);

  __decorate([context_1.Autowired('$scope'), __metadata("design:type", Object)], HeaderContainer.prototype, "$scope", void 0);

  __decorate([context_1.Autowired('dragAndDropService'), __metadata("design:type", dragAndDropService_1.DragAndDropService)], HeaderContainer.prototype, "dragAndDropService", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], HeaderContainer.prototype, "columnController", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], HeaderContainer.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('scrollVisibleService'), __metadata("design:type", scrollVisibleService_1.ScrollVisibleService)], HeaderContainer.prototype, "scrollVisibleService", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], HeaderContainer.prototype, "init", null);

  return HeaderContainer;
}();

exports.HeaderContainer = HeaderContainer;

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var component_1 = __webpack_require__(22);

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var columnController_1 = __webpack_require__(17);

var column_1 = __webpack_require__(24);

var eventService_1 = __webpack_require__(14);

var events_1 = __webpack_require__(18);

var headerWrapperComp_1 = __webpack_require__(199);

var headerGroupWrapperComp_1 = __webpack_require__(302);

var filterManager_1 = __webpack_require__(40);

var gridApi_1 = __webpack_require__(20);

var constants_1 = __webpack_require__(19);

var utils_1 = __webpack_require__(6);

var floatingFilterWrapper_1 = __webpack_require__(303);

var HeaderRowType;

(function (HeaderRowType) {
  HeaderRowType[HeaderRowType["COLUMN_GROUP"] = 0] = "COLUMN_GROUP";
  HeaderRowType[HeaderRowType["COLUMN"] = 1] = "COLUMN";
  HeaderRowType[HeaderRowType["FLOATING_FILTER"] = 2] = "FLOATING_FILTER";
})(HeaderRowType = exports.HeaderRowType || (exports.HeaderRowType = {}));

var HeaderRowComp =
/** @class */
function (_super) {
  __extends(HeaderRowComp, _super);

  function HeaderRowComp(dept, type, pinned, dropTarget) {
    var _this = _super.call(this, "<div class=\"ag-header-row\" role=\"presentation\"/>") || this;

    _this.headerComps = {};
    _this.dept = dept;
    _this.type = type;
    _this.pinned = pinned;
    _this.dropTarget = dropTarget;
    return _this;
  }

  HeaderRowComp.prototype.forEachHeaderElement = function (callback) {
    var _this = this;

    Object.keys(this.headerComps).forEach(function (key) {
      callback(_this.headerComps[key]);
    });
  };

  HeaderRowComp.prototype.destroy = function () {
    var idsOfAllChildren = Object.keys(this.headerComps);
    this.removeAndDestroyChildComponents(idsOfAllChildren);

    _super.prototype.destroy.call(this);
  };

  HeaderRowComp.prototype.removeAndDestroyChildComponents = function (idsToDestroy) {
    var _this = this;

    idsToDestroy.forEach(function (id) {
      var childHeaderComp = _this.headerComps[id];

      _this.getGui().removeChild(childHeaderComp.getGui());

      childHeaderComp.destroy();
      delete _this.headerComps[id];
    });
  };

  HeaderRowComp.prototype.onRowHeightChanged = function () {
    var headerRowCount = this.columnController.getHeaderRowCount();
    var sizes = [];
    var numberOfFloating = 0;
    var groupHeight;
    var headerHeight;

    if (!this.columnController.isPivotMode()) {
      if (this.gridOptionsWrapper.isFloatingFilter()) {
        headerRowCount++;
      }

      numberOfFloating = this.gridOptionsWrapper.isFloatingFilter() ? 1 : 0;
      groupHeight = this.gridOptionsWrapper.getGroupHeaderHeight();
      headerHeight = this.gridOptionsWrapper.getHeaderHeight();
    } else {
      numberOfFloating = 0;
      groupHeight = this.gridOptionsWrapper.getPivotGroupHeaderHeight();
      headerHeight = this.gridOptionsWrapper.getPivotHeaderHeight();
    }

    var numberOfNonGroups = 1 + numberOfFloating;
    var numberOfGroups = headerRowCount - numberOfNonGroups;

    for (var i = 0; i < numberOfGroups; i++) {
      sizes.push(groupHeight);
    }

    sizes.push(headerHeight);

    for (var i = 0; i < numberOfFloating; i++) {
      sizes.push(this.gridOptionsWrapper.getFloatingFiltersHeight());
    }

    var rowHeight = 0;

    for (var i = 0; i < this.dept; i++) {
      rowHeight += sizes[i];
    }

    this.getGui().style.top = rowHeight + 'px';
    this.getGui().style.height = sizes[this.dept] + 'px';
  }; //noinspection JSUnusedLocalSymbols


  HeaderRowComp.prototype.init = function () {
    this.onRowHeightChanged();
    this.onVirtualColumnsChanged();
    this.setWidth();
    this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
    this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
    this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
    this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
    this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, this.onRowHeightChanged.bind(this));
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
  };

  HeaderRowComp.prototype.onColumnResized = function () {
    this.setWidth();
  };

  HeaderRowComp.prototype.setWidth = function () {
    var width = this.getWidthForRow();
    this.getGui().style.width = width + 'px';
  };

  HeaderRowComp.prototype.getWidthForRow = function () {
    var printLayout = this.gridOptionsWrapper.getDomLayout() === constants_1.Constants.DOM_LAYOUT_PRINT;

    if (printLayout) {
      var centerRow = utils_1._.missing(this.pinned);

      if (centerRow) {
        return this.columnController.getContainerWidth(column_1.Column.PINNED_RIGHT) + this.columnController.getContainerWidth(column_1.Column.PINNED_LEFT) + this.columnController.getContainerWidth(null);
      } else {
        return 0;
      }
    } else {
      // if not printing, just return the width as normal
      return this.columnController.getContainerWidth(this.pinned);
    }
  };

  HeaderRowComp.prototype.onGridColumnsChanged = function () {
    this.removeAndDestroyAllChildComponents();
  };

  HeaderRowComp.prototype.removeAndDestroyAllChildComponents = function () {
    var idsOfAllChildren = Object.keys(this.headerComps);
    this.removeAndDestroyChildComponents(idsOfAllChildren);
  };

  HeaderRowComp.prototype.onDisplayedColumnsChanged = function () {
    this.onVirtualColumnsChanged();
    this.setWidth();
  };

  HeaderRowComp.prototype.getItemsAtDept = function () {
    var _this = this;

    var printLayout = this.gridOptionsWrapper.getDomLayout() === constants_1.Constants.DOM_LAYOUT_PRINT;

    if (printLayout) {
      // for print layout, we add all columns into the center
      var centerContainer = utils_1._.missing(this.pinned);

      if (centerContainer) {
        var result_1 = [];
        [column_1.Column.PINNED_LEFT, null, column_1.Column.PINNED_RIGHT].forEach(function (pinned) {
          var items = _this.columnController.getVirtualHeaderGroupRow(pinned, _this.type == HeaderRowType.FLOATING_FILTER ? _this.dept - 1 : _this.dept);

          result_1 = result_1.concat(items);
        });
        return result_1;
      } else {
        return [];
      }
    } else {
      // when in normal layout, we add the columns for that container only
      return this.columnController.getVirtualHeaderGroupRow(this.pinned, this.type == HeaderRowType.FLOATING_FILTER ? this.dept - 1 : this.dept);
    }
  };

  HeaderRowComp.prototype.onVirtualColumnsChanged = function () {
    var _this = this;

    var currentChildIds = Object.keys(this.headerComps);
    var itemsAtDepth = this.getItemsAtDept();
    var ensureDomOrder = this.gridOptionsWrapper.isEnsureDomOrder();
    var eBefore;
    itemsAtDepth.forEach(function (child) {
      // skip groups that have no displayed children. this can happen when the group is broken,
      // and this section happens to have nothing to display for the open / closed state.
      // (a broken group is one that is split, ie columns in the group have a non-group column
      // in between them)
      if (child.isEmptyGroup()) {
        return;
      }

      var idOfChild = child.getUniqueId();

      var eParentContainer = _this.getGui(); // if we already have this cell rendered, do nothing


      var colAlreadyInDom = currentChildIds.indexOf(idOfChild) >= 0;
      var headerComp;
      var eHeaderCompGui;

      if (colAlreadyInDom) {
        utils_1._.removeFromArray(currentChildIds, idOfChild);

        headerComp = _this.headerComps[idOfChild];
        eHeaderCompGui = headerComp.getGui();

        if (ensureDomOrder) {
          utils_1._.ensureDomOrder(eParentContainer, eHeaderCompGui, eBefore);
        }

        eBefore = eHeaderCompGui;
      } else {
        headerComp = _this.createHeaderComp(child);
        _this.headerComps[idOfChild] = headerComp;
        eHeaderCompGui = headerComp.getGui();

        if (ensureDomOrder) {
          utils_1._.insertWithDomOrder(eParentContainer, eHeaderCompGui, eBefore);
        } else {
          eParentContainer.appendChild(eHeaderCompGui);
        }

        eBefore = eHeaderCompGui;
      }
    }); // at this point, anything left in currentChildIds is an element that is no longer in the viewport

    this.removeAndDestroyChildComponents(currentChildIds);
  };

  HeaderRowComp.prototype.createHeaderComp = function (columnGroupChild) {
    var result;

    switch (this.type) {
      case HeaderRowType.COLUMN:
        result = new headerWrapperComp_1.HeaderWrapperComp(columnGroupChild, this.dropTarget, this.pinned);
        break;

      case HeaderRowType.COLUMN_GROUP:
        result = new headerGroupWrapperComp_1.HeaderGroupWrapperComp(columnGroupChild, this.dropTarget, this.pinned);
        break;

      case HeaderRowType.FLOATING_FILTER:
        result = new floatingFilterWrapper_1.FloatingFilterWrapper(columnGroupChild);
        break;
    }

    this.getContext().wireBean(result);
    return result;
  };

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], HeaderRowComp.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], HeaderRowComp.prototype, "gridApi", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], HeaderRowComp.prototype, "columnController", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], HeaderRowComp.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('filterManager'), __metadata("design:type", filterManager_1.FilterManager)], HeaderRowComp.prototype, "filterManager", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], HeaderRowComp.prototype, "init", null);

  return HeaderRowComp;
}(component_1.Component);

exports.HeaderRowComp = HeaderRowComp;

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var dragAndDropService_1 = __webpack_require__(34);

var context_1 = __webpack_require__(2);

var moveColumnController_1 = __webpack_require__(208);

var column_1 = __webpack_require__(24);

var bodyDropPivotTarget_1 = __webpack_require__(209);

var columnController_1 = __webpack_require__(17);

var DropType;

(function (DropType) {
  DropType[DropType["ColumnMove"] = 0] = "ColumnMove";
  DropType[DropType["Pivot"] = 1] = "Pivot";
})(DropType || (DropType = {}));

var BodyDropTarget =
/** @class */
function () {
  function BodyDropTarget(pinned, eContainer) {
    this.dropListeners = {};
    this.pinned = pinned;
    this.eContainer = eContainer;
  }

  BodyDropTarget.prototype.registerGridComp = function (gridPanel) {
    this.gridPanel = gridPanel;
    this.moveColumnController.registerGridComp(gridPanel);

    switch (this.pinned) {
      case column_1.Column.PINNED_LEFT:
        this.eSecondaryContainers = this.gridPanel.getDropTargetLeftContainers();
        break;

      case column_1.Column.PINNED_RIGHT:
        this.eSecondaryContainers = this.gridPanel.getDropTargetRightContainers();
        break;

      default:
        this.eSecondaryContainers = this.gridPanel.getDropTargetBodyContainers();
        break;
    }
  };

  BodyDropTarget.prototype.isInterestedIn = function (type) {
    // not interested in row drags
    return type === dragAndDropService_1.DragSourceType.HeaderCell || type === dragAndDropService_1.DragSourceType.ToolPanel;
  };

  BodyDropTarget.prototype.getSecondaryContainers = function () {
    return this.eSecondaryContainers;
  };

  BodyDropTarget.prototype.getContainer = function () {
    return this.eContainer;
  };

  BodyDropTarget.prototype.init = function () {
    this.moveColumnController = new moveColumnController_1.MoveColumnController(this.pinned, this.eContainer);
    this.context.wireBean(this.moveColumnController);
    var bodyDropPivotTarget = new bodyDropPivotTarget_1.BodyDropPivotTarget(this.pinned);
    this.context.wireBean(bodyDropPivotTarget);
    this.dropListeners[DropType.ColumnMove] = this.moveColumnController;
    this.dropListeners[DropType.Pivot] = bodyDropPivotTarget;
    this.dragAndDropService.addDropTarget(this);
  };

  BodyDropTarget.prototype.getIconName = function () {
    return this.currentDropListener.getIconName();
  }; // we want to use the bodyPivotTarget if the user is dragging columns in from the toolPanel
  // and we are in pivot mode, as it has to logic to set pivot/value/group on the columns when
  // dropped into the grid's body.


  BodyDropTarget.prototype.getDropType = function (draggingEvent) {
    if (this.columnController.isPivotMode()) {
      // in pivot mode, then if moving a column (ie didn't come from toolpanel) then it's
      // a standard column move, however if it came from teh toolpanel, then we are introducing
      // dimensions or values to the grid
      if (draggingEvent.dragSource.type === dragAndDropService_1.DragSourceType.ToolPanel) {
        return DropType.Pivot;
      } else {
        return DropType.ColumnMove;
      }
    } else {
      // it's a column, and not pivot mode, so always moving
      return DropType.ColumnMove;
    }
  };

  BodyDropTarget.prototype.onDragEnter = function (draggingEvent) {
    // we pick the drop listener depending on whether we are in pivot mode are not. if we are
    // in pivot mode, then dropping cols changes the row group, pivot, value stats. otherwise
    // we change visibility state and position.
    // if (this.columnController.isPivotMode()) {
    var dropType = this.getDropType(draggingEvent);
    this.currentDropListener = this.dropListeners[dropType];
    this.currentDropListener.onDragEnter(draggingEvent);
  };

  BodyDropTarget.prototype.onDragLeave = function (params) {
    this.currentDropListener.onDragLeave(params);
  };

  BodyDropTarget.prototype.onDragging = function (params) {
    this.currentDropListener.onDragging(params);
  };

  BodyDropTarget.prototype.onDragStop = function (params) {
    this.currentDropListener.onDragStop(params);
  };

  __decorate([context_1.Autowired('context'), __metadata("design:type", context_1.Context)], BodyDropTarget.prototype, "context", void 0);

  __decorate([context_1.Autowired('dragAndDropService'), __metadata("design:type", dragAndDropService_1.DragAndDropService)], BodyDropTarget.prototype, "dragAndDropService", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], BodyDropTarget.prototype, "columnController", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], BodyDropTarget.prototype, "init", null);

  return BodyDropTarget;
}();

exports.BodyDropTarget = BodyDropTarget;

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var logger_1 = __webpack_require__(30);

var columnController_1 = __webpack_require__(17);

var column_1 = __webpack_require__(24);

var utils_1 = __webpack_require__(6);

var dragAndDropService_1 = __webpack_require__(34);

var gridOptionsWrapper_1 = __webpack_require__(7);

var MoveColumnController =
/** @class */
function () {
  function MoveColumnController(pinned, eContainer) {
    this.needToMoveLeft = false;
    this.needToMoveRight = false;
    this.pinned = pinned;
    this.eContainer = eContainer;
    this.centerContainer = !utils_1._.exists(pinned);
  }

  MoveColumnController.prototype.registerGridComp = function (gridPanel) {
    this.gridPanel = gridPanel;
  };

  MoveColumnController.prototype.init = function () {
    this.logger = this.loggerFactory.create('MoveColumnController');
  };

  MoveColumnController.prototype.getIconName = function () {
    return this.pinned ? dragAndDropService_1.DragAndDropService.ICON_PINNED : dragAndDropService_1.DragAndDropService.ICON_MOVE;
  };

  MoveColumnController.prototype.onDragEnter = function (draggingEvent) {
    // we do dummy drag, so make sure column appears in the right location when first placed
    var columns = draggingEvent.dragItem.columns;
    var dragCameFromToolPanel = draggingEvent.dragSource.type === dragAndDropService_1.DragSourceType.ToolPanel;

    if (dragCameFromToolPanel) {
      // the if statement doesn't work if drag leaves grid, then enters again
      this.setColumnsVisible(columns, true, "uiColumnDragged");
    } else {
      // restore previous state of visible columns upon re-entering. this means if the user drags
      // a group out, and then drags the group back in, only columns that were originally visible
      // will be visible again. otherwise a group with three columns (but only two visible) could
      // be dragged out, then when it's dragged in again, all three are visible. this stops that.
      var visibleState_1 = draggingEvent.dragItem.visibleState;
      var visibleColumns = columns.filter(function (column) {
        return visibleState_1[column.getId()];
      });
      this.setColumnsVisible(visibleColumns, true, "uiColumnDragged");
    }

    this.setColumnsPinned(columns, this.pinned, "uiColumnDragged");
    this.onDragging(draggingEvent, true);
  };

  MoveColumnController.prototype.onDragLeave = function (draggingEvent) {
    var hideColumnOnExit = !this.gridOptionsWrapper.isSuppressDragLeaveHidesColumns() && !draggingEvent.fromNudge;

    if (hideColumnOnExit) {
      var dragItem = draggingEvent.dragSource.dragItemCallback();
      var columns = dragItem.columns;
      this.setColumnsVisible(columns, false, "uiColumnDragged");
    }

    this.ensureIntervalCleared();
  };

  MoveColumnController.prototype.setColumnsVisible = function (columns, visible, source) {
    if (source === void 0) {
      source = "api";
    }

    if (columns) {
      var allowedCols = columns.filter(function (c) {
        return !c.isLockVisible();
      });
      this.columnController.setColumnsVisible(allowedCols, visible, source);
    }
  };

  MoveColumnController.prototype.setColumnsPinned = function (columns, pinned, source) {
    if (source === void 0) {
      source = "api";
    }

    if (columns) {
      var allowedCols = columns.filter(function (c) {
        return !c.isLockPinned();
      });
      this.columnController.setColumnsPinned(allowedCols, pinned, source);
    }
  };

  MoveColumnController.prototype.onDragStop = function () {
    this.ensureIntervalCleared();
  };

  MoveColumnController.prototype.normaliseX = function (x) {
    // flip the coordinate if doing RTL
    var flipHorizontallyForRtl = this.gridOptionsWrapper.isEnableRtl();

    if (flipHorizontallyForRtl) {
      var clientWidth = this.eContainer.clientWidth;
      x = clientWidth - x;
    } // adjust for scroll only if centre container (the pinned containers dont scroll)


    var adjustForScroll = this.centerContainer;

    if (adjustForScroll) {
      x += this.gridPanel.getCenterViewportScrollLeft();
    }

    return x;
  };

  MoveColumnController.prototype.checkCenterForScrolling = function (xAdjustedForScroll) {
    if (this.centerContainer) {
      // scroll if the mouse has gone outside the grid (or just outside the scrollable part if pinning)
      // putting in 50 buffer, so even if user gets to edge of grid, a scroll will happen
      var firstVisiblePixel = this.gridPanel.getCenterViewportScrollLeft();
      var lastVisiblePixel = firstVisiblePixel + this.gridPanel.getCenterWidth();

      if (this.gridOptionsWrapper.isEnableRtl()) {
        this.needToMoveRight = xAdjustedForScroll < firstVisiblePixel + 50;
        this.needToMoveLeft = xAdjustedForScroll > lastVisiblePixel - 50;
      } else {
        this.needToMoveLeft = xAdjustedForScroll < firstVisiblePixel + 50;
        this.needToMoveRight = xAdjustedForScroll > lastVisiblePixel - 50;
      }

      if (this.needToMoveLeft || this.needToMoveRight) {
        this.ensureIntervalStarted();
      } else {
        this.ensureIntervalCleared();
      }
    }
  };

  MoveColumnController.prototype.onDragging = function (draggingEvent, fromEnter) {
    var _this = this;

    if (fromEnter === void 0) {
      fromEnter = false;
    }

    this.lastDraggingEvent = draggingEvent; // if moving up or down (ie not left or right) then do nothing

    if (utils_1._.missing(draggingEvent.hDirection)) {
      return;
    }

    var xNormalised = this.normaliseX(draggingEvent.x); // if the user is dragging into the panel, ie coming from the side panel into the main grid,
    // we don't want to scroll the grid this time, it would appear like the table is jumping
    // each time a column is dragged in.

    if (!fromEnter) {
      this.checkCenterForScrolling(xNormalised);
    }

    var hDirectionNormalised = this.normaliseDirection(draggingEvent.hDirection);
    var dragSourceType = draggingEvent.dragSource.type;
    var columnsToMove = draggingEvent.dragSource.dragItemCallback().columns;
    columnsToMove = columnsToMove.filter(function (col) {
      if (col.isLockPinned()) {
        // if locked return true only if both col and container are same pin type.
        // double equals (==) here on purpose so that null==undefined is true (for not pinned options)
        return col.getPinned() == _this.pinned;
      } else {
        // if not pin locked, then always allowed to be in this container
        return true;
      }
    });
    this.attemptMoveColumns(dragSourceType, columnsToMove, hDirectionNormalised, xNormalised, fromEnter);
  };

  MoveColumnController.prototype.normaliseDirection = function (hDirection) {
    if (this.gridOptionsWrapper.isEnableRtl()) {
      switch (hDirection) {
        case dragAndDropService_1.HDirection.Left:
          return dragAndDropService_1.HDirection.Right;

        case dragAndDropService_1.HDirection.Right:
          return dragAndDropService_1.HDirection.Left;

        default:
          console.error("ag-Grid: Unknown direction " + hDirection);
      }
    } else {
      return hDirection;
    }
  }; // returns the index of the first column in the list ONLY if the cols are all beside
  // each other. if the cols are not beside each other, then returns null


  MoveColumnController.prototype.calculateOldIndex = function (movingCols) {
    var gridCols = this.columnController.getAllGridColumns();
    var indexes = [];
    movingCols.forEach(function (col) {
      return indexes.push(gridCols.indexOf(col));
    });

    utils_1._.sortNumberArray(indexes);

    var firstIndex = indexes[0];
    var lastIndex = indexes[indexes.length - 1];
    var spread = lastIndex - firstIndex;
    var gapsExist = spread !== indexes.length - 1;
    return gapsExist ? null : firstIndex;
  };

  MoveColumnController.prototype.attemptMoveColumns = function (dragSourceType, allMovingColumns, hDirection, xAdjusted, fromEnter) {
    var draggingLeft = hDirection === dragAndDropService_1.HDirection.Left;
    var draggingRight = hDirection === dragAndDropService_1.HDirection.Right;
    var validMoves = this.calculateValidMoves(allMovingColumns, draggingRight, xAdjusted); // if cols are not adjacent, then this returns null. when moving, we constrain the direction of the move
    // (ie left or right) to the mouse direction. however

    var oldIndex = this.calculateOldIndex(allMovingColumns);

    for (var i = 0; i < validMoves.length; i++) {
      var newIndex = validMoves[i]; // the two check below stop an error when the user grabs a group my a middle column, then
      // it is possible the mouse pointer is to the right of a column while been dragged left.
      // so we need to make sure that the mouse pointer is actually left of the left most column
      // if moving left, and right of the right most column if moving right
      // we check 'fromEnter' below so we move the column to the new spot if the mouse is coming from
      // outside the grid, eg if the column is moving from side panel, mouse is moving left, then we should
      // place the column to the RHS even if the mouse is moving left and the column is already on
      // the LHS. otherwise we stick to the rule described above.

      var constrainDirection = oldIndex !== null && !fromEnter; // don't consider 'fromEnter' when dragging header cells, otherwise group can jump to opposite direction of drag

      if (dragSourceType == dragAndDropService_1.DragSourceType.HeaderCell) {
        constrainDirection = oldIndex !== null;
      }

      if (constrainDirection) {
        // only allow left drag if this column is moving left
        if (draggingLeft && newIndex >= oldIndex) {
          continue;
        } // only allow right drag if this column is moving right


        if (draggingRight && newIndex <= oldIndex) {
          continue;
        }
      }

      if (!this.columnController.doesMovePassRules(allMovingColumns, newIndex)) {
        continue;
      }

      this.columnController.moveColumns(allMovingColumns, newIndex, "uiColumnDragged"); // important to return here, so once we do the first valid move, we don't try do any more

      return;
    }
  };

  MoveColumnController.prototype.calculateValidMoves = function (movingCols, draggingRight, x) {
    // this is the list of cols on the screen, so it's these we use when comparing the x mouse position
    var allDisplayedCols = this.columnController.getDisplayedColumns(this.pinned); // but this list is the list of all cols, when we move a col it's the index within this list that gets used,
    // so the result we return has to be and index location for this list

    var allGridCols = this.columnController.getAllGridColumns();

    var colIsMovingFunc = function colIsMovingFunc(col) {
      return movingCols.indexOf(col) >= 0;
    };

    var colIsNotMovingFunc = function colIsNotMovingFunc(col) {
      return movingCols.indexOf(col) < 0;
    };

    var movingDisplayedCols = allDisplayedCols.filter(colIsMovingFunc);
    var otherDisplayedCols = allDisplayedCols.filter(colIsNotMovingFunc);
    var otherGridCols = allGridCols.filter(colIsNotMovingFunc); // work out how many DISPLAYED columns fit before the 'x' position. this gives us the displayIndex.
    // for example, if cols are a,b,c,d and we find a,b fit before 'x', then we want to place the moving
    // col between b and c (so that it is under the mouse position).

    var displayIndex = 0;
    var availableWidth = x; // if we are dragging right, then the columns will be to the left of the mouse, so we also want to
    // include the width of the moving columns

    if (draggingRight) {
      var widthOfMovingDisplayedCols_1 = 0;
      movingDisplayedCols.forEach(function (col) {
        return widthOfMovingDisplayedCols_1 += col.getActualWidth();
      });
      availableWidth -= widthOfMovingDisplayedCols_1;
    }

    if (availableWidth > 0) {
      // now count how many of the displayed columns will fit to the left
      for (var i = 0; i < otherDisplayedCols.length; i++) {
        var col = otherDisplayedCols[i];
        availableWidth -= col.getActualWidth();

        if (availableWidth < 0) {
          break;
        }

        displayIndex++;
      } // trial and error, if going right, we adjust by one, i didn't manage to quantify why, but it works


      if (draggingRight) {
        displayIndex++;
      }
    } // the display index is with respect to all the showing columns, however when we move, it's with
    // respect to all grid columns, so we need to translate from display index to grid index


    var gridColIndex;

    if (displayIndex > 0) {
      var leftColumn = otherDisplayedCols[displayIndex - 1];
      gridColIndex = otherGridCols.indexOf(leftColumn) + 1;
    } else {
      gridColIndex = 0;
    }

    var validMoves = [gridColIndex]; // add in all adjacent empty columns as other valid moves. this allows us to try putting the new
    // column in any place of a hidden column, to try different combinations so that we don't break
    // married children. in other words, maybe the new index breaks a group, but only because some
    // columns are hidden, maybe we can reshuffle the hidden columns to find a place that works.

    var nextCol = allGridCols[gridColIndex];

    while (utils_1._.exists(nextCol) && this.isColumnHidden(allDisplayedCols, nextCol)) {
      gridColIndex++;
      validMoves.push(gridColIndex);
      nextCol = allGridCols[gridColIndex];
    }

    return validMoves;
  }; // isHidden takes into account visible=false and group=closed, ie it is not displayed


  MoveColumnController.prototype.isColumnHidden = function (displayedColumns, col) {
    return displayedColumns.indexOf(col) < 0;
  };

  MoveColumnController.prototype.ensureIntervalStarted = function () {
    if (!this.movingIntervalId) {
      this.intervalCount = 0;
      this.failedMoveAttempts = 0;
      this.movingIntervalId = window.setInterval(this.moveInterval.bind(this), 100);

      if (this.needToMoveLeft) {
        this.dragAndDropService.setGhostIcon(dragAndDropService_1.DragAndDropService.ICON_LEFT, true);
      } else {
        this.dragAndDropService.setGhostIcon(dragAndDropService_1.DragAndDropService.ICON_RIGHT, true);
      }
    }
  };

  MoveColumnController.prototype.ensureIntervalCleared = function () {
    if (this.moveInterval) {
      window.clearInterval(this.movingIntervalId);
      this.movingIntervalId = null;
      this.dragAndDropService.setGhostIcon(dragAndDropService_1.DragAndDropService.ICON_MOVE);
    }
  };

  MoveColumnController.prototype.moveInterval = function () {
    // the amounts we move get bigger at each interval, so the speed accelerates, starting a bit slow
    // and getting faster. this is to give smoother user experience. we max at 100px to limit the speed.
    var pixelsToMove;
    this.intervalCount++;
    pixelsToMove = 10 + this.intervalCount * 5;

    if (pixelsToMove > 100) {
      pixelsToMove = 100;
    }

    var pixelsMoved;

    if (this.needToMoveLeft) {
      pixelsMoved = this.gridPanel.scrollHorizontally(-pixelsToMove);
    } else if (this.needToMoveRight) {
      pixelsMoved = this.gridPanel.scrollHorizontally(pixelsToMove);
    }

    if (pixelsMoved !== 0) {
      this.onDragging(this.lastDraggingEvent);
      this.failedMoveAttempts = 0;
    } else {
      // we count the failed move attempts. if we fail to move 7 times, then we pin the column.
      // this is how we achieve pining by dragging the column to the edge of the grid.
      this.failedMoveAttempts++;
      var columns = this.lastDraggingEvent.dragItem.columns;
      var columnsThatCanPin = columns.filter(function (c) {
        return !c.isLockPinned();
      });

      if (columnsThatCanPin.length > 0) {
        this.dragAndDropService.setGhostIcon(dragAndDropService_1.DragAndDropService.ICON_PINNED);

        if (this.failedMoveAttempts > 7) {
          var pinType = this.needToMoveLeft ? column_1.Column.PINNED_LEFT : column_1.Column.PINNED_RIGHT;
          this.setColumnsPinned(columnsThatCanPin, pinType, "uiColumnDragged");
          this.dragAndDropService.nudge();
        }
      }
    }
  };

  __decorate([context_1.Autowired('loggerFactory'), __metadata("design:type", logger_1.LoggerFactory)], MoveColumnController.prototype, "loggerFactory", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], MoveColumnController.prototype, "columnController", void 0);

  __decorate([context_1.Autowired('dragAndDropService'), __metadata("design:type", dragAndDropService_1.DragAndDropService)], MoveColumnController.prototype, "dragAndDropService", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], MoveColumnController.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], MoveColumnController.prototype, "init", null);

  return MoveColumnController;
}();

exports.MoveColumnController = MoveColumnController;

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var dragAndDropService_1 = __webpack_require__(34);

var columnController_1 = __webpack_require__(17);

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var BodyDropPivotTarget =
/** @class */
function () {
  function BodyDropPivotTarget(pinned) {
    this.columnsToAggregate = [];
    this.columnsToGroup = [];
    this.columnsToPivot = [];
    this.pinned = pinned;
  }
  /** Callback for when drag enters */


  BodyDropPivotTarget.prototype.onDragEnter = function (draggingEvent) {
    var _this = this;

    this.clearColumnsList(); // in pivot mode, we don't accept any drops if functions are read only

    if (this.gridOptionsWrapper.isFunctionsReadOnly()) {
      return;
    }

    var dragColumns = draggingEvent.dragItem.columns;
    dragColumns.forEach(function (column) {
      // we don't allow adding secondary columns
      if (!column.isPrimary()) {
        return;
      }

      if (column.isAnyFunctionActive()) {
        return;
      }

      if (column.isAllowValue()) {
        _this.columnsToAggregate.push(column);
      } else if (column.isAllowRowGroup()) {
        _this.columnsToGroup.push(column);
      } else if (column.isAllowRowGroup()) {
        _this.columnsToPivot.push(column);
      }
    });
  };

  BodyDropPivotTarget.prototype.getIconName = function () {
    var totalColumns = this.columnsToAggregate.length + this.columnsToGroup.length + this.columnsToPivot.length;

    if (totalColumns > 0) {
      return this.pinned ? dragAndDropService_1.DragAndDropService.ICON_PINNED : dragAndDropService_1.DragAndDropService.ICON_MOVE;
    } else {
      return null;
    }
  };
  /** Callback for when drag leaves */


  BodyDropPivotTarget.prototype.onDragLeave = function (draggingEvent) {
    // if we are taking columns out of the center, then we remove them from the report
    this.clearColumnsList();
  };

  BodyDropPivotTarget.prototype.clearColumnsList = function () {
    this.columnsToAggregate.length = 0;
    this.columnsToGroup.length = 0;
    this.columnsToPivot.length = 0;
  };
  /** Callback for when dragging */


  BodyDropPivotTarget.prototype.onDragging = function (draggingEvent) {};
  /** Callback for when drag stops */


  BodyDropPivotTarget.prototype.onDragStop = function (draggingEvent) {
    if (this.columnsToAggregate.length > 0) {
      this.columnController.addValueColumns(this.columnsToAggregate, "toolPanelDragAndDrop");
    }

    if (this.columnsToGroup.length > 0) {
      this.columnController.addRowGroupColumns(this.columnsToGroup, "toolPanelDragAndDrop");
    }

    if (this.columnsToPivot.length > 0) {
      this.columnController.addPivotColumns(this.columnsToPivot, "toolPanelDragAndDrop");
    }
  };

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], BodyDropPivotTarget.prototype, "columnController", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], BodyDropPivotTarget.prototype, "gridOptionsWrapper", void 0);

  return BodyDropPivotTarget;
}();

exports.BodyDropPivotTarget = BodyDropPivotTarget;

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var gridCell_1 = __webpack_require__(52);

var constants_1 = __webpack_require__(19);

var mouseEventService_1 = __webpack_require__(91);

var paginationProxy_1 = __webpack_require__(53);

var focusedCellController_1 = __webpack_require__(48);

var animationFrameService_1 = __webpack_require__(73);

var columnController_1 = __webpack_require__(17);

var gridOptionsWrapper_1 = __webpack_require__(7);

var utils_1 = __webpack_require__(6);

var NavigationService =
/** @class */
function () {
  function NavigationService() {
    this.timeLastPageEventProcessed = 0;
  }

  NavigationService.prototype.init = function () {
    this.scrollWidth = this.gridOptionsWrapper.getScrollbarWidth();
  };

  NavigationService.prototype.registerGridComp = function (gridPanel) {
    this.gridPanel = gridPanel;
  };

  NavigationService.prototype.handlePageScrollingKey = function (event) {
    var key = event.which || event.keyCode;
    var alt = event.altKey;
    var ctrl = event.ctrlKey;
    var currentCell = this.mouseEventService.getGridCellForEvent(event).getGridCellDef();

    if (!currentCell) {
      return false;
    }

    var processed = false;

    switch (key) {
      case constants_1.Constants.KEY_PAGE_HOME:
      case constants_1.Constants.KEY_PAGE_END:
        // handle home and end when ctrl & alt are NOT pressed
        if (!ctrl && !alt) {
          this.onHomeOrEndKey(key);
          processed = true;
        }

        break;

      case constants_1.Constants.KEY_LEFT:
      case constants_1.Constants.KEY_RIGHT:
        // handle left and right when ctrl is pressed only
        if (ctrl && !alt) {
          this.onCtrlLeftOrRight(key, currentCell);
          processed = true;
        }

        break;

      case constants_1.Constants.KEY_UP:
      case constants_1.Constants.KEY_DOWN:
        // handle up and down when ctrl is pressed only
        if (ctrl && !alt) {
          this.onCtrlUpOrDown(key, currentCell);
          processed = true;
        }

        break;

      case constants_1.Constants.KEY_PAGE_DOWN:
        // handle page up and page down when ctrl & alt are NOT pressed
        if (!ctrl && !alt) {
          this.onPageDown(currentCell);
          processed = true;
        }

        break;

      case constants_1.Constants.KEY_PAGE_UP:
        // handle page up and page down when ctrl & alt are NOT pressed
        if (!ctrl && !alt) {
          this.onPageUp(currentCell);
          processed = true;
        }

        break;
    }

    if (processed) {
      event.preventDefault();
    }

    return processed;
  }; // the page up/down keys caused a problem, in that if the user
  // held the page up/down key down, lots of events got generated,
  // which clogged up the event queue (as they take time to process)
  // which in turn froze the grid. Logic below makes sure we wait 100ms
  // between processing the page up/down events, so when user has finger
  // held down on key, we ignore page up/down events until 100ms has passed,
  // which effectively empties the queue of page up/down events.


  NavigationService.prototype.isTimeSinceLastPageEventToRecent = function () {
    var now = new Date().getTime();
    var diff = now - this.timeLastPageEventProcessed;
    return diff < 100;
  };

  NavigationService.prototype.setTimeLastPageEventProcessed = function () {
    this.timeLastPageEventProcessed = new Date().getTime();
  };

  NavigationService.prototype.onPageDown = function (gridCell) {
    if (this.isTimeSinceLastPageEventToRecent()) {
      return;
    }

    var scrollPosition = this.gridPanel.getVScrollPosition();
    var pixelsInOnePage = scrollPosition.bottom - scrollPosition.top;

    if (this.gridPanel.isHorizontalScrollShowing()) {
      pixelsInOnePage -= this.scrollWidth;
    }

    var pagingPixelOffset = this.paginationProxy.getPixelOffset();
    var currentPageBottomPixel = scrollPosition.top + pixelsInOnePage;
    var currentPageBottomRow = this.paginationProxy.getRowIndexAtPixel(currentPageBottomPixel + pagingPixelOffset);
    var scrollIndex = currentPageBottomRow;
    var currentCellPixel = this.paginationProxy.getRow(gridCell.rowIndex).rowTop;
    var nextCellPixel = currentCellPixel + pixelsInOnePage - pagingPixelOffset;
    var focusIndex = this.paginationProxy.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);
    var pageLastRow = this.paginationProxy.getPageLastRow();

    if (focusIndex > pageLastRow) {
      focusIndex = pageLastRow;
    }

    if (scrollIndex > pageLastRow) {
      scrollIndex = pageLastRow;
    }

    this.navigateTo(scrollIndex, 'top', null, focusIndex, gridCell.column);
    this.setTimeLastPageEventProcessed();
  };

  NavigationService.prototype.onPageUp = function (gridCell) {
    if (this.isTimeSinceLastPageEventToRecent()) {
      return;
    }

    var scrollPosition = this.gridPanel.getVScrollPosition();
    var pixelsInOnePage = scrollPosition.bottom - scrollPosition.top;

    if (this.gridPanel.isHorizontalScrollShowing()) {
      pixelsInOnePage -= this.scrollWidth;
    }

    var pagingPixelOffset = this.paginationProxy.getPixelOffset();
    var currentPageTopPixel = scrollPosition.top;
    var currentPageTopRow = this.paginationProxy.getRowIndexAtPixel(currentPageTopPixel + pagingPixelOffset);
    var scrollIndex = currentPageTopRow;
    var currentRowNode = this.paginationProxy.getRow(gridCell.rowIndex);
    var nextCellPixel = currentRowNode.rowTop + currentRowNode.rowHeight - pixelsInOnePage - pagingPixelOffset;
    var focusIndex = this.paginationProxy.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);
    var firstRow = this.paginationProxy.getPageFirstRow();

    if (focusIndex < firstRow) {
      focusIndex = firstRow;
    }

    if (scrollIndex < firstRow) {
      scrollIndex = firstRow;
    }

    this.navigateTo(scrollIndex, 'bottom', null, focusIndex, gridCell.column);
    this.setTimeLastPageEventProcessed();
  }; // common logic to navigate. takes parameters:
  // scrollIndex - what row to vertically scroll to
  // scrollType - what position to put scroll index ie top/bottom
  // scrollColumn - what column to horizontally scroll to
  // focusIndex / focusColumn - for page up / down, we want to scroll to one row/column, but focus another


  NavigationService.prototype.navigateTo = function (scrollIndex, scrollType, scrollColumn, focusIndex, focusColumn) {
    if (utils_1._.exists(scrollColumn)) {
      this.gridPanel.ensureColumnVisible(scrollColumn);
    }

    if (utils_1._.exists(scrollIndex)) {
      this.gridPanel.ensureIndexVisible(scrollIndex, scrollType);
    } // make sure the cell is rendered, needed if we are to focus


    this.animationFrameService.flushAllFrames(); // if we don't do this, the range will be left on the last cell, which will leave the last focused cell
    // highlighted.

    this.focusedCellController.setFocusedCell(focusIndex, focusColumn, null, true);

    if (this.rangeController) {
      var gridCell = new gridCell_1.GridCell({
        rowIndex: focusIndex,
        floating: null,
        column: focusColumn
      });
      this.rangeController.setRangeToCell(gridCell);
    }
  }; // ctrl + up/down will bring focus to same column, first/last row. no horizontal scrolling.


  NavigationService.prototype.onCtrlUpOrDown = function (key, gridCell) {
    var upKey = key === constants_1.Constants.KEY_UP;
    var rowIndexToScrollTo = upKey ? 0 : this.paginationProxy.getPageLastRow();
    this.navigateTo(rowIndexToScrollTo, null, gridCell.column, rowIndexToScrollTo, gridCell.column);
  }; // ctrl + left/right will bring focus to same row, first/last cell. no vertical scrolling.


  NavigationService.prototype.onCtrlLeftOrRight = function (key, gridCell) {
    var leftKey = key === constants_1.Constants.KEY_LEFT;
    var allColumns = this.columnController.getAllDisplayedColumns();
    var columnToSelect = leftKey ? allColumns[0] : allColumns[allColumns.length - 1];
    this.navigateTo(gridCell.rowIndex, null, columnToSelect, gridCell.rowIndex, columnToSelect);
  }; // home brings focus to top left cell, end brings focus to bottom right, grid scrolled to bring
  // same cell into view (which means either scroll all the way up, or all the way down).


  NavigationService.prototype.onHomeOrEndKey = function (key) {
    var homeKey = key === constants_1.Constants.KEY_PAGE_HOME;
    var allColumns = this.columnController.getAllDisplayedColumns();
    var columnToSelect = homeKey ? allColumns[0] : allColumns[allColumns.length - 1];
    var rowIndexToScrollTo = homeKey ? 0 : this.paginationProxy.getPageLastRow();
    this.navigateTo(rowIndexToScrollTo, null, columnToSelect, rowIndexToScrollTo, columnToSelect);
  };

  __decorate([context_1.Autowired('mouseEventService'), __metadata("design:type", mouseEventService_1.MouseEventService)], NavigationService.prototype, "mouseEventService", void 0);

  __decorate([context_1.Autowired('paginationProxy'), __metadata("design:type", paginationProxy_1.PaginationProxy)], NavigationService.prototype, "paginationProxy", void 0);

  __decorate([context_1.Autowired('focusedCellController'), __metadata("design:type", focusedCellController_1.FocusedCellController)], NavigationService.prototype, "focusedCellController", void 0);

  __decorate([context_1.Autowired('animationFrameService'), __metadata("design:type", animationFrameService_1.AnimationFrameService)], NavigationService.prototype, "animationFrameService", void 0);

  __decorate([context_1.Optional('rangeController'), __metadata("design:type", Object)], NavigationService.prototype, "rangeController", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], NavigationService.prototype, "columnController", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], NavigationService.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], NavigationService.prototype, "init", null);

  NavigationService = __decorate([context_1.Bean('navigationService')], NavigationService);
  return NavigationService;
}();

exports.NavigationService = NavigationService;

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var gridOptionsWrapper_1 = __webpack_require__(7);

var context_1 = __webpack_require__(2);

var component_1 = __webpack_require__(22);

var userComponentFactory_1 = __webpack_require__(35);

var componentAnnotations_1 = __webpack_require__(25);

var utils_1 = __webpack_require__(6);

var LoadingType;

(function (LoadingType) {
  LoadingType[LoadingType["Loading"] = 0] = "Loading";
  LoadingType[LoadingType["NoRows"] = 1] = "NoRows";
})(LoadingType || (LoadingType = {}));

var OverlayWrapperComponent =
/** @class */
function (_super) {
  __extends(OverlayWrapperComponent, _super);

  function OverlayWrapperComponent() {
    return _super.call(this, OverlayWrapperComponent.TEMPLATE) || this;
  }

  OverlayWrapperComponent.prototype.postConstruct = function () {
    this.gridOptionsWrapper.addLayoutElement(this.eOverlayWrapper);
    this.setVisible(false);
  };

  OverlayWrapperComponent.prototype.setWrapperTypeClass = function (loadingType) {
    utils_1._.addOrRemoveCssClass(this.eOverlayWrapper, 'ag-overlay-loading-wrapper', loadingType === LoadingType.Loading);

    utils_1._.addOrRemoveCssClass(this.eOverlayWrapper, 'ag-overlay-no-rows-wrapper', loadingType === LoadingType.NoRows);
  };

  OverlayWrapperComponent.prototype.showLoadingOverlay = function () {
    var _this = this;

    this.setWrapperTypeClass(LoadingType.Loading);
    this.destroyActiveOverlay();
    var params = {
      api: this.gridOptionsWrapper.getApi()
    };
    this.userComponentFactory.newLoadingOverlayComponent(params).then(function (comp) {
      _this.eOverlayWrapper.appendChild(comp.getGui());

      _this.activeOverlay = comp;
    });
    this.setVisible(true);
  };

  OverlayWrapperComponent.prototype.showNoRowsOverlay = function () {
    var _this = this;

    this.setWrapperTypeClass(LoadingType.NoRows);
    this.destroyActiveOverlay();
    var params = {
      api: this.gridOptionsWrapper.getApi()
    };
    this.userComponentFactory.newNoRowsOverlayComponent(params).then(function (comp) {
      _this.eOverlayWrapper.appendChild(comp.getGui());

      _this.activeOverlay = comp;
    });
    this.setVisible(true);
  };

  OverlayWrapperComponent.prototype.destroyActiveOverlay = function () {
    if (!this.activeOverlay) {
      return;
    }

    if (this.activeOverlay.destroy) {
      this.activeOverlay.destroy();
    }

    this.activeOverlay = undefined;

    utils_1._.clearElement(this.eOverlayWrapper);
  };

  OverlayWrapperComponent.prototype.hideOverlay = function () {
    this.destroyActiveOverlay();
    this.setVisible(false);
  };

  OverlayWrapperComponent.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this.destroyActiveOverlay();
  }; // wrapping in outer div, and wrapper, is needed to center the loading icon
  // The idea for centering came from here: http://www.vanseodesign.com/css/vertical-centering/


  OverlayWrapperComponent.TEMPLATE = "<div class=\"ag-overlay\">\n            <div class=\"ag-overlay-panel\" role=\"presentation\">\n                <div class=\"ag-overlay-wrapper\" ref=\"eOverlayWrapper\"></div>\n            </div>\n        </div>";

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], OverlayWrapperComponent.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('userComponentFactory'), __metadata("design:type", userComponentFactory_1.UserComponentFactory)], OverlayWrapperComponent.prototype, "userComponentFactory", void 0);

  __decorate([componentAnnotations_1.RefSelector('eOverlayWrapper'), __metadata("design:type", HTMLElement)], OverlayWrapperComponent.prototype, "eOverlayWrapper", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], OverlayWrapperComponent.prototype, "postConstruct", null);

  return OverlayWrapperComponent;
}(component_1.Component);

exports.OverlayWrapperComponent = OverlayWrapperComponent;

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var gridOptionsWrapper_1 = __webpack_require__(7);

var columnApi_1 = __webpack_require__(21);

var columnController_1 = __webpack_require__(17);

var rowRenderer_1 = __webpack_require__(37);

var filterManager_1 = __webpack_require__(40);

var eventService_1 = __webpack_require__(14);

var gridPanel_1 = __webpack_require__(162);

var logger_1 = __webpack_require__(30);

var popupService_1 = __webpack_require__(54);

var context_1 = __webpack_require__(2);

var focusedCellController_1 = __webpack_require__(48);

var component_1 = __webpack_require__(22);

var gridApi_1 = __webpack_require__(20);

var componentAnnotations_1 = __webpack_require__(25);

var events_1 = __webpack_require__(18);

var resizeObserverService_1 = __webpack_require__(163);

var sideBar_1 = __webpack_require__(203);

var utils_1 = __webpack_require__(6);

var GridCore =
/** @class */
function (_super) {
  __extends(GridCore, _super);

  function GridCore() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  GridCore.prototype.init = function () {
    var _this = this;

    this.logger = this.loggerFactory.create('GridCore');
    var template = this.enterprise ? GridCore.TEMPLATE_ENTERPRISE : GridCore.TEMPLATE_NORMAL;
    this.setTemplate(template); // register with services that need grid core

    [this.gridApi, this.filterManager, this.rowRenderer, this.popupService].forEach(function (service) {
      return service.registerGridCore(_this);
    });

    if (this.enterprise) {
      this.clipboardService.registerGridCore(this);
    }

    this.gridOptionsWrapper.addLayoutElement(this.getGui()); // see what the grid options are for default of toolbar

    this.setSideBarVisible(this.gridOptionsWrapper.isShowToolPanel());
    this.eGridDiv.appendChild(this.getGui());
    this.addDestroyFunc(function () {
      _this.eGridDiv.removeChild(_this.getGui());
    }); // if using angular, watch for quickFilter changes

    if (this.$scope) {
      var quickFilterUnregisterFn = this.$scope.$watch(this.quickFilterOnScope, function (newFilter) {
        return _this.filterManager.setQuickFilter(newFilter);
      });
      this.addDestroyFunc(quickFilterUnregisterFn);
    } // important to set rtl before doLayout, as setting the RTL class impacts the scroll position,
    // which doLayout indirectly depends on


    this.addRtlSupport();
    this.logger.log('ready');
    this.gridOptionsWrapper.addLayoutElement(this.eRootWrapperBody);
    var gridPanelEl = this.gridPanel.getGui();
    this.addDestroyableEventListener(gridPanelEl, 'focusin', function () {
      utils_1._.addCssClass(gridPanelEl, 'ag-has-focus');
    });
    this.addDestroyableEventListener(gridPanelEl, 'focusout', function (e) {
      if (!gridPanelEl.contains(e.relatedTarget)) {
        utils_1._.removeCssClass(gridPanelEl, 'ag-has-focus');
      }
    });
    var unsubscribeFromResize = this.resizeObserverService.observeResize(this.eGridDiv, this.onGridSizeChanged.bind(this));
    this.addDestroyFunc(function () {
      return unsubscribeFromResize();
    });
  };

  GridCore.prototype.onGridSizeChanged = function () {
    var event = {
      type: events_1.Events.EVENT_GRID_SIZE_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi,
      clientWidth: this.eGridDiv.clientWidth,
      clientHeight: this.eGridDiv.clientHeight
    };
    this.eventService.dispatchEvent(event);
  };

  GridCore.prototype.addRtlSupport = function () {
    var cssClass = this.gridOptionsWrapper.isEnableRtl() ? 'ag-rtl' : 'ag-ltr';

    utils_1._.addCssClass(this.getGui(), cssClass);
  };

  GridCore.prototype.getRootGui = function () {
    return this.getGui();
  };

  GridCore.prototype.isSideBarVisible = function () {
    if (!this.sideBarComp) {
      return false;
    }

    return this.sideBarComp.isVisible();
  };

  GridCore.prototype.setSideBarVisible = function (show) {
    if (!this.sideBarComp) {
      if (show) {
        console.warn('ag-Grid: toolPanel is only available in ag-Grid Enterprise');
      }

      return;
    }

    this.sideBarComp.setVisible(show);
  };

  GridCore.prototype.closeToolPanel = function () {
    if (!this.sideBarComp) {
      console.warn('ag-Grid: toolPanel is only available in ag-Grid Enterprise');
      return;
    }

    this.sideBarComp.close();
  };

  GridCore.prototype.getSideBar = function () {
    return this.gridOptions.sideBar;
  };

  GridCore.prototype.refreshSideBar = function () {
    if (this.sideBarComp) {
      this.sideBarComp.refresh();
    }
  };

  GridCore.prototype.setSideBar = function (def) {
    this.eRootWrapperBody.removeChild(this.sideBarComp.getGui());
    this.gridOptions.sideBar = sideBar_1.SideBarDefParser.parse(def);
    this.sideBarComp.reset();
    this.eRootWrapperBody.appendChild(this.sideBarComp.getGui());
  };

  GridCore.prototype.getOpenedToolPanel = function () {
    if (!this.sideBarComp) {
      return null;
    }

    return this.sideBarComp.openedItem();
  };

  GridCore.prototype.openToolPanel = function (key) {
    if (!this.sideBarComp) {
      console.warn('ag-Grid: toolPanel is only available in ag-Grid Enterprise');
      return;
    }

    this.sideBarComp.openToolPanel(key);
  };

  GridCore.prototype.isToolPanelShowing = function () {
    return this.sideBarComp.isToolPanelShowing();
  };

  GridCore.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this.logger.log('Grid DOM removed');
  }; // Valid values for position are bottom, middle and top


  GridCore.prototype.ensureNodeVisible = function (comparator, position) {
    if (position === void 0) {
      position = 'top';
    }

    if (this.doingVirtualPaging) {
      throw new Error('Cannot use ensureNodeVisible when doing virtual paging, as we cannot check rows that are not in memory');
    } // look for the node index we want to display


    var rowCount = this.rowModel.getPageLastRow() + 1;
    var comparatorIsAFunction = typeof comparator === 'function';
    var indexToSelect = -1; // go through all the nodes, find the one we want to show

    for (var i = 0; i < rowCount; i++) {
      var node = this.rowModel.getRow(i);

      if (comparatorIsAFunction) {
        if (comparator(node)) {
          indexToSelect = i;
          break;
        }
      } else {
        // check object equality against node and data
        if (comparator === node || comparator === node.data) {
          indexToSelect = i;
          break;
        }
      }
    }

    if (indexToSelect >= 0) {
      this.gridPanel.ensureIndexVisible(indexToSelect, position);
    }
  };

  GridCore.TEMPLATE_NORMAL = "<div class=\"ag-root-wrapper\">\n            <div class=\"ag-root-wrapper-body\" ref=\"rootWrapperBody\">\n                <ag-grid-comp ref=\"gridPanel\"></ag-grid-comp>\n            </div>\n            <ag-pagination></ag-pagination>\n        </div>";
  GridCore.TEMPLATE_ENTERPRISE = "<div class=\"ag-root-wrapper\">\n            <ag-grid-header-drop-zones></ag-grid-header-drop-zones>\n            <div ref=\"rootWrapperBody\" class=\"ag-root-wrapper-body\">\n                <ag-grid-comp ref=\"gridPanel\"></ag-grid-comp>\n                <ag-side-bar ref=\"sideBar\"></ag-side-bar>\n            </div>\n            <ag-status-bar ref=\"statusBar\"></ag-status-bar>\n            <ag-pagination></ag-pagination>\n            <ag-watermark></ag-watermark>\n        </div>";

  __decorate([context_1.Autowired('enterprise'), __metadata("design:type", Boolean)], GridCore.prototype, "enterprise", void 0);

  __decorate([context_1.Autowired('gridOptions'), __metadata("design:type", Object)], GridCore.prototype, "gridOptions", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], GridCore.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('rowModel'), __metadata("design:type", Object)], GridCore.prototype, "rowModel", void 0);

  __decorate([context_1.Autowired('frameworkFactory'), __metadata("design:type", Object)], GridCore.prototype, "frameworkFactory", void 0);

  __decorate([context_1.Autowired('resizeObserverService'), __metadata("design:type", resizeObserverService_1.ResizeObserverService)], GridCore.prototype, "resizeObserverService", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], GridCore.prototype, "columnController", void 0);

  __decorate([context_1.Autowired('rowRenderer'), __metadata("design:type", rowRenderer_1.RowRenderer)], GridCore.prototype, "rowRenderer", void 0);

  __decorate([context_1.Autowired('filterManager'), __metadata("design:type", filterManager_1.FilterManager)], GridCore.prototype, "filterManager", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], GridCore.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('eGridDiv'), __metadata("design:type", HTMLElement)], GridCore.prototype, "eGridDiv", void 0);

  __decorate([context_1.Autowired('$scope'), __metadata("design:type", Object)], GridCore.prototype, "$scope", void 0);

  __decorate([context_1.Autowired('quickFilterOnScope'), __metadata("design:type", String)], GridCore.prototype, "quickFilterOnScope", void 0);

  __decorate([context_1.Autowired('popupService'), __metadata("design:type", popupService_1.PopupService)], GridCore.prototype, "popupService", void 0);

  __decorate([context_1.Autowired('focusedCellController'), __metadata("design:type", focusedCellController_1.FocusedCellController)], GridCore.prototype, "focusedCellController", void 0);

  __decorate([context_1.Autowired('loggerFactory'), __metadata("design:type", logger_1.LoggerFactory)], GridCore.prototype, "loggerFactory", void 0);

  __decorate([context_1.Autowired('columnApi'), __metadata("design:type", columnApi_1.ColumnApi)], GridCore.prototype, "columnApi", void 0);

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], GridCore.prototype, "gridApi", void 0);

  __decorate([context_1.Optional('clipboardService'), __metadata("design:type", Object)], GridCore.prototype, "clipboardService", void 0);

  __decorate([componentAnnotations_1.RefSelector('gridPanel'), __metadata("design:type", gridPanel_1.GridPanel)], GridCore.prototype, "gridPanel", void 0);

  __decorate([componentAnnotations_1.RefSelector('sideBar'), __metadata("design:type", Object)], GridCore.prototype, "sideBarComp", void 0);

  __decorate([componentAnnotations_1.RefSelector('rootWrapperBody'), __metadata("design:type", HTMLElement)], GridCore.prototype, "eRootWrapperBody", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], GridCore.prototype, "init", null);

  return GridCore;
}(component_1.Component);

exports.GridCore = GridCore;

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var filterManager_1 = __webpack_require__(40);

var popupService_1 = __webpack_require__(54);

var gridOptionsWrapper_1 = __webpack_require__(7);

var eventService_1 = __webpack_require__(14);

var utils_1 = __webpack_require__(6);

var StandardMenuFactory =
/** @class */
function () {
  function StandardMenuFactory() {}

  StandardMenuFactory.prototype.hideActiveMenu = function () {
    if (this.hidePopup) {
      this.hidePopup();
    }
  };

  StandardMenuFactory.prototype.showMenuAfterMouseEvent = function (column, mouseEvent) {
    var _this = this;

    this.showPopup(column, function (eMenu) {
      _this.popupService.positionPopupUnderMouseEvent({
        column: column,
        type: 'columnMenu',
        mouseEvent: mouseEvent,
        ePopup: eMenu
      });
    });
  };

  StandardMenuFactory.prototype.showMenuAfterButtonClick = function (column, eventSource) {
    var _this = this;

    this.showPopup(column, function (eMenu) {
      _this.popupService.positionPopupUnderComponent({
        type: 'columnMenu',
        eventSource: eventSource,
        ePopup: eMenu,
        keepWithinBounds: true,
        column: column
      });
    });
  };

  StandardMenuFactory.prototype.showPopup = function (column, positionCallback) {
    var _this = this;

    var filterWrapper = this.filterManager.getOrCreateFilterWrapper(column, 'COLUMN_MENU');
    var eMenu = document.createElement('div');

    utils_1._.addCssClass(eMenu, 'ag-menu');

    filterWrapper.guiPromise.promise.then(function (gui) {
      eMenu.appendChild(gui);
    });
    var hidePopup;

    var bodyScrollListener = function bodyScrollListener(event) {
      // if h scroll, popup is no longer over the column
      if (event.direction === 'horizontal') {
        hidePopup();
      }
    };

    this.eventService.addEventListener('bodyScroll', bodyScrollListener);

    var closedCallback = function closedCallback() {
      _this.eventService.removeEventListener('bodyScroll', bodyScrollListener);

      column.setMenuVisible(false, "contextMenu");
    }; // need to show filter before positioning, as only after filter
    // is visible can we find out what the width of it is


    hidePopup = this.popupService.addAsModalPopup(eMenu, true, closedCallback);
    positionCallback(eMenu);
    filterWrapper.filterPromise.then(function (filter) {
      if (filter.afterGuiAttached) {
        var params = {
          hidePopup: hidePopup
        };
        filter.afterGuiAttached(params);
      }
    });
    this.hidePopup = hidePopup;
    column.setMenuVisible(true, "contextMenu");
  };

  StandardMenuFactory.prototype.isMenuEnabled = function (column) {
    // for standard, we show menu if filter is enabled, and he menu is not suppressed
    return column.isFilterAllowed();
  };

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], StandardMenuFactory.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('filterManager'), __metadata("design:type", filterManager_1.FilterManager)], StandardMenuFactory.prototype, "filterManager", void 0);

  __decorate([context_1.Autowired('popupService'), __metadata("design:type", popupService_1.PopupService)], StandardMenuFactory.prototype, "popupService", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], StandardMenuFactory.prototype, "gridOptionsWrapper", void 0);

  StandardMenuFactory = __decorate([context_1.Bean('menuFactory')], StandardMenuFactory);
  return StandardMenuFactory;
}();

exports.StandardMenuFactory = StandardMenuFactory;

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var filterService_1 = __webpack_require__(215);

var selectableService_1 = __webpack_require__(164);

var FilterStage =
/** @class */
function () {
  function FilterStage() {}

  FilterStage.prototype.execute = function (params) {
    var rowNode = params.rowNode,
        changedPath = params.changedPath;
    this.filterService.filter(changedPath);
    this.selectableService.updateSelectableAfterFiltering(rowNode);
  };

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], FilterStage.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('selectableService'), __metadata("design:type", selectableService_1.SelectableService)], FilterStage.prototype, "selectableService", void 0);

  __decorate([context_1.Autowired('filterService'), __metadata("design:type", filterService_1.FilterService)], FilterStage.prototype, "filterService", void 0);

  FilterStage = __decorate([context_1.Bean('filterStage')], FilterStage);
  return FilterStage;
}();

exports.FilterStage = FilterStage;

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var filterManager_1 = __webpack_require__(40);

var gridOptionsWrapper_1 = __webpack_require__(7);

var FilterService =
/** @class */
function () {
  function FilterService() {}

  FilterService.prototype.postConstruct = function () {
    this.doingTreeData = this.gridOptionsWrapper.isTreeData();
  };

  FilterService.prototype.filter = function (changedPath) {
    var filterActive = this.filterManager.isAnyFilterPresent();
    this.filterNodes(filterActive, changedPath);
  };

  FilterService.prototype.filterNodes = function (filterActive, changedPath) {
    var _this = this;

    var filterCallback = function filterCallback(rowNode, includeChildNodes) {
      // recursively get all children that are groups to also filter
      if (rowNode.hasChildren()) {
        // result of filter for this node. when filtering tree data, includeChildNodes = true when parent passes
        if (filterActive && !includeChildNodes) {
          rowNode.childrenAfterFilter = rowNode.childrenAfterGroup.filter(function (childNode) {
            // a group is included in the result if it has any children of it's own.
            // by this stage, the child groups are already filtered
            var passBecauseChildren = childNode.childrenAfterFilter && childNode.childrenAfterFilter.length > 0; // both leaf level nodes and tree data nodes have data. these get added if
            // the data passes the filter

            var passBecauseDataPasses = childNode.data && _this.filterManager.doesRowPassFilter(childNode); // note - tree data nodes pass either if a) they pass themselves or b) any children of that node pass


            return passBecauseChildren || passBecauseDataPasses;
          });
        } else {
          // if not filtering, the result is the original list
          rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;
        }

        _this.setAllChildrenCount(rowNode);
      } else {
        rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;
        rowNode.setAllChildrenCount(null);
      }
    };

    if (this.doingTreeDataFiltering()) {
      var treeDataDepthFirstFilter_1 = function treeDataDepthFirstFilter_1(rowNode, alreadyFoundInParent) {
        // tree data filter traverses the hierarchy depth first and includes child nodes if parent passes
        // filter, and parent nodes will be include if any children exist.
        if (rowNode.childrenAfterGroup) {
          for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {
            var childNode = rowNode.childrenAfterGroup[i]; // first check if current node passes filter before invoking child nodes

            var foundInParent = alreadyFoundInParent || _this.filterManager.doesRowPassFilter(childNode);

            if (childNode.childrenAfterGroup) {
              treeDataDepthFirstFilter_1(rowNode.childrenAfterGroup[i], foundInParent);
            } else {
              filterCallback(childNode, foundInParent);
            }
          }
        }

        filterCallback(rowNode, alreadyFoundInParent);
      };

      var treeDataFilterCallback = function treeDataFilterCallback(rowNode) {
        return treeDataDepthFirstFilter_1(rowNode, false);
      };

      changedPath.executeFromRootNode(treeDataFilterCallback);
    } else {
      var defaultFilterCallback = function defaultFilterCallback(rowNode) {
        return filterCallback(rowNode, false);
      };

      changedPath.forEachChangedNodeDepthFirst(defaultFilterCallback, true);
    }
  };

  FilterService.prototype.setAllChildrenCountTreeData = function (rowNode) {
    // for tree data, we include all children, groups and leafs
    var allChildrenCount = 0;
    rowNode.childrenAfterFilter.forEach(function (child) {
      // include child itself
      allChildrenCount++; // include children of children

      allChildrenCount += child.allChildrenCount;
    });
    rowNode.setAllChildrenCount(allChildrenCount);
  };

  FilterService.prototype.setAllChildrenCountGridGrouping = function (rowNode) {
    // for grid data, we only count the leafs
    var allChildrenCount = 0;
    rowNode.childrenAfterFilter.forEach(function (child) {
      if (child.group) {
        allChildrenCount += child.allChildrenCount;
      } else {
        allChildrenCount++;
      }
    });
    rowNode.setAllChildrenCount(allChildrenCount);
  };

  FilterService.prototype.setAllChildrenCount = function (rowNode) {
    if (this.doingTreeData) {
      this.setAllChildrenCountTreeData(rowNode);
    } else {
      this.setAllChildrenCountGridGrouping(rowNode);
    }
  };

  FilterService.prototype.doingTreeDataFiltering = function () {
    return this.gridOptionsWrapper.isTreeData() && !this.gridOptionsWrapper.isExcludeChildrenWhenTreeDataFiltering();
  };

  __decorate([context_1.Autowired('filterManager'), __metadata("design:type", filterManager_1.FilterManager)], FilterService.prototype, "filterManager", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], FilterService.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], FilterService.prototype, "postConstruct", null);

  FilterService = __decorate([context_1.Bean("filterService")], FilterService);
  return FilterService;
}();

exports.FilterService = FilterService;

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var sortService_1 = __webpack_require__(217);

var sortController_1 = __webpack_require__(49);

var columnController_1 = __webpack_require__(17);

var utils_1 = __webpack_require__(6);

var SortStage =
/** @class */
function () {
  function SortStage() {}

  SortStage.prototype.execute = function (params) {
    var sortOptions = this.sortController.getSortForRowController();
    var sortActive = utils_1._.exists(sortOptions) && sortOptions.length > 0;
    var deltaSort = sortActive && utils_1._.exists(params.rowNodeTransactions) // in time we can remove this check, so that delta sort is always
    // on if transactions are present. it's off for now so that we can
    // selectively turn it on and test it with some select users before
    // rolling out to everyone.
    && this.gridOptionsWrapper.isDeltaSort(); // we only need dirty nodes if doing delta sort

    var dirtyLeafNodes = deltaSort ? this.calculateDirtyNodes(params.rowNodeTransactions) : null;
    var valueColumns = this.columnController.getValueColumns();

    var noAggregations = utils_1._.missingOrEmpty(valueColumns);

    this.sortService.sort(sortOptions, sortActive, deltaSort, dirtyLeafNodes, params.changedPath, noAggregations);
  };

  SortStage.prototype.calculateDirtyNodes = function (rowNodeTransactions) {
    var dirtyNodes = {};

    var addNodesFunc = function addNodesFunc(rowNodes) {
      if (rowNodes) {
        rowNodes.forEach(function (rowNode) {
          return dirtyNodes[rowNode.id] = true;
        });
      }
    }; // all leaf level nodes in the transaction were impacted


    rowNodeTransactions.forEach(function (tran) {
      addNodesFunc(tran.add);
      addNodesFunc(tran.update);
      addNodesFunc(tran.remove);
    });
    return dirtyNodes;
  };

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], SortStage.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('sortService'), __metadata("design:type", sortService_1.SortService)], SortStage.prototype, "sortService", void 0);

  __decorate([context_1.Autowired('sortController'), __metadata("design:type", sortController_1.SortController)], SortStage.prototype, "sortController", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], SortStage.prototype, "columnController", void 0);

  SortStage = __decorate([context_1.Bean('sortStage')], SortStage);
  return SortStage;
}();

exports.SortStage = SortStage;

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var sortController_1 = __webpack_require__(49);

var valueService_1 = __webpack_require__(38);

var gridOptionsWrapper_1 = __webpack_require__(7);

var columnController_1 = __webpack_require__(17);

var utils_1 = __webpack_require__(6);

var SortService =
/** @class */
function () {
  function SortService() {}

  SortService.prototype.init = function () {
    this.postSortFunc = this.gridOptionsWrapper.getPostSortFunc();
  };

  SortService.prototype.sort = function (sortOptions, sortActive, deltaSort, dirtyLeafNodes, changedPath, noAggregations) {
    var _this = this;

    var callback = function callback(rowNode) {
      // we clear out the 'pull down open parents' first, as the values mix up the sorting
      _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterFilter, true); // Javascript sort is non deterministic when all the array items are equals, ie Comparator always returns 0,
      // so to ensure the array keeps its order, add an additional sorting condition manually, in this case we
      // are going to inspect the original array position. This is what sortedRowNodes is for.


      if (sortActive) {
        var sortedRowNodes = deltaSort ? _this.doDeltaSort(rowNode, sortOptions, dirtyLeafNodes, changedPath, noAggregations) : _this.doFullSort(rowNode, sortOptions);
        rowNode.childrenAfterSort = sortedRowNodes.map(function (sorted) {
          return sorted.rowNode;
        });
      } else {
        rowNode.childrenAfterSort = rowNode.childrenAfterFilter.slice(0);
      }

      _this.updateChildIndexes(rowNode);

      if (_this.postSortFunc) {
        _this.postSortFunc(rowNode.childrenAfterSort);
      }
    };

    changedPath.forEachChangedNodeDepthFirst(callback);
    this.updateGroupDataForHiddenOpenParents(changedPath);
  };

  SortService.prototype.doFullSort = function (rowNode, sortOptions) {
    var sortedRowNodes = rowNode.childrenAfterFilter.map(this.mapNodeToSortedNode.bind(this));
    sortedRowNodes.sort(this.compareRowNodes.bind(this, sortOptions));
    return sortedRowNodes;
  };

  SortService.prototype.mapNodeToSortedNode = function (rowNode, pos) {
    return {
      currentPos: pos,
      rowNode: rowNode
    };
  };

  SortService.prototype.doDeltaSort = function (rowNode, sortOptions, dirtyLeafNodes, changedPath, noAggregations) {
    // clean nodes will be a list of all row nodes that remain in the set
    // and ordered. we start with the old sorted set and take out any nodes
    // that were removed or changed (but not added, added doesn't make sense,
    // if a node was added, there is no way it could be here from last time).
    var cleanNodes = rowNode.childrenAfterSort.filter(function (rowNode) {
      // take out all nodes that were changed as part of the current transaction.
      // a changed node could a) be in a different sort position or b) may
      // no longer be in this set as the changed node may not pass filtering,
      // or be in a different group.
      var passesDirtyNodesCheck = !dirtyLeafNodes[rowNode.id]; // also remove group nodes in the changed path, as they can have different aggregate
      // values which could impact the sort order.
      // note: changed path is not active if a) no value columns or b) no transactions. it is never
      // (b) in deltaSort as we only do deltaSort for transactions. for (a) if no value columns, then
      // there is no value in the group that could of changed (ie no aggregate values)

      var passesChangedPathCheck = noAggregations || changedPath.canSkip(rowNode);
      return passesDirtyNodesCheck && passesChangedPathCheck;
    }).map(this.mapNodeToSortedNode.bind(this)); // for fast access below, we map them

    var cleanNodesMapped = {};
    cleanNodes.forEach(function (sortedRowNode) {
      return cleanNodesMapped[sortedRowNode.rowNode.id] = sortedRowNode.rowNode;
    }); // these are all nodes that need to be placed

    var changedNodes = rowNode.childrenAfterFilter // ignore nodes in the clean list
    .filter(function (rowNode) {
      return !cleanNodesMapped[rowNode.id];
    }).map(this.mapNodeToSortedNode.bind(this)); // sort changed nodes. note that we don't need to sort cleanNodes as they are
    // already sorted from last time.

    changedNodes.sort(this.compareRowNodes.bind(this, sortOptions));

    if (changedNodes.length === 0) {
      return cleanNodes;
    } else if (cleanNodes.length === 0) {
      return changedNodes;
    } else {
      return this.mergeSortedArrays(sortOptions, cleanNodes, changedNodes);
    }
  }; // Merge two sorted arrays into each other


  SortService.prototype.mergeSortedArrays = function (sortOptions, arr1, arr2) {
    var res = [];
    var i = 0;
    var j = 0; // Traverse both array, adding them in order

    while (i < arr1.length && j < arr2.length) {
      // Check if current element of first
      // array is smaller than current element
      // of second array. If yes, store first
      // array element and increment first array
      // index. Otherwise do same with second array
      var compareResult = this.compareRowNodes(sortOptions, arr1[i], arr2[j]);

      if (compareResult < 0) {
        res.push(arr1[i++]);
      } else {
        res.push(arr2[j++]);
      }
    } // add remaining from arr1


    while (i < arr1.length) {
      res.push(arr1[i++]);
    } // add remaining from arr2


    while (j < arr2.length) {
      res.push(arr2[j++]);
    }

    return res;
  };

  SortService.prototype.compareRowNodes = function (sortOptions, sortedNodeA, sortedNodeB) {
    var nodeA = sortedNodeA.rowNode;
    var nodeB = sortedNodeB.rowNode; // Iterate columns, return the first that doesn't match

    for (var i = 0, len = sortOptions.length; i < len; i++) {
      var sortOption = sortOptions[i]; // let compared = compare(nodeA, nodeB, sortOption.column, sortOption.inverter === -1);

      var isInverted = sortOption.inverter === -1;
      var valueA = this.getValue(nodeA, sortOption.column);
      var valueB = this.getValue(nodeB, sortOption.column);
      var comparatorResult = void 0;

      if (sortOption.column.getColDef().comparator) {
        //if comparator provided, use it
        comparatorResult = sortOption.column.getColDef().comparator(valueA, valueB, nodeA, nodeB, isInverted);
      } else {
        //otherwise do our own comparison
        comparatorResult = utils_1._.defaultComparator(valueA, valueB, this.gridOptionsWrapper.isAccentedSort());
      }

      if (comparatorResult !== 0) {
        return comparatorResult * sortOption.inverter;
      }
    } // All matched, we make is so that the original sort order is kept:


    return sortedNodeA.currentPos - sortedNodeB.currentPos;
  };

  SortService.prototype.getValue = function (nodeA, column) {
    return this.valueService.getValue(column, nodeA);
  };

  SortService.prototype.updateChildIndexes = function (rowNode) {
    if (utils_1._.missing(rowNode.childrenAfterSort)) {
      return;
    }

    var listToSort = rowNode.childrenAfterSort;

    for (var i = 0; i < listToSort.length; i++) {
      var child = listToSort[i];
      var firstChild = i === 0;
      var lastChild = i === rowNode.childrenAfterSort.length - 1;
      child.setFirstChild(firstChild);
      child.setLastChild(lastChild);
      child.setChildIndex(i);
    }
  };

  SortService.prototype.updateGroupDataForHiddenOpenParents = function (changedPath) {
    var _this = this;

    if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {
      return;
    } // recurse breadth first over group nodes after sort to 'pull down' group data to child groups


    var callback = function callback(rowNode) {
      _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterSort, false);

      rowNode.childrenAfterSort.forEach(function (child) {
        if (child.hasChildren()) {
          callback(child);
        }
      });
    };

    changedPath.executeFromRootNode(function (rowNode) {
      return callback(rowNode);
    });
  };

  SortService.prototype.pullDownGroupDataForHideOpenParents = function (rowNodes, clearOperation) {
    var _this = this;

    if (utils_1._.missing(rowNodes)) {
      return;
    }

    if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {
      return;
    }

    rowNodes.forEach(function (childRowNode) {
      var groupDisplayCols = _this.columnController.getGroupDisplayColumns();

      groupDisplayCols.forEach(function (groupDisplayCol) {
        var showRowGroup = groupDisplayCol.getColDef().showRowGroup;

        if (typeof showRowGroup !== 'string') {
          console.error('ag-Grid: groupHideOpenParents only works when specifying specific columns for colDef.showRowGroup');
          return;
        }

        var displayingGroupKey = showRowGroup;

        var rowGroupColumn = _this.columnController.getPrimaryColumn(displayingGroupKey);

        var thisRowNodeMatches = rowGroupColumn === childRowNode.rowGroupColumn;

        if (thisRowNodeMatches) {
          return;
        }

        if (clearOperation) {
          // if doing a clear operation, we clear down the value for every possible group column
          childRowNode.setGroupValue(groupDisplayCol.getId(), null);
        } else {
          // if doing a set operation, we set only where the pull down is to occur
          var parentToStealFrom = childRowNode.getFirstChildOfFirstChild(rowGroupColumn);

          if (parentToStealFrom) {
            childRowNode.setGroupValue(groupDisplayCol.getId(), parentToStealFrom.key);
          }
        }
      });
    });
  };

  __decorate([context_1.Autowired('sortController'), __metadata("design:type", sortController_1.SortController)], SortService.prototype, "sortController", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], SortService.prototype, "columnController", void 0);

  __decorate([context_1.Autowired('valueService'), __metadata("design:type", valueService_1.ValueService)], SortService.prototype, "valueService", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], SortService.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], SortService.prototype, "init", null);

  SortService = __decorate([context_1.Bean('sortService')], SortService);
  return SortService;
}();

exports.SortService = SortService;

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var rowNode_1 = __webpack_require__(39);

var gridOptionsWrapper_1 = __webpack_require__(7);

var selectionController_1 = __webpack_require__(44);

var eventService_1 = __webpack_require__(14);

var columnController_1 = __webpack_require__(17);

var utils_1 = __webpack_require__(6);

var FlattenStage =
/** @class */
function () {
  function FlattenStage() {}

  FlattenStage.prototype.execute = function (params) {
    var rootNode = params.rowNode; // even if not doing grouping, we do the mapping, as the client might
    // of passed in data that already has a grouping in it somewhere

    var result = []; // putting value into a wrapper so it's passed by reference

    var nextRowTop = {
      value: 0
    };
    var skipLeafNodes = this.columnController.isPivotMode(); // if we are reducing, and not grouping, then we want to show the root node, as that
    // is where the pivot values are

    var showRootNode = skipLeafNodes && rootNode.leafGroup;
    var topList = showRootNode ? [rootNode] : rootNode.childrenAfterSort;
    this.recursivelyAddToRowsToDisplay(topList, result, nextRowTop, skipLeafNodes, 0); // don't show total footer when showRootNode is true (i.e. in pivot mode and no groups)

    var includeGroupTotalFooter = !showRootNode && this.gridOptionsWrapper.isGroupIncludeTotalFooter();

    if (includeGroupTotalFooter) {
      this.ensureFooterNodeExists(rootNode);
      this.addRowNodeToRowsToDisplay(rootNode.sibling, result, nextRowTop, 0);
    }

    return result;
  };

  FlattenStage.prototype.recursivelyAddToRowsToDisplay = function (rowsToFlatten, result, nextRowTop, skipLeafNodes, uiLevel) {
    if (utils_1._.missingOrEmpty(rowsToFlatten)) {
      return;
    }

    var groupSuppressRow = this.gridOptionsWrapper.isGroupSuppressRow();
    var hideOpenParents = this.gridOptionsWrapper.isGroupHideOpenParents(); // these two are mutually exclusive, so if first set, we don't set the second

    var groupRemoveSingleChildren = this.gridOptionsWrapper.isGroupRemoveSingleChildren();
    var groupRemoveLowestSingleChildren = !groupRemoveSingleChildren && this.gridOptionsWrapper.isGroupRemoveLowestSingleChildren();

    for (var i = 0; i < rowsToFlatten.length; i++) {
      var rowNode = rowsToFlatten[i]; // check all these cases, for working out if this row should be included in the final mapped list

      var isParent = rowNode.hasChildren();
      var isGroupSuppressedNode = groupSuppressRow && isParent;
      var isSkippedLeafNode = skipLeafNodes && !isParent;
      var isRemovedSingleChildrenGroup = groupRemoveSingleChildren && isParent && rowNode.childrenAfterGroup.length === 1;
      var isRemovedLowestSingleChildrenGroup = groupRemoveLowestSingleChildren && isParent && rowNode.leafGroup && rowNode.childrenAfterGroup.length === 1; // hide open parents means when group is open, we don't show it. we also need to make sure the
      // group is expandable in the first place (as leaf groups are not expandable if pivot mode is on).
      // the UI will never allow expanding leaf  groups, however the user might via the API (or menu option 'expand all')

      var neverAllowToExpand = skipLeafNodes && rowNode.leafGroup;
      var isHiddenOpenParent = hideOpenParents && rowNode.expanded && !neverAllowToExpand;
      var thisRowShouldBeRendered = !isSkippedLeafNode && !isGroupSuppressedNode && !isHiddenOpenParent && !isRemovedSingleChildrenGroup && !isRemovedLowestSingleChildrenGroup;

      if (thisRowShouldBeRendered) {
        this.addRowNodeToRowsToDisplay(rowNode, result, nextRowTop, uiLevel);
      } // if we are pivoting, we never map below the leaf group


      if (skipLeafNodes && rowNode.leafGroup) {
        continue;
      }

      if (isParent) {
        var excludedParent = isRemovedSingleChildrenGroup || isRemovedLowestSingleChildrenGroup; // we traverse the group if it is expended, however we always traverse if the parent node
        // was removed (as the group will never be opened if it is not displayed, we show the children instead)

        if (rowNode.expanded || excludedParent) {
          // if the parent was excluded, then ui level is that of the parent
          var uiLevelForChildren = excludedParent ? uiLevel : uiLevel + 1;
          this.recursivelyAddToRowsToDisplay(rowNode.childrenAfterSort, result, nextRowTop, skipLeafNodes, uiLevelForChildren); // put a footer in if user is looking for it

          if (this.gridOptionsWrapper.isGroupIncludeFooter()) {
            this.ensureFooterNodeExists(rowNode);
            this.addRowNodeToRowsToDisplay(rowNode.sibling, result, nextRowTop, uiLevel);
          }
        }
      } else if (rowNode.master && rowNode.expanded) {
        var detailNode = this.createDetailNode(rowNode);
        this.addRowNodeToRowsToDisplay(detailNode, result, nextRowTop, uiLevel);
      }
    }
  }; // duplicated method, it's also in floatingRowModel


  FlattenStage.prototype.addRowNodeToRowsToDisplay = function (rowNode, result, nextRowTop, uiLevel) {
    result.push(rowNode);
    var isGroupMultiAutoColumn = this.gridOptionsWrapper.isGroupMultiAutoColumn();
    rowNode.setUiLevel(isGroupMultiAutoColumn ? 0 : uiLevel);
  };

  FlattenStage.prototype.ensureFooterNodeExists = function (groupNode) {
    // only create footer node once, otherwise we have daemons and
    // the animate screws up with the daemons hanging around
    if (utils_1._.exists(groupNode.sibling)) {
      return;
    }

    var footerNode = new rowNode_1.RowNode();
    this.context.wireBean(footerNode);
    Object.keys(groupNode).forEach(function (key) {
      footerNode[key] = groupNode[key];
    });
    footerNode.footer = true;
    footerNode.rowTop = null;
    footerNode.oldRowTop = null;

    if (utils_1._.exists(footerNode.id)) {
      footerNode.id = 'rowGroupFooter_' + footerNode.id;
    } // get both header and footer to reference each other as siblings. this is never undone,
    // only overwritten. so if a group is expanded, then contracted, it will have a ghost
    // sibling - but that's fine, as we can ignore this if the header is contracted.


    footerNode.sibling = groupNode;
    groupNode.sibling = footerNode;
  };

  FlattenStage.prototype.createDetailNode = function (masterNode) {
    if (utils_1._.exists(masterNode.detailNode)) {
      return masterNode.detailNode;
    } else {
      var detailNode = new rowNode_1.RowNode();
      this.context.wireBean(detailNode);
      detailNode.detail = true;
      detailNode.selectable = false; // flower was renamed to 'detail', but keeping for backwards compatibility

      detailNode.flower = detailNode.detail;
      detailNode.parent = masterNode;

      if (utils_1._.exists(masterNode.id)) {
        detailNode.id = 'detail_' + masterNode.id;
      }

      detailNode.data = masterNode.data;
      detailNode.level = masterNode.level + 1;
      masterNode.detailNode = detailNode;
      masterNode.childFlower = masterNode.detailNode; // for backwards compatibility

      return detailNode;
    }
  };

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], FlattenStage.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('selectionController'), __metadata("design:type", selectionController_1.SelectionController)], FlattenStage.prototype, "selectionController", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], FlattenStage.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('context'), __metadata("design:type", context_1.Context)], FlattenStage.prototype, "context", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], FlattenStage.prototype, "columnController", void 0);

  FlattenStage = __decorate([context_1.Bean('flattenStage')], FlattenStage);
  return FlattenStage;
}();

exports.FlattenStage = FlattenStage;

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var gridOptionsWrapper_1 = __webpack_require__(7);

var context_1 = __webpack_require__(2);

var eventService_1 = __webpack_require__(14);

var selectionController_1 = __webpack_require__(44);

var events_1 = __webpack_require__(18);

var sortController_1 = __webpack_require__(49);

var filterManager_1 = __webpack_require__(40);

var constants_1 = __webpack_require__(19);

var infiniteCache_1 = __webpack_require__(306);

var beanStub_1 = __webpack_require__(32);

var rowNodeCache_1 = __webpack_require__(165);

var rowNodeBlockLoader_1 = __webpack_require__(220);

var gridApi_1 = __webpack_require__(20);

var columnApi_1 = __webpack_require__(21);

var utils_1 = __webpack_require__(6);

var rowRenderer_1 = __webpack_require__(37);

var InfiniteRowModel =
/** @class */
function (_super) {
  __extends(InfiniteRowModel, _super);

  function InfiniteRowModel() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  InfiniteRowModel.prototype.getRowBounds = function (index) {
    return {
      rowHeight: this.rowHeight,
      rowTop: this.rowHeight * index
    };
  }; // we don't implement as lazy row heights is not supported in this row model


  InfiniteRowModel.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) {
    return false;
  };

  InfiniteRowModel.prototype.init = function () {
    var _this = this;

    if (!this.gridOptionsWrapper.isRowModelInfinite()) {
      return;
    }

    this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();
    this.addEventListeners();
    this.setDatasource(this.gridOptionsWrapper.getDatasource());
    this.addDestroyFunc(function () {
      return _this.destroyCache();
    });
  };

  InfiniteRowModel.prototype.destroyDatasource = function () {
    if (this.datasource) {
      if (this.datasource.destroy) {
        this.datasource.destroy();
      }

      this.rowRenderer.datasourceChanged();
      this.datasource = null;
    }
  };

  InfiniteRowModel.prototype.isLastRowFound = function () {
    return this.infiniteCache ? this.infiniteCache.isMaxRowFound() : false;
  };

  InfiniteRowModel.prototype.addEventListeners = function () {
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.onColumnEverything.bind(this));
  };

  InfiniteRowModel.prototype.onFilterChanged = function () {
    this.reset();
  };

  InfiniteRowModel.prototype.onSortChanged = function () {
    this.reset();
  };

  InfiniteRowModel.prototype.onColumnEverything = function () {
    var resetRequired; // if cache params, we require reset only if sort model has changed. we don't need to check
    // for filter model, as the filter manager will fire an event when columns change that result
    // in the filter changing.

    if (this.cacheParams) {
      resetRequired = this.isSortModelDifferent();
    } else {
      // if no cacheParams, means first time creating the cache, so always create one
      resetRequired = true;
    }

    if (resetRequired) {
      this.reset();
    }
  };

  InfiniteRowModel.prototype.isSortModelDifferent = function () {
    return !utils_1._.jsonEquals(this.cacheParams.sortModel, this.sortController.getSortModel());
  };

  InfiniteRowModel.prototype.getType = function () {
    return constants_1.Constants.ROW_MODEL_TYPE_INFINITE;
  };

  InfiniteRowModel.prototype.setDatasource = function (datasource) {
    this.destroyDatasource();
    this.datasource = datasource; // only reset if we have a valid datasource to working with

    if (datasource) {
      this.checkForDeprecated();
      this.reset();
    }
  };

  InfiniteRowModel.prototype.checkForDeprecated = function () {
    var ds = this.datasource; // the number of concurrent loads we are allowed to the server

    if (utils_1._.exists(ds.maxConcurrentRequests)) {
      console.error('ag-Grid: since version 5.1.x, maxConcurrentRequests is replaced with grid property maxConcurrentDatasourceRequests');
    }

    if (utils_1._.exists(ds.maxPagesInCache)) {
      console.error('ag-Grid: since version 5.1.x, maxPagesInCache is replaced with grid property maxPagesInPaginationCache');
    }

    if (utils_1._.exists(ds.overflowSize)) {
      console.error('ag-Grid: since version 5.1.x, overflowSize is replaced with grid property paginationOverflowSize');
    }

    if (utils_1._.exists(ds.blockSize)) {
      console.error('ag-Grid: since version 5.1.x, pageSize/blockSize is replaced with grid property infinitePageSize');
    }
  };

  InfiniteRowModel.prototype.isEmpty = function () {
    return utils_1._.missing(this.infiniteCache);
  };

  InfiniteRowModel.prototype.isRowsToRender = function () {
    return utils_1._.exists(this.infiniteCache);
  };

  InfiniteRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {
    return this.infiniteCache ? this.infiniteCache.getRowNodesInRange(firstInRange, lastInRange) : [];
  };

  InfiniteRowModel.prototype.reset = function () {
    // important to return here, as the user could be setting filter or sort before
    // data-source is set
    if (utils_1._.missing(this.datasource)) {
      return;
    } // if user is providing id's, then this means we can keep the selection between datasource hits,
    // as the rows will keep their unique id's even if, for example, server side sorting or filtering
    // is done.


    var userGeneratingIds = utils_1._.exists(this.gridOptionsWrapper.getRowNodeIdFunc());

    if (!userGeneratingIds) {
      this.selectionController.reset();
    }

    this.resetCache();
    var event = this.createModelUpdatedEvent();
    this.eventService.dispatchEvent(event);
  };

  InfiniteRowModel.prototype.createModelUpdatedEvent = function () {
    return {
      type: events_1.Events.EVENT_MODEL_UPDATED,
      api: this.gridApi,
      columnApi: this.columnApi,
      // not sure if these should all be false - noticed if after implementing,
      // maybe they should be true?
      newPage: false,
      newData: false,
      keepRenderedRows: false,
      animate: false
    };
  };

  InfiniteRowModel.prototype.resetCache = function () {
    // if not first time creating a cache, need to destroy the old one
    this.destroyCache();
    var maxConcurrentRequests = this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests();
    var blockLoadDebounceMillis = this.gridOptionsWrapper.getBlockLoadDebounceMillis(); // there is a bi-directional dependency between the loader and the cache,
    // so we create loader here, and then pass dependencies in setDependencies() method later

    this.rowNodeBlockLoader = new rowNodeBlockLoader_1.RowNodeBlockLoader(maxConcurrentRequests, blockLoadDebounceMillis);
    this.getContext().wireBean(this.rowNodeBlockLoader);
    this.cacheParams = {
      // the user provided datasource
      datasource: this.datasource,
      // sort and filter model
      filterModel: this.filterManager.getFilterModel(),
      sortModel: this.sortController.getSortModel(),
      rowNodeBlockLoader: this.rowNodeBlockLoader,
      // properties - this way we take a snapshot of them, so if user changes any, they will be
      // used next time we create a new cache, which is generally after a filter or sort change,
      // or a new datasource is set
      maxConcurrentRequests: maxConcurrentRequests,
      overflowSize: this.gridOptionsWrapper.getCacheOverflowSize(),
      initialRowCount: this.gridOptionsWrapper.getInfiniteInitialRowCount(),
      maxBlocksInCache: this.gridOptionsWrapper.getMaxBlocksInCache(),
      blockSize: this.gridOptionsWrapper.getCacheBlockSize(),
      rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),
      // the cache could create this, however it is also used by the pages, so handy to create it
      // here as the settings are also passed to the pages
      lastAccessedSequence: new utils_1.NumberSequence()
    }; // set defaults

    if (!this.cacheParams.maxConcurrentRequests || !(this.cacheParams.maxConcurrentRequests >= 1)) {
      this.cacheParams.maxConcurrentRequests = 2;
    } // page size needs to be 1 or greater. having it at 1 would be silly, as you would be hitting the
    // server for one page at a time. so the default if not specified is 100.


    if (!this.cacheParams.blockSize || !(this.cacheParams.blockSize >= 1)) {
      this.cacheParams.blockSize = 100;
    } // if user doesn't give initial rows to display, we assume zero


    if (!(this.cacheParams.initialRowCount >= 1)) {
      this.cacheParams.initialRowCount = 0;
    } // if user doesn't provide overflow, we use default overflow of 1, so user can scroll past
    // the current page and request first row of next page


    if (!(this.cacheParams.overflowSize >= 1)) {
      this.cacheParams.overflowSize = 1;
    }

    this.infiniteCache = new infiniteCache_1.InfiniteCache(this.cacheParams);
    this.getContext().wireBean(this.infiniteCache);
    this.infiniteCache.addEventListener(rowNodeCache_1.RowNodeCache.EVENT_CACHE_UPDATED, this.onCacheUpdated.bind(this));
  };

  InfiniteRowModel.prototype.destroyCache = function () {
    if (this.infiniteCache) {
      this.infiniteCache.destroy();
      this.infiniteCache = null;
    }

    if (this.rowNodeBlockLoader) {
      this.rowNodeBlockLoader.destroy();
      this.rowNodeBlockLoader = null;
    }
  };

  InfiniteRowModel.prototype.onCacheUpdated = function () {
    var event = this.createModelUpdatedEvent();
    this.eventService.dispatchEvent(event);
  };

  InfiniteRowModel.prototype.getRow = function (rowIndex) {
    return this.infiniteCache ? this.infiniteCache.getRow(rowIndex) : null;
  };

  InfiniteRowModel.prototype.getRowNode = function (id) {
    var result = null;
    this.forEachNode(function (rowNode) {
      if (rowNode.id === id) {
        result = rowNode;
      }
    });
    return result;
  };

  InfiniteRowModel.prototype.forEachNode = function (callback) {
    if (this.infiniteCache) {
      this.infiniteCache.forEachNodeDeep(callback, new utils_1.NumberSequence());
    }
  };

  InfiniteRowModel.prototype.getCurrentPageHeight = function () {
    return this.getRowCount() * this.rowHeight;
  };

  InfiniteRowModel.prototype.getRowIndexAtPixel = function (pixel) {
    if (this.rowHeight !== 0) {
      // avoid divide by zero error
      var rowIndexForPixel = Math.floor(pixel / this.rowHeight);

      if (rowIndexForPixel > this.getPageLastRow()) {
        return this.getPageLastRow();
      } else {
        return rowIndexForPixel;
      }
    } else {
      return 0;
    }
  };

  InfiniteRowModel.prototype.getPageFirstRow = function () {
    return 0;
  };

  InfiniteRowModel.prototype.getPageLastRow = function () {
    return this.infiniteCache ? this.infiniteCache.getVirtualRowCount() - 1 : 0;
  };

  InfiniteRowModel.prototype.getRowCount = function () {
    return this.infiniteCache ? this.infiniteCache.getVirtualRowCount() : 0;
  };

  InfiniteRowModel.prototype.updateRowData = function (transaction) {
    if (utils_1._.exists(transaction.remove) || utils_1._.exists(transaction.update)) {
      console.warn('ag-Grid: updateRowData for InfiniteRowModel does not support remove or update, only add');
      return;
    }

    if (utils_1._.missing(transaction.addIndex)) {
      console.warn('ag-Grid: updateRowData for InfiniteRowModel requires add and addIndex to be set');
      return;
    }

    if (this.infiniteCache) {
      this.infiniteCache.insertItemsAtIndex(transaction.addIndex, transaction.add);
    }
  };

  InfiniteRowModel.prototype.isRowPresent = function (rowNode) {
    return false;
  };

  InfiniteRowModel.prototype.refreshCache = function () {
    if (this.infiniteCache) {
      this.infiniteCache.refreshCache();
    }
  };

  InfiniteRowModel.prototype.purgeCache = function () {
    if (this.infiniteCache) {
      this.infiniteCache.purgeCache();
    }
  };

  InfiniteRowModel.prototype.getVirtualRowCount = function () {
    if (this.infiniteCache) {
      return this.infiniteCache.getVirtualRowCount();
    } else {
      return null;
    }
  };

  InfiniteRowModel.prototype.isMaxRowFound = function () {
    if (this.infiniteCache) {
      return this.infiniteCache.isMaxRowFound();
    }
  };

  InfiniteRowModel.prototype.setVirtualRowCount = function (rowCount, maxRowFound) {
    if (this.infiniteCache) {
      this.infiniteCache.setVirtualRowCount(rowCount, maxRowFound);
    }
  };

  InfiniteRowModel.prototype.getBlockState = function () {
    if (this.rowNodeBlockLoader) {
      return this.rowNodeBlockLoader.getBlockState();
    } else {
      return null;
    }
  };

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], InfiniteRowModel.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('filterManager'), __metadata("design:type", filterManager_1.FilterManager)], InfiniteRowModel.prototype, "filterManager", void 0);

  __decorate([context_1.Autowired('sortController'), __metadata("design:type", sortController_1.SortController)], InfiniteRowModel.prototype, "sortController", void 0);

  __decorate([context_1.Autowired('selectionController'), __metadata("design:type", selectionController_1.SelectionController)], InfiniteRowModel.prototype, "selectionController", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], InfiniteRowModel.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], InfiniteRowModel.prototype, "gridApi", void 0);

  __decorate([context_1.Autowired('columnApi'), __metadata("design:type", columnApi_1.ColumnApi)], InfiniteRowModel.prototype, "columnApi", void 0);

  __decorate([context_1.Autowired('rowRenderer'), __metadata("design:type", rowRenderer_1.RowRenderer)], InfiniteRowModel.prototype, "rowRenderer", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], InfiniteRowModel.prototype, "init", null);

  __decorate([context_1.PreDestroy, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], InfiniteRowModel.prototype, "destroyDatasource", null);

  InfiniteRowModel = __decorate([context_1.Bean('rowModel')], InfiniteRowModel);
  return InfiniteRowModel;
}(beanStub_1.BeanStub);

exports.InfiniteRowModel = InfiniteRowModel;

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var __param = this && this.__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var rowNodeBlock_1 = __webpack_require__(115);

var logger_1 = __webpack_require__(30);

var context_1 = __webpack_require__(2);

var utils_1 = __webpack_require__(6);

var RowNodeBlockLoader =
/** @class */
function () {
  function RowNodeBlockLoader(maxConcurrentRequests, blockLoadDebounceMillis) {
    this.activeBlockLoadsCount = 0;
    this.blocks = [];
    this.active = true;
    this.maxConcurrentRequests = maxConcurrentRequests;

    if (blockLoadDebounceMillis && blockLoadDebounceMillis > 0) {
      this.checkBlockToLoadDebounce = utils_1._.debounce(this.performCheckBlocksToLoad.bind(this), blockLoadDebounceMillis);
    }
  }

  RowNodeBlockLoader.prototype.setBeans = function (loggerFactory) {
    this.logger = loggerFactory.create('RowNodeBlockLoader');
  };

  RowNodeBlockLoader.prototype.addBlock = function (block) {
    this.blocks.push(block);
  };

  RowNodeBlockLoader.prototype.removeBlock = function (block) {
    utils_1._.removeFromArray(this.blocks, block);
  };

  RowNodeBlockLoader.prototype.destroy = function () {
    this.active = false;
  };

  RowNodeBlockLoader.prototype.loadComplete = function () {
    this.activeBlockLoadsCount--;
  };

  RowNodeBlockLoader.prototype.checkBlockToLoad = function () {
    if (this.checkBlockToLoadDebounce) {
      this.checkBlockToLoadDebounce();
    } else {
      this.performCheckBlocksToLoad();
    }
  };

  RowNodeBlockLoader.prototype.performCheckBlocksToLoad = function () {
    if (!this.active) {
      return;
    }

    this.printCacheStatus();

    if (this.activeBlockLoadsCount >= this.maxConcurrentRequests) {
      this.logger.log("checkBlockToLoad: max loads exceeded");
      return;
    }

    var blockToLoad = null;
    this.blocks.forEach(function (block) {
      if (block.getState() === rowNodeBlock_1.RowNodeBlock.STATE_DIRTY) {
        blockToLoad = block;
      }
    });

    if (blockToLoad) {
      blockToLoad.load();
      this.activeBlockLoadsCount++;
      this.logger.log("checkBlockToLoad: loading page " + blockToLoad.getBlockNumber());
      this.printCacheStatus();
    } else {
      this.logger.log("checkBlockToLoad: no pages to load");
    }
  };

  RowNodeBlockLoader.prototype.getBlockState = function () {
    var result = {};
    this.blocks.forEach(function (block) {
      var nodeIdPrefix = block.getNodeIdPrefix();
      var stateItem = {
        blockNumber: block.getBlockNumber(),
        startRow: block.getStartRow(),
        endRow: block.getEndRow(),
        pageStatus: block.getState()
      };

      if (utils_1._.exists(nodeIdPrefix)) {
        result[nodeIdPrefix + block.getBlockNumber()] = stateItem;
      } else {
        result[block.getBlockNumber()] = stateItem;
      }
    });
    return result;
  };

  RowNodeBlockLoader.prototype.printCacheStatus = function () {
    if (this.logger.isLogging()) {
      this.logger.log("printCacheStatus: activePageLoadsCount = " + this.activeBlockLoadsCount + "," + (" blocks = " + JSON.stringify(this.getBlockState())));
    }
  };

  __decorate([__param(0, context_1.Qualifier('loggerFactory')), __metadata("design:type", Function), __metadata("design:paramtypes", [logger_1.LoggerFactory]), __metadata("design:returntype", void 0)], RowNodeBlockLoader.prototype, "setBeans", null);

  return RowNodeBlockLoader;
}();

exports.RowNodeBlockLoader = RowNodeBlockLoader;

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var constants_1 = __webpack_require__(19);

var gridOptionsWrapper_1 = __webpack_require__(7);

var columnApi_1 = __webpack_require__(21);

var columnController_1 = __webpack_require__(17);

var filterManager_1 = __webpack_require__(40);

var rowNode_1 = __webpack_require__(39);

var eventService_1 = __webpack_require__(14);

var events_1 = __webpack_require__(18);

var context_1 = __webpack_require__(2);

var selectionController_1 = __webpack_require__(44);

var clientSideNodeManager_1 = __webpack_require__(222);

var changedPath_1 = __webpack_require__(106);

var valueService_1 = __webpack_require__(38);

var valueCache_1 = __webpack_require__(71);

var gridApi_1 = __webpack_require__(20);

var utils_1 = __webpack_require__(6);

var RecursionType;

(function (RecursionType) {
  RecursionType[RecursionType["Normal"] = 0] = "Normal";
  RecursionType[RecursionType["AfterFilter"] = 1] = "AfterFilter";
  RecursionType[RecursionType["AfterFilterAndSort"] = 2] = "AfterFilterAndSort";
  RecursionType[RecursionType["PivotNodes"] = 3] = "PivotNodes";
})(RecursionType || (RecursionType = {}));

var ClientSideRowModel =
/** @class */
function () {
  function ClientSideRowModel() {}

  ClientSideRowModel.prototype.init = function () {
    var refreshEverythingFunc = this.refreshModel.bind(this, {
      step: constants_1.Constants.STEP_EVERYTHING
    });
    var refreshEverythingAfterColsChangedFunc = this.refreshModel.bind(this, {
      step: constants_1.Constants.STEP_EVERYTHING,
      afterColumnsChanged: true
    });
    this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, refreshEverythingAfterColsChangedFunc);
    this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, refreshEverythingFunc);
    this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_COLUMN_VALUE_CHANGED, this.onValueChanged.bind(this));
    this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_COLUMN_PIVOT_CHANGED, this.refreshModel.bind(this, {
      step: constants_1.Constants.STEP_PIVOT
    }));
    this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_ROW_GROUP_OPENED, this.onRowGroupOpened.bind(this));
    this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
    this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
    this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, refreshEverythingFunc);
    var refreshMapFunc = this.refreshModel.bind(this, {
      step: constants_1.Constants.STEP_MAP,
      keepRenderedRows: true,
      animate: true
    });
    this.gridOptionsWrapper.addEventListener(gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, refreshMapFunc);
    this.gridOptionsWrapper.addEventListener(gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, refreshMapFunc);
    this.rootNode = new rowNode_1.RowNode();
    this.nodeManager = new clientSideNodeManager_1.ClientSideNodeManager(this.rootNode, this.gridOptionsWrapper, this.context, this.eventService, this.columnController, this.gridApi, this.columnApi, this.selectionController);
    this.context.wireBean(this.rootNode);
  };

  ClientSideRowModel.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) {
    var atLeastOneChange;
    var res = false; // we do this multiple times as changing the row heights can also change the first and last rows,
    // so the first pass can make lots of rows smaller, which means the second pass we end up changing
    // more rows.

    do {
      atLeastOneChange = false;
      var rowAtStartPixel = this.getRowIndexAtPixel(startPixel);
      var rowAtEndPixel = this.getRowIndexAtPixel(endPixel); // keep check to current page if doing pagination

      var firstRow = Math.max(rowAtStartPixel, startLimitIndex);
      var lastRow = Math.min(rowAtEndPixel, endLimitIndex);

      for (var rowIndex = firstRow; rowIndex <= lastRow; rowIndex++) {
        var rowNode = this.getRow(rowIndex);

        if (rowNode.rowHeightEstimated) {
          var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode);
          rowNode.setRowHeight(rowHeight.height);
          atLeastOneChange = true;
          res = true;
        }
      }

      if (atLeastOneChange) {
        this.setRowTops();
      }
    } while (atLeastOneChange);

    return res;
  };

  ClientSideRowModel.prototype.setRowTops = function () {
    var nextRowTop = 0;

    for (var i = 0; i < this.rowsToDisplay.length; i++) {
      // we don't estimate if doing fullHeight or autoHeight, as all rows get rendered all the time
      // with these two layouts.
      var allowEstimate = this.gridOptionsWrapper.getDomLayout() === constants_1.Constants.DOM_LAYOUT_NORMAL;
      var rowNode = this.rowsToDisplay[i];

      if (utils_1._.missing(rowNode.rowHeight)) {
        var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode, allowEstimate);
        rowNode.setRowHeight(rowHeight.height, rowHeight.estimated);
      }

      rowNode.setRowTop(nextRowTop);
      rowNode.setRowIndex(i);
      nextRowTop += rowNode.rowHeight;
    }
  };

  ClientSideRowModel.prototype.resetRowTops = function (rowNode, changedPath) {
    rowNode.clearRowTop();

    if (rowNode.hasChildren()) {
      if (rowNode.childrenAfterGroup) {
        // if a changedPath is active, it means we are here because of a transaction update or
        // a change detection. neither of these impacts the open/closed state of groups. so if
        // a group is not open this time, it was not open last time. so we know all closed groups
        // already have their top positions cleared. so there is no need to traverse all the way
        // when changedPath is active and the rowNode is not expanded.
        var skipChildren = changedPath.isActive() && !rowNode.expanded;

        if (!skipChildren) {
          for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {
            this.resetRowTops(rowNode.childrenAfterGroup[i], changedPath);
          }
        }
      }

      if (rowNode.sibling) {
        rowNode.sibling.clearRowTop();
      }
    }

    if (rowNode.detailNode) {
      rowNode.detailNode.clearRowTop();
    }
  }; // returns false if row was moved, otherwise true


  ClientSideRowModel.prototype.ensureRowAtPixel = function (rowNode, pixel) {
    var indexAtPixelNow = this.getRowIndexAtPixel(pixel);
    var rowNodeAtPixelNow = this.getRow(indexAtPixelNow);

    if (rowNodeAtPixelNow === rowNode) {
      return false;
    }

    utils_1._.removeFromArray(this.rootNode.allLeafChildren, rowNode);

    utils_1._.insertIntoArray(this.rootNode.allLeafChildren, rowNode, indexAtPixelNow);

    this.refreshModel({
      step: constants_1.Constants.STEP_EVERYTHING,
      keepRenderedRows: true,
      animate: true,
      keepEditingRows: true
    });
    return true;
  };

  ClientSideRowModel.prototype.isLastRowFound = function () {
    return true;
  };

  ClientSideRowModel.prototype.getRowCount = function () {
    if (this.rowsToDisplay) {
      return this.rowsToDisplay.length;
    } else {
      return 0;
    }
  };

  ClientSideRowModel.prototype.getRowBounds = function (index) {
    if (utils_1._.missing(this.rowsToDisplay)) {
      return null;
    }

    var rowNode = this.rowsToDisplay[index];

    if (rowNode) {
      return {
        rowTop: rowNode.rowTop,
        rowHeight: rowNode.rowHeight
      };
    } else {
      return null;
    }
  };

  ClientSideRowModel.prototype.onRowGroupOpened = function () {
    var animate = this.gridOptionsWrapper.isAnimateRows();
    this.refreshModel({
      step: constants_1.Constants.STEP_MAP,
      keepRenderedRows: true,
      animate: animate
    });
  };

  ClientSideRowModel.prototype.onFilterChanged = function () {
    var animate = this.gridOptionsWrapper.isAnimateRows();
    this.refreshModel({
      step: constants_1.Constants.STEP_FILTER,
      keepRenderedRows: true,
      animate: animate
    });
  };

  ClientSideRowModel.prototype.onSortChanged = function () {
    var animate = this.gridOptionsWrapper.isAnimateRows();
    this.refreshModel({
      step: constants_1.Constants.STEP_SORT,
      keepRenderedRows: true,
      animate: animate,
      keepEditingRows: true
    });
  };

  ClientSideRowModel.prototype.getType = function () {
    return constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
  };

  ClientSideRowModel.prototype.onValueChanged = function () {
    if (this.columnController.isPivotActive()) {
      this.refreshModel({
        step: constants_1.Constants.STEP_PIVOT
      });
    } else {
      this.refreshModel({
        step: constants_1.Constants.STEP_AGGREGATE
      });
    }
  };

  ClientSideRowModel.prototype.createChangePath = function (rowNodeTransactions) {
    // for updates, if the row is updated at all, then we re-calc all the values
    // in that row. we could compare each value to each old value, however if we
    // did this, we would be calling the valueService twice, once on the old value
    // and once on the new value. so it's less valueGetter calls if we just assume
    // each column is different. that way the changedPath is used so that only
    // the impacted parent rows are recalculated, parents who's children have
    // not changed are not impacted.
    var noTransactions = utils_1._.missingOrEmpty(rowNodeTransactions);

    var changedPath = new changedPath_1.ChangedPath(false, this.rootNode);

    if (noTransactions || this.gridOptionsWrapper.isTreeData()) {
      changedPath.setInactive();
    }

    return changedPath;
  };

  ClientSideRowModel.prototype.refreshModel = function (params) {
    // this goes through the pipeline of stages. what's in my head is similar
    // to the diagram on this page:
    // http://commons.apache.org/sandbox/commons-pipeline/pipeline_basics.html
    // however we want to keep the results of each stage, hence we manually call
    // each step rather than have them chain each other.
    var _this = this; // fallthrough in below switch is on purpose,
    // eg if STEP_FILTER, then all steps below this
    // step get done
    // let start: number;
    // console.log('======= start =======');


    var changedPath = this.createChangePath(params.rowNodeTransactions);

    switch (params.step) {
      case constants_1.Constants.STEP_EVERYTHING:
        // start = new Date().getTime();
        this.doRowGrouping(params.groupState, params.rowNodeTransactions, params.rowNodeOrder, changedPath, params.afterColumnsChanged);
      // console.log('rowGrouping = ' + (new Date().getTime() - start));

      case constants_1.Constants.STEP_FILTER:
        // start = new Date().getTime();
        this.doFilter(changedPath);
      // console.log('filter = ' + (new Date().getTime() - start));

      case constants_1.Constants.STEP_PIVOT:
        this.doPivot(changedPath);

      case constants_1.Constants.STEP_AGGREGATE:
        // depends on agg fields
        // start = new Date().getTime();
        this.doAggregate(changedPath);
      // console.log('aggregation = ' + (new Date().getTime() - start));

      case constants_1.Constants.STEP_SORT:
        // start = new Date().getTime();
        this.doSort(params.rowNodeTransactions, changedPath);
      // console.log('sort = ' + (new Date().getTime() - start));

      case constants_1.Constants.STEP_MAP:
        // start = new Date().getTime();
        this.doRowsToDisplay();
      // console.log('rowsToDisplay = ' + (new Date().getTime() - start));
    } // set all row tops to null, then set row tops on all visible rows. if we don't
    // do this, then the algorithm below only sets row tops, old row tops from old rows
    // will still lie around


    this.resetRowTops(this.rootNode, changedPath);
    this.setRowTops();
    var event = {
      type: events_1.Events.EVENT_MODEL_UPDATED,
      api: this.gridApi,
      columnApi: this.columnApi,
      animate: params.animate,
      keepRenderedRows: params.keepRenderedRows,
      newData: params.newData,
      newPage: false
    };
    this.eventService.dispatchEvent(event);

    if (this.$scope) {
      window.setTimeout(function () {
        _this.$scope.$apply();
      }, 0);
    }
  };

  ClientSideRowModel.prototype.isEmpty = function () {
    var rowsMissing;

    var doingLegacyTreeData = utils_1._.exists(this.gridOptionsWrapper.getNodeChildDetailsFunc());

    if (doingLegacyTreeData) {
      rowsMissing = utils_1._.missing(this.rootNode.childrenAfterGroup) || this.rootNode.childrenAfterGroup.length === 0;
    } else {
      rowsMissing = utils_1._.missing(this.rootNode.allLeafChildren) || this.rootNode.allLeafChildren.length === 0;
    }

    var empty = utils_1._.missing(this.rootNode) || rowsMissing || !this.columnController.isReady();
    return empty;
  };

  ClientSideRowModel.prototype.isRowsToRender = function () {
    return utils_1._.exists(this.rowsToDisplay) && this.rowsToDisplay.length > 0;
  };

  ClientSideRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {
    // if lastSelectedNode is missing, we start at the first row
    var firstRowHit = !lastInRange;
    var lastRowHit = false;
    var lastRow;
    var result = [];
    var groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
    this.forEachNodeAfterFilterAndSort(function (rowNode) {
      var lookingForLastRow = firstRowHit && !lastRowHit; // check if we need to flip the select switch

      if (!firstRowHit) {
        if (rowNode === lastInRange || rowNode === firstInRange) {
          firstRowHit = true;
        }
      }

      var skipThisGroupNode = rowNode.group && groupsSelectChildren;

      if (!skipThisGroupNode) {
        var inRange = firstRowHit && !lastRowHit;
        var childOfLastRow = rowNode.isParentOfNode(lastRow);

        if (inRange || childOfLastRow) {
          result.push(rowNode);
        }
      }

      if (lookingForLastRow) {
        if (rowNode === lastInRange || rowNode === firstInRange) {
          lastRowHit = true;

          if (rowNode === lastInRange) {
            lastRow = lastInRange;
          } else {
            lastRow = firstInRange;
          }
        }
      }
    });
    return result;
  };

  ClientSideRowModel.prototype.setDatasource = function (datasource) {
    console.error('ag-Grid: should never call setDatasource on clientSideRowController');
  };

  ClientSideRowModel.prototype.getTopLevelNodes = function () {
    return this.rootNode ? this.rootNode.childrenAfterGroup : null;
  };

  ClientSideRowModel.prototype.getRootNode = function () {
    return this.rootNode;
  };

  ClientSideRowModel.prototype.getRow = function (index) {
    return this.rowsToDisplay[index];
  };

  ClientSideRowModel.prototype.isRowPresent = function (rowNode) {
    return this.rowsToDisplay.indexOf(rowNode) >= 0;
  };

  ClientSideRowModel.prototype.getVirtualRowCount = function () {
    console.warn('ag-Grid: rowModel.getVirtualRowCount() is not longer a function, use rowModel.getRowCount() instead');
    return this.getPageLastRow();
  };

  ClientSideRowModel.prototype.getPageFirstRow = function () {
    return 0;
  };

  ClientSideRowModel.prototype.getPageLastRow = function () {
    if (this.rowsToDisplay) {
      return this.rowsToDisplay.length - 1;
    } else {
      return 0;
    }
  };

  ClientSideRowModel.prototype.getRowIndexAtPixel = function (pixelToMatch) {
    if (this.isEmpty()) {
      return -1;
    } // do binary search of tree
    // http://oli.me.uk/2013/06/08/searching-javascript-arrays-with-a-binary-search/


    var bottomPointer = 0;
    var topPointer = this.rowsToDisplay.length - 1; // quick check, if the pixel is out of bounds, then return last row

    if (pixelToMatch <= 0) {
      // if pixel is less than or equal zero, it's always the first row
      return 0;
    }

    var lastNode = this.rowsToDisplay[this.rowsToDisplay.length - 1];

    if (lastNode.rowTop <= pixelToMatch) {
      return this.rowsToDisplay.length - 1;
    }

    while (true) {
      var midPointer = Math.floor((bottomPointer + topPointer) / 2);
      var currentRowNode = this.rowsToDisplay[midPointer];

      if (this.isRowInPixel(currentRowNode, pixelToMatch)) {
        return midPointer;
      } else if (currentRowNode.rowTop < pixelToMatch) {
        bottomPointer = midPointer + 1;
      } else if (currentRowNode.rowTop > pixelToMatch) {
        topPointer = midPointer - 1;
      }
    }
  };

  ClientSideRowModel.prototype.isRowInPixel = function (rowNode, pixelToMatch) {
    var topPixel = rowNode.rowTop;
    var bottomPixel = rowNode.rowTop + rowNode.rowHeight;
    var pixelInRow = topPixel <= pixelToMatch && bottomPixel > pixelToMatch;
    return pixelInRow;
  };

  ClientSideRowModel.prototype.getCurrentPageHeight = function () {
    if (this.rowsToDisplay && this.rowsToDisplay.length > 0) {
      var lastRow = this.rowsToDisplay[this.rowsToDisplay.length - 1];
      var lastPixel = lastRow.rowTop + lastRow.rowHeight;
      return lastPixel;
    } else {
      return 0;
    }
  };

  ClientSideRowModel.prototype.forEachLeafNode = function (callback) {
    if (this.rootNode.allLeafChildren) {
      this.rootNode.allLeafChildren.forEach(function (rowNode, index) {
        return callback(rowNode, index);
      });
    }
  };

  ClientSideRowModel.prototype.forEachNode = function (callback) {
    this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterGroup, callback, RecursionType.Normal, 0);
  };

  ClientSideRowModel.prototype.forEachNodeAfterFilter = function (callback) {
    this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterFilter, callback, RecursionType.AfterFilter, 0);
  };

  ClientSideRowModel.prototype.forEachNodeAfterFilterAndSort = function (callback) {
    this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterSort, callback, RecursionType.AfterFilterAndSort, 0);
  };

  ClientSideRowModel.prototype.forEachPivotNode = function (callback) {
    this.recursivelyWalkNodesAndCallback([this.rootNode], callback, RecursionType.PivotNodes, 0);
  }; // iterates through each item in memory, and calls the callback function
  // nodes - the rowNodes to traverse
  // callback - the user provided callback
  // recursion type - need this to know what child nodes to recurse, eg if looking at all nodes, or filtered notes etc
  // index - works similar to the index in forEach in javascript's array function


  ClientSideRowModel.prototype.recursivelyWalkNodesAndCallback = function (nodes, callback, recursionType, index) {
    if (nodes) {
      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        callback(node, index++); // go to the next level if it is a group

        if (node.hasChildren()) {
          // depending on the recursion type, we pick a difference set of children
          var nodeChildren = null;

          switch (recursionType) {
            case RecursionType.Normal:
              nodeChildren = node.childrenAfterGroup;
              break;

            case RecursionType.AfterFilter:
              nodeChildren = node.childrenAfterFilter;
              break;

            case RecursionType.AfterFilterAndSort:
              nodeChildren = node.childrenAfterSort;
              break;

            case RecursionType.PivotNodes:
              // for pivot, we don't go below leafGroup levels
              nodeChildren = !node.leafGroup ? node.childrenAfterSort : null;
              break;
          }

          if (nodeChildren) {
            index = this.recursivelyWalkNodesAndCallback(nodeChildren, callback, recursionType, index);
          }
        }
      }
    }

    return index;
  }; // it's possible to recompute the aggregate without doing the other parts
  // + gridApi.recomputeAggregates()


  ClientSideRowModel.prototype.doAggregate = function (changedPath) {
    if (this.aggregationStage) {
      this.aggregationStage.execute({
        rowNode: this.rootNode,
        changedPath: changedPath
      });
    }
  }; // + gridApi.expandAll()
  // + gridApi.collapseAll()


  ClientSideRowModel.prototype.expandOrCollapseAll = function (expand) {
    var usingTreeData = this.gridOptionsWrapper.isTreeData();

    if (this.rootNode) {
      recursiveExpandOrCollapse(this.rootNode.childrenAfterGroup);
    }

    function recursiveExpandOrCollapse(rowNodes) {
      if (!rowNodes) {
        return;
      }

      rowNodes.forEach(function (rowNode) {
        var shouldExpandOrCollapse = usingTreeData ? utils_1._.exists(rowNode.childrenAfterGroup) : rowNode.group;

        if (shouldExpandOrCollapse) {
          rowNode.expanded = expand;
          recursiveExpandOrCollapse(rowNode.childrenAfterGroup);
        }
      });
    }

    this.refreshModel({
      step: constants_1.Constants.STEP_MAP
    });
    var eventSource = expand ? 'expandAll' : 'collapseAll';
    var event = {
      api: this.gridApi,
      columnApi: this.columnApi,
      type: events_1.Events.EVENT_EXPAND_COLLAPSE_ALL,
      source: eventSource
    };
    this.eventService.dispatchEvent(event);
  };

  ClientSideRowModel.prototype.doSort = function (rowNodeTransactions, changedPath) {
    this.sortStage.execute({
      rowNode: this.rootNode,
      rowNodeTransactions: rowNodeTransactions,
      changedPath: changedPath
    });
  };

  ClientSideRowModel.prototype.doRowGrouping = function (groupState, rowNodeTransactions, rowNodeOrder, changedPath, afterColumnsChanged) {
    var _this = this; // grouping is enterprise only, so if service missing, skip the step


    var doingLegacyTreeData = utils_1._.exists(this.gridOptionsWrapper.getNodeChildDetailsFunc());

    if (doingLegacyTreeData) {
      return;
    }

    if (this.groupStage) {
      if (rowNodeTransactions && utils_1._.exists(rowNodeTransactions)) {
        rowNodeTransactions.forEach(function (tran) {
          _this.groupStage.execute({
            rowNode: _this.rootNode,
            rowNodeTransaction: tran,
            rowNodeOrder: rowNodeOrder,
            changedPath: changedPath
          });
        });
      } else {
        // groups are about to get disposed, so need to deselect any that are selected
        this.selectionController.removeGroupsFromSelection();
        this.groupStage.execute({
          rowNode: this.rootNode,
          changedPath: changedPath,
          afterColumnsChanged: afterColumnsChanged
        }); // set open/closed state on groups

        this.restoreGroupState(groupState);
      }

      if (this.gridOptionsWrapper.isGroupSelectsChildren()) {
        this.selectionController.updateGroupsFromChildrenSelections(changedPath);
      }
    } else {
      this.rootNode.childrenAfterGroup = this.rootNode.allLeafChildren;
    }
  };

  ClientSideRowModel.prototype.restoreGroupState = function (groupState) {
    if (!groupState) {
      return;
    }

    utils_1._.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function (node, key) {
      // if the group was open last time, then open it this time. however
      // if was not open last time, then don't touch the group, so the 'groupDefaultExpanded'
      // setting will take effect.
      if (typeof groupState[key] === 'boolean') {
        node.expanded = groupState[key];
      }
    });
  };

  ClientSideRowModel.prototype.doFilter = function (changedPath) {
    this.filterStage.execute({
      rowNode: this.rootNode,
      changedPath: changedPath
    });
  };

  ClientSideRowModel.prototype.doPivot = function (changedPath) {
    if (this.pivotStage) {
      this.pivotStage.execute({
        rowNode: this.rootNode,
        changedPath: changedPath
      });
    }
  };

  ClientSideRowModel.prototype.getGroupState = function () {
    if (!this.rootNode.childrenAfterGroup || !this.gridOptionsWrapper.isRememberGroupStateWhenNewData()) {
      return null;
    }

    var result = {};

    utils_1._.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function (node, key) {
      return result[key] = node.expanded;
    });

    return result;
  };

  ClientSideRowModel.prototype.getCopyOfNodesMap = function () {
    return this.nodeManager.getCopyOfNodesMap();
  };

  ClientSideRowModel.prototype.getRowNode = function (id) {
    return this.nodeManager.getRowNode(id);
  }; // rows: the rows to put into the model


  ClientSideRowModel.prototype.setRowData = function (rowData) {
    // no need to invalidate cache, as the cache is stored on the rowNode,
    // so new rowNodes means the cache is wiped anyway.
    // remember group state, so we can expand groups that should be expanded
    var groupState = this.getGroupState();
    this.nodeManager.setRowData(rowData); // this event kicks off:
    // - clears selection
    // - updates filters
    // - shows 'no rows' overlay if needed

    var rowDataChangedEvent = {
      type: events_1.Events.EVENT_ROW_DATA_CHANGED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(rowDataChangedEvent);
    this.refreshModel({
      step: constants_1.Constants.STEP_EVERYTHING,
      groupState: groupState,
      newData: true
    });
  };

  ClientSideRowModel.prototype.batchUpdateRowData = function (rowDataTransaction, callback) {
    var _this = this;

    if (!this.rowDataTransactionBatch) {
      this.rowDataTransactionBatch = [];
      var waitMillis = this.gridOptionsWrapper.getBatchUpdateWaitMillis();
      window.setTimeout(function () {
        _this.executeBatchUpdateRowData();

        _this.rowDataTransactionBatch = null;
      }, waitMillis);
    }

    this.rowDataTransactionBatch.push({
      rowDataTransaction: rowDataTransaction,
      callback: callback
    });
  };

  ClientSideRowModel.prototype.executeBatchUpdateRowData = function () {
    var _this = this;

    this.valueCache.onDataChanged();
    var callbackFuncsBound = [];
    var rowNodeTrans = [];

    if (this.rowDataTransactionBatch) {
      this.rowDataTransactionBatch.forEach(function (tranItem) {
        var rowNodeTran = _this.nodeManager.updateRowData(tranItem.rowDataTransaction, null);

        rowNodeTrans.push(rowNodeTran);

        if (tranItem.callback) {
          callbackFuncsBound.push(tranItem.callback.bind(rowNodeTran));
        }
      });
    }

    this.commonUpdateRowData(rowNodeTrans); // do callbacks in next VM turn so it's async

    if (callbackFuncsBound.length > 0) {
      window.setTimeout(function () {
        callbackFuncsBound.forEach(function (func) {
          return func();
        });
      }, 0);
    }
  };

  ClientSideRowModel.prototype.updateRowData = function (rowDataTran, rowNodeOrder) {
    this.valueCache.onDataChanged();
    var rowNodeTran = this.nodeManager.updateRowData(rowDataTran, rowNodeOrder);
    this.commonUpdateRowData([rowNodeTran], rowNodeOrder);
    return rowNodeTran;
  }; // common to updateRowData and batchUpdateRowData


  ClientSideRowModel.prototype.commonUpdateRowData = function (rowNodeTrans, rowNodeOrder) {
    this.refreshModel({
      step: constants_1.Constants.STEP_EVERYTHING,
      rowNodeTransactions: rowNodeTrans,
      rowNodeOrder: rowNodeOrder,
      keepRenderedRows: true,
      animate: true,
      keepEditingRows: true
    });
    var event = {
      type: events_1.Events.EVENT_ROW_DATA_UPDATED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(event);
  };

  ClientSideRowModel.prototype.doRowsToDisplay = function () {
    this.rowsToDisplay = this.flattenStage.execute({
      rowNode: this.rootNode
    });
  };

  ClientSideRowModel.prototype.onRowHeightChanged = function () {
    this.refreshModel({
      step: constants_1.Constants.STEP_MAP,
      keepRenderedRows: true,
      keepEditingRows: true
    });
  };

  ClientSideRowModel.prototype.resetRowHeights = function () {
    this.forEachNode(function (rowNode) {
      return rowNode.setRowHeight(null);
    });
    this.onRowHeightChanged();
  };

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], ClientSideRowModel.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], ClientSideRowModel.prototype, "columnController", void 0);

  __decorate([context_1.Autowired('filterManager'), __metadata("design:type", filterManager_1.FilterManager)], ClientSideRowModel.prototype, "filterManager", void 0);

  __decorate([context_1.Autowired('$scope'), __metadata("design:type", Object)], ClientSideRowModel.prototype, "$scope", void 0);

  __decorate([context_1.Autowired('selectionController'), __metadata("design:type", selectionController_1.SelectionController)], ClientSideRowModel.prototype, "selectionController", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], ClientSideRowModel.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('context'), __metadata("design:type", context_1.Context)], ClientSideRowModel.prototype, "context", void 0);

  __decorate([context_1.Autowired('valueService'), __metadata("design:type", valueService_1.ValueService)], ClientSideRowModel.prototype, "valueService", void 0);

  __decorate([context_1.Autowired('valueCache'), __metadata("design:type", valueCache_1.ValueCache)], ClientSideRowModel.prototype, "valueCache", void 0);

  __decorate([context_1.Autowired('columnApi'), __metadata("design:type", columnApi_1.ColumnApi)], ClientSideRowModel.prototype, "columnApi", void 0);

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], ClientSideRowModel.prototype, "gridApi", void 0);

  __decorate([context_1.Autowired('filterStage'), __metadata("design:type", Object)], ClientSideRowModel.prototype, "filterStage", void 0);

  __decorate([context_1.Autowired('sortStage'), __metadata("design:type", Object)], ClientSideRowModel.prototype, "sortStage", void 0);

  __decorate([context_1.Autowired('flattenStage'), __metadata("design:type", Object)], ClientSideRowModel.prototype, "flattenStage", void 0);

  __decorate([context_1.Optional('groupStage'), __metadata("design:type", Object)], ClientSideRowModel.prototype, "groupStage", void 0);

  __decorate([context_1.Optional('aggregationStage'), __metadata("design:type", Object)], ClientSideRowModel.prototype, "aggregationStage", void 0);

  __decorate([context_1.Optional('pivotStage'), __metadata("design:type", Object)], ClientSideRowModel.prototype, "pivotStage", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], ClientSideRowModel.prototype, "init", null);

  ClientSideRowModel = __decorate([context_1.Bean('rowModel')], ClientSideRowModel);
  return ClientSideRowModel;
}();

exports.ClientSideRowModel = ClientSideRowModel;

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});

var rowNode_1 = __webpack_require__(39);

var events_1 = __webpack_require__(18);

var utils_1 = __webpack_require__(6);

var ClientSideNodeManager =
/** @class */
function () {
  function ClientSideNodeManager(rootNode, gridOptionsWrapper, context, eventService, columnController, gridApi, columnApi, selectionController) {
    this.nextId = 0; // when user is provide the id's, we also keep a map of ids to row nodes for convenience

    this.allNodesMap = {};
    this.rootNode = rootNode;
    this.gridOptionsWrapper = gridOptionsWrapper;
    this.context = context;
    this.eventService = eventService;
    this.columnController = columnController;
    this.gridApi = gridApi;
    this.columnApi = columnApi;
    this.selectionController = selectionController;
    this.rootNode.group = true;
    this.rootNode.level = -1;
    this.rootNode.id = ClientSideNodeManager.ROOT_NODE_ID;
    this.rootNode.allLeafChildren = [];
    this.rootNode.childrenAfterGroup = [];
    this.rootNode.childrenAfterSort = [];
    this.rootNode.childrenAfterFilter = []; // if we make this class a bean, then can annotate postConstruct

    this.postConstruct();
  } // @PostConstruct - this is not a bean, so postConstruct called by constructor


  ClientSideNodeManager.prototype.postConstruct = function () {
    // func below doesn't have 'this' pointer, so need to pull out these bits
    this.getNodeChildDetails = this.gridOptionsWrapper.getNodeChildDetailsFunc();
    this.suppressParentsInRowNodes = this.gridOptionsWrapper.isSuppressParentsInRowNodes();
    this.doesDataFlower = this.gridOptionsWrapper.getDoesDataFlowerFunc();
    this.isRowMasterFunc = this.gridOptionsWrapper.getIsRowMasterFunc();
    this.doingLegacyTreeData = utils_1._.exists(this.getNodeChildDetails);
    this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();
  };

  ClientSideNodeManager.prototype.getCopyOfNodesMap = function () {
    var result = utils_1._.cloneObject(this.allNodesMap);

    return result;
  };

  ClientSideNodeManager.prototype.getRowNode = function (id) {
    return this.allNodesMap[id];
  };

  ClientSideNodeManager.prototype.setRowData = function (rowData) {
    this.rootNode.childrenAfterFilter = null;
    this.rootNode.childrenAfterGroup = null;
    this.rootNode.childrenAfterSort = null;
    this.rootNode.childrenMapped = null;
    this.nextId = 0;
    this.allNodesMap = {};

    if (!rowData) {
      this.rootNode.allLeafChildren = [];
      this.rootNode.childrenAfterGroup = [];
      return;
    } // kick off recursion
    // we add rootNode as the parent, however if using ag-grid-enterprise, the grouping stage
    // sets the parent node on each row (even if we are not grouping). so setting parent node
    // here is for benefit of ag-grid-community users


    var result = this.recursiveFunction(rowData, this.rootNode, ClientSideNodeManager.TOP_LEVEL);

    if (this.doingLegacyTreeData) {
      this.rootNode.childrenAfterGroup = result;
      this.setLeafChildren(this.rootNode);
    } else {
      this.rootNode.allLeafChildren = result;
    }
  };

  ClientSideNodeManager.prototype.updateRowData = function (rowDataTran, rowNodeOrder) {
    var _this = this;

    if (this.isLegacyTreeData()) {
      return null;
    }

    var add = rowDataTran.add,
        addIndex = rowDataTran.addIndex,
        remove = rowDataTran.remove,
        update = rowDataTran.update;
    var rowNodeTransaction = {
      remove: [],
      update: [],
      add: []
    };

    if (utils_1._.exists(add)) {
      var useIndex = typeof addIndex === 'number' && addIndex >= 0;

      if (useIndex) {
        // items get inserted in reverse order for index insertion
        add.reverse().forEach(function (item) {
          var newRowNode = _this.addRowNode(item, addIndex);

          rowNodeTransaction.add.push(newRowNode);
        });
      } else {
        add.forEach(function (item) {
          var newRowNode = _this.addRowNode(item);

          rowNodeTransaction.add.push(newRowNode);
        });
      }
    }

    if (utils_1._.exists(remove)) {
      var anyNodesSelected_1 = false;
      remove.forEach(function (item) {
        var rowNode = _this.lookupRowNode(item);

        if (!rowNode) {
          return;
        }

        if (rowNode.isSelected()) {
          anyNodesSelected_1 = true;
        }

        _this.updatedRowNode(rowNode, item, false);

        rowNodeTransaction.remove.push(rowNode);
      });

      if (anyNodesSelected_1) {
        this.selectionController.updateGroupsFromChildrenSelections();
        var event_1 = {
          type: events_1.Events.EVENT_SELECTION_CHANGED,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(event_1);
      }
    }

    if (utils_1._.exists(update)) {
      update.forEach(function (item) {
        var rowNode = _this.lookupRowNode(item);

        if (!rowNode) {
          return;
        }

        _this.updatedRowNode(rowNode, item, true);

        rowNodeTransaction.update.push(rowNode);
      });
    }

    if (rowNodeOrder) {
      utils_1._.sortRowNodesByOrder(this.rootNode.allLeafChildren, rowNodeOrder);
    }

    return rowNodeTransaction;
  };

  ClientSideNodeManager.prototype.addRowNode = function (data, index) {
    var newNode = this.createNode(data, this.rootNode, ClientSideNodeManager.TOP_LEVEL);

    if (utils_1._.exists(index)) {
      utils_1._.insertIntoArray(this.rootNode.allLeafChildren, newNode, index);
    } else {
      this.rootNode.allLeafChildren.push(newNode);
    }

    return newNode;
  };

  ClientSideNodeManager.prototype.lookupRowNode = function (data) {
    var rowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();
    var rowNode;

    if (utils_1._.exists(rowNodeIdFunc)) {
      // find rowNode using id
      var id = rowNodeIdFunc(data);
      rowNode = this.allNodesMap[id];

      if (!rowNode) {
        console.error("ag-Grid: could not find row id=" + id + ", data item was not found for this id");
        return null;
      }
    } else {
      // find rowNode using object references
      rowNode = utils_1._.find(this.rootNode.allLeafChildren, function (rowNode) {
        return rowNode.data === data;
      });

      if (!rowNode) {
        console.error("ag-Grid: could not find data item as object was not found", data);
        return null;
      }
    }

    return rowNode;
  };

  ClientSideNodeManager.prototype.updatedRowNode = function (rowNode, data, update) {
    if (update) {
      // do update
      rowNode.updateData(data);
    } else {
      // do delete - setting 'tailingNodeInSequence = true' to ensure EVENT_SELECTION_CHANGED is not raised for
      // each row node updated, instead it is raised once by the calling code if any selected nodes exist.
      rowNode.setSelected(false, false, true); // so row renderer knows to fade row out (and not reposition it)

      rowNode.clearRowTop();

      utils_1._.removeFromArray(this.rootNode.allLeafChildren, rowNode);

      delete this.allNodesMap[rowNode.id];
    }
  };

  ClientSideNodeManager.prototype.recursiveFunction = function (rowData, parent, level) {
    var _this = this; // make sure the rowData is an array and not a string of json - this was a commonly reported problem on the forum


    if (typeof rowData === 'string') {
      console.warn('ag-Grid: rowData must be an array, however you passed in a string. If you are loading JSON, make sure you convert the JSON string to JavaScript objects first');
      return;
    }

    var rowNodes = [];
    rowData.forEach(function (dataItem) {
      var node = _this.createNode(dataItem, parent, level);

      rowNodes.push(node);
    });
    return rowNodes;
  };

  ClientSideNodeManager.prototype.createNode = function (dataItem, parent, level) {
    var node = new rowNode_1.RowNode();
    this.context.wireBean(node);
    var doingTreeData = this.gridOptionsWrapper.isTreeData();

    var doingLegacyTreeData = !doingTreeData && utils_1._.exists(this.getNodeChildDetails);

    var nodeChildDetails = doingLegacyTreeData ? this.getNodeChildDetails(dataItem) : null;

    if (nodeChildDetails && nodeChildDetails.group) {
      node.group = true;
      node.childrenAfterGroup = this.recursiveFunction(nodeChildDetails.children, node, level + 1);
      node.expanded = nodeChildDetails.expanded === true;
      node.field = nodeChildDetails.field;
      node.key = nodeChildDetails.key;
      /** @deprecated is now 'master' */

      node.canFlower = node.master; // pull out all the leaf children and add to our node

      this.setLeafChildren(node);
    } else {
      node.group = false;

      if (doingTreeData) {
        node.master = false;
        node.expanded = false;
      } else {
        // this is the default, for when doing grid data
        if (this.doesDataFlower) {
          node.master = this.doesDataFlower(dataItem);
        } else if (this.doingMasterDetail) {
          // if we are doing master detail, then the
          // default is that everything can flower.
          if (this.isRowMasterFunc) {
            node.master = this.isRowMasterFunc(dataItem);
          } else {
            node.master = true;
          }
        } else {
          node.master = false;
        }

        var rowGroupColumns = this.columnController.getRowGroupColumns();
        var numRowGroupColumns = rowGroupColumns ? rowGroupColumns.length : 0; // need to take row group into account when determining level

        var masterRowLevel = level + numRowGroupColumns;
        node.expanded = node.master ? this.isExpanded(masterRowLevel) : false;
      }
    } // support for backwards compatibility, canFlow is now called 'master'


    node.canFlower = node.master;

    if (parent && !this.suppressParentsInRowNodes) {
      node.parent = parent;
    }

    node.level = level;
    node.setDataAndId(dataItem, this.nextId.toString());

    if (this.allNodesMap[node.id]) {
      console.warn("ag-grid: duplicate node id '" + node.id + "' detected from getRowNodeId callback, this could cause issues in your grid.");
    }

    this.allNodesMap[node.id] = node;
    this.nextId++;
    return node;
  };

  ClientSideNodeManager.prototype.isExpanded = function (level) {
    var expandByDefault = this.gridOptionsWrapper.getGroupDefaultExpanded();

    if (expandByDefault === -1) {
      return true;
    } else {
      return level < expandByDefault;
    }
  }; // this is only used for doing legacy tree data


  ClientSideNodeManager.prototype.setLeafChildren = function (node) {
    node.allLeafChildren = [];

    if (node.childrenAfterGroup) {
      node.childrenAfterGroup.forEach(function (childAfterGroup) {
        if (childAfterGroup.group) {
          if (childAfterGroup.allLeafChildren) {
            childAfterGroup.allLeafChildren.forEach(function (leafChild) {
              return node.allLeafChildren.push(leafChild);
            });
          }
        } else {
          node.allLeafChildren.push(childAfterGroup);
        }
      });
    }
  };

  ClientSideNodeManager.prototype.isLegacyTreeData = function () {
    var rowsAlreadyGrouped = utils_1._.exists(this.gridOptionsWrapper.getNodeChildDetailsFunc());

    if (rowsAlreadyGrouped) {
      console.warn('ag-Grid: adding and removing rows is not supported when using nodeChildDetailsFunc, ie it is not ' + 'supported for legacy tree data. Please see the docs on the new preferred way of providing tree data that works with delta updates.');
      return true;
    } else {
      return false;
    }
  };

  ClientSideNodeManager.TOP_LEVEL = 0;
  ClientSideNodeManager.ROOT_NODE_ID = 'ROOT_NODE_ID';
  return ClientSideNodeManager;
}();

exports.ClientSideNodeManager = ClientSideNodeManager;

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});
/** The base frameworks, eg React & Angular 2, override this bean with implementations specific to their requirement. */

var BaseFrameworkFactory =
/** @class */
function () {
  function BaseFrameworkFactory() {}

  BaseFrameworkFactory.prototype.dateComponent = function (gridOptions) {
    return gridOptions.dateComponent;
  };

  BaseFrameworkFactory.prototype.colDefFloatingCellRenderer = function (colDef) {
    return colDef.pinnedRowCellRenderer;
  };

  BaseFrameworkFactory.prototype.colDefCellRenderer = function (colDef) {
    return colDef.cellRenderer;
  };

  BaseFrameworkFactory.prototype.colDefCellEditor = function (colDef) {
    return colDef.cellEditor;
  };

  BaseFrameworkFactory.prototype.colDefFilter = function (colDef) {
    return colDef.filter;
  };

  BaseFrameworkFactory.prototype.gridOptionsFullWidthCellRenderer = function (gridOptions) {
    return gridOptions.fullWidthCellRenderer;
  };

  BaseFrameworkFactory.prototype.gridOptionsGroupRowRenderer = function (gridOptions) {
    return gridOptions.groupRowRenderer;
  };

  BaseFrameworkFactory.prototype.gridOptionsGroupRowInnerRenderer = function (gridOptions) {
    return gridOptions.groupRowInnerRenderer;
  };

  BaseFrameworkFactory.prototype.setTimeout = function (action, timeout) {
    window.setTimeout(action, timeout);
  };

  return BaseFrameworkFactory;
}();

exports.BaseFrameworkFactory = BaseFrameworkFactory;

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var LINE_SEPARATOR = '\r\n';

var XmlFactory =
/** @class */
function () {
  function XmlFactory() {}

  XmlFactory.prototype.createHeader = function (headerElement) {
    if (headerElement === void 0) {
      headerElement = {};
    }

    var headerStart = '<?';
    var headerEnd = '?>';
    var keys = ['version'];

    if (!headerElement.version) {
      headerElement.version = "1.0";
    }

    if (headerElement.encoding) {
      keys.push('encoding');
    }

    if (headerElement.standalone) {
      keys.push('standalone');
    }

    var att = keys.map(function (key) {
      return key + "=\"" + headerElement[key] + "\"";
    }).join(' ');
    return headerStart + "xml " + att + " " + headerEnd;
  };

  XmlFactory.prototype.createXml = function (xmlElement, booleanTransformer) {
    var _this = this;

    var props = '';

    if (xmlElement.properties) {
      if (xmlElement.properties.prefixedAttributes) {
        xmlElement.properties.prefixedAttributes.forEach(function (prefixedSet) {
          Object.keys(prefixedSet.map).forEach(function (key) {
            props += _this.returnAttributeIfPopulated(prefixedSet.prefix + key, prefixedSet.map[key], booleanTransformer);
          });
        });
      }

      if (xmlElement.properties.rawMap) {
        Object.keys(xmlElement.properties.rawMap).forEach(function (key) {
          props += _this.returnAttributeIfPopulated(key, xmlElement.properties.rawMap[key], booleanTransformer);
        });
      }
    }

    var result = '<' + xmlElement.name + props;

    if (!xmlElement.children && xmlElement.textNode == null) {
      return result + '/>' + LINE_SEPARATOR;
    }

    if (xmlElement.textNode != null) {
      return result + '>' + xmlElement.textNode + '</' + xmlElement.name + '>' + LINE_SEPARATOR;
    }

    result += '>' + LINE_SEPARATOR;

    if (xmlElement.children) {
      xmlElement.children.forEach(function (it) {
        result += _this.createXml(it, booleanTransformer);
      });
    }

    return result + '</' + xmlElement.name + '>' + LINE_SEPARATOR;
  };

  XmlFactory.prototype.returnAttributeIfPopulated = function (key, value, booleanTransformer) {
    if (!value && value !== '' && value !== 0) {
      return '';
    }

    var xmlValue = value;

    if (typeof value === 'boolean') {
      if (booleanTransformer) {
        xmlValue = booleanTransformer(value);
      }
    }

    return " " + key + "=\"" + xmlValue + "\"";
  };

  XmlFactory = __decorate([context_1.Bean('xmlFactory')], XmlFactory);
  return XmlFactory;
}();

exports.XmlFactory = XmlFactory;

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var utils_1 = __webpack_require__(6); // table for crc calculation
// from: https://referencesource.microsoft.com/#System/sys/System/IO/compression/Crc32Helper.cs,3b31978c7d7f7246,references


var crcTable = [0, 1996959894, -301047508, -1727442502, 124634137, 1886057615, -379345611, -1637575261, 249268274, 2044508324, -522852066, -1747789432, 162941995, 2125561021, -407360249, -1866523247, 498536548, 1789927666, -205950648, -2067906082, 450548861, 1843258603, -187386543, -2083289657, 325883990, 1684777152, -43845254, -1973040660, 335633487, 1661365465, -99664541, -1928851979, 997073096, 1281953886, -715111964, -1570279054, 1006888145, 1258607687, -770865667, -1526024853, 901097722, 1119000684, -608450090, -1396901568, 853044451, 1172266101, -589951537, -1412350631, 651767980, 1373503546, -925412992, -1076862698, 565507253, 1454621731, -809855591, -1195530993, 671266974, 1594198024, -972236366, -1324619484, 795835527, 1483230225, -1050600021, -1234817731, 1994146192, 31158534, -1731059524, -271249366, 1907459465, 112637215, -1614814043, -390540237, 2013776290, 251722036, -1777751922, -519137256, 2137656763, 141376813, -1855689577, -429695999, 1802195444, 476864866, -2056965928, -228458418, 1812370925, 453092731, -2113342271, -183516073, 1706088902, 314042704, -1950435094, -54949764, 1658658271, 366619977, -1932296973, -69972891, 1303535960, 984961486, -1547960204, -725929758, 1256170817, 1037604311, -1529756563, -740887301, 1131014506, 879679996, -1385723834, -631195440, 1141124467, 855842277, -1442165665, -586318647, 1342533948, 654459306, -1106571248, -921952122, 1466479909, 544179635, -1184443383, -832445281, 1591671054, 702138776, -1328506846, -942167884, 1504918807, 783551873, -1212326853, -1061524307, -306674912, -1698712650, 62317068, 1957810842, -355121351, -1647151185, 81470997, 1943803523, -480048366, -1805370492, 225274430, 2053790376, -468791541, -1828061283, 167816743, 2097651377, -267414716, -2029476910, 503444072, 1762050814, -144550051, -2140837941, 426522225, 1852507879, -19653770, -1982649376, 282753626, 1742555852, -105259153, -1900089351, 397917763, 1622183637, -690576408, -1580100738, 953729732, 1340076626, -776247311, -1497606297, 1068828381, 1219638859, -670225446, -1358292148, 906185462, 1090812512, -547295293, -1469587627, 829329135, 1181335161, -882789492, -1134132454, 628085408, 1382605366, -871598187, -1156888829, 570562233, 1426400815, -977650754, -1296233688, 733239954, 1555261956, -1026031705, -1244606671, 752459403, 1541320221, -1687895376, -328994266, 1969922972, 40735498, -1677130071, -351390145, 1913087877, 83908371, -1782625662, -491226604, 2075208622, 213261112, -1831694693, -438977011, 2094854071, 198958881, -2032938284, -237706686, 1759359992, 534414190, -2118248755, -155638181, 1873836001, 414664567, -2012718362, -15766928, 1711684554, 285281116, -1889165569, -127750551, 1634467795, 376229701, -1609899400, -686959890, 1308918612, 956543938, -1486412191, -799009033, 1231636301, 1047427035, -1362007478, -640263460, 1088359270, 936918000, -1447252397, -558129467, 1202900863, 817233897, -1111625188, -893730166, 1404277552, 615818150, -1160759803, -841546093, 1423857449, 601450431, -1285129682, -1000256840, 1567103746, 711928724, -1274298825, -1022587231, 1510334235, 755167117];

var ZipContainer =
/** @class */
function () {
  function ZipContainer() {
    var _this = this;

    this.folders = [];
    this.files = [];

    this.addFolder = function (path) {
      _this.folders.push({
        path: path,
        created: new Date()
      });
    };
  }

  ZipContainer.prototype.addFolders = function (paths) {
    paths.forEach(this.addFolder);
  };

  ZipContainer.prototype.addFile = function (path, content) {
    this.files.push({
      path: path,
      created: new Date(),
      content: content
    });
  };

  ZipContainer.prototype.clearStream = function () {
    this.folders = [];
    this.files = [];
  };

  ZipContainer.prototype.getContent = function (mimeType) {
    if (mimeType === void 0) {
      mimeType = 'application/zip';
    }

    var textOutput = this.buildFileStream();
    var uInt8Output = this.buildUint8Array(textOutput);
    this.clearStream();
    return new Blob([uInt8Output], {
      type: mimeType
    });
  };

  ZipContainer.prototype.buildFileStream = function (fData) {
    if (fData === void 0) {
      fData = '';
    }

    var totalFiles = this.folders.concat(this.files);
    var len = totalFiles.length;
    var foData = '';
    var lL = 0;
    var cL = 0;

    for (var _i = 0, totalFiles_1 = totalFiles; _i < totalFiles_1.length; _i++) {
      var currentFile = totalFiles_1[_i];

      var _a = this.getHeader(currentFile, lL),
          fileHeader = _a.fileHeader,
          folderHeader = _a.folderHeader,
          content = _a.content;

      lL += fileHeader.length + content.length;
      cL += folderHeader.length;
      fData += fileHeader + content;
      foData += folderHeader;
    }

    var foEnd = this.buildFolderEnd(len, cL, lL);
    return fData + foData + foEnd;
  };

  ZipContainer.prototype.getHeader = function (currentFile, offset) {
    var content = currentFile.content,
        path = currentFile.path,
        created = currentFile.created;
    var utf8_encode = utils_1._.utf8_encode,
        decToHex = utils_1._.decToHex;
    var utfPath = utf8_encode(path);
    var isUTF8 = utfPath !== path;
    var time = this.convertTime(created);
    var dt = this.convertDate(created);
    var extraFields = '';

    if (isUTF8) {
      var uExtraFieldPath = decToHex(1, 1) + decToHex(this.getFromCrc32Table(utfPath), 4) + utfPath;
      extraFields = "\x75\x70" + decToHex(uExtraFieldPath.length, 2) + uExtraFieldPath;
    }

    var header = '\x0A\x00' + (isUTF8 ? '\x00\x08' : '\x00\x00') + '\x00\x00' + decToHex(time, 2) + // last modified time
    decToHex(dt, 2) + // last modified date
    decToHex(content ? this.getFromCrc32Table(content) : 0, 4) + decToHex(content ? content.length : 0, 4) + // compressed size
    decToHex(content ? content.length : 0, 4) + // uncompressed size
    decToHex(utfPath.length, 2) + // file name length
    decToHex(extraFields.length, 2); // extra field length

    var fileHeader = 'PK\x03\x04' + header + utfPath + extraFields;
    var folderHeader = 'PK\x01\x02' + // central header
    '\x14\x00' + header + // file header
    '\x00\x00' + '\x00\x00' + '\x00\x00' + (content ? '\x00\x00\x00\x00' : '\x10\x00\x00\x00') + // external file attributes
    decToHex(offset, 4) + // relative offset of local header
    utfPath + // file name
    extraFields; // extra field

    return {
      fileHeader: fileHeader,
      folderHeader: folderHeader,
      content: content || ''
    };
  };

  ZipContainer.prototype.buildFolderEnd = function (tLen, cLen, lLen) {
    var decToHex = utils_1._.decToHex;
    return 'PK\x05\x06' + // central folder end
    '\x00\x00' + '\x00\x00' + decToHex(tLen, 2) + // total number of entries in the central folder
    decToHex(tLen, 2) + // total number of entries in the central folder
    decToHex(cLen, 4) + // size of the central folder
    decToHex(lLen, 4) + // central folder start offset
    '\x00\x00';
  };

  ZipContainer.prototype.buildUint8Array = function (content) {
    var uint8 = new Uint8Array(content.length);

    for (var i = 0; i < uint8.length; i++) {
      uint8[i] = content.charCodeAt(i);
    }

    return uint8;
  };

  ZipContainer.prototype.getFromCrc32Table = function (content, crc) {
    if (crc === void 0) {
      crc = 0;
    }

    if (!content.length) {
      return 0;
    }

    crc ^= -1;
    var j = 0;
    var k = 0;
    var l = 0;

    for (var i = 0; i < content.length; i++) {
      j = content.charCodeAt(i);
      k = (crc ^ j) & 0xFF;
      l = crcTable[k];
      crc = crc >>> 8 ^ l;
    }

    return crc ^ -1;
  };

  ZipContainer.prototype.convertTime = function (date) {
    var time = date.getHours();
    time <<= 6;
    time = time | date.getMinutes();
    time <<= 5;
    time = time | date.getSeconds() / 2;
    return time;
  };

  ZipContainer.prototype.convertDate = function (date) {
    var dt = date.getFullYear() - 1980;
    dt <<= 4;
    dt = dt | date.getMonth() + 1;
    dt <<= 5;
    dt = dt | date.getDate();
    return dt;
  };

  ZipContainer = __decorate([context_1.Bean('zipContainer')], ZipContainer);
  return ZipContainer;
}();

exports.ZipContainer = ZipContainer;

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var component_1 = __webpack_require__(22);

var componentAnnotations_1 = __webpack_require__(25);

var context_1 = __webpack_require__(2);

var popupService_1 = __webpack_require__(54);

var PopupWindow =
/** @class */
function (_super) {
  __extends(PopupWindow, _super);

  function PopupWindow() {
    return _super.call(this, PopupWindow.TEMPLATE) || this;
  }

  PopupWindow.prototype.postConstruct = function () {
    // need to show filter before positioning, as only after filter
    // is visible can we find out what the width of it is
    this.closePopup = this.popupService.addPopup(false, this.getGui(), false, this.destroy.bind(this));
    this.addDestroyableEventListener(this.eClose, 'click', this.onBtClose.bind(this));
  };

  PopupWindow.prototype.setBody = function (eBody) {
    this.eContentWrapper.appendChild(eBody);
  };

  PopupWindow.prototype.setTitle = function (title) {
    this.eTitle.innerText = title;
  }; // called when user hits the 'x' in the top right


  PopupWindow.prototype.onBtClose = function () {
    this.closePopup();
  };

  PopupWindow.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this.dispatchEvent({
      type: PopupWindow.DESTROY_EVENT
    });
  }; // NOTE - in time, the styles here will need to go to CSS files


  PopupWindow.TEMPLATE = "<div class=\"ag-popup-window\" style=\"top: 40px; left: 40px; border: 1px solid black; position: fixed; background-color: white;\">\n            <div class=\"ag-popup-window-title-bar\" style=\"background: #00e5ff; border-bottom: 1px solid black;\">\n                <span ref=\"eClose\" class=\"ag-popup-window-close\" style=\"margin: 2px; border: 1px solid grey; border-radius: 2px;\">X</span>\n                <span ref=\"eTitle\" class=\"ag-popup-window-title\" style=\"padding: 2px;\">New Chart</span>\n            </div>\n            <div ref=\"eContentWrapper\" class=\"ag-popup-window-content-wrapper\"></div>\n        </div>";
  PopupWindow.DESTROY_EVENT = 'destroy';

  __decorate([context_1.Autowired('popupService'), __metadata("design:type", popupService_1.PopupService)], PopupWindow.prototype, "popupService", void 0);

  __decorate([componentAnnotations_1.RefSelector('eContentWrapper'), __metadata("design:type", HTMLElement)], PopupWindow.prototype, "eContentWrapper", void 0);

  __decorate([componentAnnotations_1.RefSelector('eTitle'), __metadata("design:type", HTMLElement)], PopupWindow.prototype, "eTitle", void 0);

  __decorate([componentAnnotations_1.RefSelector('eClose'), __metadata("design:type", HTMLElement)], PopupWindow.prototype, "eClose", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], PopupWindow.prototype, "postConstruct", null);

  return PopupWindow;
}(component_1.Component);

exports.PopupWindow = PopupWindow;

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// ag-grid-react v20.2.0


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var React = __webpack_require__(0);

var react_1 = __webpack_require__(0);

var PropTypes = __webpack_require__(42);

var AgGrid = __webpack_require__(56);

var AgGridColumn =
/** @class */
function (_super) {
  __extends(AgGridColumn, _super);

  function AgGridColumn(props, state) {
    var _this = _super.call(this, props, state) || this;

    _this.props = props;
    _this.state = state;
    return _this;
  }

  AgGridColumn.prototype.render = function () {
    return null;
  };

  AgGridColumn.mapChildColumnDefs = function (columnProps) {
    return React.Children.map(columnProps.children, function (child) {
      return AgGridColumn.toColDef(child.props);
    });
  };

  AgGridColumn.toColDef = function (columnProps) {
    var colDef = AgGridColumn.createColDefFromGridColumn(columnProps);

    if (AgGridColumn.hasChildColumns(columnProps)) {
      colDef["children"] = AgGridColumn.getChildColDefs(columnProps.children);
    }

    return colDef;
  };

  AgGridColumn.hasChildColumns = function (columnProps) {
    return React.Children.count(columnProps.children) > 0;
  };

  AgGridColumn.getChildColDefs = function (columnChildren) {
    return React.Children.map(columnChildren, function (child) {
      return AgGridColumn.createColDefFromGridColumn(child.props);
    });
  };

  ;

  AgGridColumn.createColDefFromGridColumn = function (columnProps) {
    var colDef = {};
    AgGridColumn.assign(colDef, columnProps);
    delete colDef.children;
    return colDef;
  };

  ;

  AgGridColumn.assign = function (colDef, from) {
    // effectively Object.assign - here for IE compatibility
    return [from].reduce(function (r, o) {
      Object.keys(o).forEach(function (k) {
        r[k] = o[k];
      });
      return r;
    }, colDef);
  };

  return AgGridColumn;
}(react_1.Component);

exports.AgGridColumn = AgGridColumn;
addProperties(AgGrid.ColDefUtil.BOOLEAN_PROPERTIES, PropTypes.bool);
addProperties(AgGrid.ColDefUtil.STRING_PROPERTIES, PropTypes.string);
addProperties(AgGrid.ColDefUtil.OBJECT_PROPERTIES, PropTypes.object);
addProperties(AgGrid.ColDefUtil.ARRAY_PROPERTIES, PropTypes.array);
addProperties(AgGrid.ColDefUtil.NUMBER_PROPERTIES, PropTypes.number);
addProperties(AgGrid.ColDefUtil.FUNCTION_PROPERTIES, PropTypes.func);

function addProperties(listOfProps, propType) {
  listOfProps.forEach(function (propKey) {
    AgGridColumn[propKey] = propType;
  });
}

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// ag-grid-react v20.2.0


Object.defineProperty(exports, "__esModule", {
  value: true
});

var BaseReactComponent =
/** @class */
function () {
  function BaseReactComponent() {}

  BaseReactComponent.prototype.hasMethod = function (name) {
    var frameworkComponentInstance = this.getFrameworkComponentInstance();

    if (frameworkComponentInstance == null) {
      return false;
    }

    return frameworkComponentInstance[name] != null;
  };

  BaseReactComponent.prototype.callMethod = function (name, args) {
    var _this = this;

    var frameworkComponentInstance = this.getFrameworkComponentInstance(); // this should never happen now that AgGridReact.waitForInstance is in use

    if (frameworkComponentInstance == null) {
      window.setTimeout(function () {
        return _this.callMethod(name, args);
      }, 100);
    } else {
      var method = this.getFrameworkComponentInstance()[name];
      if (method == null) return;
      return method.apply(frameworkComponentInstance, args);
    }
  };

  BaseReactComponent.prototype.addMethod = function (name, callback) {
    this[name] = callback;
  };

  return BaseReactComponent;
}();

exports.BaseReactComponent = BaseReactComponent;

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__(230),
    isArguments = __webpack_require__(235),
    isArray = __webpack_require__(45),
    isIndex = __webpack_require__(236),
    isLength = __webpack_require__(171),
    toKey = __webpack_require__(121);
/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */


function hasPath(object, path, hasFunc) {
  path = castPath(path, object);
  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);

    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }

    object = object[key];
  }

  if (result || ++index != length) {
    return result;
  }

  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
}

module.exports = hasPath;

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

var isArray = __webpack_require__(45),
    isKey = __webpack_require__(166),
    stringToPath = __webpack_require__(329),
    toString = __webpack_require__(95);
/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */


function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }

  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
module.exports = freeGlobal;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(51)))

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(75),
    isObject = __webpack_require__(77);
/** `Object#toString` result references. */


var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */

function isFunction(value) {
  if (!isObject(value)) {
    return false;
  } // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.


  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;

/***/ }),
/* 233 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var funcProto = Function.prototype;
/** Used to resolve the decompiled source of functions. */

var funcToString = funcProto.toString;
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */

function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}

    try {
      return func + '';
    } catch (e) {}
  }

  return '';
}

module.exports = toSource;

/***/ }),
/* 234 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }

  return result;
}

module.exports = arrayMap;

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsArguments = __webpack_require__(354),
    isObjectLike = __webpack_require__(55);
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/** Built-in value references. */

var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */

var isArguments = baseIsArguments(function () {
  return arguments;
}()) ? baseIsArguments : function (value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};
module.exports = isArguments;

/***/ }),
/* 236 */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;
/** Used to detect unsigned integer values. */

var reIsUint = /^(?:0|[1-9]\d*)$/;
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */

function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}

module.exports = isIndex;

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

var baseAssignValue = __webpack_require__(122),
    eq = __webpack_require__(169);
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */

function assignValue(object, key, value) {
  var objValue = object[key];

  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

var baseTimes = __webpack_require__(365),
    isArguments = __webpack_require__(235),
    isArray = __webpack_require__(45),
    isBuffer = __webpack_require__(173),
    isIndex = __webpack_require__(236),
    isTypedArray = __webpack_require__(239);
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */

function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.
    key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
    isIndex(key, length)))) {
      result.push(key);
    }
  }

  return result;
}

module.exports = arrayLikeKeys;

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsTypedArray = __webpack_require__(367),
    baseUnary = __webpack_require__(175),
    nodeUtil = __webpack_require__(176);
/* Node.js helper references. */


var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */

var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
module.exports = isTypedArray;

/***/ }),
/* 240 */
/***/ (function(module, exports) {

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function (arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeKeys = __webpack_require__(238),
    baseKeysIn = __webpack_require__(371),
    isArrayLike = __webpack_require__(178);
/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */


function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

module.exports = keysIn;

/***/ }),
/* 242 */
/***/ (function(module, exports) {

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;
  array || (array = Array(length));

  while (++index < length) {
    array[index] = source[index];
  }

  return array;
}

module.exports = copyArray;

/***/ }),
/* 243 */
/***/ (function(module, exports) {

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__(245),
    getPrototype = __webpack_require__(246),
    getSymbols = __webpack_require__(179),
    stubArray = __webpack_require__(243);
/* Built-in method references for those with the same name as other `lodash` methods. */


var nativeGetSymbols = Object.getOwnPropertySymbols;
/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */

var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
  var result = [];

  while (object) {
    arrayPush(result, getSymbols(object));
    object = getPrototype(object);
  }

  return result;
};
module.exports = getSymbolsIn;

/***/ }),
/* 245 */
/***/ (function(module, exports) {

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }

  return array;
}

module.exports = arrayPush;

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

var overArg = __webpack_require__(240);
/** Built-in value references. */


var getPrototype = overArg(Object.getPrototypeOf, Object);
module.exports = getPrototype;

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetAllKeys = __webpack_require__(248),
    getSymbols = __webpack_require__(179),
    keys = __webpack_require__(78);
/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */


function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__(245),
    isArray = __webpack_require__(45);
/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */


function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(46);
/** Built-in value references. */


var Uint8Array = root.Uint8Array;
module.exports = Uint8Array;

/***/ }),
/* 250 */
/***/ (function(module, exports) {

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);
  map.forEach(function (value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;

/***/ }),
/* 251 */
/***/ (function(module, exports) {

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);
  set.forEach(function (value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

var asciiToArray = __webpack_require__(397),
    hasUnicode = __webpack_require__(253),
    unicodeToArray = __webpack_require__(398);
/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */


function stringToArray(string) {
  return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
}

module.exports = stringToArray;

/***/ }),
/* 253 */
/***/ (function(module, exports) {

/** Used to compose unicode character classes. */
var rsAstralRange = "\\ud800-\\udfff",
    rsComboMarksRange = "\\u0300-\\u036f",
    reComboHalfMarksRange = "\\ufe20-\\ufe2f",
    rsComboSymbolsRange = "\\u20d0-\\u20ff",
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = "\\ufe0e\\ufe0f";
/** Used to compose unicode capture groups. */

var rsZWJ = "\\u200d";
/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */

var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');
/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */

function hasUnicode(string) {
  return reHasUnicode.test(string);
}

module.exports = hasUnicode;

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* jshint node: true */


function makeArrayFrom(obj) {
  return Array.prototype.slice.apply(obj);
}

var PENDING = "pending",
    RESOLVED = "resolved",
    REJECTED = "rejected";

function SynchronousPromise(handler) {
  this.status = PENDING;
  this._continuations = [];
  this._parent = null;
  this._paused = false;

  if (handler) {
    handler.call(this, this._continueWith.bind(this), this._failWith.bind(this));
  }
}

function looksLikeAPromise(obj) {
  return obj && typeof obj.then === "function";
}

SynchronousPromise.prototype = {
  then: function then(nextFn, catchFn) {
    var next = SynchronousPromise.unresolved()._setParent(this);

    if (this._isRejected()) {
      if (this._paused) {
        this._continuations.push({
          promise: next,
          nextFn: nextFn,
          catchFn: catchFn
        });

        return next;
      }

      if (catchFn) {
        try {
          var catchResult = catchFn(this._error);

          if (looksLikeAPromise(catchResult)) {
            this._chainPromiseData(catchResult, next);

            return next;
          } else {
            return SynchronousPromise.resolve(catchResult)._setParent(this);
          }
        } catch (e) {
          return SynchronousPromise.reject(e)._setParent(this);
        }
      }

      return SynchronousPromise.reject(this._error)._setParent(this);
    }

    this._continuations.push({
      promise: next,
      nextFn: nextFn,
      catchFn: catchFn
    });

    this._runResolutions();

    return next;
  },
  catch: function _catch(handler) {
    if (this._isResolved()) {
      return SynchronousPromise.resolve(this._data)._setParent(this);
    }

    var next = SynchronousPromise.unresolved()._setParent(this);

    this._continuations.push({
      promise: next,
      catchFn: handler
    });

    this._runRejections();

    return next;
  },
  finally: function _finally(callback) {
    var ran = false;

    function runFinally() {
      if (!ran) {
        ran = true;
        return callback();
      }
    }

    return this.then(runFinally).catch(runFinally);
  },
  pause: function pause() {
    this._paused = true;
    return this;
  },
  resume: function resume() {
    var firstPaused = this._findFirstPaused();

    if (firstPaused) {
      firstPaused._paused = false;

      firstPaused._runResolutions();

      firstPaused._runRejections();
    }

    return this;
  },
  _findAncestry: function _findAncestry() {
    return this._continuations.reduce(function (acc, cur) {
      if (cur.promise) {
        var node = {
          promise: cur.promise,
          children: cur.promise._findAncestry()
        };
        acc.push(node);
      }

      return acc;
    }, []);
  },
  _setParent: function _setParent(parent) {
    if (this._parent) {
      throw new Error("parent already set");
    }

    this._parent = parent;
    return this;
  },
  _continueWith: function _continueWith(data) {
    var firstPending = this._findFirstPending();

    if (firstPending) {
      firstPending._data = data;

      firstPending._setResolved();
    }
  },
  _findFirstPending: function _findFirstPending() {
    return this._findFirstAncestor(function (test) {
      return test._isPending && test._isPending();
    });
  },
  _findFirstPaused: function _findFirstPaused() {
    return this._findFirstAncestor(function (test) {
      return test._paused;
    });
  },
  _findFirstAncestor: function _findFirstAncestor(matching) {
    var test = this;
    var result;

    while (test) {
      if (matching(test)) {
        result = test;
      }

      test = test._parent;
    }

    return result;
  },
  _failWith: function _failWith(error) {
    var firstRejected = this._findFirstPending();

    if (firstRejected) {
      firstRejected._error = error;

      firstRejected._setRejected();
    }
  },
  _takeContinuations: function _takeContinuations() {
    return this._continuations.splice(0, this._continuations.length);
  },
  _runRejections: function _runRejections() {
    if (this._paused || !this._isRejected()) {
      return;
    }

    var error = this._error,
        continuations = this._takeContinuations(),
        self = this;

    continuations.forEach(function (cont) {
      if (cont.catchFn) {
        try {
          var catchResult = cont.catchFn(error);

          self._handleUserFunctionResult(catchResult, cont.promise);
        } catch (e) {
          var message = e.message;
          cont.promise.reject(e);
        }
      } else {
        cont.promise.reject(error);
      }
    });
  },
  _runResolutions: function _runResolutions() {
    if (this._paused || !this._isResolved() || this._isPending()) {
      return;
    }

    var continuations = this._takeContinuations();

    if (looksLikeAPromise(this._data)) {
      return this._handleWhenResolvedDataIsPromise(this._data);
    }

    var data = this._data;
    var self = this;
    continuations.forEach(function (cont) {
      if (cont.nextFn) {
        try {
          var result = cont.nextFn(data);

          self._handleUserFunctionResult(result, cont.promise);
        } catch (e) {
          self._handleResolutionError(e, cont);
        }
      } else if (cont.promise) {
        cont.promise.resolve(data);
      }
    });
  },
  _handleResolutionError: function _handleResolutionError(e, continuation) {
    this._setRejected();

    if (continuation.catchFn) {
      try {
        continuation.catchFn(e);
        return;
      } catch (e2) {
        e = e2;
      }
    }

    if (continuation.promise) {
      continuation.promise.reject(e);
    }
  },
  _handleWhenResolvedDataIsPromise: function _handleWhenResolvedDataIsPromise(data) {
    var self = this;
    return data.then(function (result) {
      self._data = result;

      self._runResolutions();
    }).catch(function (error) {
      self._error = error;

      self._setRejected();

      self._runRejections();
    });
  },
  _handleUserFunctionResult: function _handleUserFunctionResult(data, nextSynchronousPromise) {
    if (looksLikeAPromise(data)) {
      this._chainPromiseData(data, nextSynchronousPromise);
    } else {
      nextSynchronousPromise.resolve(data);
    }
  },
  _chainPromiseData: function _chainPromiseData(promiseData, nextSynchronousPromise) {
    promiseData.then(function (newData) {
      nextSynchronousPromise.resolve(newData);
    }).catch(function (newError) {
      nextSynchronousPromise.reject(newError);
    });
  },
  _setResolved: function _setResolved() {
    this.status = RESOLVED;

    if (!this._paused) {
      this._runResolutions();
    }
  },
  _setRejected: function _setRejected() {
    this.status = REJECTED;

    if (!this._paused) {
      this._runRejections();
    }
  },
  _isPending: function _isPending() {
    return this.status === PENDING;
  },
  _isResolved: function _isResolved() {
    return this.status === RESOLVED;
  },
  _isRejected: function _isRejected() {
    return this.status === REJECTED;
  }
};

SynchronousPromise.resolve = function (result) {
  return new SynchronousPromise(function (resolve, reject) {
    if (looksLikeAPromise(result)) {
      result.then(function (newResult) {
        resolve(newResult);
      }).catch(function (error) {
        reject(error);
      });
    } else {
      resolve(result);
    }
  });
};

SynchronousPromise.reject = function (result) {
  return new SynchronousPromise(function (resolve, reject) {
    reject(result);
  });
};

SynchronousPromise.unresolved = function () {
  return new SynchronousPromise(function (resolve, reject) {
    this.resolve = resolve;
    this.reject = reject;
  });
};

SynchronousPromise.all = function () {
  var args = makeArrayFrom(arguments);

  if (Array.isArray(args[0])) {
    args = args[0];
  }

  if (!args.length) {
    return SynchronousPromise.resolve([]);
  }

  return new SynchronousPromise(function (resolve, reject) {
    var allData = [],
        numResolved = 0,
        doResolve = function doResolve() {
      if (numResolved === args.length) {
        resolve(allData);
      }
    },
        rejected = false,
        doReject = function doReject(err) {
      if (rejected) {
        return;
      }

      rejected = true;
      reject(err);
    };

    args.forEach(function (arg, idx) {
      SynchronousPromise.resolve(arg).then(function (thisResult) {
        allData[idx] = thisResult;
        numResolved += 1;
        doResolve();
      }).catch(function (err) {
        doReject(err);
      });
    });
  });
};
/* jshint ignore:start */


if (Promise === SynchronousPromise) {
  throw new Error("Please use SynchronousPromise.installGlobally() to install globally");
}

var RealPromise = Promise;

SynchronousPromise.installGlobally = function (__awaiter) {
  if (Promise === SynchronousPromise) {
    return __awaiter;
  }

  var result = patchAwaiterIfRequired(__awaiter);
  Promise = SynchronousPromise;
  return result;
};

SynchronousPromise.uninstallGlobally = function () {
  if (Promise === SynchronousPromise) {
    Promise = RealPromise;
  }
};

function patchAwaiterIfRequired(__awaiter) {
  if (typeof __awaiter === "undefined" || __awaiter.__patched) {
    return __awaiter;
  }

  var originalAwaiter = __awaiter;

  __awaiter = function __awaiter() {
    var Promise = RealPromise;
    originalAwaiter.apply(this, makeArrayFrom(arguments));
  };

  __awaiter.__patched = true;
  return __awaiter;
}
/* jshint ignore:end */


module.exports = {
  SynchronousPromise: SynchronousPromise
};

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

var baseAssignValue = __webpack_require__(122),
    baseForOwn = __webpack_require__(256),
    baseIteratee = __webpack_require__(257);
/**
 * Creates an object with the same keys as `object` and values generated
 * by running each own enumerable string keyed property of `object` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapKeys
 * @example
 *
 * var users = {
 *   'fred':    { 'user': 'fred',    'age': 40 },
 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
 * };
 *
 * _.mapValues(users, function(o) { return o.age; });
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 *
 * // The `_.property` iteratee shorthand.
 * _.mapValues(users, 'age');
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 */


function mapValues(object, iteratee) {
  var result = {};
  iteratee = baseIteratee(iteratee, 3);
  baseForOwn(object, function (value, key, object) {
    baseAssignValue(result, key, iteratee(value, key, object));
  });
  return result;
}

module.exports = mapValues;

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

var baseFor = __webpack_require__(404),
    keys = __webpack_require__(78);
/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */


function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

var baseMatches = __webpack_require__(406),
    baseMatchesProperty = __webpack_require__(417),
    identity = __webpack_require__(421),
    isArray = __webpack_require__(45),
    property = __webpack_require__(422);
/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */


function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }

  if (value == null) {
    return identity;
  }

  if (typeof value == 'object') {
    return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
  }

  return property(value);
}

module.exports = baseIteratee;

/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqualDeep = __webpack_require__(408),
    isObjectLike = __webpack_require__(55);
/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */


function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }

  if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
    return value !== value && other !== other;
  }

  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

var SetCache = __webpack_require__(409),
    arraySome = __webpack_require__(412),
    cacheHas = __webpack_require__(413);
/** Used to compose bitmasks for value comparisons. */


var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;
/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */

function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  } // Assume cyclic values are equal.


  var stacked = stack.get(array);

  if (stacked && stack.get(other)) {
    return stacked == other;
  }

  var index = -1,
      result = true,
      seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
  stack.set(array, other);
  stack.set(other, array); // Ignore non-index properties.

  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
    }

    if (compared !== undefined) {
      if (compared) {
        continue;
      }

      result = false;
      break;
    } // Recursively compare arrays (susceptible to call stack limits).


    if (seen) {
      if (!arraySome(other, function (othValue, othIndex) {
        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          return seen.push(othIndex);
        }
      })) {
        result = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
      result = false;
      break;
    }
  }

  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(77);
/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */


function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;

/***/ }),
/* 261 */
/***/ (function(module, exports) {

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function (object) {
    if (object == null) {
      return false;
    }

    return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
  };
}

module.exports = matchesStrictComparable;

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__(230),
    toKey = __webpack_require__(121);
/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */


function baseGet(object, path) {
  path = castPath(path, object);
  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }

  return index && index == length ? object : undefined;
}

module.exports = baseGet;

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(27);

exports.__esModule = true;
exports.getIn = getIn;
exports.default = void 0;

var _propertyExpr = __webpack_require__(125);

var _has = _interopRequireDefault(__webpack_require__(74));

var trim = function trim(part) {
  return part.substr(0, part.length - 1).substr(1);
};

function getIn(schema, path, value, context) {
  var parent, lastPart, lastPartDebug; // if only one "value" arg then use it for both

  context = context || value;
  if (!path) return {
    parent: parent,
    parentPath: path,
    schema: schema.resolve({
      context: context,
      parent: parent,
      value: value
    })
  };
  (0, _propertyExpr.forEach)(path, function (_part, isBracket, isArray) {
    var part = isBracket ? trim(_part) : _part;

    if (isArray || (0, _has.default)(schema, '_subType')) {
      // we skipped an array: foo[].bar
      var idx = isArray ? parseInt(part, 10) : 0;
      schema = schema.resolve({
        context: context,
        parent: parent,
        value: value
      })._subType;

      if (value) {
        if (isArray && idx >= value.length) {
          throw new Error("Yup.reach cannot resolve an array item at index: " + _part + ", in the path: " + path + ". " + "because there is no value at that index. ");
        }

        value = value[idx];
      }
    }

    if (!isArray) {
      schema = schema.resolve({
        context: context,
        parent: parent,
        value: value
      });
      if (!(0, _has.default)(schema, 'fields') || !(0, _has.default)(schema.fields, part)) throw new Error("The schema does not contain the path: " + path + ". " + ("(failed at: " + lastPartDebug + " which is a type: \"" + schema._type + "\") "));
      schema = schema.fields[part];
      parent = value;
      value = value && value[part];
      lastPart = part;
      lastPartDebug = isBracket ? '[' + _part + ']' : '.' + _part;
    }
  });

  if (schema) {
    schema = schema.resolve({
      context: context,
      parent: parent,
      value: value
    });
  }

  return {
    schema: schema,
    parent: parent,
    parentPath: lastPart
  };
}

var reach = function reach(obj, path, value, context) {
  return getIn(obj, path, value, context).schema;
};

var _default = reach;
exports.default = _default;

/***/ }),
/* 264 */
/***/ (function(module, exports) {

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

          if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }

    newObj.default = obj;
    return newObj;
  }
}

module.exports = _interopRequireWildcard;

/***/ }),
/* 265 */
/***/ (function(module, exports) {

function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  strings.raw = raw;
  return strings;
}

module.exports = _taggedTemplateLiteralLoose;

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

var arrayReduce = __webpack_require__(432),
    deburr = __webpack_require__(433),
    words = __webpack_require__(436);
/** Used to compose unicode capture groups. */


var rsApos = "['\u2019]";
/** Used to match apostrophes. */

var reApos = RegExp(rsApos, 'g');
/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */

function createCompounder(callback) {
  return function (string) {
    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
  };
}

module.exports = createCompounder;

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = makePath;

function makePath(strings) {
  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    values[_key - 1] = arguments[_key];
  }

  var path = strings.reduce(function (str, next) {
    var value = values.shift();
    return str + (value == null ? '' : value) + next;
  });
  return path.replace(/^\./, '');
}

module.exports = exports["default"];

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _implementation = __webpack_require__(322);

var _implementation2 = _interopRequireDefault(_implementation);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

exports.default = _react2.default.createContext || _implementation2.default;
module.exports = exports['default'];

/***/ }),
/* 269 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

/* harmony default export */ __webpack_exports__["a"] = (stubFalse);

/***/ }),
/* 270 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(26);

/** Detect free variable `exports`. */

var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */

var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */

var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */

var Buffer = moduleExports ? _root_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;
/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */

function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }

  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
  buffer.copy(result);
  return result;
}

/* harmony default export */ __webpack_exports__["a"] = (cloneBuffer);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(116)(module)))

/***/ }),
/* 271 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return symbolObservablePonyfill; });
function symbolObservablePonyfill(root) {
  var result;
  var Symbol = root.Symbol;

  if (typeof Symbol === 'function') {
    if (Symbol.observable) {
      result = Symbol.observable;
    } else {
      result = Symbol('observable');
      Symbol.observable = result;
    }
  } else {
    result = '@@observable';
  }

  return result;
}
;

/***/ }),
/* 272 */,
/* 273 */,
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.12.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var h = __webpack_require__(187),
    n = "function" === typeof Symbol && Symbol.for,
    p = n ? Symbol.for("react.element") : 60103,
    q = n ? Symbol.for("react.portal") : 60106,
    r = n ? Symbol.for("react.fragment") : 60107,
    t = n ? Symbol.for("react.strict_mode") : 60108,
    u = n ? Symbol.for("react.profiler") : 60114,
    v = n ? Symbol.for("react.provider") : 60109,
    w = n ? Symbol.for("react.context") : 60110,
    x = n ? Symbol.for("react.forward_ref") : 60112,
    y = n ? Symbol.for("react.suspense") : 60113;

n && Symbol.for("react.suspense_list");
var z = n ? Symbol.for("react.memo") : 60115,
    aa = n ? Symbol.for("react.lazy") : 60116;
n && Symbol.for("react.fundamental");
n && Symbol.for("react.responder");
n && Symbol.for("react.scope");
var A = "function" === typeof Symbol && Symbol.iterator;

function B(a) {
  for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) {
    b += "&args[]=" + encodeURIComponent(arguments[c]);
  }

  return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}

var C = {
  isMounted: function isMounted() {
    return !1;
  },
  enqueueForceUpdate: function enqueueForceUpdate() {},
  enqueueReplaceState: function enqueueReplaceState() {},
  enqueueSetState: function enqueueSetState() {}
},
    D = {};

function E(a, b, c) {
  this.props = a;
  this.context = b;
  this.refs = D;
  this.updater = c || C;
}

E.prototype.isReactComponent = {};

E.prototype.setState = function (a, b) {
  if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error(B(85));
  this.updater.enqueueSetState(this, a, b, "setState");
};

E.prototype.forceUpdate = function (a) {
  this.updater.enqueueForceUpdate(this, a, "forceUpdate");
};

function F() {}

F.prototype = E.prototype;

function G(a, b, c) {
  this.props = a;
  this.context = b;
  this.refs = D;
  this.updater = c || C;
}

var H = G.prototype = new F();
H.constructor = G;
h(H, E.prototype);
H.isPureReactComponent = !0;
var I = {
  current: null
},
    J = {
  current: null
},
    K = Object.prototype.hasOwnProperty,
    L = {
  key: !0,
  ref: !0,
  __self: !0,
  __source: !0
};

function M(a, b, c) {
  var e,
      d = {},
      g = null,
      l = null;
  if (null != b) for (e in void 0 !== b.ref && (l = b.ref), void 0 !== b.key && (g = "" + b.key), b) {
    K.call(b, e) && !L.hasOwnProperty(e) && (d[e] = b[e]);
  }
  var f = arguments.length - 2;
  if (1 === f) d.children = c;else if (1 < f) {
    for (var k = Array(f), m = 0; m < f; m++) {
      k[m] = arguments[m + 2];
    }

    d.children = k;
  }
  if (a && a.defaultProps) for (e in f = a.defaultProps, f) {
    void 0 === d[e] && (d[e] = f[e]);
  }
  return {
    $$typeof: p,
    type: a,
    key: g,
    ref: l,
    props: d,
    _owner: J.current
  };
}

function ba(a, b) {
  return {
    $$typeof: p,
    type: a.type,
    key: b,
    ref: a.ref,
    props: a.props,
    _owner: a._owner
  };
}

function N(a) {
  return "object" === typeof a && null !== a && a.$$typeof === p;
}

function escape(a) {
  var b = {
    "=": "=0",
    ":": "=2"
  };
  return "$" + ("" + a).replace(/[=:]/g, function (a) {
    return b[a];
  });
}

var O = /\/+/g,
    P = [];

function Q(a, b, c, e) {
  if (P.length) {
    var d = P.pop();
    d.result = a;
    d.keyPrefix = b;
    d.func = c;
    d.context = e;
    d.count = 0;
    return d;
  }

  return {
    result: a,
    keyPrefix: b,
    func: c,
    context: e,
    count: 0
  };
}

function R(a) {
  a.result = null;
  a.keyPrefix = null;
  a.func = null;
  a.context = null;
  a.count = 0;
  10 > P.length && P.push(a);
}

function S(a, b, c, e) {
  var d = typeof a;
  if ("undefined" === d || "boolean" === d) a = null;
  var g = !1;
  if (null === a) g = !0;else switch (d) {
    case "string":
    case "number":
      g = !0;
      break;

    case "object":
      switch (a.$$typeof) {
        case p:
        case q:
          g = !0;
      }

  }
  if (g) return c(e, a, "" === b ? "." + T(a, 0) : b), 1;
  g = 0;
  b = "" === b ? "." : b + ":";
  if (Array.isArray(a)) for (var l = 0; l < a.length; l++) {
    d = a[l];
    var f = b + T(d, l);
    g += S(d, f, c, e);
  } else if (null === a || "object" !== typeof a ? f = null : (f = A && a[A] || a["@@iterator"], f = "function" === typeof f ? f : null), "function" === typeof f) for (a = f.call(a), l = 0; !(d = a.next()).done;) {
    d = d.value, f = b + T(d, l++), g += S(d, f, c, e);
  } else if ("object" === d) throw c = "" + a, Error(B(31, "[object Object]" === c ? "object with keys {" + Object.keys(a).join(", ") + "}" : c, ""));
  return g;
}

function U(a, b, c) {
  return null == a ? 0 : S(a, "", b, c);
}

function T(a, b) {
  return "object" === typeof a && null !== a && null != a.key ? escape(a.key) : b.toString(36);
}

function ca(a, b) {
  a.func.call(a.context, b, a.count++);
}

function da(a, b, c) {
  var e = a.result,
      d = a.keyPrefix;
  a = a.func.call(a.context, b, a.count++);
  Array.isArray(a) ? V(a, e, c, function (a) {
    return a;
  }) : null != a && (N(a) && (a = ba(a, d + (!a.key || b && b.key === a.key ? "" : ("" + a.key).replace(O, "$&/") + "/") + c)), e.push(a));
}

function V(a, b, c, e, d) {
  var g = "";
  null != c && (g = ("" + c).replace(O, "$&/") + "/");
  b = Q(b, g, e, d);
  U(a, da, b);
  R(b);
}

function W() {
  var a = I.current;
  if (null === a) throw Error(B(321));
  return a;
}

var X = {
  Children: {
    map: function map(a, b, c) {
      if (null == a) return a;
      var e = [];
      V(a, e, null, b, c);
      return e;
    },
    forEach: function forEach(a, b, c) {
      if (null == a) return a;
      b = Q(null, null, b, c);
      U(a, ca, b);
      R(b);
    },
    count: function count(a) {
      return U(a, function () {
        return null;
      }, null);
    },
    toArray: function toArray(a) {
      var b = [];
      V(a, b, null, function (a) {
        return a;
      });
      return b;
    },
    only: function only(a) {
      if (!N(a)) throw Error(B(143));
      return a;
    }
  },
  createRef: function createRef() {
    return {
      current: null
    };
  },
  Component: E,
  PureComponent: G,
  createContext: function createContext(a, b) {
    void 0 === b && (b = null);
    a = {
      $$typeof: w,
      _calculateChangedBits: b,
      _currentValue: a,
      _currentValue2: a,
      _threadCount: 0,
      Provider: null,
      Consumer: null
    };
    a.Provider = {
      $$typeof: v,
      _context: a
    };
    return a.Consumer = a;
  },
  forwardRef: function forwardRef(a) {
    return {
      $$typeof: x,
      render: a
    };
  },
  lazy: function lazy(a) {
    return {
      $$typeof: aa,
      _ctor: a,
      _status: -1,
      _result: null
    };
  },
  memo: function memo(a, b) {
    return {
      $$typeof: z,
      type: a,
      compare: void 0 === b ? null : b
    };
  },
  useCallback: function useCallback(a, b) {
    return W().useCallback(a, b);
  },
  useContext: function useContext(a, b) {
    return W().useContext(a, b);
  },
  useEffect: function useEffect(a, b) {
    return W().useEffect(a, b);
  },
  useImperativeHandle: function useImperativeHandle(a, b, c) {
    return W().useImperativeHandle(a, b, c);
  },
  useDebugValue: function useDebugValue() {},
  useLayoutEffect: function useLayoutEffect(a, b) {
    return W().useLayoutEffect(a, b);
  },
  useMemo: function useMemo(a, b) {
    return W().useMemo(a, b);
  },
  useReducer: function useReducer(a, b, c) {
    return W().useReducer(a, b, c);
  },
  useRef: function useRef(a) {
    return W().useRef(a);
  },
  useState: function useState(a) {
    return W().useState(a);
  },
  Fragment: r,
  Profiler: u,
  StrictMode: t,
  Suspense: y,
  createElement: M,
  cloneElement: function cloneElement(a, b, c) {
    if (null === a || void 0 === a) throw Error(B(267, a));
    var e = h({}, a.props),
        d = a.key,
        g = a.ref,
        l = a._owner;

    if (null != b) {
      void 0 !== b.ref && (g = b.ref, l = J.current);
      void 0 !== b.key && (d = "" + b.key);
      if (a.type && a.type.defaultProps) var f = a.type.defaultProps;

      for (k in b) {
        K.call(b, k) && !L.hasOwnProperty(k) && (e[k] = void 0 === b[k] && void 0 !== f ? f[k] : b[k]);
      }
    }

    var k = arguments.length - 2;
    if (1 === k) e.children = c;else if (1 < k) {
      f = Array(k);

      for (var m = 0; m < k; m++) {
        f[m] = arguments[m + 2];
      }

      e.children = f;
    }
    return {
      $$typeof: p,
      type: a.type,
      key: d,
      ref: g,
      props: e,
      _owner: l
    };
  },
  createFactory: function createFactory(a) {
    var b = M.bind(null, a);
    b.type = a;
    return b;
  },
  isValidElement: N,
  version: "16.12.0",
  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
    ReactCurrentDispatcher: I,
    ReactCurrentBatchConfig: {
      suspense: null
    },
    ReactCurrentOwner: J,
    IsSomeRendererActing: {
      current: !1
    },
    assign: h
  }
},
    Y = {
  default: X
},
    Z = Y && X || Y;
module.exports = Z.default || Z;

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.12.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/


var aa = __webpack_require__(0),
    n = __webpack_require__(187),
    q = __webpack_require__(276);

function u(a) {
  for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) {
    b += "&args[]=" + encodeURIComponent(arguments[c]);
  }

  return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}

if (!aa) throw Error(u(227));
var ba = null,
    ca = {};

function da() {
  if (ba) for (var a in ca) {
    var b = ca[a],
        c = ba.indexOf(a);
    if (!(-1 < c)) throw Error(u(96, a));

    if (!ea[c]) {
      if (!b.extractEvents) throw Error(u(97, a));
      ea[c] = b;
      c = b.eventTypes;

      for (var d in c) {
        var e = void 0;
        var f = c[d],
            g = b,
            h = d;
        if (fa.hasOwnProperty(h)) throw Error(u(99, h));
        fa[h] = f;
        var k = f.phasedRegistrationNames;

        if (k) {
          for (e in k) {
            k.hasOwnProperty(e) && ha(k[e], g, h);
          }

          e = !0;
        } else f.registrationName ? (ha(f.registrationName, g, h), e = !0) : e = !1;

        if (!e) throw Error(u(98, d, a));
      }
    }
  }
}

function ha(a, b, c) {
  if (ia[a]) throw Error(u(100, a));
  ia[a] = b;
  ja[a] = b.eventTypes[c].dependencies;
}

var ea = [],
    fa = {},
    ia = {},
    ja = {};

function ka(a, b, c, d, e, f, g, h, k) {
  var l = Array.prototype.slice.call(arguments, 3);

  try {
    b.apply(c, l);
  } catch (m) {
    this.onError(m);
  }
}

var la = !1,
    ma = null,
    na = !1,
    oa = null,
    pa = {
  onError: function onError(a) {
    la = !0;
    ma = a;
  }
};

function qa(a, b, c, d, e, f, g, h, k) {
  la = !1;
  ma = null;
  ka.apply(pa, arguments);
}

function ra(a, b, c, d, e, f, g, h, k) {
  qa.apply(this, arguments);

  if (la) {
    if (la) {
      var l = ma;
      la = !1;
      ma = null;
    } else throw Error(u(198));

    na || (na = !0, oa = l);
  }
}

var sa = null,
    ua = null,
    va = null;

function wa(a, b, c) {
  var d = a.type || "unknown-event";
  a.currentTarget = va(c);
  ra(d, b, void 0, a);
  a.currentTarget = null;
}

function xa(a, b) {
  if (null == b) throw Error(u(30));
  if (null == a) return b;

  if (Array.isArray(a)) {
    if (Array.isArray(b)) return a.push.apply(a, b), a;
    a.push(b);
    return a;
  }

  return Array.isArray(b) ? [a].concat(b) : [a, b];
}

function ya(a, b, c) {
  Array.isArray(a) ? a.forEach(b, c) : a && b.call(c, a);
}

var za = null;

function Aa(a) {
  if (a) {
    var b = a._dispatchListeners,
        c = a._dispatchInstances;
    if (Array.isArray(b)) for (var d = 0; d < b.length && !a.isPropagationStopped(); d++) {
      wa(a, b[d], c[d]);
    } else b && wa(a, b, c);
    a._dispatchListeners = null;
    a._dispatchInstances = null;
    a.isPersistent() || a.constructor.release(a);
  }
}

function Ba(a) {
  null !== a && (za = xa(za, a));
  a = za;
  za = null;

  if (a) {
    ya(a, Aa);
    if (za) throw Error(u(95));
    if (na) throw a = oa, na = !1, oa = null, a;
  }
}

var Ca = {
  injectEventPluginOrder: function injectEventPluginOrder(a) {
    if (ba) throw Error(u(101));
    ba = Array.prototype.slice.call(a);
    da();
  },
  injectEventPluginsByName: function injectEventPluginsByName(a) {
    var b = !1,
        c;

    for (c in a) {
      if (a.hasOwnProperty(c)) {
        var d = a[c];

        if (!ca.hasOwnProperty(c) || ca[c] !== d) {
          if (ca[c]) throw Error(u(102, c));
          ca[c] = d;
          b = !0;
        }
      }
    }

    b && da();
  }
};

function Da(a, b) {
  var c = a.stateNode;
  if (!c) return null;
  var d = sa(c);
  if (!d) return null;
  c = d[b];

  a: switch (b) {
    case "onClick":
    case "onClickCapture":
    case "onDoubleClick":
    case "onDoubleClickCapture":
    case "onMouseDown":
    case "onMouseDownCapture":
    case "onMouseMove":
    case "onMouseMoveCapture":
    case "onMouseUp":
    case "onMouseUpCapture":
      (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
      a = !d;
      break a;

    default:
      a = !1;
  }

  if (a) return null;
  if (c && "function" !== typeof c) throw Error(u(231, b, typeof c));
  return c;
}

var Ea = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
Ea.hasOwnProperty("ReactCurrentDispatcher") || (Ea.ReactCurrentDispatcher = {
  current: null
});
Ea.hasOwnProperty("ReactCurrentBatchConfig") || (Ea.ReactCurrentBatchConfig = {
  suspense: null
});
var Fa = /^(.*)[\\\/]/,
    w = "function" === typeof Symbol && Symbol.for,
    Ga = w ? Symbol.for("react.element") : 60103,
    Ha = w ? Symbol.for("react.portal") : 60106,
    Ia = w ? Symbol.for("react.fragment") : 60107,
    Ja = w ? Symbol.for("react.strict_mode") : 60108,
    Ka = w ? Symbol.for("react.profiler") : 60114,
    La = w ? Symbol.for("react.provider") : 60109,
    Ma = w ? Symbol.for("react.context") : 60110,
    Na = w ? Symbol.for("react.concurrent_mode") : 60111,
    Oa = w ? Symbol.for("react.forward_ref") : 60112,
    Pa = w ? Symbol.for("react.suspense") : 60113,
    Qa = w ? Symbol.for("react.suspense_list") : 60120,
    Ra = w ? Symbol.for("react.memo") : 60115,
    Sa = w ? Symbol.for("react.lazy") : 60116;
w && Symbol.for("react.fundamental");
w && Symbol.for("react.responder");
w && Symbol.for("react.scope");
var Ta = "function" === typeof Symbol && Symbol.iterator;

function Ua(a) {
  if (null === a || "object" !== typeof a) return null;
  a = Ta && a[Ta] || a["@@iterator"];
  return "function" === typeof a ? a : null;
}

function Va(a) {
  if (-1 === a._status) {
    a._status = 0;
    var b = a._ctor;
    b = b();
    a._result = b;
    b.then(function (b) {
      0 === a._status && (b = b.default, a._status = 1, a._result = b);
    }, function (b) {
      0 === a._status && (a._status = 2, a._result = b);
    });
  }
}

function Wa(a) {
  if (null == a) return null;
  if ("function" === typeof a) return a.displayName || a.name || null;
  if ("string" === typeof a) return a;

  switch (a) {
    case Ia:
      return "Fragment";

    case Ha:
      return "Portal";

    case Ka:
      return "Profiler";

    case Ja:
      return "StrictMode";

    case Pa:
      return "Suspense";

    case Qa:
      return "SuspenseList";
  }

  if ("object" === typeof a) switch (a.$$typeof) {
    case Ma:
      return "Context.Consumer";

    case La:
      return "Context.Provider";

    case Oa:
      var b = a.render;
      b = b.displayName || b.name || "";
      return a.displayName || ("" !== b ? "ForwardRef(" + b + ")" : "ForwardRef");

    case Ra:
      return Wa(a.type);

    case Sa:
      if (a = 1 === a._status ? a._result : null) return Wa(a);
  }
  return null;
}

function Xa(a) {
  var b = "";

  do {
    a: switch (a.tag) {
      case 3:
      case 4:
      case 6:
      case 7:
      case 10:
      case 9:
        var c = "";
        break a;

      default:
        var d = a._debugOwner,
            e = a._debugSource,
            f = Wa(a.type);
        c = null;
        d && (c = Wa(d.type));
        d = f;
        f = "";
        e ? f = " (at " + e.fileName.replace(Fa, "") + ":" + e.lineNumber + ")" : c && (f = " (created by " + c + ")");
        c = "\n    in " + (d || "Unknown") + f;
    }

    b += c;
    a = a.return;
  } while (a);

  return b;
}

var Ya = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement),
    Za = null,
    $a = null,
    ab = null;

function bb(a) {
  if (a = ua(a)) {
    if ("function" !== typeof Za) throw Error(u(280));
    var b = sa(a.stateNode);
    Za(a.stateNode, a.type, b);
  }
}

function cb(a) {
  $a ? ab ? ab.push(a) : ab = [a] : $a = a;
}

function db() {
  if ($a) {
    var a = $a,
        b = ab;
    ab = $a = null;
    bb(a);
    if (b) for (a = 0; a < b.length; a++) {
      bb(b[a]);
    }
  }
}

function eb(a, b) {
  return a(b);
}

function fb(a, b, c, d) {
  return a(b, c, d);
}

function gb() {}

var hb = eb,
    ib = !1,
    jb = !1;

function kb() {
  if (null !== $a || null !== ab) gb(), db();
}

new Map();
var lb = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,
    mb = Object.prototype.hasOwnProperty,
    nb = {},
    ob = {};

function pb(a) {
  if (mb.call(ob, a)) return !0;
  if (mb.call(nb, a)) return !1;
  if (lb.test(a)) return ob[a] = !0;
  nb[a] = !0;
  return !1;
}

function qb(a, b, c, d) {
  if (null !== c && 0 === c.type) return !1;

  switch (typeof b) {
    case "function":
    case "symbol":
      return !0;

    case "boolean":
      if (d) return !1;
      if (null !== c) return !c.acceptsBooleans;
      a = a.toLowerCase().slice(0, 5);
      return "data-" !== a && "aria-" !== a;

    default:
      return !1;
  }
}

function rb(a, b, c, d) {
  if (null === b || "undefined" === typeof b || qb(a, b, c, d)) return !0;
  if (d) return !1;
  if (null !== c) switch (c.type) {
    case 3:
      return !b;

    case 4:
      return !1 === b;

    case 5:
      return isNaN(b);

    case 6:
      return isNaN(b) || 1 > b;
  }
  return !1;
}

function B(a, b, c, d, e, f) {
  this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
  this.attributeName = d;
  this.attributeNamespace = e;
  this.mustUseProperty = c;
  this.propertyName = a;
  this.type = b;
  this.sanitizeURL = f;
}

var D = {};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function (a) {
  D[a] = new B(a, 0, !1, a, null, !1);
});
[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function (a) {
  var b = a[0];
  D[b] = new B(b, 1, !1, a[1], null, !1);
});
["contentEditable", "draggable", "spellCheck", "value"].forEach(function (a) {
  D[a] = new B(a, 2, !1, a.toLowerCase(), null, !1);
});
["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function (a) {
  D[a] = new B(a, 2, !1, a, null, !1);
});
"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function (a) {
  D[a] = new B(a, 3, !1, a.toLowerCase(), null, !1);
});
["checked", "multiple", "muted", "selected"].forEach(function (a) {
  D[a] = new B(a, 3, !0, a, null, !1);
});
["capture", "download"].forEach(function (a) {
  D[a] = new B(a, 4, !1, a, null, !1);
});
["cols", "rows", "size", "span"].forEach(function (a) {
  D[a] = new B(a, 6, !1, a, null, !1);
});
["rowSpan", "start"].forEach(function (a) {
  D[a] = new B(a, 5, !1, a.toLowerCase(), null, !1);
});
var sb = /[\-:]([a-z])/g;

function tb(a) {
  return a[1].toUpperCase();
}

"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function (a) {
  var b = a.replace(sb, tb);
  D[b] = new B(b, 1, !1, a, null, !1);
});
"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function (a) {
  var b = a.replace(sb, tb);
  D[b] = new B(b, 1, !1, a, "http://www.w3.org/1999/xlink", !1);
});
["xml:base", "xml:lang", "xml:space"].forEach(function (a) {
  var b = a.replace(sb, tb);
  D[b] = new B(b, 1, !1, a, "http://www.w3.org/XML/1998/namespace", !1);
});
["tabIndex", "crossOrigin"].forEach(function (a) {
  D[a] = new B(a, 1, !1, a.toLowerCase(), null, !1);
});
D.xlinkHref = new B("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0);
["src", "href", "action", "formAction"].forEach(function (a) {
  D[a] = new B(a, 1, !1, a.toLowerCase(), null, !0);
});

function ub(a) {
  switch (typeof a) {
    case "boolean":
    case "number":
    case "object":
    case "string":
    case "undefined":
      return a;

    default:
      return "";
  }
}

function vb(a, b, c, d) {
  var e = D.hasOwnProperty(b) ? D[b] : null;
  var f = null !== e ? 0 === e.type : d ? !1 : !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1] ? !1 : !0;
  f || (rb(b, c, e, d) && (c = null), d || null === e ? pb(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? !1 : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && !0 === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c))));
}

function wb(a) {
  var b = a.type;
  return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
}

function xb(a) {
  var b = wb(a) ? "checked" : "value",
      c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),
      d = "" + a[b];

  if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
    var e = c.get,
        f = c.set;
    Object.defineProperty(a, b, {
      configurable: !0,
      get: function get() {
        return e.call(this);
      },
      set: function set(a) {
        d = "" + a;
        f.call(this, a);
      }
    });
    Object.defineProperty(a, b, {
      enumerable: c.enumerable
    });
    return {
      getValue: function getValue() {
        return d;
      },
      setValue: function setValue(a) {
        d = "" + a;
      },
      stopTracking: function stopTracking() {
        a._valueTracker = null;
        delete a[b];
      }
    };
  }
}

function yb(a) {
  a._valueTracker || (a._valueTracker = xb(a));
}

function zb(a) {
  if (!a) return !1;
  var b = a._valueTracker;
  if (!b) return !0;
  var c = b.getValue();
  var d = "";
  a && (d = wb(a) ? a.checked ? "true" : "false" : a.value);
  a = d;
  return a !== c ? (b.setValue(a), !0) : !1;
}

function Ab(a, b) {
  var c = b.checked;
  return n({}, b, {
    defaultChecked: void 0,
    defaultValue: void 0,
    value: void 0,
    checked: null != c ? c : a._wrapperState.initialChecked
  });
}

function Bb(a, b) {
  var c = null == b.defaultValue ? "" : b.defaultValue,
      d = null != b.checked ? b.checked : b.defaultChecked;
  c = ub(null != b.value ? b.value : c);
  a._wrapperState = {
    initialChecked: d,
    initialValue: c,
    controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value
  };
}

function Cb(a, b) {
  b = b.checked;
  null != b && vb(a, "checked", b, !1);
}

function Eb(a, b) {
  Cb(a, b);
  var c = ub(b.value),
      d = b.type;
  if (null != c) {
    if ("number" === d) {
      if (0 === c && "" === a.value || a.value != c) a.value = "" + c;
    } else a.value !== "" + c && (a.value = "" + c);
  } else if ("submit" === d || "reset" === d) {
    a.removeAttribute("value");
    return;
  }
  b.hasOwnProperty("value") ? Fb(a, b.type, c) : b.hasOwnProperty("defaultValue") && Fb(a, b.type, ub(b.defaultValue));
  null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
}

function Gb(a, b, c) {
  if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
    var d = b.type;
    if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;
    b = "" + a._wrapperState.initialValue;
    c || b === a.value || (a.value = b);
    a.defaultValue = b;
  }

  c = a.name;
  "" !== c && (a.name = "");
  a.defaultChecked = !a.defaultChecked;
  a.defaultChecked = !!a._wrapperState.initialChecked;
  "" !== c && (a.name = c);
}

function Fb(a, b, c) {
  if ("number" !== b || a.ownerDocument.activeElement !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
}

function Hb(a) {
  var b = "";
  aa.Children.forEach(a, function (a) {
    null != a && (b += a);
  });
  return b;
}

function Ib(a, b) {
  a = n({
    children: void 0
  }, b);
  if (b = Hb(b.children)) a.children = b;
  return a;
}

function Jb(a, b, c, d) {
  a = a.options;

  if (b) {
    b = {};

    for (var e = 0; e < c.length; e++) {
      b["$" + c[e]] = !0;
    }

    for (c = 0; c < a.length; c++) {
      e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);
    }
  } else {
    c = "" + ub(c);
    b = null;

    for (e = 0; e < a.length; e++) {
      if (a[e].value === c) {
        a[e].selected = !0;
        d && (a[e].defaultSelected = !0);
        return;
      }

      null !== b || a[e].disabled || (b = a[e]);
    }

    null !== b && (b.selected = !0);
  }
}

function Kb(a, b) {
  if (null != b.dangerouslySetInnerHTML) throw Error(u(91));
  return n({}, b, {
    value: void 0,
    defaultValue: void 0,
    children: "" + a._wrapperState.initialValue
  });
}

function Lb(a, b) {
  var c = b.value;

  if (null == c) {
    c = b.defaultValue;
    b = b.children;

    if (null != b) {
      if (null != c) throw Error(u(92));

      if (Array.isArray(b)) {
        if (!(1 >= b.length)) throw Error(u(93));
        b = b[0];
      }

      c = b;
    }

    null == c && (c = "");
  }

  a._wrapperState = {
    initialValue: ub(c)
  };
}

function Mb(a, b) {
  var c = ub(b.value),
      d = ub(b.defaultValue);
  null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
  null != d && (a.defaultValue = "" + d);
}

function Nb(a) {
  var b = a.textContent;
  b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);
}

var Ob = {
  html: "http://www.w3.org/1999/xhtml",
  mathml: "http://www.w3.org/1998/Math/MathML",
  svg: "http://www.w3.org/2000/svg"
};

function Pb(a) {
  switch (a) {
    case "svg":
      return "http://www.w3.org/2000/svg";

    case "math":
      return "http://www.w3.org/1998/Math/MathML";

    default:
      return "http://www.w3.org/1999/xhtml";
  }
}

function Qb(a, b) {
  return null == a || "http://www.w3.org/1999/xhtml" === a ? Pb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
}

var Rb,
    Sb = function (a) {
  return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (b, c, d, e) {
    MSApp.execUnsafeLocalFunction(function () {
      return a(b, c, d, e);
    });
  } : a;
}(function (a, b) {
  if (a.namespaceURI !== Ob.svg || "innerHTML" in a) a.innerHTML = b;else {
    Rb = Rb || document.createElement("div");
    Rb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";

    for (b = Rb.firstChild; a.firstChild;) {
      a.removeChild(a.firstChild);
    }

    for (; b.firstChild;) {
      a.appendChild(b.firstChild);
    }
  }
});

function Tb(a, b) {
  if (b) {
    var c = a.firstChild;

    if (c && c === a.lastChild && 3 === c.nodeType) {
      c.nodeValue = b;
      return;
    }
  }

  a.textContent = b;
}

function Ub(a, b) {
  var c = {};
  c[a.toLowerCase()] = b.toLowerCase();
  c["Webkit" + a] = "webkit" + b;
  c["Moz" + a] = "moz" + b;
  return c;
}

var Vb = {
  animationend: Ub("Animation", "AnimationEnd"),
  animationiteration: Ub("Animation", "AnimationIteration"),
  animationstart: Ub("Animation", "AnimationStart"),
  transitionend: Ub("Transition", "TransitionEnd")
},
    Wb = {},
    Xb = {};
Ya && (Xb = document.createElement("div").style, "AnimationEvent" in window || (delete Vb.animationend.animation, delete Vb.animationiteration.animation, delete Vb.animationstart.animation), "TransitionEvent" in window || delete Vb.transitionend.transition);

function Yb(a) {
  if (Wb[a]) return Wb[a];
  if (!Vb[a]) return a;
  var b = Vb[a],
      c;

  for (c in b) {
    if (b.hasOwnProperty(c) && c in Xb) return Wb[a] = b[c];
  }

  return a;
}

var Zb = Yb("animationend"),
    $b = Yb("animationiteration"),
    ac = Yb("animationstart"),
    bc = Yb("transitionend"),
    cc = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");

function ec(a) {
  var b = a,
      c = a;
  if (a.alternate) for (; b.return;) {
    b = b.return;
  } else {
    a = b;

    do {
      b = a, 0 !== (b.effectTag & 1026) && (c = b.return), a = b.return;
    } while (a);
  }
  return 3 === b.tag ? c : null;
}

function fc(a) {
  if (13 === a.tag) {
    var b = a.memoizedState;
    null === b && (a = a.alternate, null !== a && (b = a.memoizedState));
    if (null !== b) return b.dehydrated;
  }

  return null;
}

function gc(a) {
  if (ec(a) !== a) throw Error(u(188));
}

function hc(a) {
  var b = a.alternate;

  if (!b) {
    b = ec(a);
    if (null === b) throw Error(u(188));
    return b !== a ? null : a;
  }

  for (var c = a, d = b;;) {
    var e = c.return;
    if (null === e) break;
    var f = e.alternate;

    if (null === f) {
      d = e.return;

      if (null !== d) {
        c = d;
        continue;
      }

      break;
    }

    if (e.child === f.child) {
      for (f = e.child; f;) {
        if (f === c) return gc(e), a;
        if (f === d) return gc(e), b;
        f = f.sibling;
      }

      throw Error(u(188));
    }

    if (c.return !== d.return) c = e, d = f;else {
      for (var g = !1, h = e.child; h;) {
        if (h === c) {
          g = !0;
          c = e;
          d = f;
          break;
        }

        if (h === d) {
          g = !0;
          d = e;
          c = f;
          break;
        }

        h = h.sibling;
      }

      if (!g) {
        for (h = f.child; h;) {
          if (h === c) {
            g = !0;
            c = f;
            d = e;
            break;
          }

          if (h === d) {
            g = !0;
            d = f;
            c = e;
            break;
          }

          h = h.sibling;
        }

        if (!g) throw Error(u(189));
      }
    }
    if (c.alternate !== d) throw Error(u(190));
  }

  if (3 !== c.tag) throw Error(u(188));
  return c.stateNode.current === c ? a : b;
}

function ic(a) {
  a = hc(a);
  if (!a) return null;

  for (var b = a;;) {
    if (5 === b.tag || 6 === b.tag) return b;
    if (b.child) b.child.return = b, b = b.child;else {
      if (b === a) break;

      for (; !b.sibling;) {
        if (!b.return || b.return === a) return null;
        b = b.return;
      }

      b.sibling.return = b.return;
      b = b.sibling;
    }
  }

  return null;
}

var jc,
    kc,
    lc,
    mc = !1,
    nc = [],
    oc = null,
    pc = null,
    qc = null,
    rc = new Map(),
    sc = new Map(),
    tc = [],
    uc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),
    vc = "focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");

function wc(a) {
  var b = xc(a);
  uc.forEach(function (c) {
    yc(c, a, b);
  });
  vc.forEach(function (c) {
    yc(c, a, b);
  });
}

function zc(a, b, c, d) {
  return {
    blockedOn: a,
    topLevelType: b,
    eventSystemFlags: c | 32,
    nativeEvent: d
  };
}

function Ac(a, b) {
  switch (a) {
    case "focus":
    case "blur":
      oc = null;
      break;

    case "dragenter":
    case "dragleave":
      pc = null;
      break;

    case "mouseover":
    case "mouseout":
      qc = null;
      break;

    case "pointerover":
    case "pointerout":
      rc.delete(b.pointerId);
      break;

    case "gotpointercapture":
    case "lostpointercapture":
      sc.delete(b.pointerId);
  }
}

function Bc(a, b, c, d, e) {
  if (null === a || a.nativeEvent !== e) return a = zc(b, c, d, e), null !== b && (b = Cc(b), null !== b && kc(b)), a;
  a.eventSystemFlags |= d;
  return a;
}

function Dc(a, b, c, d) {
  switch (b) {
    case "focus":
      return oc = Bc(oc, a, b, c, d), !0;

    case "dragenter":
      return pc = Bc(pc, a, b, c, d), !0;

    case "mouseover":
      return qc = Bc(qc, a, b, c, d), !0;

    case "pointerover":
      var e = d.pointerId;
      rc.set(e, Bc(rc.get(e) || null, a, b, c, d));
      return !0;

    case "gotpointercapture":
      return e = d.pointerId, sc.set(e, Bc(sc.get(e) || null, a, b, c, d)), !0;
  }

  return !1;
}

function Ec(a) {
  var b = Fc(a.target);

  if (null !== b) {
    var c = ec(b);
    if (null !== c) if (b = c.tag, 13 === b) {
      if (b = fc(c), null !== b) {
        a.blockedOn = b;
        q.unstable_runWithPriority(a.priority, function () {
          lc(c);
        });
        return;
      }
    } else if (3 === b && c.stateNode.hydrate) {
      a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
      return;
    }
  }

  a.blockedOn = null;
}

function Gc(a) {
  if (null !== a.blockedOn) return !1;
  var b = Hc(a.topLevelType, a.eventSystemFlags, a.nativeEvent);

  if (null !== b) {
    var c = Cc(b);
    null !== c && kc(c);
    a.blockedOn = b;
    return !1;
  }

  return !0;
}

function Ic(a, b, c) {
  Gc(a) && c.delete(b);
}

function Jc() {
  for (mc = !1; 0 < nc.length;) {
    var a = nc[0];

    if (null !== a.blockedOn) {
      a = Cc(a.blockedOn);
      null !== a && jc(a);
      break;
    }

    var b = Hc(a.topLevelType, a.eventSystemFlags, a.nativeEvent);
    null !== b ? a.blockedOn = b : nc.shift();
  }

  null !== oc && Gc(oc) && (oc = null);
  null !== pc && Gc(pc) && (pc = null);
  null !== qc && Gc(qc) && (qc = null);
  rc.forEach(Ic);
  sc.forEach(Ic);
}

function Kc(a, b) {
  a.blockedOn === b && (a.blockedOn = null, mc || (mc = !0, q.unstable_scheduleCallback(q.unstable_NormalPriority, Jc)));
}

function Lc(a) {
  function b(b) {
    return Kc(b, a);
  }

  if (0 < nc.length) {
    Kc(nc[0], a);

    for (var c = 1; c < nc.length; c++) {
      var d = nc[c];
      d.blockedOn === a && (d.blockedOn = null);
    }
  }

  null !== oc && Kc(oc, a);
  null !== pc && Kc(pc, a);
  null !== qc && Kc(qc, a);
  rc.forEach(b);
  sc.forEach(b);

  for (c = 0; c < tc.length; c++) {
    d = tc[c], d.blockedOn === a && (d.blockedOn = null);
  }

  for (; 0 < tc.length && (c = tc[0], null === c.blockedOn);) {
    Ec(c), null === c.blockedOn && tc.shift();
  }
}

function Mc(a) {
  a = a.target || a.srcElement || window;
  a.correspondingUseElement && (a = a.correspondingUseElement);
  return 3 === a.nodeType ? a.parentNode : a;
}

function Nc(a) {
  do {
    a = a.return;
  } while (a && 5 !== a.tag);

  return a ? a : null;
}

function Oc(a, b, c) {
  if (b = Da(a, c.dispatchConfig.phasedRegistrationNames[b])) c._dispatchListeners = xa(c._dispatchListeners, b), c._dispatchInstances = xa(c._dispatchInstances, a);
}

function Pc(a) {
  if (a && a.dispatchConfig.phasedRegistrationNames) {
    for (var b = a._targetInst, c = []; b;) {
      c.push(b), b = Nc(b);
    }

    for (b = c.length; 0 < b--;) {
      Oc(c[b], "captured", a);
    }

    for (b = 0; b < c.length; b++) {
      Oc(c[b], "bubbled", a);
    }
  }
}

function Qc(a, b, c) {
  a && c && c.dispatchConfig.registrationName && (b = Da(a, c.dispatchConfig.registrationName)) && (c._dispatchListeners = xa(c._dispatchListeners, b), c._dispatchInstances = xa(c._dispatchInstances, a));
}

function Rc(a) {
  a && a.dispatchConfig.registrationName && Qc(a._targetInst, null, a);
}

function Sc(a) {
  ya(a, Pc);
}

function Tc() {
  return !0;
}

function Uc() {
  return !1;
}

function E(a, b, c, d) {
  this.dispatchConfig = a;
  this._targetInst = b;
  this.nativeEvent = c;
  a = this.constructor.Interface;

  for (var e in a) {
    a.hasOwnProperty(e) && ((b = a[e]) ? this[e] = b(c) : "target" === e ? this.target = d : this[e] = c[e]);
  }

  this.isDefaultPrevented = (null != c.defaultPrevented ? c.defaultPrevented : !1 === c.returnValue) ? Tc : Uc;
  this.isPropagationStopped = Uc;
  return this;
}

n(E.prototype, {
  preventDefault: function preventDefault() {
    this.defaultPrevented = !0;
    var a = this.nativeEvent;
    a && (a.preventDefault ? a.preventDefault() : "unknown" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = Tc);
  },
  stopPropagation: function stopPropagation() {
    var a = this.nativeEvent;
    a && (a.stopPropagation ? a.stopPropagation() : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = Tc);
  },
  persist: function persist() {
    this.isPersistent = Tc;
  },
  isPersistent: Uc,
  destructor: function destructor() {
    var a = this.constructor.Interface,
        b;

    for (b in a) {
      this[b] = null;
    }

    this.nativeEvent = this._targetInst = this.dispatchConfig = null;
    this.isPropagationStopped = this.isDefaultPrevented = Uc;
    this._dispatchInstances = this._dispatchListeners = null;
  }
});
E.Interface = {
  type: null,
  target: null,
  currentTarget: function currentTarget() {
    return null;
  },
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function timeStamp(a) {
    return a.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

E.extend = function (a) {
  function b() {}

  function c() {
    return d.apply(this, arguments);
  }

  var d = this;
  b.prototype = d.prototype;
  var e = new b();
  n(e, c.prototype);
  c.prototype = e;
  c.prototype.constructor = c;
  c.Interface = n({}, d.Interface, a);
  c.extend = d.extend;
  Vc(c);
  return c;
};

Vc(E);

function Wc(a, b, c, d) {
  if (this.eventPool.length) {
    var e = this.eventPool.pop();
    this.call(e, a, b, c, d);
    return e;
  }

  return new this(a, b, c, d);
}

function Xc(a) {
  if (!(a instanceof this)) throw Error(u(279));
  a.destructor();
  10 > this.eventPool.length && this.eventPool.push(a);
}

function Vc(a) {
  a.eventPool = [];
  a.getPooled = Wc;
  a.release = Xc;
}

var Yc = E.extend({
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
}),
    Zc = E.extend({
  clipboardData: function clipboardData(a) {
    return "clipboardData" in a ? a.clipboardData : window.clipboardData;
  }
}),
    $c = E.extend({
  view: null,
  detail: null
}),
    ad = $c.extend({
  relatedTarget: null
});

function bd(a) {
  var b = a.keyCode;
  "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;
  10 === a && (a = 13);
  return 32 <= a || 13 === a ? a : 0;
}

var cd = {
  Esc: "Escape",
  Spacebar: " ",
  Left: "ArrowLeft",
  Up: "ArrowUp",
  Right: "ArrowRight",
  Down: "ArrowDown",
  Del: "Delete",
  Win: "OS",
  Menu: "ContextMenu",
  Apps: "ContextMenu",
  Scroll: "ScrollLock",
  MozPrintableKey: "Unidentified"
},
    dd = {
  8: "Backspace",
  9: "Tab",
  12: "Clear",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  19: "Pause",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  45: "Insert",
  46: "Delete",
  112: "F1",
  113: "F2",
  114: "F3",
  115: "F4",
  116: "F5",
  117: "F6",
  118: "F7",
  119: "F8",
  120: "F9",
  121: "F10",
  122: "F11",
  123: "F12",
  144: "NumLock",
  145: "ScrollLock",
  224: "Meta"
},
    ed = {
  Alt: "altKey",
  Control: "ctrlKey",
  Meta: "metaKey",
  Shift: "shiftKey"
};

function gd(a) {
  var b = this.nativeEvent;
  return b.getModifierState ? b.getModifierState(a) : (a = ed[a]) ? !!b[a] : !1;
}

function hd() {
  return gd;
}

var id = $c.extend({
  key: function key(a) {
    if (a.key) {
      var b = cd[a.key] || a.key;
      if ("Unidentified" !== b) return b;
    }

    return "keypress" === a.type ? (a = bd(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? dd[a.keyCode] || "Unidentified" : "";
  },
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: hd,
  charCode: function charCode(a) {
    return "keypress" === a.type ? bd(a) : 0;
  },
  keyCode: function keyCode(a) {
    return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
  },
  which: function which(a) {
    return "keypress" === a.type ? bd(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
  }
}),
    jd = 0,
    kd = 0,
    ld = !1,
    md = !1,
    nd = $c.extend({
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  pageX: null,
  pageY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: hd,
  button: null,
  buttons: null,
  relatedTarget: function relatedTarget(a) {
    return a.relatedTarget || (a.fromElement === a.srcElement ? a.toElement : a.fromElement);
  },
  movementX: function movementX(a) {
    if ("movementX" in a) return a.movementX;
    var b = jd;
    jd = a.screenX;
    return ld ? "mousemove" === a.type ? a.screenX - b : 0 : (ld = !0, 0);
  },
  movementY: function movementY(a) {
    if ("movementY" in a) return a.movementY;
    var b = kd;
    kd = a.screenY;
    return md ? "mousemove" === a.type ? a.screenY - b : 0 : (md = !0, 0);
  }
}),
    od = nd.extend({
  pointerId: null,
  width: null,
  height: null,
  pressure: null,
  tangentialPressure: null,
  tiltX: null,
  tiltY: null,
  twist: null,
  pointerType: null,
  isPrimary: null
}),
    pd = nd.extend({
  dataTransfer: null
}),
    qd = $c.extend({
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: hd
}),
    rd = E.extend({
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
}),
    sd = nd.extend({
  deltaX: function deltaX(a) {
    return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
  },
  deltaY: function deltaY(a) {
    return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
  },
  deltaZ: null,
  deltaMode: null
}),
    td = [["blur", "blur", 0], ["cancel", "cancel", 0], ["click", "click", 0], ["close", "close", 0], ["contextmenu", "contextMenu", 0], ["copy", "copy", 0], ["cut", "cut", 0], ["auxclick", "auxClick", 0], ["dblclick", "doubleClick", 0], ["dragend", "dragEnd", 0], ["dragstart", "dragStart", 0], ["drop", "drop", 0], ["focus", "focus", 0], ["input", "input", 0], ["invalid", "invalid", 0], ["keydown", "keyDown", 0], ["keypress", "keyPress", 0], ["keyup", "keyUp", 0], ["mousedown", "mouseDown", 0], ["mouseup", "mouseUp", 0], ["paste", "paste", 0], ["pause", "pause", 0], ["play", "play", 0], ["pointercancel", "pointerCancel", 0], ["pointerdown", "pointerDown", 0], ["pointerup", "pointerUp", 0], ["ratechange", "rateChange", 0], ["reset", "reset", 0], ["seeked", "seeked", 0], ["submit", "submit", 0], ["touchcancel", "touchCancel", 0], ["touchend", "touchEnd", 0], ["touchstart", "touchStart", 0], ["volumechange", "volumeChange", 0], ["drag", "drag", 1], ["dragenter", "dragEnter", 1], ["dragexit", "dragExit", 1], ["dragleave", "dragLeave", 1], ["dragover", "dragOver", 1], ["mousemove", "mouseMove", 1], ["mouseout", "mouseOut", 1], ["mouseover", "mouseOver", 1], ["pointermove", "pointerMove", 1], ["pointerout", "pointerOut", 1], ["pointerover", "pointerOver", 1], ["scroll", "scroll", 1], ["toggle", "toggle", 1], ["touchmove", "touchMove", 1], ["wheel", "wheel", 1], ["abort", "abort", 2], [Zb, "animationEnd", 2], [$b, "animationIteration", 2], [ac, "animationStart", 2], ["canplay", "canPlay", 2], ["canplaythrough", "canPlayThrough", 2], ["durationchange", "durationChange", 2], ["emptied", "emptied", 2], ["encrypted", "encrypted", 2], ["ended", "ended", 2], ["error", "error", 2], ["gotpointercapture", "gotPointerCapture", 2], ["load", "load", 2], ["loadeddata", "loadedData", 2], ["loadedmetadata", "loadedMetadata", 2], ["loadstart", "loadStart", 2], ["lostpointercapture", "lostPointerCapture", 2], ["playing", "playing", 2], ["progress", "progress", 2], ["seeking", "seeking", 2], ["stalled", "stalled", 2], ["suspend", "suspend", 2], ["timeupdate", "timeUpdate", 2], [bc, "transitionEnd", 2], ["waiting", "waiting", 2]],
    ud = {},
    vd = {},
    wd = 0;

for (; wd < td.length; wd++) {
  var yd = td[wd],
      zd = yd[0],
      Ad = yd[1],
      Bd = yd[2],
      Cd = "on" + (Ad[0].toUpperCase() + Ad.slice(1)),
      Dd = {
    phasedRegistrationNames: {
      bubbled: Cd,
      captured: Cd + "Capture"
    },
    dependencies: [zd],
    eventPriority: Bd
  };
  ud[Ad] = Dd;
  vd[zd] = Dd;
}

var Ed = {
  eventTypes: ud,
  getEventPriority: function getEventPriority(a) {
    a = vd[a];
    return void 0 !== a ? a.eventPriority : 2;
  },
  extractEvents: function extractEvents(a, b, c, d) {
    var e = vd[a];
    if (!e) return null;

    switch (a) {
      case "keypress":
        if (0 === bd(c)) return null;

      case "keydown":
      case "keyup":
        a = id;
        break;

      case "blur":
      case "focus":
        a = ad;
        break;

      case "click":
        if (2 === c.button) return null;

      case "auxclick":
      case "dblclick":
      case "mousedown":
      case "mousemove":
      case "mouseup":
      case "mouseout":
      case "mouseover":
      case "contextmenu":
        a = nd;
        break;

      case "drag":
      case "dragend":
      case "dragenter":
      case "dragexit":
      case "dragleave":
      case "dragover":
      case "dragstart":
      case "drop":
        a = pd;
        break;

      case "touchcancel":
      case "touchend":
      case "touchmove":
      case "touchstart":
        a = qd;
        break;

      case Zb:
      case $b:
      case ac:
        a = Yc;
        break;

      case bc:
        a = rd;
        break;

      case "scroll":
        a = $c;
        break;

      case "wheel":
        a = sd;
        break;

      case "copy":
      case "cut":
      case "paste":
        a = Zc;
        break;

      case "gotpointercapture":
      case "lostpointercapture":
      case "pointercancel":
      case "pointerdown":
      case "pointermove":
      case "pointerout":
      case "pointerover":
      case "pointerup":
        a = od;
        break;

      default:
        a = E;
    }

    b = a.getPooled(e, b, c, d);
    Sc(b);
    return b;
  }
},
    Fd = q.unstable_UserBlockingPriority,
    Gd = q.unstable_runWithPriority,
    Hd = Ed.getEventPriority,
    Id = 10,
    Jd = [];

function Kd(a) {
  var b = a.targetInst,
      c = b;

  do {
    if (!c) {
      a.ancestors.push(c);
      break;
    }

    var d = c;
    if (3 === d.tag) d = d.stateNode.containerInfo;else {
      for (; d.return;) {
        d = d.return;
      }

      d = 3 !== d.tag ? null : d.stateNode.containerInfo;
    }
    if (!d) break;
    b = c.tag;
    5 !== b && 6 !== b || a.ancestors.push(c);
    c = Fc(d);
  } while (c);

  for (c = 0; c < a.ancestors.length; c++) {
    b = a.ancestors[c];
    var e = Mc(a.nativeEvent);
    d = a.topLevelType;

    for (var f = a.nativeEvent, g = a.eventSystemFlags, h = null, k = 0; k < ea.length; k++) {
      var l = ea[k];
      l && (l = l.extractEvents(d, b, f, e, g)) && (h = xa(h, l));
    }

    Ba(h);
  }
}

var Ld = !0;

function F(a, b) {
  Md(b, a, !1);
}

function Md(a, b, c) {
  switch (Hd(b)) {
    case 0:
      var d = Nd.bind(null, b, 1);
      break;

    case 1:
      d = Od.bind(null, b, 1);
      break;

    default:
      d = Pd.bind(null, b, 1);
  }

  c ? a.addEventListener(b, d, !0) : a.addEventListener(b, d, !1);
}

function Nd(a, b, c) {
  ib || gb();
  var d = Pd,
      e = ib;
  ib = !0;

  try {
    fb(d, a, b, c);
  } finally {
    (ib = e) || kb();
  }
}

function Od(a, b, c) {
  Gd(Fd, Pd.bind(null, a, b, c));
}

function Qd(a, b, c, d) {
  if (Jd.length) {
    var e = Jd.pop();
    e.topLevelType = a;
    e.eventSystemFlags = b;
    e.nativeEvent = c;
    e.targetInst = d;
    a = e;
  } else a = {
    topLevelType: a,
    eventSystemFlags: b,
    nativeEvent: c,
    targetInst: d,
    ancestors: []
  };

  try {
    if (b = Kd, c = a, jb) b(c, void 0);else {
      jb = !0;

      try {
        hb(b, c, void 0);
      } finally {
        jb = !1, kb();
      }
    }
  } finally {
    a.topLevelType = null, a.nativeEvent = null, a.targetInst = null, a.ancestors.length = 0, Jd.length < Id && Jd.push(a);
  }
}

function Pd(a, b, c) {
  if (Ld) if (0 < nc.length && -1 < uc.indexOf(a)) a = zc(null, a, b, c), nc.push(a);else {
    var d = Hc(a, b, c);
    null === d ? Ac(a, c) : -1 < uc.indexOf(a) ? (a = zc(d, a, b, c), nc.push(a)) : Dc(d, a, b, c) || (Ac(a, c), Qd(a, b, c, null));
  }
}

function Hc(a, b, c) {
  var d = Mc(c);
  d = Fc(d);

  if (null !== d) {
    var e = ec(d);
    if (null === e) d = null;else {
      var f = e.tag;

      if (13 === f) {
        d = fc(e);
        if (null !== d) return d;
        d = null;
      } else if (3 === f) {
        if (e.stateNode.hydrate) return 3 === e.tag ? e.stateNode.containerInfo : null;
        d = null;
      } else e !== d && (d = null);
    }
  }

  Qd(a, b, c, d);
  return null;
}

function Rd(a) {
  if (!Ya) return !1;
  a = "on" + a;
  var b = a in document;
  b || (b = document.createElement("div"), b.setAttribute(a, "return;"), b = "function" === typeof b[a]);
  return b;
}

var Sd = new ("function" === typeof WeakMap ? WeakMap : Map)();

function xc(a) {
  var b = Sd.get(a);
  void 0 === b && (b = new Set(), Sd.set(a, b));
  return b;
}

function yc(a, b, c) {
  if (!c.has(a)) {
    switch (a) {
      case "scroll":
        Md(b, "scroll", !0);
        break;

      case "focus":
      case "blur":
        Md(b, "focus", !0);
        Md(b, "blur", !0);
        c.add("blur");
        c.add("focus");
        break;

      case "cancel":
      case "close":
        Rd(a) && Md(b, a, !0);
        break;

      case "invalid":
      case "submit":
      case "reset":
        break;

      default:
        -1 === cc.indexOf(a) && F(a, b);
    }

    c.add(a);
  }
}

var Td = {
  animationIterationCount: !0,
  borderImageOutset: !0,
  borderImageSlice: !0,
  borderImageWidth: !0,
  boxFlex: !0,
  boxFlexGroup: !0,
  boxOrdinalGroup: !0,
  columnCount: !0,
  columns: !0,
  flex: !0,
  flexGrow: !0,
  flexPositive: !0,
  flexShrink: !0,
  flexNegative: !0,
  flexOrder: !0,
  gridArea: !0,
  gridRow: !0,
  gridRowEnd: !0,
  gridRowSpan: !0,
  gridRowStart: !0,
  gridColumn: !0,
  gridColumnEnd: !0,
  gridColumnSpan: !0,
  gridColumnStart: !0,
  fontWeight: !0,
  lineClamp: !0,
  lineHeight: !0,
  opacity: !0,
  order: !0,
  orphans: !0,
  tabSize: !0,
  widows: !0,
  zIndex: !0,
  zoom: !0,
  fillOpacity: !0,
  floodOpacity: !0,
  stopOpacity: !0,
  strokeDasharray: !0,
  strokeDashoffset: !0,
  strokeMiterlimit: !0,
  strokeOpacity: !0,
  strokeWidth: !0
},
    Ud = ["Webkit", "ms", "Moz", "O"];
Object.keys(Td).forEach(function (a) {
  Ud.forEach(function (b) {
    b = b + a.charAt(0).toUpperCase() + a.substring(1);
    Td[b] = Td[a];
  });
});

function Vd(a, b, c) {
  return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || Td.hasOwnProperty(a) && Td[a] ? ("" + b).trim() : b + "px";
}

function Wd(a, b) {
  a = a.style;

  for (var c in b) {
    if (b.hasOwnProperty(c)) {
      var d = 0 === c.indexOf("--"),
          e = Vd(c, b[c], d);
      "float" === c && (c = "cssFloat");
      d ? a.setProperty(c, e) : a[c] = e;
    }
  }
}

var Xd = n({
  menuitem: !0
}, {
  area: !0,
  base: !0,
  br: !0,
  col: !0,
  embed: !0,
  hr: !0,
  img: !0,
  input: !0,
  keygen: !0,
  link: !0,
  meta: !0,
  param: !0,
  source: !0,
  track: !0,
  wbr: !0
});

function Yd(a, b) {
  if (b) {
    if (Xd[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(u(137, a, ""));

    if (null != b.dangerouslySetInnerHTML) {
      if (null != b.children) throw Error(u(60));
      if (!("object" === typeof b.dangerouslySetInnerHTML && "__html" in b.dangerouslySetInnerHTML)) throw Error(u(61));
    }

    if (null != b.style && "object" !== typeof b.style) throw Error(u(62, ""));
  }
}

function Zd(a, b) {
  if (-1 === a.indexOf("-")) return "string" === typeof b.is;

  switch (a) {
    case "annotation-xml":
    case "color-profile":
    case "font-face":
    case "font-face-src":
    case "font-face-uri":
    case "font-face-format":
    case "font-face-name":
    case "missing-glyph":
      return !1;

    default:
      return !0;
  }
}

function $d(a, b) {
  a = 9 === a.nodeType || 11 === a.nodeType ? a : a.ownerDocument;
  var c = xc(a);
  b = ja[b];

  for (var d = 0; d < b.length; d++) {
    yc(b[d], a, c);
  }
}

function ae() {}

function be(a) {
  a = a || ("undefined" !== typeof document ? document : void 0);
  if ("undefined" === typeof a) return null;

  try {
    return a.activeElement || a.body;
  } catch (b) {
    return a.body;
  }
}

function ce(a) {
  for (; a && a.firstChild;) {
    a = a.firstChild;
  }

  return a;
}

function de(a, b) {
  var c = ce(a);
  a = 0;

  for (var d; c;) {
    if (3 === c.nodeType) {
      d = a + c.textContent.length;
      if (a <= b && d >= b) return {
        node: c,
        offset: b - a
      };
      a = d;
    }

    a: {
      for (; c;) {
        if (c.nextSibling) {
          c = c.nextSibling;
          break a;
        }

        c = c.parentNode;
      }

      c = void 0;
    }

    c = ce(c);
  }
}

function ee(a, b) {
  return a && b ? a === b ? !0 : a && 3 === a.nodeType ? !1 : b && 3 === b.nodeType ? ee(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;
}

function fe() {
  for (var a = window, b = be(); b instanceof a.HTMLIFrameElement;) {
    try {
      var c = "string" === typeof b.contentWindow.location.href;
    } catch (d) {
      c = !1;
    }

    if (c) a = b.contentWindow;else break;
    b = be(a.document);
  }

  return b;
}

function ge(a) {
  var b = a && a.nodeName && a.nodeName.toLowerCase();
  return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);
}

var he = "$",
    ie = "/$",
    je = "$?",
    ke = "$!",
    le = null,
    me = null;

function ne(a, b) {
  switch (a) {
    case "button":
    case "input":
    case "select":
    case "textarea":
      return !!b.autoFocus;
  }

  return !1;
}

function oe(a, b) {
  return "textarea" === a || "option" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
}

var pe = "function" === typeof setTimeout ? setTimeout : void 0,
    qe = "function" === typeof clearTimeout ? clearTimeout : void 0;

function re(a) {
  for (; null != a; a = a.nextSibling) {
    var b = a.nodeType;
    if (1 === b || 3 === b) break;
  }

  return a;
}

function se(a) {
  a = a.previousSibling;

  for (var b = 0; a;) {
    if (8 === a.nodeType) {
      var c = a.data;

      if (c === he || c === ke || c === je) {
        if (0 === b) return a;
        b--;
      } else c === ie && b++;
    }

    a = a.previousSibling;
  }

  return null;
}

var te = Math.random().toString(36).slice(2),
    ue = "__reactInternalInstance$" + te,
    ve = "__reactEventHandlers$" + te,
    we = "__reactContainere$" + te;

function Fc(a) {
  var b = a[ue];
  if (b) return b;

  for (var c = a.parentNode; c;) {
    if (b = c[we] || c[ue]) {
      c = b.alternate;
      if (null !== b.child || null !== c && null !== c.child) for (a = se(a); null !== a;) {
        if (c = a[ue]) return c;
        a = se(a);
      }
      return b;
    }

    a = c;
    c = a.parentNode;
  }

  return null;
}

function Cc(a) {
  a = a[ue] || a[we];
  return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
}

function xe(a) {
  if (5 === a.tag || 6 === a.tag) return a.stateNode;
  throw Error(u(33));
}

function ye(a) {
  return a[ve] || null;
}

var ze = null,
    Ae = null,
    Be = null;

function Ce() {
  if (Be) return Be;
  var a,
      b = Ae,
      c = b.length,
      d,
      e = "value" in ze ? ze.value : ze.textContent,
      f = e.length;

  for (a = 0; a < c && b[a] === e[a]; a++) {
    ;
  }

  var g = c - a;

  for (d = 1; d <= g && b[c - d] === e[f - d]; d++) {
    ;
  }

  return Be = e.slice(a, 1 < d ? 1 - d : void 0);
}

var De = E.extend({
  data: null
}),
    Ee = E.extend({
  data: null
}),
    Fe = [9, 13, 27, 32],
    Ge = Ya && "CompositionEvent" in window,
    He = null;
Ya && "documentMode" in document && (He = document.documentMode);
var Ie = Ya && "TextEvent" in window && !He,
    Je = Ya && (!Ge || He && 8 < He && 11 >= He),
    Ke = String.fromCharCode(32),
    Le = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: "onBeforeInput",
      captured: "onBeforeInputCapture"
    },
    dependencies: ["compositionend", "keypress", "textInput", "paste"]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: "onCompositionEnd",
      captured: "onCompositionEndCapture"
    },
    dependencies: "blur compositionend keydown keypress keyup mousedown".split(" ")
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: "onCompositionStart",
      captured: "onCompositionStartCapture"
    },
    dependencies: "blur compositionstart keydown keypress keyup mousedown".split(" ")
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: "onCompositionUpdate",
      captured: "onCompositionUpdateCapture"
    },
    dependencies: "blur compositionupdate keydown keypress keyup mousedown".split(" ")
  }
},
    Me = !1;

function Ne(a, b) {
  switch (a) {
    case "keyup":
      return -1 !== Fe.indexOf(b.keyCode);

    case "keydown":
      return 229 !== b.keyCode;

    case "keypress":
    case "mousedown":
    case "blur":
      return !0;

    default:
      return !1;
  }
}

function Oe(a) {
  a = a.detail;
  return "object" === typeof a && "data" in a ? a.data : null;
}

var Pe = !1;

function Qe(a, b) {
  switch (a) {
    case "compositionend":
      return Oe(b);

    case "keypress":
      if (32 !== b.which) return null;
      Me = !0;
      return Ke;

    case "textInput":
      return a = b.data, a === Ke && Me ? null : a;

    default:
      return null;
  }
}

function Re(a, b) {
  if (Pe) return "compositionend" === a || !Ge && Ne(a, b) ? (a = Ce(), Be = Ae = ze = null, Pe = !1, a) : null;

  switch (a) {
    case "paste":
      return null;

    case "keypress":
      if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
        if (b.char && 1 < b.char.length) return b.char;
        if (b.which) return String.fromCharCode(b.which);
      }

      return null;

    case "compositionend":
      return Je && "ko" !== b.locale ? null : b.data;

    default:
      return null;
  }
}

var Se = {
  eventTypes: Le,
  extractEvents: function extractEvents(a, b, c, d) {
    var e;
    if (Ge) b: {
      switch (a) {
        case "compositionstart":
          var f = Le.compositionStart;
          break b;

        case "compositionend":
          f = Le.compositionEnd;
          break b;

        case "compositionupdate":
          f = Le.compositionUpdate;
          break b;
      }

      f = void 0;
    } else Pe ? Ne(a, c) && (f = Le.compositionEnd) : "keydown" === a && 229 === c.keyCode && (f = Le.compositionStart);
    f ? (Je && "ko" !== c.locale && (Pe || f !== Le.compositionStart ? f === Le.compositionEnd && Pe && (e = Ce()) : (ze = d, Ae = "value" in ze ? ze.value : ze.textContent, Pe = !0)), f = De.getPooled(f, b, c, d), e ? f.data = e : (e = Oe(c), null !== e && (f.data = e)), Sc(f), e = f) : e = null;
    (a = Ie ? Qe(a, c) : Re(a, c)) ? (b = Ee.getPooled(Le.beforeInput, b, c, d), b.data = a, Sc(b)) : b = null;
    return null === e ? b : null === b ? e : [e, b];
  }
},
    Te = {
  color: !0,
  date: !0,
  datetime: !0,
  "datetime-local": !0,
  email: !0,
  month: !0,
  number: !0,
  password: !0,
  range: !0,
  search: !0,
  tel: !0,
  text: !0,
  time: !0,
  url: !0,
  week: !0
};

function Ue(a) {
  var b = a && a.nodeName && a.nodeName.toLowerCase();
  return "input" === b ? !!Te[a.type] : "textarea" === b ? !0 : !1;
}

var Ve = {
  change: {
    phasedRegistrationNames: {
      bubbled: "onChange",
      captured: "onChangeCapture"
    },
    dependencies: "blur change click focus input keydown keyup selectionchange".split(" ")
  }
};

function We(a, b, c) {
  a = E.getPooled(Ve.change, a, b, c);
  a.type = "change";
  cb(c);
  Sc(a);
  return a;
}

var Xe = null,
    Ye = null;

function Ze(a) {
  Ba(a);
}

function $e(a) {
  var b = xe(a);
  if (zb(b)) return a;
}

function af(a, b) {
  if ("change" === a) return b;
}

var bf = !1;
Ya && (bf = Rd("input") && (!document.documentMode || 9 < document.documentMode));

function cf() {
  Xe && (Xe.detachEvent("onpropertychange", df), Ye = Xe = null);
}

function df(a) {
  if ("value" === a.propertyName && $e(Ye)) if (a = We(Ye, a, Mc(a)), ib) Ba(a);else {
    ib = !0;

    try {
      eb(Ze, a);
    } finally {
      ib = !1, kb();
    }
  }
}

function ef(a, b, c) {
  "focus" === a ? (cf(), Xe = b, Ye = c, Xe.attachEvent("onpropertychange", df)) : "blur" === a && cf();
}

function ff(a) {
  if ("selectionchange" === a || "keyup" === a || "keydown" === a) return $e(Ye);
}

function gf(a, b) {
  if ("click" === a) return $e(b);
}

function hf(a, b) {
  if ("input" === a || "change" === a) return $e(b);
}

var jf = {
  eventTypes: Ve,
  _isInputEventSupported: bf,
  extractEvents: function extractEvents(a, b, c, d) {
    var e = b ? xe(b) : window,
        f = e.nodeName && e.nodeName.toLowerCase();
    if ("select" === f || "input" === f && "file" === e.type) var g = af;else if (Ue(e)) {
      if (bf) g = hf;else {
        g = ff;
        var h = ef;
      }
    } else (f = e.nodeName) && "input" === f.toLowerCase() && ("checkbox" === e.type || "radio" === e.type) && (g = gf);
    if (g && (g = g(a, b))) return We(g, c, d);
    h && h(a, e, b);
    "blur" === a && (a = e._wrapperState) && a.controlled && "number" === e.type && Fb(e, "number", e.value);
  }
},
    kf = {
  mouseEnter: {
    registrationName: "onMouseEnter",
    dependencies: ["mouseout", "mouseover"]
  },
  mouseLeave: {
    registrationName: "onMouseLeave",
    dependencies: ["mouseout", "mouseover"]
  },
  pointerEnter: {
    registrationName: "onPointerEnter",
    dependencies: ["pointerout", "pointerover"]
  },
  pointerLeave: {
    registrationName: "onPointerLeave",
    dependencies: ["pointerout", "pointerover"]
  }
},
    lf,
    mf = {
  eventTypes: kf,
  extractEvents: function extractEvents(a, b, c, d, e) {
    var f = "mouseover" === a || "pointerover" === a,
        g = "mouseout" === a || "pointerout" === a;
    if (f && 0 === (e & 32) && (c.relatedTarget || c.fromElement) || !g && !f) return null;
    e = d.window === d ? d : (e = d.ownerDocument) ? e.defaultView || e.parentWindow : window;

    if (g) {
      if (g = b, b = (b = c.relatedTarget || c.toElement) ? Fc(b) : null, null !== b && (f = ec(b), b !== f || 5 !== b.tag && 6 !== b.tag)) b = null;
    } else g = null;

    if (g === b) return null;

    if ("mouseout" === a || "mouseover" === a) {
      var h = nd;
      var k = kf.mouseLeave;
      var l = kf.mouseEnter;
      var m = "mouse";
    } else if ("pointerout" === a || "pointerover" === a) h = od, k = kf.pointerLeave, l = kf.pointerEnter, m = "pointer";

    a = null == g ? e : xe(g);
    e = null == b ? e : xe(b);
    k = h.getPooled(k, g, c, d);
    k.type = m + "leave";
    k.target = a;
    k.relatedTarget = e;
    d = h.getPooled(l, b, c, d);
    d.type = m + "enter";
    d.target = e;
    d.relatedTarget = a;
    h = g;
    m = b;
    if (h && m) a: {
      l = h;
      a = m;
      g = 0;

      for (b = l; b; b = Nc(b)) {
        g++;
      }

      b = 0;

      for (e = a; e; e = Nc(e)) {
        b++;
      }

      for (; 0 < g - b;) {
        l = Nc(l), g--;
      }

      for (; 0 < b - g;) {
        a = Nc(a), b--;
      }

      for (; g--;) {
        if (l === a || l === a.alternate) break a;
        l = Nc(l);
        a = Nc(a);
      }

      l = null;
    } else l = null;
    a = l;

    for (l = []; h && h !== a;) {
      g = h.alternate;
      if (null !== g && g === a) break;
      l.push(h);
      h = Nc(h);
    }

    for (h = []; m && m !== a;) {
      g = m.alternate;
      if (null !== g && g === a) break;
      h.push(m);
      m = Nc(m);
    }

    for (m = 0; m < l.length; m++) {
      Qc(l[m], "bubbled", k);
    }

    for (m = h.length; 0 < m--;) {
      Qc(h[m], "captured", d);
    }

    if (c === lf) return lf = null, [k];
    lf = c;
    return [k, d];
  }
};

function nf(a, b) {
  return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
}

var of = "function" === typeof Object.is ? Object.is : nf,
    pf = Object.prototype.hasOwnProperty;

function qf(a, b) {
  if (of(a, b)) return !0;
  if ("object" !== typeof a || null === a || "object" !== typeof b || null === b) return !1;
  var c = Object.keys(a),
      d = Object.keys(b);
  if (c.length !== d.length) return !1;

  for (d = 0; d < c.length; d++) {
    if (!pf.call(b, c[d]) || !of(a[c[d]], b[c[d]])) return !1;
  }

  return !0;
}

var rf = Ya && "documentMode" in document && 11 >= document.documentMode,
    sf = {
  select: {
    phasedRegistrationNames: {
      bubbled: "onSelect",
      captured: "onSelectCapture"
    },
    dependencies: "blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")
  }
},
    tf = null,
    uf = null,
    vf = null,
    wf = !1;

function xf(a, b) {
  var c = b.window === b ? b.document : 9 === b.nodeType ? b : b.ownerDocument;
  if (wf || null == tf || tf !== be(c)) return null;
  c = tf;
  "selectionStart" in c && ge(c) ? c = {
    start: c.selectionStart,
    end: c.selectionEnd
  } : (c = (c.ownerDocument && c.ownerDocument.defaultView || window).getSelection(), c = {
    anchorNode: c.anchorNode,
    anchorOffset: c.anchorOffset,
    focusNode: c.focusNode,
    focusOffset: c.focusOffset
  });
  return vf && qf(vf, c) ? null : (vf = c, a = E.getPooled(sf.select, uf, a, b), a.type = "select", a.target = tf, Sc(a), a);
}

var yf = {
  eventTypes: sf,
  extractEvents: function extractEvents(a, b, c, d) {
    var e = d.window === d ? d.document : 9 === d.nodeType ? d : d.ownerDocument,
        f;

    if (!(f = !e)) {
      a: {
        e = xc(e);
        f = ja.onSelect;

        for (var g = 0; g < f.length; g++) {
          if (!e.has(f[g])) {
            e = !1;
            break a;
          }
        }

        e = !0;
      }

      f = !e;
    }

    if (f) return null;
    e = b ? xe(b) : window;

    switch (a) {
      case "focus":
        if (Ue(e) || "true" === e.contentEditable) tf = e, uf = b, vf = null;
        break;

      case "blur":
        vf = uf = tf = null;
        break;

      case "mousedown":
        wf = !0;
        break;

      case "contextmenu":
      case "mouseup":
      case "dragend":
        return wf = !1, xf(c, d);

      case "selectionchange":
        if (rf) break;

      case "keydown":
      case "keyup":
        return xf(c, d);
    }

    return null;
  }
};
Ca.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));
var zf = Cc;
sa = ye;
ua = zf;
va = xe;
Ca.injectEventPluginsByName({
  SimpleEventPlugin: Ed,
  EnterLeaveEventPlugin: mf,
  ChangeEventPlugin: jf,
  SelectEventPlugin: yf,
  BeforeInputEventPlugin: Se
});
new Set();
var Af = [],
    Bf = -1;

function G(a) {
  0 > Bf || (a.current = Af[Bf], Af[Bf] = null, Bf--);
}

function I(a, b) {
  Bf++;
  Af[Bf] = a.current;
  a.current = b;
}

var Cf = {},
    J = {
  current: Cf
},
    K = {
  current: !1
},
    Df = Cf;

function Ef(a, b) {
  var c = a.type.contextTypes;
  if (!c) return Cf;
  var d = a.stateNode;
  if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;
  var e = {},
      f;

  for (f in c) {
    e[f] = b[f];
  }

  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
  return e;
}

function L(a) {
  a = a.childContextTypes;
  return null !== a && void 0 !== a;
}

function Ff(a) {
  G(K, a);
  G(J, a);
}

function Gf(a) {
  G(K, a);
  G(J, a);
}

function Hf(a, b, c) {
  if (J.current !== Cf) throw Error(u(168));
  I(J, b, a);
  I(K, c, a);
}

function If(a, b, c) {
  var d = a.stateNode;
  a = b.childContextTypes;
  if ("function" !== typeof d.getChildContext) return c;
  d = d.getChildContext();

  for (var e in d) {
    if (!(e in a)) throw Error(u(108, Wa(b) || "Unknown", e));
  }

  return n({}, c, {}, d);
}

function Jf(a) {
  var b = a.stateNode;
  b = b && b.__reactInternalMemoizedMergedChildContext || Cf;
  Df = J.current;
  I(J, b, a);
  I(K, K.current, a);
  return !0;
}

function Kf(a, b, c) {
  var d = a.stateNode;
  if (!d) throw Error(u(169));
  c ? (b = If(a, b, Df), d.__reactInternalMemoizedMergedChildContext = b, G(K, a), G(J, a), I(J, b, a)) : G(K, a);
  I(K, c, a);
}

var Lf = q.unstable_runWithPriority,
    Mf = q.unstable_scheduleCallback,
    Nf = q.unstable_cancelCallback,
    Of = q.unstable_shouldYield,
    Pf = q.unstable_requestPaint,
    Qf = q.unstable_now,
    Rf = q.unstable_getCurrentPriorityLevel,
    Sf = q.unstable_ImmediatePriority,
    Tf = q.unstable_UserBlockingPriority,
    Uf = q.unstable_NormalPriority,
    Vf = q.unstable_LowPriority,
    Wf = q.unstable_IdlePriority,
    Xf = {},
    Yf = void 0 !== Pf ? Pf : function () {},
    Zf = null,
    $f = null,
    ag = !1,
    bg = Qf(),
    cg = 1E4 > bg ? Qf : function () {
  return Qf() - bg;
};

function dg() {
  switch (Rf()) {
    case Sf:
      return 99;

    case Tf:
      return 98;

    case Uf:
      return 97;

    case Vf:
      return 96;

    case Wf:
      return 95;

    default:
      throw Error(u(332));
  }
}

function eg(a) {
  switch (a) {
    case 99:
      return Sf;

    case 98:
      return Tf;

    case 97:
      return Uf;

    case 96:
      return Vf;

    case 95:
      return Wf;

    default:
      throw Error(u(332));
  }
}

function fg(a, b) {
  a = eg(a);
  return Lf(a, b);
}

function gg(a, b, c) {
  a = eg(a);
  return Mf(a, b, c);
}

function hg(a) {
  null === Zf ? (Zf = [a], $f = Mf(Sf, ig)) : Zf.push(a);
  return Xf;
}

function jg() {
  if (null !== $f) {
    var a = $f;
    $f = null;
    Nf(a);
  }

  ig();
}

function ig() {
  if (!ag && null !== Zf) {
    ag = !0;
    var a = 0;

    try {
      var b = Zf;
      fg(99, function () {
        for (; a < b.length; a++) {
          var c = b[a];

          do {
            c = c(!0);
          } while (null !== c);
        }
      });
      Zf = null;
    } catch (c) {
      throw null !== Zf && (Zf = Zf.slice(a + 1)), Mf(Sf, jg), c;
    } finally {
      ag = !1;
    }
  }
}

var kg = 3;

function lg(a, b, c) {
  c /= 10;
  return 1073741821 - (((1073741821 - a + b / 10) / c | 0) + 1) * c;
}

function mg(a, b) {
  if (a && a.defaultProps) {
    b = n({}, b);
    a = a.defaultProps;

    for (var c in a) {
      void 0 === b[c] && (b[c] = a[c]);
    }
  }

  return b;
}

var ng = {
  current: null
},
    og = null,
    pg = null,
    qg = null;

function rg() {
  qg = pg = og = null;
}

function sg(a, b) {
  var c = a.type._context;
  I(ng, c._currentValue, a);
  c._currentValue = b;
}

function tg(a) {
  var b = ng.current;
  G(ng, a);
  a.type._context._currentValue = b;
}

function ug(a, b) {
  for (; null !== a;) {
    var c = a.alternate;
    if (a.childExpirationTime < b) a.childExpirationTime = b, null !== c && c.childExpirationTime < b && (c.childExpirationTime = b);else if (null !== c && c.childExpirationTime < b) c.childExpirationTime = b;else break;
    a = a.return;
  }
}

function vg(a, b) {
  og = a;
  qg = pg = null;
  a = a.dependencies;
  null !== a && null !== a.firstContext && (a.expirationTime >= b && (wg = !0), a.firstContext = null);
}

function xg(a, b) {
  if (qg !== a && !1 !== b && 0 !== b) {
    if ("number" !== typeof b || 1073741823 === b) qg = a, b = 1073741823;
    b = {
      context: a,
      observedBits: b,
      next: null
    };

    if (null === pg) {
      if (null === og) throw Error(u(308));
      pg = b;
      og.dependencies = {
        expirationTime: 0,
        firstContext: b,
        responders: null
      };
    } else pg = pg.next = b;
  }

  return a._currentValue;
}

var yg = !1;

function zg(a) {
  return {
    baseState: a,
    firstUpdate: null,
    lastUpdate: null,
    firstCapturedUpdate: null,
    lastCapturedUpdate: null,
    firstEffect: null,
    lastEffect: null,
    firstCapturedEffect: null,
    lastCapturedEffect: null
  };
}

function Ag(a) {
  return {
    baseState: a.baseState,
    firstUpdate: a.firstUpdate,
    lastUpdate: a.lastUpdate,
    firstCapturedUpdate: null,
    lastCapturedUpdate: null,
    firstEffect: null,
    lastEffect: null,
    firstCapturedEffect: null,
    lastCapturedEffect: null
  };
}

function Bg(a, b) {
  return {
    expirationTime: a,
    suspenseConfig: b,
    tag: 0,
    payload: null,
    callback: null,
    next: null,
    nextEffect: null
  };
}

function Cg(a, b) {
  null === a.lastUpdate ? a.firstUpdate = a.lastUpdate = b : (a.lastUpdate.next = b, a.lastUpdate = b);
}

function Dg(a, b) {
  var c = a.alternate;

  if (null === c) {
    var d = a.updateQueue;
    var e = null;
    null === d && (d = a.updateQueue = zg(a.memoizedState));
  } else d = a.updateQueue, e = c.updateQueue, null === d ? null === e ? (d = a.updateQueue = zg(a.memoizedState), e = c.updateQueue = zg(c.memoizedState)) : d = a.updateQueue = Ag(e) : null === e && (e = c.updateQueue = Ag(d));

  null === e || d === e ? Cg(d, b) : null === d.lastUpdate || null === e.lastUpdate ? (Cg(d, b), Cg(e, b)) : (Cg(d, b), e.lastUpdate = b);
}

function Eg(a, b) {
  var c = a.updateQueue;
  c = null === c ? a.updateQueue = zg(a.memoizedState) : Fg(a, c);
  null === c.lastCapturedUpdate ? c.firstCapturedUpdate = c.lastCapturedUpdate = b : (c.lastCapturedUpdate.next = b, c.lastCapturedUpdate = b);
}

function Fg(a, b) {
  var c = a.alternate;
  null !== c && b === c.updateQueue && (b = a.updateQueue = Ag(b));
  return b;
}

function Gg(a, b, c, d, e, f) {
  switch (c.tag) {
    case 1:
      return a = c.payload, "function" === typeof a ? a.call(f, d, e) : a;

    case 3:
      a.effectTag = a.effectTag & -4097 | 64;

    case 0:
      a = c.payload;
      e = "function" === typeof a ? a.call(f, d, e) : a;
      if (null === e || void 0 === e) break;
      return n({}, d, e);

    case 2:
      yg = !0;
  }

  return d;
}

function Hg(a, b, c, d, e) {
  yg = !1;
  b = Fg(a, b);

  for (var f = b.baseState, g = null, h = 0, k = b.firstUpdate, l = f; null !== k;) {
    var m = k.expirationTime;
    m < e ? (null === g && (g = k, f = l), h < m && (h = m)) : (Ig(m, k.suspenseConfig), l = Gg(a, b, k, l, c, d), null !== k.callback && (a.effectTag |= 32, k.nextEffect = null, null === b.lastEffect ? b.firstEffect = b.lastEffect = k : (b.lastEffect.nextEffect = k, b.lastEffect = k)));
    k = k.next;
  }

  m = null;

  for (k = b.firstCapturedUpdate; null !== k;) {
    var C = k.expirationTime;
    C < e ? (null === m && (m = k, null === g && (f = l)), h < C && (h = C)) : (l = Gg(a, b, k, l, c, d), null !== k.callback && (a.effectTag |= 32, k.nextEffect = null, null === b.lastCapturedEffect ? b.firstCapturedEffect = b.lastCapturedEffect = k : (b.lastCapturedEffect.nextEffect = k, b.lastCapturedEffect = k)));
    k = k.next;
  }

  null === g && (b.lastUpdate = null);
  null === m ? b.lastCapturedUpdate = null : a.effectTag |= 32;
  null === g && null === m && (f = l);
  b.baseState = f;
  b.firstUpdate = g;
  b.firstCapturedUpdate = m;
  Jg(h);
  a.expirationTime = h;
  a.memoizedState = l;
}

function Kg(a, b, c) {
  null !== b.firstCapturedUpdate && (null !== b.lastUpdate && (b.lastUpdate.next = b.firstCapturedUpdate, b.lastUpdate = b.lastCapturedUpdate), b.firstCapturedUpdate = b.lastCapturedUpdate = null);
  Lg(b.firstEffect, c);
  b.firstEffect = b.lastEffect = null;
  Lg(b.firstCapturedEffect, c);
  b.firstCapturedEffect = b.lastCapturedEffect = null;
}

function Lg(a, b) {
  for (; null !== a;) {
    var c = a.callback;

    if (null !== c) {
      a.callback = null;
      var d = b;
      if ("function" !== typeof c) throw Error(u(191, c));
      c.call(d);
    }

    a = a.nextEffect;
  }
}

var Mg = Ea.ReactCurrentBatchConfig,
    Ng = new aa.Component().refs;

function Og(a, b, c, d) {
  b = a.memoizedState;
  c = c(d, b);
  c = null === c || void 0 === c ? b : n({}, b, c);
  a.memoizedState = c;
  d = a.updateQueue;
  null !== d && 0 === a.expirationTime && (d.baseState = c);
}

var Sg = {
  isMounted: function isMounted(a) {
    return (a = a._reactInternalFiber) ? ec(a) === a : !1;
  },
  enqueueSetState: function enqueueSetState(a, b, c) {
    a = a._reactInternalFiber;
    var d = Pg(),
        e = Mg.suspense;
    d = Qg(d, a, e);
    e = Bg(d, e);
    e.payload = b;
    void 0 !== c && null !== c && (e.callback = c);
    Dg(a, e);
    Rg(a, d);
  },
  enqueueReplaceState: function enqueueReplaceState(a, b, c) {
    a = a._reactInternalFiber;
    var d = Pg(),
        e = Mg.suspense;
    d = Qg(d, a, e);
    e = Bg(d, e);
    e.tag = 1;
    e.payload = b;
    void 0 !== c && null !== c && (e.callback = c);
    Dg(a, e);
    Rg(a, d);
  },
  enqueueForceUpdate: function enqueueForceUpdate(a, b) {
    a = a._reactInternalFiber;
    var c = Pg(),
        d = Mg.suspense;
    c = Qg(c, a, d);
    d = Bg(c, d);
    d.tag = 2;
    void 0 !== b && null !== b && (d.callback = b);
    Dg(a, d);
    Rg(a, c);
  }
};

function Tg(a, b, c, d, e, f, g) {
  a = a.stateNode;
  return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !qf(c, d) || !qf(e, f) : !0;
}

function Ug(a, b, c) {
  var d = !1,
      e = Cf;
  var f = b.contextType;
  "object" === typeof f && null !== f ? f = xg(f) : (e = L(b) ? Df : J.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Ef(a, e) : Cf);
  b = new b(c, f);
  a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
  b.updater = Sg;
  a.stateNode = b;
  b._reactInternalFiber = a;
  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);
  return b;
}

function Vg(a, b, c, d) {
  a = b.state;
  "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);
  "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);
  b.state !== a && Sg.enqueueReplaceState(b, b.state, null);
}

function Wg(a, b, c, d) {
  var e = a.stateNode;
  e.props = c;
  e.state = a.memoizedState;
  e.refs = Ng;
  var f = b.contextType;
  "object" === typeof f && null !== f ? e.context = xg(f) : (f = L(b) ? Df : J.current, e.context = Ef(a, f));
  f = a.updateQueue;
  null !== f && (Hg(a, f, c, e, d), e.state = a.memoizedState);
  f = b.getDerivedStateFromProps;
  "function" === typeof f && (Og(a, b, f, c), e.state = a.memoizedState);
  "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && Sg.enqueueReplaceState(e, e.state, null), f = a.updateQueue, null !== f && (Hg(a, f, c, e, d), e.state = a.memoizedState));
  "function" === typeof e.componentDidMount && (a.effectTag |= 4);
}

var Xg = Array.isArray;

function Yg(a, b, c) {
  a = c.ref;

  if (null !== a && "function" !== typeof a && "object" !== typeof a) {
    if (c._owner) {
      c = c._owner;

      if (c) {
        if (1 !== c.tag) throw Error(u(309));
        var d = c.stateNode;
      }

      if (!d) throw Error(u(147, a));
      var e = "" + a;
      if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === e) return b.ref;

      b = function b(a) {
        var b = d.refs;
        b === Ng && (b = d.refs = {});
        null === a ? delete b[e] : b[e] = a;
      };

      b._stringRef = e;
      return b;
    }

    if ("string" !== typeof a) throw Error(u(284));
    if (!c._owner) throw Error(u(290, a));
  }

  return a;
}

function Zg(a, b) {
  if ("textarea" !== a.type) throw Error(u(31, "[object Object]" === Object.prototype.toString.call(b) ? "object with keys {" + Object.keys(b).join(", ") + "}" : b, ""));
}

function $g(a) {
  function b(b, c) {
    if (a) {
      var d = b.lastEffect;
      null !== d ? (d.nextEffect = c, b.lastEffect = c) : b.firstEffect = b.lastEffect = c;
      c.nextEffect = null;
      c.effectTag = 8;
    }
  }

  function c(c, d) {
    if (!a) return null;

    for (; null !== d;) {
      b(c, d), d = d.sibling;
    }

    return null;
  }

  function d(a, b) {
    for (a = new Map(); null !== b;) {
      null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;
    }

    return a;
  }

  function e(a, b, c) {
    a = ah(a, b, c);
    a.index = 0;
    a.sibling = null;
    return a;
  }

  function f(b, c, d) {
    b.index = d;
    if (!a) return c;
    d = b.alternate;
    if (null !== d) return d = d.index, d < c ? (b.effectTag = 2, c) : d;
    b.effectTag = 2;
    return c;
  }

  function g(b) {
    a && null === b.alternate && (b.effectTag = 2);
    return b;
  }

  function h(a, b, c, d) {
    if (null === b || 6 !== b.tag) return b = bh(c, a.mode, d), b.return = a, b;
    b = e(b, c, d);
    b.return = a;
    return b;
  }

  function k(a, b, c, d) {
    if (null !== b && b.elementType === c.type) return d = e(b, c.props, d), d.ref = Yg(a, b, c), d.return = a, d;
    d = ch(c.type, c.key, c.props, null, a.mode, d);
    d.ref = Yg(a, b, c);
    d.return = a;
    return d;
  }

  function l(a, b, c, d) {
    if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return b = dh(c, a.mode, d), b.return = a, b;
    b = e(b, c.children || [], d);
    b.return = a;
    return b;
  }

  function m(a, b, c, d, f) {
    if (null === b || 7 !== b.tag) return b = eh(c, a.mode, d, f), b.return = a, b;
    b = e(b, c, d);
    b.return = a;
    return b;
  }

  function C(a, b, c) {
    if ("string" === typeof b || "number" === typeof b) return b = bh("" + b, a.mode, c), b.return = a, b;

    if ("object" === typeof b && null !== b) {
      switch (b.$$typeof) {
        case Ga:
          return c = ch(b.type, b.key, b.props, null, a.mode, c), c.ref = Yg(a, null, b), c.return = a, c;

        case Ha:
          return b = dh(b, a.mode, c), b.return = a, b;
      }

      if (Xg(b) || Ua(b)) return b = eh(b, a.mode, c, null), b.return = a, b;
      Zg(a, b);
    }

    return null;
  }

  function y(a, b, c, d) {
    var e = null !== b ? b.key : null;
    if ("string" === typeof c || "number" === typeof c) return null !== e ? null : h(a, b, "" + c, d);

    if ("object" === typeof c && null !== c) {
      switch (c.$$typeof) {
        case Ga:
          return c.key === e ? c.type === Ia ? m(a, b, c.props.children, d, e) : k(a, b, c, d) : null;

        case Ha:
          return c.key === e ? l(a, b, c, d) : null;
      }

      if (Xg(c) || Ua(c)) return null !== e ? null : m(a, b, c, d, null);
      Zg(a, c);
    }

    return null;
  }

  function H(a, b, c, d, e) {
    if ("string" === typeof d || "number" === typeof d) return a = a.get(c) || null, h(b, a, "" + d, e);

    if ("object" === typeof d && null !== d) {
      switch (d.$$typeof) {
        case Ga:
          return a = a.get(null === d.key ? c : d.key) || null, d.type === Ia ? m(b, a, d.props.children, e, d.key) : k(b, a, d, e);

        case Ha:
          return a = a.get(null === d.key ? c : d.key) || null, l(b, a, d, e);
      }

      if (Xg(d) || Ua(d)) return a = a.get(c) || null, m(b, a, d, e, null);
      Zg(b, d);
    }

    return null;
  }

  function z(e, g, h, k) {
    for (var l = null, m = null, r = g, x = g = 0, A = null; null !== r && x < h.length; x++) {
      r.index > x ? (A = r, r = null) : A = r.sibling;
      var p = y(e, r, h[x], k);

      if (null === p) {
        null === r && (r = A);
        break;
      }

      a && r && null === p.alternate && b(e, r);
      g = f(p, g, x);
      null === m ? l = p : m.sibling = p;
      m = p;
      r = A;
    }

    if (x === h.length) return c(e, r), l;

    if (null === r) {
      for (; x < h.length; x++) {
        r = C(e, h[x], k), null !== r && (g = f(r, g, x), null === m ? l = r : m.sibling = r, m = r);
      }

      return l;
    }

    for (r = d(e, r); x < h.length; x++) {
      A = H(r, e, x, h[x], k), null !== A && (a && null !== A.alternate && r.delete(null === A.key ? x : A.key), g = f(A, g, x), null === m ? l = A : m.sibling = A, m = A);
    }

    a && r.forEach(function (a) {
      return b(e, a);
    });
    return l;
  }

  function ta(e, g, h, k) {
    var l = Ua(h);
    if ("function" !== typeof l) throw Error(u(150));
    h = l.call(h);
    if (null == h) throw Error(u(151));

    for (var m = l = null, r = g, x = g = 0, A = null, p = h.next(); null !== r && !p.done; x++, p = h.next()) {
      r.index > x ? (A = r, r = null) : A = r.sibling;
      var z = y(e, r, p.value, k);

      if (null === z) {
        null === r && (r = A);
        break;
      }

      a && r && null === z.alternate && b(e, r);
      g = f(z, g, x);
      null === m ? l = z : m.sibling = z;
      m = z;
      r = A;
    }

    if (p.done) return c(e, r), l;

    if (null === r) {
      for (; !p.done; x++, p = h.next()) {
        p = C(e, p.value, k), null !== p && (g = f(p, g, x), null === m ? l = p : m.sibling = p, m = p);
      }

      return l;
    }

    for (r = d(e, r); !p.done; x++, p = h.next()) {
      p = H(r, e, x, p.value, k), null !== p && (a && null !== p.alternate && r.delete(null === p.key ? x : p.key), g = f(p, g, x), null === m ? l = p : m.sibling = p, m = p);
    }

    a && r.forEach(function (a) {
      return b(e, a);
    });
    return l;
  }

  return function (a, d, f, h) {
    var k = "object" === typeof f && null !== f && f.type === Ia && null === f.key;
    k && (f = f.props.children);
    var l = "object" === typeof f && null !== f;
    if (l) switch (f.$$typeof) {
      case Ga:
        a: {
          l = f.key;

          for (k = d; null !== k;) {
            if (k.key === l) {
              if (7 === k.tag ? f.type === Ia : k.elementType === f.type) {
                c(a, k.sibling);
                d = e(k, f.type === Ia ? f.props.children : f.props, h);
                d.ref = Yg(a, k, f);
                d.return = a;
                a = d;
                break a;
              } else {
                c(a, k);
                break;
              }
            } else b(a, k);
            k = k.sibling;
          }

          f.type === Ia ? (d = eh(f.props.children, a.mode, h, f.key), d.return = a, a = d) : (h = ch(f.type, f.key, f.props, null, a.mode, h), h.ref = Yg(a, d, f), h.return = a, a = h);
        }

        return g(a);

      case Ha:
        a: {
          for (k = f.key; null !== d;) {
            if (d.key === k) {
              if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {
                c(a, d.sibling);
                d = e(d, f.children || [], h);
                d.return = a;
                a = d;
                break a;
              } else {
                c(a, d);
                break;
              }
            } else b(a, d);
            d = d.sibling;
          }

          d = dh(f, a.mode, h);
          d.return = a;
          a = d;
        }

        return g(a);
    }
    if ("string" === typeof f || "number" === typeof f) return f = "" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f, h), d.return = a, a = d) : (c(a, d), d = bh(f, a.mode, h), d.return = a, a = d), g(a);
    if (Xg(f)) return z(a, d, f, h);
    if (Ua(f)) return ta(a, d, f, h);
    l && Zg(a, f);
    if ("undefined" === typeof f && !k) switch (a.tag) {
      case 1:
      case 0:
        throw a = a.type, Error(u(152, a.displayName || a.name || "Component"));
    }
    return c(a, d);
  };
}

var fh = $g(!0),
    gh = $g(!1),
    hh = {},
    ih = {
  current: hh
},
    jh = {
  current: hh
},
    kh = {
  current: hh
};

function lh(a) {
  if (a === hh) throw Error(u(174));
  return a;
}

function mh(a, b) {
  I(kh, b, a);
  I(jh, a, a);
  I(ih, hh, a);
  var c = b.nodeType;

  switch (c) {
    case 9:
    case 11:
      b = (b = b.documentElement) ? b.namespaceURI : Qb(null, "");
      break;

    default:
      c = 8 === c ? b.parentNode : b, b = c.namespaceURI || null, c = c.tagName, b = Qb(b, c);
  }

  G(ih, a);
  I(ih, b, a);
}

function nh(a) {
  G(ih, a);
  G(jh, a);
  G(kh, a);
}

function oh(a) {
  lh(kh.current);
  var b = lh(ih.current);
  var c = Qb(b, a.type);
  b !== c && (I(jh, a, a), I(ih, c, a));
}

function ph(a) {
  jh.current === a && (G(ih, a), G(jh, a));
}

var M = {
  current: 0
};

function qh(a) {
  for (var b = a; null !== b;) {
    if (13 === b.tag) {
      var c = b.memoizedState;
      if (null !== c && (c = c.dehydrated, null === c || c.data === je || c.data === ke)) return b;
    } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
      if (0 !== (b.effectTag & 64)) return b;
    } else if (null !== b.child) {
      b.child.return = b;
      b = b.child;
      continue;
    }

    if (b === a) break;

    for (; null === b.sibling;) {
      if (null === b.return || b.return === a) return null;
      b = b.return;
    }

    b.sibling.return = b.return;
    b = b.sibling;
  }

  return null;
}

function rh(a, b) {
  return {
    responder: a,
    props: b
  };
}

var sh = Ea.ReactCurrentDispatcher,
    N = Ea.ReactCurrentBatchConfig,
    th = 0,
    uh = null,
    O = null,
    vh = null,
    wh = null,
    P = null,
    xh = null,
    yh = 0,
    zh = null,
    Ah = 0,
    Bh = !1,
    Ch = null,
    Gh = 0;

function Q() {
  throw Error(u(321));
}

function Hh(a, b) {
  if (null === b) return !1;

  for (var c = 0; c < b.length && c < a.length; c++) {
    if (!of(a[c], b[c])) return !1;
  }

  return !0;
}

function Ih(a, b, c, d, e, f) {
  th = f;
  uh = b;
  vh = null !== a ? a.memoizedState : null;
  sh.current = null === vh ? Jh : Kh;
  b = c(d, e);

  if (Bh) {
    do {
      Bh = !1, Gh += 1, vh = null !== a ? a.memoizedState : null, xh = wh, zh = P = O = null, sh.current = Kh, b = c(d, e);
    } while (Bh);

    Ch = null;
    Gh = 0;
  }

  sh.current = Lh;
  a = uh;
  a.memoizedState = wh;
  a.expirationTime = yh;
  a.updateQueue = zh;
  a.effectTag |= Ah;
  a = null !== O && null !== O.next;
  th = 0;
  xh = P = wh = vh = O = uh = null;
  yh = 0;
  zh = null;
  Ah = 0;
  if (a) throw Error(u(300));
  return b;
}

function Mh() {
  sh.current = Lh;
  th = 0;
  xh = P = wh = vh = O = uh = null;
  yh = 0;
  zh = null;
  Ah = 0;
  Bh = !1;
  Ch = null;
  Gh = 0;
}

function Nh() {
  var a = {
    memoizedState: null,
    baseState: null,
    queue: null,
    baseUpdate: null,
    next: null
  };
  null === P ? wh = P = a : P = P.next = a;
  return P;
}

function Oh() {
  if (null !== xh) P = xh, xh = P.next, O = vh, vh = null !== O ? O.next : null;else {
    if (null === vh) throw Error(u(310));
    O = vh;
    var a = {
      memoizedState: O.memoizedState,
      baseState: O.baseState,
      queue: O.queue,
      baseUpdate: O.baseUpdate,
      next: null
    };
    P = null === P ? wh = a : P.next = a;
    vh = O.next;
  }
  return P;
}

function Ph(a, b) {
  return "function" === typeof b ? b(a) : b;
}

function Qh(a) {
  var b = Oh(),
      c = b.queue;
  if (null === c) throw Error(u(311));
  c.lastRenderedReducer = a;

  if (0 < Gh) {
    var d = c.dispatch;

    if (null !== Ch) {
      var e = Ch.get(c);

      if (void 0 !== e) {
        Ch.delete(c);
        var f = b.memoizedState;

        do {
          f = a(f, e.action), e = e.next;
        } while (null !== e);

        of(f, b.memoizedState) || (wg = !0);
        b.memoizedState = f;
        b.baseUpdate === c.last && (b.baseState = f);
        c.lastRenderedState = f;
        return [f, d];
      }
    }

    return [b.memoizedState, d];
  }

  d = c.last;
  var g = b.baseUpdate;
  f = b.baseState;
  null !== g ? (null !== d && (d.next = null), d = g.next) : d = null !== d ? d.next : null;

  if (null !== d) {
    var h = e = null,
        k = d,
        l = !1;

    do {
      var m = k.expirationTime;
      m < th ? (l || (l = !0, h = g, e = f), m > yh && (yh = m, Jg(yh))) : (Ig(m, k.suspenseConfig), f = k.eagerReducer === a ? k.eagerState : a(f, k.action));
      g = k;
      k = k.next;
    } while (null !== k && k !== d);

    l || (h = g, e = f);
    of(f, b.memoizedState) || (wg = !0);
    b.memoizedState = f;
    b.baseUpdate = h;
    b.baseState = e;
    c.lastRenderedState = f;
  }

  return [b.memoizedState, c.dispatch];
}

function Rh(a) {
  var b = Nh();
  "function" === typeof a && (a = a());
  b.memoizedState = b.baseState = a;
  a = b.queue = {
    last: null,
    dispatch: null,
    lastRenderedReducer: Ph,
    lastRenderedState: a
  };
  a = a.dispatch = Sh.bind(null, uh, a);
  return [b.memoizedState, a];
}

function Th(a) {
  return Qh(Ph, a);
}

function Uh(a, b, c, d) {
  a = {
    tag: a,
    create: b,
    destroy: c,
    deps: d,
    next: null
  };
  null === zh ? (zh = {
    lastEffect: null
  }, zh.lastEffect = a.next = a) : (b = zh.lastEffect, null === b ? zh.lastEffect = a.next = a : (c = b.next, b.next = a, a.next = c, zh.lastEffect = a));
  return a;
}

function Vh(a, b, c, d) {
  var e = Nh();
  Ah |= a;
  e.memoizedState = Uh(b, c, void 0, void 0 === d ? null : d);
}

function Wh(a, b, c, d) {
  var e = Oh();
  d = void 0 === d ? null : d;
  var f = void 0;

  if (null !== O) {
    var g = O.memoizedState;
    f = g.destroy;

    if (null !== d && Hh(d, g.deps)) {
      Uh(0, c, f, d);
      return;
    }
  }

  Ah |= a;
  e.memoizedState = Uh(b, c, f, d);
}

function Xh(a, b) {
  return Vh(516, 192, a, b);
}

function Yh(a, b) {
  return Wh(516, 192, a, b);
}

function Zh(a, b) {
  if ("function" === typeof b) return a = a(), b(a), function () {
    b(null);
  };
  if (null !== b && void 0 !== b) return a = a(), b.current = a, function () {
    b.current = null;
  };
}

function $h() {}

function ai(a, b) {
  Nh().memoizedState = [a, void 0 === b ? null : b];
  return a;
}

function bi(a, b) {
  var c = Oh();
  b = void 0 === b ? null : b;
  var d = c.memoizedState;
  if (null !== d && null !== b && Hh(b, d[1])) return d[0];
  c.memoizedState = [a, b];
  return a;
}

function Sh(a, b, c) {
  if (!(25 > Gh)) throw Error(u(301));
  var d = a.alternate;
  if (a === uh || null !== d && d === uh) {
    if (Bh = !0, a = {
      expirationTime: th,
      suspenseConfig: null,
      action: c,
      eagerReducer: null,
      eagerState: null,
      next: null
    }, null === Ch && (Ch = new Map()), c = Ch.get(b), void 0 === c) Ch.set(b, a);else {
      for (b = c; null !== b.next;) {
        b = b.next;
      }

      b.next = a;
    }
  } else {
    var e = Pg(),
        f = Mg.suspense;
    e = Qg(e, a, f);
    f = {
      expirationTime: e,
      suspenseConfig: f,
      action: c,
      eagerReducer: null,
      eagerState: null,
      next: null
    };
    var g = b.last;
    if (null === g) f.next = f;else {
      var h = g.next;
      null !== h && (f.next = h);
      g.next = f;
    }
    b.last = f;
    if (0 === a.expirationTime && (null === d || 0 === d.expirationTime) && (d = b.lastRenderedReducer, null !== d)) try {
      var k = b.lastRenderedState,
          l = d(k, c);
      f.eagerReducer = d;
      f.eagerState = l;
      if (of(l, k)) return;
    } catch (m) {} finally {}
    Rg(a, e);
  }
}

var Lh = {
  readContext: xg,
  useCallback: Q,
  useContext: Q,
  useEffect: Q,
  useImperativeHandle: Q,
  useLayoutEffect: Q,
  useMemo: Q,
  useReducer: Q,
  useRef: Q,
  useState: Q,
  useDebugValue: Q,
  useResponder: Q,
  useDeferredValue: Q,
  useTransition: Q
},
    Jh = {
  readContext: xg,
  useCallback: ai,
  useContext: xg,
  useEffect: Xh,
  useImperativeHandle: function useImperativeHandle(a, b, c) {
    c = null !== c && void 0 !== c ? c.concat([a]) : null;
    return Vh(4, 36, Zh.bind(null, b, a), c);
  },
  useLayoutEffect: function useLayoutEffect(a, b) {
    return Vh(4, 36, a, b);
  },
  useMemo: function useMemo(a, b) {
    var c = Nh();
    b = void 0 === b ? null : b;
    a = a();
    c.memoizedState = [a, b];
    return a;
  },
  useReducer: function useReducer(a, b, c) {
    var d = Nh();
    b = void 0 !== c ? c(b) : b;
    d.memoizedState = d.baseState = b;
    a = d.queue = {
      last: null,
      dispatch: null,
      lastRenderedReducer: a,
      lastRenderedState: b
    };
    a = a.dispatch = Sh.bind(null, uh, a);
    return [d.memoizedState, a];
  },
  useRef: function useRef(a) {
    var b = Nh();
    a = {
      current: a
    };
    return b.memoizedState = a;
  },
  useState: Rh,
  useDebugValue: $h,
  useResponder: rh,
  useDeferredValue: function useDeferredValue(a, b) {
    var c = Rh(a),
        d = c[0],
        e = c[1];
    Xh(function () {
      q.unstable_next(function () {
        var c = N.suspense;
        N.suspense = void 0 === b ? null : b;

        try {
          e(a);
        } finally {
          N.suspense = c;
        }
      });
    }, [a, b]);
    return d;
  },
  useTransition: function useTransition(a) {
    var b = Rh(!1),
        c = b[0],
        d = b[1];
    return [ai(function (b) {
      d(!0);
      q.unstable_next(function () {
        var c = N.suspense;
        N.suspense = void 0 === a ? null : a;

        try {
          d(!1), b();
        } finally {
          N.suspense = c;
        }
      });
    }, [a, c]), c];
  }
},
    Kh = {
  readContext: xg,
  useCallback: bi,
  useContext: xg,
  useEffect: Yh,
  useImperativeHandle: function useImperativeHandle(a, b, c) {
    c = null !== c && void 0 !== c ? c.concat([a]) : null;
    return Wh(4, 36, Zh.bind(null, b, a), c);
  },
  useLayoutEffect: function useLayoutEffect(a, b) {
    return Wh(4, 36, a, b);
  },
  useMemo: function useMemo(a, b) {
    var c = Oh();
    b = void 0 === b ? null : b;
    var d = c.memoizedState;
    if (null !== d && null !== b && Hh(b, d[1])) return d[0];
    a = a();
    c.memoizedState = [a, b];
    return a;
  },
  useReducer: Qh,
  useRef: function useRef() {
    return Oh().memoizedState;
  },
  useState: Th,
  useDebugValue: $h,
  useResponder: rh,
  useDeferredValue: function useDeferredValue(a, b) {
    var c = Th(a),
        d = c[0],
        e = c[1];
    Yh(function () {
      q.unstable_next(function () {
        var c = N.suspense;
        N.suspense = void 0 === b ? null : b;

        try {
          e(a);
        } finally {
          N.suspense = c;
        }
      });
    }, [a, b]);
    return d;
  },
  useTransition: function useTransition(a) {
    var b = Th(!1),
        c = b[0],
        d = b[1];
    return [bi(function (b) {
      d(!0);
      q.unstable_next(function () {
        var c = N.suspense;
        N.suspense = void 0 === a ? null : a;

        try {
          d(!1), b();
        } finally {
          N.suspense = c;
        }
      });
    }, [a, c]), c];
  }
},
    ci = null,
    di = null,
    ei = !1;

function fi(a, b) {
  var c = gi(5, null, null, 0);
  c.elementType = "DELETED";
  c.type = "DELETED";
  c.stateNode = b;
  c.return = a;
  c.effectTag = 8;
  null !== a.lastEffect ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c;
}

function hi(a, b) {
  switch (a.tag) {
    case 5:
      var c = a.type;
      b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;
      return null !== b ? (a.stateNode = b, !0) : !1;

    case 6:
      return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, !0) : !1;

    case 13:
      return !1;

    default:
      return !1;
  }
}

function ii(a) {
  if (ei) {
    var b = di;

    if (b) {
      var c = b;

      if (!hi(a, b)) {
        b = re(c.nextSibling);

        if (!b || !hi(a, b)) {
          a.effectTag = a.effectTag & -1025 | 2;
          ei = !1;
          ci = a;
          return;
        }

        fi(ci, c);
      }

      ci = a;
      di = re(b.firstChild);
    } else a.effectTag = a.effectTag & -1025 | 2, ei = !1, ci = a;
  }
}

function ji(a) {
  for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag;) {
    a = a.return;
  }

  ci = a;
}

function ki(a) {
  if (a !== ci) return !1;
  if (!ei) return ji(a), ei = !0, !1;
  var b = a.type;
  if (5 !== a.tag || "head" !== b && "body" !== b && !oe(b, a.memoizedProps)) for (b = di; b;) {
    fi(a, b), b = re(b.nextSibling);
  }
  ji(a);

  if (13 === a.tag) {
    a = a.memoizedState;
    a = null !== a ? a.dehydrated : null;
    if (!a) throw Error(u(317));

    a: {
      a = a.nextSibling;

      for (b = 0; a;) {
        if (8 === a.nodeType) {
          var c = a.data;

          if (c === ie) {
            if (0 === b) {
              di = re(a.nextSibling);
              break a;
            }

            b--;
          } else c !== he && c !== ke && c !== je || b++;
        }

        a = a.nextSibling;
      }

      di = null;
    }
  } else di = ci ? re(a.stateNode.nextSibling) : null;

  return !0;
}

function li() {
  di = ci = null;
  ei = !1;
}

var mi = Ea.ReactCurrentOwner,
    wg = !1;

function R(a, b, c, d) {
  b.child = null === a ? gh(b, null, c, d) : fh(b, a.child, c, d);
}

function ni(a, b, c, d, e) {
  c = c.render;
  var f = b.ref;
  vg(b, e);
  d = Ih(a, b, c, d, f, e);
  if (null !== a && !wg) return b.updateQueue = a.updateQueue, b.effectTag &= -517, a.expirationTime <= e && (a.expirationTime = 0), oi(a, b, e);
  b.effectTag |= 1;
  R(a, b, d, e);
  return b.child;
}

function pi(a, b, c, d, e, f) {
  if (null === a) {
    var g = c.type;
    if ("function" === typeof g && !qi(g) && void 0 === g.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = g, ri(a, b, g, d, e, f);
    a = ch(c.type, null, d, null, b.mode, f);
    a.ref = b.ref;
    a.return = b;
    return b.child = a;
  }

  g = a.child;
  if (e < f && (e = g.memoizedProps, c = c.compare, c = null !== c ? c : qf, c(e, d) && a.ref === b.ref)) return oi(a, b, f);
  b.effectTag |= 1;
  a = ah(g, d, f);
  a.ref = b.ref;
  a.return = b;
  return b.child = a;
}

function ri(a, b, c, d, e, f) {
  return null !== a && qf(a.memoizedProps, d) && a.ref === b.ref && (wg = !1, e < f) ? oi(a, b, f) : si(a, b, c, d, f);
}

function ti(a, b) {
  var c = b.ref;
  if (null === a && null !== c || null !== a && a.ref !== c) b.effectTag |= 128;
}

function si(a, b, c, d, e) {
  var f = L(c) ? Df : J.current;
  f = Ef(b, f);
  vg(b, e);
  c = Ih(a, b, c, d, f, e);
  if (null !== a && !wg) return b.updateQueue = a.updateQueue, b.effectTag &= -517, a.expirationTime <= e && (a.expirationTime = 0), oi(a, b, e);
  b.effectTag |= 1;
  R(a, b, c, e);
  return b.child;
}

function ui(a, b, c, d, e) {
  if (L(c)) {
    var f = !0;
    Jf(b);
  } else f = !1;

  vg(b, e);
  if (null === b.stateNode) null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2), Ug(b, c, d, e), Wg(b, c, d, e), d = !0;else if (null === a) {
    var g = b.stateNode,
        h = b.memoizedProps;
    g.props = h;
    var k = g.context,
        l = c.contextType;
    "object" === typeof l && null !== l ? l = xg(l) : (l = L(c) ? Df : J.current, l = Ef(b, l));
    var m = c.getDerivedStateFromProps,
        C = "function" === typeof m || "function" === typeof g.getSnapshotBeforeUpdate;
    C || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && Vg(b, g, d, l);
    yg = !1;
    var y = b.memoizedState;
    k = g.state = y;
    var H = b.updateQueue;
    null !== H && (Hg(b, H, d, g, e), k = b.memoizedState);
    h !== d || y !== k || K.current || yg ? ("function" === typeof m && (Og(b, c, m, d), k = b.memoizedState), (h = yg || Tg(b, c, h, d, y, k, l)) ? (C || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.effectTag |= 4)) : ("function" === typeof g.componentDidMount && (b.effectTag |= 4), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.effectTag |= 4), d = !1);
  } else g = b.stateNode, h = b.memoizedProps, g.props = b.type === b.elementType ? h : mg(b.type, h), k = g.context, l = c.contextType, "object" === typeof l && null !== l ? l = xg(l) : (l = L(c) ? Df : J.current, l = Ef(b, l)), m = c.getDerivedStateFromProps, (C = "function" === typeof m || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && Vg(b, g, d, l), yg = !1, k = b.memoizedState, y = g.state = k, H = b.updateQueue, null !== H && (Hg(b, H, d, g, e), y = b.memoizedState), h !== d || k !== y || K.current || yg ? ("function" === typeof m && (Og(b, c, m, d), y = b.memoizedState), (m = yg || Tg(b, c, h, d, k, y, l)) ? (C || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, y, l), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, y, l)), "function" === typeof g.componentDidUpdate && (b.effectTag |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.effectTag |= 256)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && k === a.memoizedState || (b.effectTag |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && k === a.memoizedState || (b.effectTag |= 256), b.memoizedProps = d, b.memoizedState = y), g.props = d, g.state = y, g.context = l, d = m) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && k === a.memoizedState || (b.effectTag |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && k === a.memoizedState || (b.effectTag |= 256), d = !1);
  return vi(a, b, c, d, f, e);
}

function vi(a, b, c, d, e, f) {
  ti(a, b);
  var g = 0 !== (b.effectTag & 64);
  if (!d && !g) return e && Kf(b, c, !1), oi(a, b, f);
  d = b.stateNode;
  mi.current = b;
  var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
  b.effectTag |= 1;
  null !== a && g ? (b.child = fh(b, a.child, null, f), b.child = fh(b, null, h, f)) : R(a, b, h, f);
  b.memoizedState = d.state;
  e && Kf(b, c, !0);
  return b.child;
}

function wi(a) {
  var b = a.stateNode;
  b.pendingContext ? Hf(a, b.pendingContext, b.pendingContext !== b.context) : b.context && Hf(a, b.context, !1);
  mh(a, b.containerInfo);
}

var xi = {
  dehydrated: null,
  retryTime: 0
};

function yi(a, b, c) {
  var d = b.mode,
      e = b.pendingProps,
      f = M.current,
      g = !1,
      h;
  (h = 0 !== (b.effectTag & 64)) || (h = 0 !== (f & 2) && (null === a || null !== a.memoizedState));
  h ? (g = !0, b.effectTag &= -65) : null !== a && null === a.memoizedState || void 0 === e.fallback || !0 === e.unstable_avoidThisFallback || (f |= 1);
  I(M, f & 1, b);

  if (null === a) {
    void 0 !== e.fallback && ii(b);

    if (g) {
      g = e.fallback;
      e = eh(null, d, 0, null);
      e.return = b;
      if (0 === (b.mode & 2)) for (a = null !== b.memoizedState ? b.child.child : b.child, e.child = a; null !== a;) {
        a.return = e, a = a.sibling;
      }
      c = eh(g, d, c, null);
      c.return = b;
      e.sibling = c;
      b.memoizedState = xi;
      b.child = e;
      return c;
    }

    d = e.children;
    b.memoizedState = null;
    return b.child = gh(b, null, d, c);
  }

  if (null !== a.memoizedState) {
    a = a.child;
    d = a.sibling;

    if (g) {
      e = e.fallback;
      c = ah(a, a.pendingProps, 0);
      c.return = b;
      if (0 === (b.mode & 2) && (g = null !== b.memoizedState ? b.child.child : b.child, g !== a.child)) for (c.child = g; null !== g;) {
        g.return = c, g = g.sibling;
      }
      d = ah(d, e, d.expirationTime);
      d.return = b;
      c.sibling = d;
      c.childExpirationTime = 0;
      b.memoizedState = xi;
      b.child = c;
      return d;
    }

    c = fh(b, a.child, e.children, c);
    b.memoizedState = null;
    return b.child = c;
  }

  a = a.child;

  if (g) {
    g = e.fallback;
    e = eh(null, d, 0, null);
    e.return = b;
    e.child = a;
    null !== a && (a.return = e);
    if (0 === (b.mode & 2)) for (a = null !== b.memoizedState ? b.child.child : b.child, e.child = a; null !== a;) {
      a.return = e, a = a.sibling;
    }
    c = eh(g, d, c, null);
    c.return = b;
    e.sibling = c;
    c.effectTag |= 2;
    e.childExpirationTime = 0;
    b.memoizedState = xi;
    b.child = e;
    return c;
  }

  b.memoizedState = null;
  return b.child = fh(b, a, e.children, c);
}

function zi(a, b) {
  a.expirationTime < b && (a.expirationTime = b);
  var c = a.alternate;
  null !== c && c.expirationTime < b && (c.expirationTime = b);
  ug(a.return, b);
}

function Ai(a, b, c, d, e, f) {
  var g = a.memoizedState;
  null === g ? a.memoizedState = {
    isBackwards: b,
    rendering: null,
    last: d,
    tail: c,
    tailExpiration: 0,
    tailMode: e,
    lastEffect: f
  } : (g.isBackwards = b, g.rendering = null, g.last = d, g.tail = c, g.tailExpiration = 0, g.tailMode = e, g.lastEffect = f);
}

function Bi(a, b, c) {
  var d = b.pendingProps,
      e = d.revealOrder,
      f = d.tail;
  R(a, b, d.children, c);
  d = M.current;
  if (0 !== (d & 2)) d = d & 1 | 2, b.effectTag |= 64;else {
    if (null !== a && 0 !== (a.effectTag & 64)) a: for (a = b.child; null !== a;) {
      if (13 === a.tag) null !== a.memoizedState && zi(a, c);else if (19 === a.tag) zi(a, c);else if (null !== a.child) {
        a.child.return = a;
        a = a.child;
        continue;
      }
      if (a === b) break a;

      for (; null === a.sibling;) {
        if (null === a.return || a.return === b) break a;
        a = a.return;
      }

      a.sibling.return = a.return;
      a = a.sibling;
    }
    d &= 1;
  }
  I(M, d, b);
  if (0 === (b.mode & 2)) b.memoizedState = null;else switch (e) {
    case "forwards":
      c = b.child;

      for (e = null; null !== c;) {
        a = c.alternate, null !== a && null === qh(a) && (e = c), c = c.sibling;
      }

      c = e;
      null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
      Ai(b, !1, e, c, f, b.lastEffect);
      break;

    case "backwards":
      c = null;
      e = b.child;

      for (b.child = null; null !== e;) {
        a = e.alternate;

        if (null !== a && null === qh(a)) {
          b.child = e;
          break;
        }

        a = e.sibling;
        e.sibling = c;
        c = e;
        e = a;
      }

      Ai(b, !0, c, null, f, b.lastEffect);
      break;

    case "together":
      Ai(b, !1, null, null, void 0, b.lastEffect);
      break;

    default:
      b.memoizedState = null;
  }
  return b.child;
}

function oi(a, b, c) {
  null !== a && (b.dependencies = a.dependencies);
  var d = b.expirationTime;
  0 !== d && Jg(d);
  if (b.childExpirationTime < c) return null;
  if (null !== a && b.child !== a.child) throw Error(u(153));

  if (null !== b.child) {
    a = b.child;
    c = ah(a, a.pendingProps, a.expirationTime);
    b.child = c;

    for (c.return = b; null !== a.sibling;) {
      a = a.sibling, c = c.sibling = ah(a, a.pendingProps, a.expirationTime), c.return = b;
    }

    c.sibling = null;
  }

  return b.child;
}

function Ci(a) {
  a.effectTag |= 4;
}

var Hi, Ii, Ji, Ki;

Hi = function Hi(a, b) {
  for (var c = b.child; null !== c;) {
    if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);else if (4 !== c.tag && null !== c.child) {
      c.child.return = c;
      c = c.child;
      continue;
    }
    if (c === b) break;

    for (; null === c.sibling;) {
      if (null === c.return || c.return === b) return;
      c = c.return;
    }

    c.sibling.return = c.return;
    c = c.sibling;
  }
};

Ii = function Ii() {};

Ji = function Ji(a, b, c, d, e) {
  var f = a.memoizedProps;

  if (f !== d) {
    var g = b.stateNode;
    lh(ih.current);
    a = null;

    switch (c) {
      case "input":
        f = Ab(g, f);
        d = Ab(g, d);
        a = [];
        break;

      case "option":
        f = Ib(g, f);
        d = Ib(g, d);
        a = [];
        break;

      case "select":
        f = n({}, f, {
          value: void 0
        });
        d = n({}, d, {
          value: void 0
        });
        a = [];
        break;

      case "textarea":
        f = Kb(g, f);
        d = Kb(g, d);
        a = [];
        break;

      default:
        "function" !== typeof f.onClick && "function" === typeof d.onClick && (g.onclick = ae);
    }

    Yd(c, d);
    var h, k;
    c = null;

    for (h in f) {
      if (!d.hasOwnProperty(h) && f.hasOwnProperty(h) && null != f[h]) if ("style" === h) for (k in g = f[h], g) {
        g.hasOwnProperty(k) && (c || (c = {}), c[k] = "");
      } else "dangerouslySetInnerHTML" !== h && "children" !== h && "suppressContentEditableWarning" !== h && "suppressHydrationWarning" !== h && "autoFocus" !== h && (ia.hasOwnProperty(h) ? a || (a = []) : (a = a || []).push(h, null));
    }

    for (h in d) {
      var l = d[h];
      g = null != f ? f[h] : void 0;
      if (d.hasOwnProperty(h) && l !== g && (null != l || null != g)) if ("style" === h) {
        if (g) {
          for (k in g) {
            !g.hasOwnProperty(k) || l && l.hasOwnProperty(k) || (c || (c = {}), c[k] = "");
          }

          for (k in l) {
            l.hasOwnProperty(k) && g[k] !== l[k] && (c || (c = {}), c[k] = l[k]);
          }
        } else c || (a || (a = []), a.push(h, c)), c = l;
      } else "dangerouslySetInnerHTML" === h ? (l = l ? l.__html : void 0, g = g ? g.__html : void 0, null != l && g !== l && (a = a || []).push(h, "" + l)) : "children" === h ? g === l || "string" !== typeof l && "number" !== typeof l || (a = a || []).push(h, "" + l) : "suppressContentEditableWarning" !== h && "suppressHydrationWarning" !== h && (ia.hasOwnProperty(h) ? (null != l && $d(e, h), a || g === l || (a = [])) : (a = a || []).push(h, l));
    }

    c && (a = a || []).push("style", c);
    e = a;
    (b.updateQueue = e) && Ci(b);
  }
};

Ki = function Ki(a, b, c, d) {
  c !== d && Ci(b);
};

function Li(a, b) {
  switch (a.tailMode) {
    case "hidden":
      b = a.tail;

      for (var c = null; null !== b;) {
        null !== b.alternate && (c = b), b = b.sibling;
      }

      null === c ? a.tail = null : c.sibling = null;
      break;

    case "collapsed":
      c = a.tail;

      for (var d = null; null !== c;) {
        null !== c.alternate && (d = c), c = c.sibling;
      }

      null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;
  }
}

function Mi(a) {
  switch (a.tag) {
    case 1:
      L(a.type) && Ff(a);
      var b = a.effectTag;
      return b & 4096 ? (a.effectTag = b & -4097 | 64, a) : null;

    case 3:
      nh(a);
      Gf(a);
      b = a.effectTag;
      if (0 !== (b & 64)) throw Error(u(285));
      a.effectTag = b & -4097 | 64;
      return a;

    case 5:
      return ph(a), null;

    case 13:
      return G(M, a), b = a.effectTag, b & 4096 ? (a.effectTag = b & -4097 | 64, a) : null;

    case 19:
      return G(M, a), null;

    case 4:
      return nh(a), null;

    case 10:
      return tg(a), null;

    default:
      return null;
  }
}

function Ni(a, b) {
  return {
    value: a,
    source: b,
    stack: Xa(b)
  };
}

var Oi = "function" === typeof WeakSet ? WeakSet : Set;

function Pi(a, b) {
  var c = b.source,
      d = b.stack;
  null === d && null !== c && (d = Xa(c));
  null !== c && Wa(c.type);
  b = b.value;
  null !== a && 1 === a.tag && Wa(a.type);

  try {
    console.error(b);
  } catch (e) {
    setTimeout(function () {
      throw e;
    });
  }
}

function Qi(a, b) {
  try {
    b.props = a.memoizedProps, b.state = a.memoizedState, b.componentWillUnmount();
  } catch (c) {
    Ri(a, c);
  }
}

function Si(a) {
  var b = a.ref;
  if (null !== b) if ("function" === typeof b) try {
    b(null);
  } catch (c) {
    Ri(a, c);
  } else b.current = null;
}

function Ti(a, b) {
  switch (b.tag) {
    case 0:
    case 11:
    case 15:
      Ui(2, 0, b);
      break;

    case 1:
      if (b.effectTag & 256 && null !== a) {
        var c = a.memoizedProps,
            d = a.memoizedState;
        a = b.stateNode;
        b = a.getSnapshotBeforeUpdate(b.elementType === b.type ? c : mg(b.type, c), d);
        a.__reactInternalSnapshotBeforeUpdate = b;
      }

      break;

    case 3:
    case 5:
    case 6:
    case 4:
    case 17:
      break;

    default:
      throw Error(u(163));
  }
}

function Ui(a, b, c) {
  c = c.updateQueue;
  c = null !== c ? c.lastEffect : null;

  if (null !== c) {
    var d = c = c.next;

    do {
      if (0 !== (d.tag & a)) {
        var e = d.destroy;
        d.destroy = void 0;
        void 0 !== e && e();
      }

      0 !== (d.tag & b) && (e = d.create, d.destroy = e());
      d = d.next;
    } while (d !== c);
  }
}

function Vi(a, b, c) {
  "function" === typeof Wi && Wi(b);

  switch (b.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
      a = b.updateQueue;

      if (null !== a && (a = a.lastEffect, null !== a)) {
        var d = a.next;
        fg(97 < c ? 97 : c, function () {
          var a = d;

          do {
            var c = a.destroy;

            if (void 0 !== c) {
              var g = b;

              try {
                c();
              } catch (h) {
                Ri(g, h);
              }
            }

            a = a.next;
          } while (a !== d);
        });
      }

      break;

    case 1:
      Si(b);
      c = b.stateNode;
      "function" === typeof c.componentWillUnmount && Qi(b, c);
      break;

    case 5:
      Si(b);
      break;

    case 4:
      Xi(a, b, c);
  }
}

function Yi(a) {
  var b = a.alternate;
  a.return = null;
  a.child = null;
  a.memoizedState = null;
  a.updateQueue = null;
  a.dependencies = null;
  a.alternate = null;
  a.firstEffect = null;
  a.lastEffect = null;
  a.pendingProps = null;
  a.memoizedProps = null;
  null !== b && Yi(b);
}

function Zi(a) {
  return 5 === a.tag || 3 === a.tag || 4 === a.tag;
}

function $i(a) {
  a: {
    for (var b = a.return; null !== b;) {
      if (Zi(b)) {
        var c = b;
        break a;
      }

      b = b.return;
    }

    throw Error(u(160));
  }

  b = c.stateNode;

  switch (c.tag) {
    case 5:
      var d = !1;
      break;

    case 3:
      b = b.containerInfo;
      d = !0;
      break;

    case 4:
      b = b.containerInfo;
      d = !0;
      break;

    default:
      throw Error(u(161));
  }

  c.effectTag & 16 && (Tb(b, ""), c.effectTag &= -17);

  a: b: for (c = a;;) {
    for (; null === c.sibling;) {
      if (null === c.return || Zi(c.return)) {
        c = null;
        break a;
      }

      c = c.return;
    }

    c.sibling.return = c.return;

    for (c = c.sibling; 5 !== c.tag && 6 !== c.tag && 18 !== c.tag;) {
      if (c.effectTag & 2) continue b;
      if (null === c.child || 4 === c.tag) continue b;else c.child.return = c, c = c.child;
    }

    if (!(c.effectTag & 2)) {
      c = c.stateNode;
      break a;
    }
  }

  for (var e = a;;) {
    var f = 5 === e.tag || 6 === e.tag;

    if (f) {
      var g = f ? e.stateNode : e.stateNode.instance;
      if (c) {
        if (d) {
          f = b;
          var h = g;
          g = c;
          8 === f.nodeType ? f.parentNode.insertBefore(h, g) : f.insertBefore(h, g);
        } else b.insertBefore(g, c);
      } else d ? (h = b, 8 === h.nodeType ? (f = h.parentNode, f.insertBefore(g, h)) : (f = h, f.appendChild(g)), h = h._reactRootContainer, null !== h && void 0 !== h || null !== f.onclick || (f.onclick = ae)) : b.appendChild(g);
    } else if (4 !== e.tag && null !== e.child) {
      e.child.return = e;
      e = e.child;
      continue;
    }

    if (e === a) break;

    for (; null === e.sibling;) {
      if (null === e.return || e.return === a) return;
      e = e.return;
    }

    e.sibling.return = e.return;
    e = e.sibling;
  }
}

function Xi(a, b, c) {
  for (var d = b, e = !1, f, g;;) {
    if (!e) {
      e = d.return;

      a: for (;;) {
        if (null === e) throw Error(u(160));
        f = e.stateNode;

        switch (e.tag) {
          case 5:
            g = !1;
            break a;

          case 3:
            f = f.containerInfo;
            g = !0;
            break a;

          case 4:
            f = f.containerInfo;
            g = !0;
            break a;
        }

        e = e.return;
      }

      e = !0;
    }

    if (5 === d.tag || 6 === d.tag) {
      a: for (var h = a, k = d, l = c, m = k;;) {
        if (Vi(h, m, l), null !== m.child && 4 !== m.tag) m.child.return = m, m = m.child;else {
          if (m === k) break;

          for (; null === m.sibling;) {
            if (null === m.return || m.return === k) break a;
            m = m.return;
          }

          m.sibling.return = m.return;
          m = m.sibling;
        }
      }

      g ? (h = f, k = d.stateNode, 8 === h.nodeType ? h.parentNode.removeChild(k) : h.removeChild(k)) : f.removeChild(d.stateNode);
    } else if (4 === d.tag) {
      if (null !== d.child) {
        f = d.stateNode.containerInfo;
        g = !0;
        d.child.return = d;
        d = d.child;
        continue;
      }
    } else if (Vi(a, d, c), null !== d.child) {
      d.child.return = d;
      d = d.child;
      continue;
    }

    if (d === b) break;

    for (; null === d.sibling;) {
      if (null === d.return || d.return === b) return;
      d = d.return;
      4 === d.tag && (e = !1);
    }

    d.sibling.return = d.return;
    d = d.sibling;
  }
}

function aj(a, b) {
  switch (b.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
      Ui(4, 8, b);
      break;

    case 1:
      break;

    case 5:
      var c = b.stateNode;

      if (null != c) {
        var d = b.memoizedProps,
            e = null !== a ? a.memoizedProps : d;
        a = b.type;
        var f = b.updateQueue;
        b.updateQueue = null;

        if (null !== f) {
          c[ve] = d;
          "input" === a && "radio" === d.type && null != d.name && Cb(c, d);
          Zd(a, e);
          b = Zd(a, d);

          for (e = 0; e < f.length; e += 2) {
            var g = f[e],
                h = f[e + 1];
            "style" === g ? Wd(c, h) : "dangerouslySetInnerHTML" === g ? Sb(c, h) : "children" === g ? Tb(c, h) : vb(c, g, h, b);
          }

          switch (a) {
            case "input":
              Eb(c, d);
              break;

            case "textarea":
              Mb(c, d);
              break;

            case "select":
              b = c._wrapperState.wasMultiple, c._wrapperState.wasMultiple = !!d.multiple, a = d.value, null != a ? Jb(c, !!d.multiple, a, !1) : b !== !!d.multiple && (null != d.defaultValue ? Jb(c, !!d.multiple, d.defaultValue, !0) : Jb(c, !!d.multiple, d.multiple ? [] : "", !1));
          }
        }
      }

      break;

    case 6:
      if (null === b.stateNode) throw Error(u(162));
      b.stateNode.nodeValue = b.memoizedProps;
      break;

    case 3:
      b = b.stateNode;
      b.hydrate && (b.hydrate = !1, Lc(b.containerInfo));
      break;

    case 12:
      break;

    case 13:
      c = b;
      null === b.memoizedState ? d = !1 : (d = !0, c = b.child, bj = cg());
      if (null !== c) a: for (a = c;;) {
        if (5 === a.tag) f = a.stateNode, d ? (f = f.style, "function" === typeof f.setProperty ? f.setProperty("display", "none", "important") : f.display = "none") : (f = a.stateNode, e = a.memoizedProps.style, e = void 0 !== e && null !== e && e.hasOwnProperty("display") ? e.display : null, f.style.display = Vd("display", e));else if (6 === a.tag) a.stateNode.nodeValue = d ? "" : a.memoizedProps;else if (13 === a.tag && null !== a.memoizedState && null === a.memoizedState.dehydrated) {
          f = a.child.sibling;
          f.return = a;
          a = f;
          continue;
        } else if (null !== a.child) {
          a.child.return = a;
          a = a.child;
          continue;
        }
        if (a === c) break a;

        for (; null === a.sibling;) {
          if (null === a.return || a.return === c) break a;
          a = a.return;
        }

        a.sibling.return = a.return;
        a = a.sibling;
      }
      cj(b);
      break;

    case 19:
      cj(b);
      break;

    case 17:
      break;

    case 20:
      break;

    case 21:
      break;

    default:
      throw Error(u(163));
  }
}

function cj(a) {
  var b = a.updateQueue;

  if (null !== b) {
    a.updateQueue = null;
    var c = a.stateNode;
    null === c && (c = a.stateNode = new Oi());
    b.forEach(function (b) {
      var d = dj.bind(null, a, b);
      c.has(b) || (c.add(b), b.then(d, d));
    });
  }
}

var ej = "function" === typeof WeakMap ? WeakMap : Map;

function fj(a, b, c) {
  c = Bg(c, null);
  c.tag = 3;
  c.payload = {
    element: null
  };
  var d = b.value;

  c.callback = function () {
    gj || (gj = !0, hj = d);
    Pi(a, b);
  };

  return c;
}

function ij(a, b, c) {
  c = Bg(c, null);
  c.tag = 3;
  var d = a.type.getDerivedStateFromError;

  if ("function" === typeof d) {
    var e = b.value;

    c.payload = function () {
      Pi(a, b);
      return d(e);
    };
  }

  var f = a.stateNode;
  null !== f && "function" === typeof f.componentDidCatch && (c.callback = function () {
    "function" !== typeof d && (null === jj ? jj = new Set([this]) : jj.add(this), Pi(a, b));
    var c = b.stack;
    this.componentDidCatch(b.value, {
      componentStack: null !== c ? c : ""
    });
  });
  return c;
}

var kj = Math.ceil,
    lj = Ea.ReactCurrentDispatcher,
    mj = Ea.ReactCurrentOwner,
    S = 0,
    nj = 8,
    oj = 16,
    pj = 32,
    qj = 0,
    rj = 1,
    sj = 2,
    tj = 3,
    uj = 4,
    vj = 5,
    T = S,
    U = null,
    V = null,
    W = 0,
    X = qj,
    wj = null,
    xj = 1073741823,
    yj = 1073741823,
    zj = null,
    Aj = 0,
    Bj = !1,
    bj = 0,
    Cj = 500,
    Y = null,
    gj = !1,
    hj = null,
    jj = null,
    Dj = !1,
    Ej = null,
    Fj = 90,
    Gj = null,
    Hj = 0,
    Ij = null,
    Jj = 0;

function Pg() {
  return (T & (oj | pj)) !== S ? 1073741821 - (cg() / 10 | 0) : 0 !== Jj ? Jj : Jj = 1073741821 - (cg() / 10 | 0);
}

function Qg(a, b, c) {
  b = b.mode;
  if (0 === (b & 2)) return 1073741823;
  var d = dg();
  if (0 === (b & 4)) return 99 === d ? 1073741823 : 1073741822;
  if ((T & oj) !== S) return W;
  if (null !== c) a = lg(a, c.timeoutMs | 0 || 5E3, 250);else switch (d) {
    case 99:
      a = 1073741823;
      break;

    case 98:
      a = lg(a, 150, 100);
      break;

    case 97:
    case 96:
      a = lg(a, 5E3, 250);
      break;

    case 95:
      a = 2;
      break;

    default:
      throw Error(u(326));
  }
  null !== U && a === W && --a;
  return a;
}

function Rg(a, b) {
  if (50 < Hj) throw Hj = 0, Ij = null, Error(u(185));
  a = Kj(a, b);

  if (null !== a) {
    var c = dg();
    1073741823 === b ? (T & nj) !== S && (T & (oj | pj)) === S ? Lj(a) : (Z(a), T === S && jg()) : Z(a);
    (T & 4) === S || 98 !== c && 99 !== c || (null === Gj ? Gj = new Map([[a, b]]) : (c = Gj.get(a), (void 0 === c || c > b) && Gj.set(a, b)));
  }
}

function Kj(a, b) {
  a.expirationTime < b && (a.expirationTime = b);
  var c = a.alternate;
  null !== c && c.expirationTime < b && (c.expirationTime = b);
  var d = a.return,
      e = null;
  if (null === d && 3 === a.tag) e = a.stateNode;else for (; null !== d;) {
    c = d.alternate;
    d.childExpirationTime < b && (d.childExpirationTime = b);
    null !== c && c.childExpirationTime < b && (c.childExpirationTime = b);

    if (null === d.return && 3 === d.tag) {
      e = d.stateNode;
      break;
    }

    d = d.return;
  }
  null !== e && (U === e && (Jg(b), X === uj && Mj(e, W)), Nj(e, b));
  return e;
}

function Oj(a) {
  var b = a.lastExpiredTime;
  if (0 !== b) return b;
  b = a.firstPendingTime;
  if (!Pj(a, b)) return b;
  b = a.lastPingedTime;
  a = a.nextKnownPendingLevel;
  return b > a ? b : a;
}

function Z(a) {
  if (0 !== a.lastExpiredTime) a.callbackExpirationTime = 1073741823, a.callbackPriority = 99, a.callbackNode = hg(Lj.bind(null, a));else {
    var b = Oj(a),
        c = a.callbackNode;
    if (0 === b) null !== c && (a.callbackNode = null, a.callbackExpirationTime = 0, a.callbackPriority = 90);else {
      var d = Pg();
      1073741823 === b ? d = 99 : 1 === b || 2 === b ? d = 95 : (d = 10 * (1073741821 - b) - 10 * (1073741821 - d), d = 0 >= d ? 99 : 250 >= d ? 98 : 5250 >= d ? 97 : 95);

      if (null !== c) {
        var e = a.callbackPriority;
        if (a.callbackExpirationTime === b && e >= d) return;
        c !== Xf && Nf(c);
      }

      a.callbackExpirationTime = b;
      a.callbackPriority = d;
      b = 1073741823 === b ? hg(Lj.bind(null, a)) : gg(d, Qj.bind(null, a), {
        timeout: 10 * (1073741821 - b) - cg()
      });
      a.callbackNode = b;
    }
  }
}

function Qj(a, b) {
  Jj = 0;
  if (b) return b = Pg(), Rj(a, b), Z(a), null;
  var c = Oj(a);

  if (0 !== c) {
    b = a.callbackNode;
    if ((T & (oj | pj)) !== S) throw Error(u(327));
    Sj();
    a === U && c === W || Tj(a, c);

    if (null !== V) {
      var d = T;
      T |= oj;
      var e = Uj(a);

      do {
        try {
          Vj();
          break;
        } catch (h) {
          Wj(a, h);
        }
      } while (1);

      rg();
      T = d;
      lj.current = e;
      if (X === rj) throw b = wj, Tj(a, c), Mj(a, c), Z(a), b;
      if (null === V) switch (e = a.finishedWork = a.current.alternate, a.finishedExpirationTime = c, d = X, U = null, d) {
        case qj:
        case rj:
          throw Error(u(345));

        case sj:
          Rj(a, 2 < c ? 2 : c);
          break;

        case tj:
          Mj(a, c);
          d = a.lastSuspendedTime;
          c === d && (a.nextKnownPendingLevel = Xj(e));

          if (1073741823 === xj && (e = bj + Cj - cg(), 10 < e)) {
            if (Bj) {
              var f = a.lastPingedTime;

              if (0 === f || f >= c) {
                a.lastPingedTime = c;
                Tj(a, c);
                break;
              }
            }

            f = Oj(a);
            if (0 !== f && f !== c) break;

            if (0 !== d && d !== c) {
              a.lastPingedTime = d;
              break;
            }

            a.timeoutHandle = pe(Yj.bind(null, a), e);
            break;
          }

          Yj(a);
          break;

        case uj:
          Mj(a, c);
          d = a.lastSuspendedTime;
          c === d && (a.nextKnownPendingLevel = Xj(e));

          if (Bj && (e = a.lastPingedTime, 0 === e || e >= c)) {
            a.lastPingedTime = c;
            Tj(a, c);
            break;
          }

          e = Oj(a);
          if (0 !== e && e !== c) break;

          if (0 !== d && d !== c) {
            a.lastPingedTime = d;
            break;
          }

          1073741823 !== yj ? d = 10 * (1073741821 - yj) - cg() : 1073741823 === xj ? d = 0 : (d = 10 * (1073741821 - xj) - 5E3, e = cg(), c = 10 * (1073741821 - c) - e, d = e - d, 0 > d && (d = 0), d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3E3 > d ? 3E3 : 4320 > d ? 4320 : 1960 * kj(d / 1960)) - d, c < d && (d = c));

          if (10 < d) {
            a.timeoutHandle = pe(Yj.bind(null, a), d);
            break;
          }

          Yj(a);
          break;

        case vj:
          if (1073741823 !== xj && null !== zj) {
            f = xj;
            var g = zj;
            d = g.busyMinDurationMs | 0;
            0 >= d ? d = 0 : (e = g.busyDelayMs | 0, f = cg() - (10 * (1073741821 - f) - (g.timeoutMs | 0 || 5E3)), d = f <= e ? 0 : e + d - f);

            if (10 < d) {
              Mj(a, c);
              a.timeoutHandle = pe(Yj.bind(null, a), d);
              break;
            }
          }

          Yj(a);
          break;

        default:
          throw Error(u(329));
      }
      Z(a);
      if (a.callbackNode === b) return Qj.bind(null, a);
    }
  }

  return null;
}

function Lj(a) {
  var b = a.lastExpiredTime;
  b = 0 !== b ? b : 1073741823;
  if (a.finishedExpirationTime === b) Yj(a);else {
    if ((T & (oj | pj)) !== S) throw Error(u(327));
    Sj();
    a === U && b === W || Tj(a, b);

    if (null !== V) {
      var c = T;
      T |= oj;
      var d = Uj(a);

      do {
        try {
          Zj();
          break;
        } catch (e) {
          Wj(a, e);
        }
      } while (1);

      rg();
      T = c;
      lj.current = d;
      if (X === rj) throw c = wj, Tj(a, b), Mj(a, b), Z(a), c;
      if (null !== V) throw Error(u(261));
      a.finishedWork = a.current.alternate;
      a.finishedExpirationTime = b;
      U = null;
      Yj(a);
      Z(a);
    }
  }
  return null;
}

function ak() {
  if (null !== Gj) {
    var a = Gj;
    Gj = null;
    a.forEach(function (a, c) {
      Rj(c, a);
      Z(c);
    });
    jg();
  }
}

function bk(a, b) {
  var c = T;
  T |= 1;

  try {
    return a(b);
  } finally {
    T = c, T === S && jg();
  }
}

function ck(a, b) {
  var c = T;
  T &= -2;
  T |= nj;

  try {
    return a(b);
  } finally {
    T = c, T === S && jg();
  }
}

function Tj(a, b) {
  a.finishedWork = null;
  a.finishedExpirationTime = 0;
  var c = a.timeoutHandle;
  -1 !== c && (a.timeoutHandle = -1, qe(c));
  if (null !== V) for (c = V.return; null !== c;) {
    var d = c;

    switch (d.tag) {
      case 1:
        var e = d.type.childContextTypes;
        null !== e && void 0 !== e && Ff(d);
        break;

      case 3:
        nh(d);
        Gf(d);
        break;

      case 5:
        ph(d);
        break;

      case 4:
        nh(d);
        break;

      case 13:
        G(M, d);
        break;

      case 19:
        G(M, d);
        break;

      case 10:
        tg(d);
    }

    c = c.return;
  }
  U = a;
  V = ah(a.current, null, b);
  W = b;
  X = qj;
  wj = null;
  yj = xj = 1073741823;
  zj = null;
  Aj = 0;
  Bj = !1;
}

function Wj(a, b) {
  do {
    try {
      rg();
      Mh();
      if (null === V || null === V.return) return X = rj, wj = b, null;

      a: {
        var c = a,
            d = V.return,
            e = V,
            f = b;
        b = W;
        e.effectTag |= 2048;
        e.firstEffect = e.lastEffect = null;

        if (null !== f && "object" === typeof f && "function" === typeof f.then) {
          var g = f,
              h = 0 !== (M.current & 1),
              k = d;

          do {
            var l;

            if (l = 13 === k.tag) {
              var m = k.memoizedState;
              if (null !== m) l = null !== m.dehydrated ? !0 : !1;else {
                var C = k.memoizedProps;
                l = void 0 === C.fallback ? !1 : !0 !== C.unstable_avoidThisFallback ? !0 : h ? !1 : !0;
              }
            }

            if (l) {
              var y = k.updateQueue;

              if (null === y) {
                var H = new Set();
                H.add(g);
                k.updateQueue = H;
              } else y.add(g);

              if (0 === (k.mode & 2)) {
                k.effectTag |= 64;
                e.effectTag &= -2981;
                if (1 === e.tag) if (null === e.alternate) e.tag = 17;else {
                  var z = Bg(1073741823, null);
                  z.tag = 2;
                  Dg(e, z);
                }
                e.expirationTime = 1073741823;
                break a;
              }

              f = void 0;
              e = b;
              var ta = c.pingCache;
              null === ta ? (ta = c.pingCache = new ej(), f = new Set(), ta.set(g, f)) : (f = ta.get(g), void 0 === f && (f = new Set(), ta.set(g, f)));

              if (!f.has(e)) {
                f.add(e);
                var r = dk.bind(null, c, g, e);
                g.then(r, r);
              }

              k.effectTag |= 4096;
              k.expirationTime = b;
              break a;
            }

            k = k.return;
          } while (null !== k);

          f = Error((Wa(e.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + Xa(e));
        }

        X !== vj && (X = sj);
        f = Ni(f, e);
        k = d;

        do {
          switch (k.tag) {
            case 3:
              g = f;
              k.effectTag |= 4096;
              k.expirationTime = b;
              var x = fj(k, g, b);
              Eg(k, x);
              break a;

            case 1:
              g = f;
              var A = k.type,
                  p = k.stateNode;

              if (0 === (k.effectTag & 64) && ("function" === typeof A.getDerivedStateFromError || null !== p && "function" === typeof p.componentDidCatch && (null === jj || !jj.has(p)))) {
                k.effectTag |= 4096;
                k.expirationTime = b;
                var t = ij(k, g, b);
                Eg(k, t);
                break a;
              }

          }

          k = k.return;
        } while (null !== k);
      }

      V = ek(V);
    } catch (v) {
      b = v;
      continue;
    }

    break;
  } while (1);
}

function Uj() {
  var a = lj.current;
  lj.current = Lh;
  return null === a ? Lh : a;
}

function Ig(a, b) {
  a < xj && 2 < a && (xj = a);
  null !== b && a < yj && 2 < a && (yj = a, zj = b);
}

function Jg(a) {
  a > Aj && (Aj = a);
}

function Zj() {
  for (; null !== V;) {
    V = fk(V);
  }
}

function Vj() {
  for (; null !== V && !Of();) {
    V = fk(V);
  }
}

function fk(a) {
  var b = gk(a.alternate, a, W);
  a.memoizedProps = a.pendingProps;
  null === b && (b = ek(a));
  mj.current = null;
  return b;
}

function ek(a) {
  V = a;

  do {
    var b = V.alternate;
    a = V.return;

    if (0 === (V.effectTag & 2048)) {
      a: {
        var c = b;
        b = V;
        var d = W;
        var e = b.pendingProps;

        switch (b.tag) {
          case 2:
            break;

          case 16:
            break;

          case 15:
          case 0:
            break;

          case 1:
            L(b.type) && Ff(b);
            break;

          case 3:
            nh(b);
            Gf(b);
            e = b.stateNode;
            e.pendingContext && (e.context = e.pendingContext, e.pendingContext = null);
            (null === c || null === c.child) && ki(b) && Ci(b);
            Ii(b);
            break;

          case 5:
            ph(b);
            d = lh(kh.current);
            var f = b.type;
            if (null !== c && null != b.stateNode) Ji(c, b, f, e, d), c.ref !== b.ref && (b.effectTag |= 128);else if (e) {
              var g = lh(ih.current);

              if (ki(b)) {
                e = b;
                var h = e.stateNode;
                c = e.type;
                var k = e.memoizedProps,
                    l = d;
                h[ue] = e;
                h[ve] = k;
                f = void 0;
                d = h;

                switch (c) {
                  case "iframe":
                  case "object":
                  case "embed":
                    F("load", d);
                    break;

                  case "video":
                  case "audio":
                    for (h = 0; h < cc.length; h++) {
                      F(cc[h], d);
                    }

                    break;

                  case "source":
                    F("error", d);
                    break;

                  case "img":
                  case "image":
                  case "link":
                    F("error", d);
                    F("load", d);
                    break;

                  case "form":
                    F("reset", d);
                    F("submit", d);
                    break;

                  case "details":
                    F("toggle", d);
                    break;

                  case "input":
                    Bb(d, k);
                    F("invalid", d);
                    $d(l, "onChange");
                    break;

                  case "select":
                    d._wrapperState = {
                      wasMultiple: !!k.multiple
                    };
                    F("invalid", d);
                    $d(l, "onChange");
                    break;

                  case "textarea":
                    Lb(d, k), F("invalid", d), $d(l, "onChange");
                }

                Yd(c, k);
                h = null;

                for (f in k) {
                  k.hasOwnProperty(f) && (g = k[f], "children" === f ? "string" === typeof g ? d.textContent !== g && (h = ["children", g]) : "number" === typeof g && d.textContent !== "" + g && (h = ["children", "" + g]) : ia.hasOwnProperty(f) && null != g && $d(l, f));
                }

                switch (c) {
                  case "input":
                    yb(d);
                    Gb(d, k, !0);
                    break;

                  case "textarea":
                    yb(d);
                    Nb(d, k);
                    break;

                  case "select":
                  case "option":
                    break;

                  default:
                    "function" === typeof k.onClick && (d.onclick = ae);
                }

                f = h;
                e.updateQueue = f;
                e = null !== f ? !0 : !1;
                e && Ci(b);
              } else {
                c = b;
                l = f;
                k = e;
                h = 9 === d.nodeType ? d : d.ownerDocument;
                g === Ob.html && (g = Pb(l));
                g === Ob.html ? "script" === l ? (k = h.createElement("div"), k.innerHTML = "<script>\x3c/script>", h = k.removeChild(k.firstChild)) : "string" === typeof k.is ? h = h.createElement(l, {
                  is: k.is
                }) : (h = h.createElement(l), "select" === l && (l = h, k.multiple ? l.multiple = !0 : k.size && (l.size = k.size))) : h = h.createElementNS(g, l);
                k = h;
                k[ue] = c;
                k[ve] = e;
                Hi(k, b, !1, !1);
                b.stateNode = k;
                l = f;
                c = e;
                var m = d,
                    C = Zd(l, c);

                switch (l) {
                  case "iframe":
                  case "object":
                  case "embed":
                    F("load", k);
                    d = c;
                    break;

                  case "video":
                  case "audio":
                    for (d = 0; d < cc.length; d++) {
                      F(cc[d], k);
                    }

                    d = c;
                    break;

                  case "source":
                    F("error", k);
                    d = c;
                    break;

                  case "img":
                  case "image":
                  case "link":
                    F("error", k);
                    F("load", k);
                    d = c;
                    break;

                  case "form":
                    F("reset", k);
                    F("submit", k);
                    d = c;
                    break;

                  case "details":
                    F("toggle", k);
                    d = c;
                    break;

                  case "input":
                    Bb(k, c);
                    d = Ab(k, c);
                    F("invalid", k);
                    $d(m, "onChange");
                    break;

                  case "option":
                    d = Ib(k, c);
                    break;

                  case "select":
                    k._wrapperState = {
                      wasMultiple: !!c.multiple
                    };
                    d = n({}, c, {
                      value: void 0
                    });
                    F("invalid", k);
                    $d(m, "onChange");
                    break;

                  case "textarea":
                    Lb(k, c);
                    d = Kb(k, c);
                    F("invalid", k);
                    $d(m, "onChange");
                    break;

                  default:
                    d = c;
                }

                Yd(l, d);
                h = void 0;
                g = l;
                var y = k,
                    H = d;

                for (h in H) {
                  if (H.hasOwnProperty(h)) {
                    var z = H[h];
                    "style" === h ? Wd(y, z) : "dangerouslySetInnerHTML" === h ? (z = z ? z.__html : void 0, null != z && Sb(y, z)) : "children" === h ? "string" === typeof z ? ("textarea" !== g || "" !== z) && Tb(y, z) : "number" === typeof z && Tb(y, "" + z) : "suppressContentEditableWarning" !== h && "suppressHydrationWarning" !== h && "autoFocus" !== h && (ia.hasOwnProperty(h) ? null != z && $d(m, h) : null != z && vb(y, h, z, C));
                  }
                }

                switch (l) {
                  case "input":
                    yb(k);
                    Gb(k, c, !1);
                    break;

                  case "textarea":
                    yb(k);
                    Nb(k, c);
                    break;

                  case "option":
                    null != c.value && k.setAttribute("value", "" + ub(c.value));
                    break;

                  case "select":
                    d = k;
                    d.multiple = !!c.multiple;
                    k = c.value;
                    null != k ? Jb(d, !!c.multiple, k, !1) : null != c.defaultValue && Jb(d, !!c.multiple, c.defaultValue, !0);
                    break;

                  default:
                    "function" === typeof d.onClick && (k.onclick = ae);
                }

                (e = ne(f, e)) && Ci(b);
              }

              null !== b.ref && (b.effectTag |= 128);
            } else if (null === b.stateNode) throw Error(u(166));
            break;

          case 6:
            if (c && null != b.stateNode) Ki(c, b, c.memoizedProps, e);else {
              if ("string" !== typeof e && null === b.stateNode) throw Error(u(166));
              d = lh(kh.current);
              lh(ih.current);
              ki(b) ? (e = b, f = e.stateNode, d = e.memoizedProps, f[ue] = e, (e = f.nodeValue !== d) && Ci(b)) : (f = b, e = (9 === d.nodeType ? d : d.ownerDocument).createTextNode(e), e[ue] = f, b.stateNode = e);
            }
            break;

          case 11:
            break;

          case 13:
            G(M, b);
            e = b.memoizedState;

            if (0 !== (b.effectTag & 64)) {
              b.expirationTime = d;
              break a;
            }

            e = null !== e;
            f = !1;
            null === c ? void 0 !== b.memoizedProps.fallback && ki(b) : (d = c.memoizedState, f = null !== d, e || null === d || (d = c.child.sibling, null !== d && (k = b.firstEffect, null !== k ? (b.firstEffect = d, d.nextEffect = k) : (b.firstEffect = b.lastEffect = d, d.nextEffect = null), d.effectTag = 8)));
            if (e && !f && 0 !== (b.mode & 2)) if (null === c && !0 !== b.memoizedProps.unstable_avoidThisFallback || 0 !== (M.current & 1)) X === qj && (X = tj);else {
              if (X === qj || X === tj) X = uj;
              0 !== Aj && null !== U && (Mj(U, W), Nj(U, Aj));
            }
            if (e || f) b.effectTag |= 4;
            break;

          case 7:
            break;

          case 8:
            break;

          case 12:
            break;

          case 4:
            nh(b);
            Ii(b);
            break;

          case 10:
            tg(b);
            break;

          case 9:
            break;

          case 14:
            break;

          case 17:
            L(b.type) && Ff(b);
            break;

          case 19:
            G(M, b);
            e = b.memoizedState;
            if (null === e) break;
            f = 0 !== (b.effectTag & 64);
            k = e.rendering;
            if (null === k) {
              if (f) Li(e, !1);else {
                if (X !== qj || null !== c && 0 !== (c.effectTag & 64)) for (c = b.child; null !== c;) {
                  k = qh(c);

                  if (null !== k) {
                    b.effectTag |= 64;
                    Li(e, !1);
                    f = k.updateQueue;
                    null !== f && (b.updateQueue = f, b.effectTag |= 4);
                    null === e.lastEffect && (b.firstEffect = null);
                    b.lastEffect = e.lastEffect;
                    e = d;

                    for (f = b.child; null !== f;) {
                      d = f, c = e, d.effectTag &= 2, d.nextEffect = null, d.firstEffect = null, d.lastEffect = null, k = d.alternate, null === k ? (d.childExpirationTime = 0, d.expirationTime = c, d.child = null, d.memoizedProps = null, d.memoizedState = null, d.updateQueue = null, d.dependencies = null) : (d.childExpirationTime = k.childExpirationTime, d.expirationTime = k.expirationTime, d.child = k.child, d.memoizedProps = k.memoizedProps, d.memoizedState = k.memoizedState, d.updateQueue = k.updateQueue, c = k.dependencies, d.dependencies = null === c ? null : {
                        expirationTime: c.expirationTime,
                        firstContext: c.firstContext,
                        responders: c.responders
                      }), f = f.sibling;
                    }

                    I(M, M.current & 1 | 2, b);
                    b = b.child;
                    break a;
                  }

                  c = c.sibling;
                }
              }
            } else {
              if (!f) if (c = qh(k), null !== c) {
                if (b.effectTag |= 64, f = !0, d = c.updateQueue, null !== d && (b.updateQueue = d, b.effectTag |= 4), Li(e, !0), null === e.tail && "hidden" === e.tailMode && !k.alternate) {
                  b = b.lastEffect = e.lastEffect;
                  null !== b && (b.nextEffect = null);
                  break;
                }
              } else cg() > e.tailExpiration && 1 < d && (b.effectTag |= 64, f = !0, Li(e, !1), b.expirationTime = b.childExpirationTime = d - 1);
              e.isBackwards ? (k.sibling = b.child, b.child = k) : (d = e.last, null !== d ? d.sibling = k : b.child = k, e.last = k);
            }

            if (null !== e.tail) {
              0 === e.tailExpiration && (e.tailExpiration = cg() + 500);
              d = e.tail;
              e.rendering = d;
              e.tail = d.sibling;
              e.lastEffect = b.lastEffect;
              d.sibling = null;
              e = M.current;
              e = f ? e & 1 | 2 : e & 1;
              I(M, e, b);
              b = d;
              break a;
            }

            break;

          case 20:
            break;

          case 21:
            break;

          default:
            throw Error(u(156, b.tag));
        }

        b = null;
      }

      e = V;

      if (1 === W || 1 !== e.childExpirationTime) {
        f = 0;

        for (d = e.child; null !== d;) {
          c = d.expirationTime, k = d.childExpirationTime, c > f && (f = c), k > f && (f = k), d = d.sibling;
        }

        e.childExpirationTime = f;
      }

      if (null !== b) return b;
      null !== a && 0 === (a.effectTag & 2048) && (null === a.firstEffect && (a.firstEffect = V.firstEffect), null !== V.lastEffect && (null !== a.lastEffect && (a.lastEffect.nextEffect = V.firstEffect), a.lastEffect = V.lastEffect), 1 < V.effectTag && (null !== a.lastEffect ? a.lastEffect.nextEffect = V : a.firstEffect = V, a.lastEffect = V));
    } else {
      b = Mi(V, W);
      if (null !== b) return b.effectTag &= 2047, b;
      null !== a && (a.firstEffect = a.lastEffect = null, a.effectTag |= 2048);
    }

    b = V.sibling;
    if (null !== b) return b;
    V = a;
  } while (null !== V);

  X === qj && (X = vj);
  return null;
}

function Xj(a) {
  var b = a.expirationTime;
  a = a.childExpirationTime;
  return b > a ? b : a;
}

function Yj(a) {
  var b = dg();
  fg(99, ik.bind(null, a, b));
  return null;
}

function ik(a, b) {
  do {
    Sj();
  } while (null !== Ej);

  if ((T & (oj | pj)) !== S) throw Error(u(327));
  var c = a.finishedWork,
      d = a.finishedExpirationTime;
  if (null === c) return null;
  a.finishedWork = null;
  a.finishedExpirationTime = 0;
  if (c === a.current) throw Error(u(177));
  a.callbackNode = null;
  a.callbackExpirationTime = 0;
  a.callbackPriority = 90;
  a.nextKnownPendingLevel = 0;
  var e = Xj(c);
  a.firstPendingTime = e;
  d <= a.lastSuspendedTime ? a.firstSuspendedTime = a.lastSuspendedTime = a.nextKnownPendingLevel = 0 : d <= a.firstSuspendedTime && (a.firstSuspendedTime = d - 1);
  d <= a.lastPingedTime && (a.lastPingedTime = 0);
  d <= a.lastExpiredTime && (a.lastExpiredTime = 0);
  a === U && (V = U = null, W = 0);
  1 < c.effectTag ? null !== c.lastEffect ? (c.lastEffect.nextEffect = c, e = c.firstEffect) : e = c : e = c.firstEffect;

  if (null !== e) {
    var f = T;
    T |= pj;
    mj.current = null;
    le = Ld;
    var g = fe();

    if (ge(g)) {
      if ("selectionStart" in g) var h = {
        start: g.selectionStart,
        end: g.selectionEnd
      };else a: {
        h = (h = g.ownerDocument) && h.defaultView || window;
        var k = h.getSelection && h.getSelection();

        if (k && 0 !== k.rangeCount) {
          h = k.anchorNode;
          var l = k.anchorOffset,
              m = k.focusNode;
          k = k.focusOffset;

          try {
            h.nodeType, m.nodeType;
          } catch (Db) {
            h = null;
            break a;
          }

          var C = 0,
              y = -1,
              H = -1,
              z = 0,
              ta = 0,
              r = g,
              x = null;

          b: for (;;) {
            for (var A;;) {
              r !== h || 0 !== l && 3 !== r.nodeType || (y = C + l);
              r !== m || 0 !== k && 3 !== r.nodeType || (H = C + k);
              3 === r.nodeType && (C += r.nodeValue.length);
              if (null === (A = r.firstChild)) break;
              x = r;
              r = A;
            }

            for (;;) {
              if (r === g) break b;
              x === h && ++z === l && (y = C);
              x === m && ++ta === k && (H = C);
              if (null !== (A = r.nextSibling)) break;
              r = x;
              x = r.parentNode;
            }

            r = A;
          }

          h = -1 === y || -1 === H ? null : {
            start: y,
            end: H
          };
        } else h = null;
      }
      h = h || {
        start: 0,
        end: 0
      };
    } else h = null;

    me = {
      focusedElem: g,
      selectionRange: h
    };
    Ld = !1;
    Y = e;

    do {
      try {
        jk();
      } catch (Db) {
        if (null === Y) throw Error(u(330));
        Ri(Y, Db);
        Y = Y.nextEffect;
      }
    } while (null !== Y);

    Y = e;

    do {
      try {
        for (g = a, h = b; null !== Y;) {
          var p = Y.effectTag;
          p & 16 && Tb(Y.stateNode, "");

          if (p & 128) {
            var t = Y.alternate;

            if (null !== t) {
              var v = t.ref;
              null !== v && ("function" === typeof v ? v(null) : v.current = null);
            }
          }

          switch (p & 1038) {
            case 2:
              $i(Y);
              Y.effectTag &= -3;
              break;

            case 6:
              $i(Y);
              Y.effectTag &= -3;
              aj(Y.alternate, Y);
              break;

            case 1024:
              Y.effectTag &= -1025;
              break;

            case 1028:
              Y.effectTag &= -1025;
              aj(Y.alternate, Y);
              break;

            case 4:
              aj(Y.alternate, Y);
              break;

            case 8:
              l = Y, Xi(g, l, h), Yi(l);
          }

          Y = Y.nextEffect;
        }
      } catch (Db) {
        if (null === Y) throw Error(u(330));
        Ri(Y, Db);
        Y = Y.nextEffect;
      }
    } while (null !== Y);

    v = me;
    t = fe();
    p = v.focusedElem;
    h = v.selectionRange;

    if (t !== p && p && p.ownerDocument && ee(p.ownerDocument.documentElement, p)) {
      null !== h && ge(p) && (t = h.start, v = h.end, void 0 === v && (v = t), "selectionStart" in p ? (p.selectionStart = t, p.selectionEnd = Math.min(v, p.value.length)) : (v = (t = p.ownerDocument || document) && t.defaultView || window, v.getSelection && (v = v.getSelection(), l = p.textContent.length, g = Math.min(h.start, l), h = void 0 === h.end ? g : Math.min(h.end, l), !v.extend && g > h && (l = h, h = g, g = l), l = de(p, g), m = de(p, h), l && m && (1 !== v.rangeCount || v.anchorNode !== l.node || v.anchorOffset !== l.offset || v.focusNode !== m.node || v.focusOffset !== m.offset) && (t = t.createRange(), t.setStart(l.node, l.offset), v.removeAllRanges(), g > h ? (v.addRange(t), v.extend(m.node, m.offset)) : (t.setEnd(m.node, m.offset), v.addRange(t))))));
      t = [];

      for (v = p; v = v.parentNode;) {
        1 === v.nodeType && t.push({
          element: v,
          left: v.scrollLeft,
          top: v.scrollTop
        });
      }

      "function" === typeof p.focus && p.focus();

      for (p = 0; p < t.length; p++) {
        v = t[p], v.element.scrollLeft = v.left, v.element.scrollTop = v.top;
      }
    }

    me = null;
    Ld = !!le;
    le = null;
    a.current = c;
    Y = e;

    do {
      try {
        for (p = d; null !== Y;) {
          var Dh = Y.effectTag;

          if (Dh & 36) {
            var dc = Y.alternate;
            t = Y;
            v = p;

            switch (t.tag) {
              case 0:
              case 11:
              case 15:
                Ui(16, 32, t);
                break;

              case 1:
                var fd = t.stateNode;
                if (t.effectTag & 4) if (null === dc) fd.componentDidMount();else {
                  var hk = t.elementType === t.type ? dc.memoizedProps : mg(t.type, dc.memoizedProps);
                  fd.componentDidUpdate(hk, dc.memoizedState, fd.__reactInternalSnapshotBeforeUpdate);
                }
                var Eh = t.updateQueue;
                null !== Eh && Kg(t, Eh, fd, v);
                break;

              case 3:
                var Fh = t.updateQueue;

                if (null !== Fh) {
                  g = null;
                  if (null !== t.child) switch (t.child.tag) {
                    case 5:
                      g = t.child.stateNode;
                      break;

                    case 1:
                      g = t.child.stateNode;
                  }
                  Kg(t, Fh, g, v);
                }

                break;

              case 5:
                var xk = t.stateNode;
                null === dc && t.effectTag & 4 && ne(t.type, t.memoizedProps) && xk.focus();
                break;

              case 6:
                break;

              case 4:
                break;

              case 12:
                break;

              case 13:
                if (null === t.memoizedState) {
                  var Di = t.alternate;

                  if (null !== Di) {
                    var Ei = Di.memoizedState;

                    if (null !== Ei) {
                      var Fi = Ei.dehydrated;
                      null !== Fi && Lc(Fi);
                    }
                  }
                }

                break;

              case 19:
              case 17:
              case 20:
              case 21:
                break;

              default:
                throw Error(u(163));
            }
          }

          if (Dh & 128) {
            t = void 0;
            var xd = Y.ref;

            if (null !== xd) {
              var Gi = Y.stateNode;

              switch (Y.tag) {
                case 5:
                  t = Gi;
                  break;

                default:
                  t = Gi;
              }

              "function" === typeof xd ? xd(t) : xd.current = t;
            }
          }

          Y = Y.nextEffect;
        }
      } catch (Db) {
        if (null === Y) throw Error(u(330));
        Ri(Y, Db);
        Y = Y.nextEffect;
      }
    } while (null !== Y);

    Y = null;
    Yf();
    T = f;
  } else a.current = c;

  if (Dj) Dj = !1, Ej = a, Fj = b;else for (Y = e; null !== Y;) {
    b = Y.nextEffect, Y.nextEffect = null, Y = b;
  }
  b = a.firstPendingTime;
  0 === b && (jj = null);
  1073741823 === b ? a === Ij ? Hj++ : (Hj = 0, Ij = a) : Hj = 0;
  "function" === typeof kk && kk(c.stateNode, d);
  Z(a);
  if (gj) throw gj = !1, a = hj, hj = null, a;
  if ((T & nj) !== S) return null;
  jg();
  return null;
}

function jk() {
  for (; null !== Y;) {
    var a = Y.effectTag;
    0 !== (a & 256) && Ti(Y.alternate, Y);
    0 === (a & 512) || Dj || (Dj = !0, gg(97, function () {
      Sj();
      return null;
    }));
    Y = Y.nextEffect;
  }
}

function Sj() {
  if (90 !== Fj) {
    var a = 97 < Fj ? 97 : Fj;
    Fj = 90;
    return fg(a, lk);
  }
}

function lk() {
  if (null === Ej) return !1;
  var a = Ej;
  Ej = null;
  if ((T & (oj | pj)) !== S) throw Error(u(331));
  var b = T;
  T |= pj;

  for (a = a.current.firstEffect; null !== a;) {
    try {
      var c = a;
      if (0 !== (c.effectTag & 512)) switch (c.tag) {
        case 0:
        case 11:
        case 15:
          Ui(128, 0, c), Ui(0, 64, c);
      }
    } catch (d) {
      if (null === a) throw Error(u(330));
      Ri(a, d);
    }

    c = a.nextEffect;
    a.nextEffect = null;
    a = c;
  }

  T = b;
  jg();
  return !0;
}

function mk(a, b, c) {
  b = Ni(c, b);
  b = fj(a, b, 1073741823);
  Dg(a, b);
  a = Kj(a, 1073741823);
  null !== a && Z(a);
}

function Ri(a, b) {
  if (3 === a.tag) mk(a, a, b);else for (var c = a.return; null !== c;) {
    if (3 === c.tag) {
      mk(c, a, b);
      break;
    } else if (1 === c.tag) {
      var d = c.stateNode;

      if ("function" === typeof c.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === jj || !jj.has(d))) {
        a = Ni(b, a);
        a = ij(c, a, 1073741823);
        Dg(c, a);
        c = Kj(c, 1073741823);
        null !== c && Z(c);
        break;
      }
    }

    c = c.return;
  }
}

function dk(a, b, c) {
  var d = a.pingCache;
  null !== d && d.delete(b);
  U === a && W === c ? X === uj || X === tj && 1073741823 === xj && cg() - bj < Cj ? Tj(a, W) : Bj = !0 : Pj(a, c) && (b = a.lastPingedTime, 0 !== b && b < c || (a.lastPingedTime = c, a.finishedExpirationTime === c && (a.finishedExpirationTime = 0, a.finishedWork = null), Z(a)));
}

function dj(a, b) {
  var c = a.stateNode;
  null !== c && c.delete(b);
  b = 0;
  0 === b && (b = Pg(), b = Qg(b, a, null));
  a = Kj(a, b);
  null !== a && Z(a);
}

var gk;

gk = function gk(a, b, c) {
  var d = b.expirationTime;

  if (null !== a) {
    var e = b.pendingProps;
    if (a.memoizedProps !== e || K.current) wg = !0;else {
      if (d < c) {
        wg = !1;

        switch (b.tag) {
          case 3:
            wi(b);
            li();
            break;

          case 5:
            oh(b);
            if (b.mode & 4 && 1 !== c && e.hidden) return b.expirationTime = b.childExpirationTime = 1, null;
            break;

          case 1:
            L(b.type) && Jf(b);
            break;

          case 4:
            mh(b, b.stateNode.containerInfo);
            break;

          case 10:
            sg(b, b.memoizedProps.value);
            break;

          case 13:
            if (null !== b.memoizedState) {
              d = b.child.childExpirationTime;
              if (0 !== d && d >= c) return yi(a, b, c);
              I(M, M.current & 1, b);
              b = oi(a, b, c);
              return null !== b ? b.sibling : null;
            }

            I(M, M.current & 1, b);
            break;

          case 19:
            d = b.childExpirationTime >= c;

            if (0 !== (a.effectTag & 64)) {
              if (d) return Bi(a, b, c);
              b.effectTag |= 64;
            }

            e = b.memoizedState;
            null !== e && (e.rendering = null, e.tail = null);
            I(M, M.current, b);
            if (!d) return null;
        }

        return oi(a, b, c);
      }

      wg = !1;
    }
  } else wg = !1;

  b.expirationTime = 0;

  switch (b.tag) {
    case 2:
      d = b.type;
      null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2);
      a = b.pendingProps;
      e = Ef(b, J.current);
      vg(b, c);
      e = Ih(null, b, d, a, e, c);
      b.effectTag |= 1;

      if ("object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof) {
        b.tag = 1;
        Mh();

        if (L(d)) {
          var f = !0;
          Jf(b);
        } else f = !1;

        b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null;
        var g = d.getDerivedStateFromProps;
        "function" === typeof g && Og(b, d, g, a);
        e.updater = Sg;
        b.stateNode = e;
        e._reactInternalFiber = b;
        Wg(b, d, a, c);
        b = vi(null, b, d, !0, f, c);
      } else b.tag = 0, R(null, b, e, c), b = b.child;

      return b;

    case 16:
      e = b.elementType;
      null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2);
      a = b.pendingProps;
      Va(e);
      if (1 !== e._status) throw e._result;
      e = e._result;
      b.type = e;
      f = b.tag = nk(e);
      a = mg(e, a);

      switch (f) {
        case 0:
          b = si(null, b, e, a, c);
          break;

        case 1:
          b = ui(null, b, e, a, c);
          break;

        case 11:
          b = ni(null, b, e, a, c);
          break;

        case 14:
          b = pi(null, b, e, mg(e.type, a), d, c);
          break;

        default:
          throw Error(u(306, e, ""));
      }

      return b;

    case 0:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : mg(d, e), si(a, b, d, e, c);

    case 1:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : mg(d, e), ui(a, b, d, e, c);

    case 3:
      wi(b);
      d = b.updateQueue;
      if (null === d) throw Error(u(282));
      e = b.memoizedState;
      e = null !== e ? e.element : null;
      Hg(b, d, b.pendingProps, null, c);
      d = b.memoizedState.element;
      if (d === e) li(), b = oi(a, b, c);else {
        if (e = b.stateNode.hydrate) di = re(b.stateNode.containerInfo.firstChild), ci = b, e = ei = !0;
        if (e) for (c = gh(b, null, d, c), b.child = c; c;) {
          c.effectTag = c.effectTag & -3 | 1024, c = c.sibling;
        } else R(a, b, d, c), li();
        b = b.child;
      }
      return b;

    case 5:
      return oh(b), null === a && ii(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, oe(d, e) ? g = null : null !== f && oe(d, f) && (b.effectTag |= 16), ti(a, b), b.mode & 4 && 1 !== c && e.hidden ? (b.expirationTime = b.childExpirationTime = 1, b = null) : (R(a, b, g, c), b = b.child), b;

    case 6:
      return null === a && ii(b), null;

    case 13:
      return yi(a, b, c);

    case 4:
      return mh(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = fh(b, null, d, c) : R(a, b, d, c), b.child;

    case 11:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : mg(d, e), ni(a, b, d, e, c);

    case 7:
      return R(a, b, b.pendingProps, c), b.child;

    case 8:
      return R(a, b, b.pendingProps.children, c), b.child;

    case 12:
      return R(a, b, b.pendingProps.children, c), b.child;

    case 10:
      a: {
        d = b.type._context;
        e = b.pendingProps;
        g = b.memoizedProps;
        f = e.value;
        sg(b, f);

        if (null !== g) {
          var h = g.value;
          f = of(h, f) ? 0 : ("function" === typeof d._calculateChangedBits ? d._calculateChangedBits(h, f) : 1073741823) | 0;

          if (0 === f) {
            if (g.children === e.children && !K.current) {
              b = oi(a, b, c);
              break a;
            }
          } else for (h = b.child, null !== h && (h.return = b); null !== h;) {
            var k = h.dependencies;

            if (null !== k) {
              g = h.child;

              for (var l = k.firstContext; null !== l;) {
                if (l.context === d && 0 !== (l.observedBits & f)) {
                  1 === h.tag && (l = Bg(c, null), l.tag = 2, Dg(h, l));
                  h.expirationTime < c && (h.expirationTime = c);
                  l = h.alternate;
                  null !== l && l.expirationTime < c && (l.expirationTime = c);
                  ug(h.return, c);
                  k.expirationTime < c && (k.expirationTime = c);
                  break;
                }

                l = l.next;
              }
            } else g = 10 === h.tag ? h.type === b.type ? null : h.child : h.child;

            if (null !== g) g.return = h;else for (g = h; null !== g;) {
              if (g === b) {
                g = null;
                break;
              }

              h = g.sibling;

              if (null !== h) {
                h.return = g.return;
                g = h;
                break;
              }

              g = g.return;
            }
            h = g;
          }
        }

        R(a, b, e.children, c);
        b = b.child;
      }

      return b;

    case 9:
      return e = b.type, f = b.pendingProps, d = f.children, vg(b, c), e = xg(e, f.unstable_observedBits), d = d(e), b.effectTag |= 1, R(a, b, d, c), b.child;

    case 14:
      return e = b.type, f = mg(e, b.pendingProps), f = mg(e.type, f), pi(a, b, e, f, d, c);

    case 15:
      return ri(a, b, b.type, b.pendingProps, d, c);

    case 17:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : mg(d, e), null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2), b.tag = 1, L(d) ? (a = !0, Jf(b)) : a = !1, vg(b, c), Ug(b, d, e, c), Wg(b, d, e, c), vi(null, b, d, !0, a, c);

    case 19:
      return Bi(a, b, c);
  }

  throw Error(u(156, b.tag));
};

var kk = null,
    Wi = null;

function ok(a) {
  if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1;
  var b = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (b.isDisabled || !b.supportsFiber) return !0;

  try {
    var c = b.inject(a);

    kk = function kk(a) {
      try {
        b.onCommitFiberRoot(c, a, void 0, 64 === (a.current.effectTag & 64));
      } catch (e) {}
    };

    Wi = function Wi(a) {
      try {
        b.onCommitFiberUnmount(c, a);
      } catch (e) {}
    };
  } catch (d) {}

  return !0;
}

function pk(a, b, c, d) {
  this.tag = a;
  this.key = c;
  this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = b;
  this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
  this.mode = d;
  this.effectTag = 0;
  this.lastEffect = this.firstEffect = this.nextEffect = null;
  this.childExpirationTime = this.expirationTime = 0;
  this.alternate = null;
}

function gi(a, b, c, d) {
  return new pk(a, b, c, d);
}

function qi(a) {
  a = a.prototype;
  return !(!a || !a.isReactComponent);
}

function nk(a) {
  if ("function" === typeof a) return qi(a) ? 1 : 0;

  if (void 0 !== a && null !== a) {
    a = a.$$typeof;
    if (a === Oa) return 11;
    if (a === Ra) return 14;
  }

  return 2;
}

function ah(a, b) {
  var c = a.alternate;
  null === c ? (c = gi(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.effectTag = 0, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);
  c.childExpirationTime = a.childExpirationTime;
  c.expirationTime = a.expirationTime;
  c.child = a.child;
  c.memoizedProps = a.memoizedProps;
  c.memoizedState = a.memoizedState;
  c.updateQueue = a.updateQueue;
  b = a.dependencies;
  c.dependencies = null === b ? null : {
    expirationTime: b.expirationTime,
    firstContext: b.firstContext,
    responders: b.responders
  };
  c.sibling = a.sibling;
  c.index = a.index;
  c.ref = a.ref;
  return c;
}

function ch(a, b, c, d, e, f) {
  var g = 2;
  d = a;
  if ("function" === typeof a) qi(a) && (g = 1);else if ("string" === typeof a) g = 5;else a: switch (a) {
    case Ia:
      return eh(c.children, e, f, b);

    case Na:
      g = 8;
      e |= 7;
      break;

    case Ja:
      g = 8;
      e |= 1;
      break;

    case Ka:
      return a = gi(12, c, b, e | 8), a.elementType = Ka, a.type = Ka, a.expirationTime = f, a;

    case Pa:
      return a = gi(13, c, b, e), a.type = Pa, a.elementType = Pa, a.expirationTime = f, a;

    case Qa:
      return a = gi(19, c, b, e), a.elementType = Qa, a.expirationTime = f, a;

    default:
      if ("object" === typeof a && null !== a) switch (a.$$typeof) {
        case La:
          g = 10;
          break a;

        case Ma:
          g = 9;
          break a;

        case Oa:
          g = 11;
          break a;

        case Ra:
          g = 14;
          break a;

        case Sa:
          g = 16;
          d = null;
          break a;
      }
      throw Error(u(130, null == a ? a : typeof a, ""));
  }
  b = gi(g, c, b, e);
  b.elementType = a;
  b.type = d;
  b.expirationTime = f;
  return b;
}

function eh(a, b, c, d) {
  a = gi(7, a, d, b);
  a.expirationTime = c;
  return a;
}

function bh(a, b, c) {
  a = gi(6, a, null, b);
  a.expirationTime = c;
  return a;
}

function dh(a, b, c) {
  b = gi(4, null !== a.children ? a.children : [], a.key, b);
  b.expirationTime = c;
  b.stateNode = {
    containerInfo: a.containerInfo,
    pendingChildren: null,
    implementation: a.implementation
  };
  return b;
}

function qk(a, b, c) {
  this.tag = b;
  this.current = null;
  this.containerInfo = a;
  this.pingCache = this.pendingChildren = null;
  this.finishedExpirationTime = 0;
  this.finishedWork = null;
  this.timeoutHandle = -1;
  this.pendingContext = this.context = null;
  this.hydrate = c;
  this.callbackNode = null;
  this.callbackPriority = 90;
  this.lastExpiredTime = this.lastPingedTime = this.nextKnownPendingLevel = this.lastSuspendedTime = this.firstSuspendedTime = this.firstPendingTime = 0;
}

function Pj(a, b) {
  var c = a.firstSuspendedTime;
  a = a.lastSuspendedTime;
  return 0 !== c && c >= b && a <= b;
}

function Mj(a, b) {
  var c = a.firstSuspendedTime,
      d = a.lastSuspendedTime;
  c < b && (a.firstSuspendedTime = b);
  if (d > b || 0 === c) a.lastSuspendedTime = b;
  b <= a.lastPingedTime && (a.lastPingedTime = 0);
  b <= a.lastExpiredTime && (a.lastExpiredTime = 0);
}

function Nj(a, b) {
  b > a.firstPendingTime && (a.firstPendingTime = b);
  var c = a.firstSuspendedTime;
  0 !== c && (b >= c ? a.firstSuspendedTime = a.lastSuspendedTime = a.nextKnownPendingLevel = 0 : b >= a.lastSuspendedTime && (a.lastSuspendedTime = b + 1), b > a.nextKnownPendingLevel && (a.nextKnownPendingLevel = b));
}

function Rj(a, b) {
  var c = a.lastExpiredTime;
  if (0 === c || c > b) a.lastExpiredTime = b;
}

function rk(a, b, c, d) {
  var e = b.current,
      f = Pg(),
      g = Mg.suspense;
  f = Qg(f, e, g);

  a: if (c) {
    c = c._reactInternalFiber;

    b: {
      if (ec(c) !== c || 1 !== c.tag) throw Error(u(170));
      var h = c;

      do {
        switch (h.tag) {
          case 3:
            h = h.stateNode.context;
            break b;

          case 1:
            if (L(h.type)) {
              h = h.stateNode.__reactInternalMemoizedMergedChildContext;
              break b;
            }

        }

        h = h.return;
      } while (null !== h);

      throw Error(u(171));
    }

    if (1 === c.tag) {
      var k = c.type;

      if (L(k)) {
        c = If(c, k, h);
        break a;
      }
    }

    c = h;
  } else c = Cf;

  null === b.context ? b.context = c : b.pendingContext = c;
  b = Bg(f, g);
  b.payload = {
    element: a
  };
  d = void 0 === d ? null : d;
  null !== d && (b.callback = d);
  Dg(e, b);
  Rg(e, f);
  return f;
}

function sk(a) {
  a = a.current;
  if (!a.child) return null;

  switch (a.child.tag) {
    case 5:
      return a.child.stateNode;

    default:
      return a.child.stateNode;
  }
}

function tk(a, b) {
  a = a.memoizedState;
  null !== a && null !== a.dehydrated && a.retryTime < b && (a.retryTime = b);
}

function uk(a, b) {
  tk(a, b);
  (a = a.alternate) && tk(a, b);
}

function vk(a, b, c) {
  c = null != c && !0 === c.hydrate;
  var d = new qk(a, b, c),
      e = gi(3, null, null, 2 === b ? 7 : 1 === b ? 3 : 0);
  d.current = e;
  e.stateNode = d;
  a[we] = d.current;
  c && 0 !== b && wc(9 === a.nodeType ? a : a.ownerDocument);
  this._internalRoot = d;
}

vk.prototype.render = function (a, b) {
  rk(a, this._internalRoot, null, void 0 === b ? null : b);
};

vk.prototype.unmount = function (a) {
  var b = this._internalRoot,
      c = void 0 === a ? null : a,
      d = b.containerInfo;
  rk(null, b, null, function () {
    d[we] = null;
    null !== c && c();
  });
};

function wk(a) {
  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
}

function yk(a, b) {
  b || (b = a ? 9 === a.nodeType ? a.documentElement : a.firstChild : null, b = !(!b || 1 !== b.nodeType || !b.hasAttribute("data-reactroot")));
  if (!b) for (var c; c = a.lastChild;) {
    a.removeChild(c);
  }
  return new vk(a, 0, b ? {
    hydrate: !0
  } : void 0);
}

function zk(a, b, c, d, e) {
  var f = c._reactRootContainer;

  if (f) {
    var g = f._internalRoot;

    if ("function" === typeof e) {
      var h = e;

      e = function e() {
        var a = sk(g);
        h.call(a);
      };
    }

    rk(b, g, a, e);
  } else {
    f = c._reactRootContainer = yk(c, d);
    g = f._internalRoot;

    if ("function" === typeof e) {
      var k = e;

      e = function e() {
        var a = sk(g);
        k.call(a);
      };
    }

    ck(function () {
      rk(b, g, a, e);
    });
  }

  return sk(g);
}

function Ak(a, b, c) {
  var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
  return {
    $$typeof: Ha,
    key: null == d ? null : "" + d,
    children: a,
    containerInfo: b,
    implementation: c
  };
}

jc = function jc(a) {
  if (13 === a.tag) {
    var b = lg(Pg(), 150, 100);
    Rg(a, b);
    uk(a, b);
  }
};

kc = function kc(a) {
  if (13 === a.tag) {
    Pg();
    var b = kg++;
    Rg(a, b);
    uk(a, b);
  }
};

lc = function lc(a) {
  if (13 === a.tag) {
    var b = Pg();
    b = Qg(b, a, null);
    Rg(a, b);
    uk(a, b);
  }
};

Za = function Za(a, b, c) {
  switch (b) {
    case "input":
      Eb(a, c);
      b = c.name;

      if ("radio" === c.type && null != b) {
        for (c = a; c.parentNode;) {
          c = c.parentNode;
        }

        c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');

        for (b = 0; b < c.length; b++) {
          var d = c[b];

          if (d !== a && d.form === a.form) {
            var e = ye(d);
            if (!e) throw Error(u(90));
            zb(d);
            Eb(d, e);
          }
        }
      }

      break;

    case "textarea":
      Mb(a, c);
      break;

    case "select":
      b = c.value, null != b && Jb(a, !!c.multiple, b, !1);
  }
};

eb = bk;

fb = function fb(a, b, c, d) {
  var e = T;
  T |= 4;

  try {
    return fg(98, a.bind(null, b, c, d));
  } finally {
    T = e, T === S && jg();
  }
};

gb = function gb() {
  (T & (1 | oj | pj)) === S && (ak(), Sj());
};

hb = function hb(a, b) {
  var c = T;
  T |= 2;

  try {
    return a(b);
  } finally {
    T = c, T === S && jg();
  }
};

function Bk(a, b) {
  var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
  if (!wk(b)) throw Error(u(200));
  return Ak(a, b, null, c);
}

var Ck = {
  createPortal: Bk,
  findDOMNode: function findDOMNode(a) {
    if (null == a) return null;
    if (1 === a.nodeType) return a;
    var b = a._reactInternalFiber;

    if (void 0 === b) {
      if ("function" === typeof a.render) throw Error(u(188));
      throw Error(u(268, Object.keys(a)));
    }

    a = ic(b);
    a = null === a ? null : a.stateNode;
    return a;
  },
  hydrate: function hydrate(a, b, c) {
    if (!wk(b)) throw Error(u(200));
    return zk(null, a, b, !0, c);
  },
  render: function render(a, b, c) {
    if (!wk(b)) throw Error(u(200));
    return zk(null, a, b, !1, c);
  },
  unstable_renderSubtreeIntoContainer: function unstable_renderSubtreeIntoContainer(a, b, c, d) {
    if (!wk(c)) throw Error(u(200));
    if (null == a || void 0 === a._reactInternalFiber) throw Error(u(38));
    return zk(a, b, c, !1, d);
  },
  unmountComponentAtNode: function unmountComponentAtNode(a) {
    if (!wk(a)) throw Error(u(40));
    return a._reactRootContainer ? (ck(function () {
      zk(null, null, a, !1, function () {
        a._reactRootContainer = null;
        a[we] = null;
      });
    }), !0) : !1;
  },
  unstable_createPortal: function unstable_createPortal() {
    return Bk.apply(void 0, arguments);
  },
  unstable_batchedUpdates: bk,
  flushSync: function flushSync(a, b) {
    if ((T & (oj | pj)) !== S) throw Error(u(187));
    var c = T;
    T |= 1;

    try {
      return fg(99, a.bind(null, b));
    } finally {
      T = c, jg();
    }
  },
  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
    Events: [Cc, xe, ye, Ca.injectEventPluginsByName, fa, Sc, function (a) {
      ya(a, Rc);
    }, cb, db, Pd, Ba, Sj, {
      current: !1
    }]
  }
};

(function (a) {
  var b = a.findFiberByHostInstance;
  return ok(n({}, a, {
    overrideHookState: null,
    overrideProps: null,
    setSuspenseHandler: null,
    scheduleUpdate: null,
    currentDispatcherRef: Ea.ReactCurrentDispatcher,
    findHostInstanceByFiber: function findHostInstanceByFiber(a) {
      a = ic(a);
      return null === a ? null : a.stateNode;
    },
    findFiberByHostInstance: function findFiberByHostInstance(a) {
      return b ? b(a) : null;
    },
    findHostInstancesForRefresh: null,
    scheduleRefresh: null,
    scheduleRoot: null,
    setRefreshHandler: null,
    getCurrentFiber: null
  }));
})({
  findFiberByHostInstance: Fc,
  bundleType: 0,
  version: "16.12.0",
  rendererPackageName: "react-dom"
});

var Dk = {
  default: Ck
},
    Ek = Dk && Ck || Dk;
module.exports = Ek.default || Ek;

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (true) {
  module.exports = __webpack_require__(277);
} else {}

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v0.18.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _f, g, h, k, l;

if ("undefined" === typeof window || "function" !== typeof MessageChannel) {
  var p = null,
      q = null,
      t = function t() {
    if (null !== p) try {
      var a = exports.unstable_now();
      p(!0, a);
      p = null;
    } catch (b) {
      throw setTimeout(t, 0), b;
    }
  },
      u = Date.now();

  exports.unstable_now = function () {
    return Date.now() - u;
  };

  _f = function f(a) {
    null !== p ? setTimeout(_f, 0, a) : (p = a, setTimeout(t, 0));
  };

  g = function g(a, b) {
    q = setTimeout(a, b);
  };

  h = function h() {
    clearTimeout(q);
  };

  k = function k() {
    return !1;
  };

  l = exports.unstable_forceFrameRate = function () {};
} else {
  var w = window.performance,
      x = window.Date,
      y = window.setTimeout,
      z = window.clearTimeout;

  if ("undefined" !== typeof console) {
    var A = window.cancelAnimationFrame;
    "function" !== typeof window.requestAnimationFrame && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
    "function" !== typeof A && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
  }

  if ("object" === typeof w && "function" === typeof w.now) exports.unstable_now = function () {
    return w.now();
  };else {
    var B = x.now();

    exports.unstable_now = function () {
      return x.now() - B;
    };
  }
  var C = !1,
      D = null,
      E = -1,
      F = 5,
      G = 0;

  k = function k() {
    return exports.unstable_now() >= G;
  };

  l = function l() {};

  exports.unstable_forceFrameRate = function (a) {
    0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported") : F = 0 < a ? Math.floor(1E3 / a) : 5;
  };

  var H = new MessageChannel(),
      I = H.port2;

  H.port1.onmessage = function () {
    if (null !== D) {
      var a = exports.unstable_now();
      G = a + F;

      try {
        D(!0, a) ? I.postMessage(null) : (C = !1, D = null);
      } catch (b) {
        throw I.postMessage(null), b;
      }
    } else C = !1;
  };

  _f = function _f(a) {
    D = a;
    C || (C = !0, I.postMessage(null));
  };

  g = function g(a, b) {
    E = y(function () {
      a(exports.unstable_now());
    }, b);
  };

  h = function h() {
    z(E);
    E = -1;
  };
}

function J(a, b) {
  var c = a.length;
  a.push(b);

  a: for (;;) {
    var d = Math.floor((c - 1) / 2),
        e = a[d];
    if (void 0 !== e && 0 < K(e, b)) a[d] = b, a[c] = e, c = d;else break a;
  }
}

function L(a) {
  a = a[0];
  return void 0 === a ? null : a;
}

function M(a) {
  var b = a[0];

  if (void 0 !== b) {
    var c = a.pop();

    if (c !== b) {
      a[0] = c;

      a: for (var d = 0, e = a.length; d < e;) {
        var m = 2 * (d + 1) - 1,
            n = a[m],
            v = m + 1,
            r = a[v];
        if (void 0 !== n && 0 > K(n, c)) void 0 !== r && 0 > K(r, n) ? (a[d] = r, a[v] = c, d = v) : (a[d] = n, a[m] = c, d = m);else if (void 0 !== r && 0 > K(r, c)) a[d] = r, a[v] = c, d = v;else break a;
      }
    }

    return b;
  }

  return null;
}

function K(a, b) {
  var c = a.sortIndex - b.sortIndex;
  return 0 !== c ? c : a.id - b.id;
}

var N = [],
    O = [],
    P = 1,
    Q = null,
    R = 3,
    S = !1,
    T = !1,
    U = !1;

function V(a) {
  for (var b = L(O); null !== b;) {
    if (null === b.callback) M(O);else if (b.startTime <= a) M(O), b.sortIndex = b.expirationTime, J(N, b);else break;
    b = L(O);
  }
}

function W(a) {
  U = !1;
  V(a);
  if (!T) if (null !== L(N)) T = !0, _f(X);else {
    var b = L(O);
    null !== b && g(W, b.startTime - a);
  }
}

function X(a, b) {
  T = !1;
  U && (U = !1, h());
  S = !0;
  var c = R;

  try {
    V(b);

    for (Q = L(N); null !== Q && (!(Q.expirationTime > b) || a && !k());) {
      var d = Q.callback;

      if (null !== d) {
        Q.callback = null;
        R = Q.priorityLevel;
        var e = d(Q.expirationTime <= b);
        b = exports.unstable_now();
        "function" === typeof e ? Q.callback = e : Q === L(N) && M(N);
        V(b);
      } else M(N);

      Q = L(N);
    }

    if (null !== Q) var m = !0;else {
      var n = L(O);
      null !== n && g(W, n.startTime - b);
      m = !1;
    }
    return m;
  } finally {
    Q = null, R = c, S = !1;
  }
}

function Y(a) {
  switch (a) {
    case 1:
      return -1;

    case 2:
      return 250;

    case 5:
      return 1073741823;

    case 4:
      return 1E4;

    default:
      return 5E3;
  }
}

var Z = l;
exports.unstable_ImmediatePriority = 1;
exports.unstable_UserBlockingPriority = 2;
exports.unstable_NormalPriority = 3;
exports.unstable_IdlePriority = 5;
exports.unstable_LowPriority = 4;

exports.unstable_runWithPriority = function (a, b) {
  switch (a) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      break;

    default:
      a = 3;
  }

  var c = R;
  R = a;

  try {
    return b();
  } finally {
    R = c;
  }
};

exports.unstable_next = function (a) {
  switch (R) {
    case 1:
    case 2:
    case 3:
      var b = 3;
      break;

    default:
      b = R;
  }

  var c = R;
  R = b;

  try {
    return a();
  } finally {
    R = c;
  }
};

exports.unstable_scheduleCallback = function (a, b, c) {
  var d = exports.unstable_now();

  if ("object" === typeof c && null !== c) {
    var e = c.delay;
    e = "number" === typeof e && 0 < e ? d + e : d;
    c = "number" === typeof c.timeout ? c.timeout : Y(a);
  } else c = Y(a), e = d;

  c = e + c;
  a = {
    id: P++,
    callback: b,
    priorityLevel: a,
    startTime: e,
    expirationTime: c,
    sortIndex: -1
  };
  e > d ? (a.sortIndex = e, J(O, a), null === L(N) && a === L(O) && (U ? h() : U = !0, g(W, e - d))) : (a.sortIndex = c, J(N, a), T || S || (T = !0, _f(X)));
  return a;
};

exports.unstable_cancelCallback = function (a) {
  a.callback = null;
};

exports.unstable_wrapCallback = function (a) {
  var b = R;
  return function () {
    var c = R;
    R = b;

    try {
      return a.apply(this, arguments);
    } finally {
      R = c;
    }
  };
};

exports.unstable_getCurrentPriorityLevel = function () {
  return R;
};

exports.unstable_shouldYield = function () {
  var a = exports.unstable_now();
  V(a);
  var b = L(N);
  return b !== Q && null !== Q && null !== b && null !== b.callback && b.startTime <= a && b.expirationTime < Q.expirationTime || k();
};

exports.unstable_requestPaint = Z;

exports.unstable_continueExecution = function () {
  T || S || (T = !0, _f(X));
};

exports.unstable_pauseExecution = function () {};

exports.unstable_getFirstCallbackNode = function () {
  return L(N);
};

exports.unstable_Profiling = null;

/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = function () {
  return this || typeof self === "object" && self;
}() || Function("return this")(); // Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.


var hadRuntime = g.regeneratorRuntime && Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0; // Save the old regeneratorRuntime in case it needs to be restored later.

var oldRuntime = hadRuntime && g.regeneratorRuntime; // Force reevalutation of runtime.js.

g.regeneratorRuntime = undefined;
module.exports = __webpack_require__(279);

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch (e) {
    g.regeneratorRuntime = undefined;
  }
}

/***/ }),
/* 279 */
/***/ (function(module, exports) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
!function (global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.

  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;

  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    } // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.


    return;
  } // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.


  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.

    generator._invoke = makeInvokeMethod(innerFn, self, context);
    return generator;
  }

  runtime.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.

  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.


  var IteratorPrototype = {};

  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction"; // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      prototype[method] = function (arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
    // do is to check its .name property.
    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };

  runtime.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;

      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }

    genFun.prototype = Object.create(Gp);
    return genFun;
  }; // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.


  runtime.awrap = function (arg) {
    return {
      __await: arg
    };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;

        if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function (unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function (error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = // If enqueue has been called before, then we want to wait until
      // all previous Promises have been resolved before calling invoke,
      // so that results are always delivered in the correct order. If
      // enqueue has not been called before, then it is important to
      // call invoke immediately, without waiting on a callback to fire,
      // so that the async generator function has the opportunity to do
      // any necessary setup in a predictable way. This predictability
      // is why the Promise constructor synchronously invokes its
      // executor callback, and why async functions synchronously
      // execute code before the first await. Since we implement simple
      // async functions in terms of async generators, it is especially
      // important to get this right, even though it requires care.
      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
      // invocations of the iterator.
      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    } // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).


    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);

  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };

  runtime.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.

  runtime.async = function (innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
    return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
    : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;
    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        } // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;

        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);

          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;
        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);
        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;
        var record = tryCatch(innerFn, self, context);

        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };
        } else if (record.type === "throw") {
          state = GenStateCompleted; // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.

          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  } // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.


  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (!info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

      context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.

      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }
    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    } // The delegate iterator is finished, so forget it and continue with
    // the outer generator.


    context.delegate = null;
    return ContinueSentinel;
  } // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.


  defineIteratorMethods(Gp);
  Gp[toStringTagSymbol] = "Generator"; // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.

  Gp[iteratorSymbol] = function () {
    return this;
  };

  Gp.toString = function () {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{
      tryLoc: "root"
    }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function (object) {
    var keys = [];

    for (var key in object) {
      keys.push(key);
    }

    keys.reverse(); // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.

    return function next() {
      while (keys.length) {
        var key = keys.pop();

        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      } // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.


      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];

      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;
          return next;
        };

        return next.next = next;
      }
    } // Return an iterator with no values.


    return {
      next: doneResult
    };
  }

  runtime.values = values;

  function doneResult() {
    return {
      value: undefined,
      done: true
    };
  }

  Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      this.prev = 0;
      this.next = 0; // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.

      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;
      this.method = "next";
      this.arg = undefined;
      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },
    stop: function stop() {
      this.done = true;
      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;

      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;

      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      } // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.


      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
}( // In sloppy mode, unbound `this` refers to the global object, fallback to
// Function constructor if we're in global strict mode. That is sadly a form
// of indirect eval which violates Content Security Policy.
function () {
  return this || typeof self === "object" && self;
}() || Function("return this")());

/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(__webpack_require__(0));

var _propTypes = _interopRequireDefault(__webpack_require__(42));

var _classnames = _interopRequireDefault(__webpack_require__(135));

var _TransitionGroup = _interopRequireDefault(__webpack_require__(283));

var _Toast = _interopRequireDefault(__webpack_require__(285));

var _CloseButton = _interopRequireDefault(__webpack_require__(287));

var _Transitions = __webpack_require__(189);

var _constant = __webpack_require__(83);

var _eventManager = _interopRequireDefault(__webpack_require__(191));

var _propValidator = __webpack_require__(136);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

          if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }

    newObj.default = obj;
    return newObj;
  }
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

var ToastContainer =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(ToastContainer, _Component);

  function ToastContainer() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = {
      toast: []
    };
    _this.toastKey = 1;
    _this.collection = {};

    _this.isToastActive = function (id) {
      return _this.state.toast.indexOf(id) !== -1;
    };

    return _this;
  }

  var _proto = ToastContainer.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;

    _eventManager.default.on(_constant.ACTION.SHOW, function (content, options) {
      return _this2.show(content, options);
    }).on(_constant.ACTION.CLEAR, function (id) {
      return !id ? _this2.clear() : _this2.removeToast(id);
    }).emit(_constant.ACTION.DID_MOUNT, this);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    _eventManager.default.off(_constant.ACTION.SHOW).off(_constant.ACTION.CLEAR).emit(_constant.ACTION.WILL_UNMOUNT);
  };

  _proto.removeToast = function removeToast(id) {
    this.setState({
      toast: this.state.toast.filter(function (v) {
        return v !== id;
      })
    }, this.dispatchChange);
  };

  _proto.dispatchChange = function dispatchChange() {
    _eventManager.default.emit(_constant.ACTION.ON_CHANGE, this.state.toast.length);
  };

  _proto.makeCloseButton = function makeCloseButton(toastClose, toastId, type) {
    var _this3 = this;

    var closeButton = this.props.closeButton;

    if ((0, _react.isValidElement)(toastClose) || toastClose === false) {
      closeButton = toastClose;
    }

    return closeButton === false ? false : (0, _react.cloneElement)(closeButton, {
      closeToast: function closeToast() {
        return _this3.removeToast(toastId);
      },
      type: type
    });
  };

  _proto.getAutoCloseDelay = function getAutoCloseDelay(toastAutoClose) {
    return toastAutoClose === false || (0, _propValidator.isValidDelay)(toastAutoClose) ? toastAutoClose : this.props.autoClose;
  };

  _proto.canBeRendered = function canBeRendered(content) {
    return (0, _react.isValidElement)(content) || typeof content === 'string' || typeof content === 'number' || typeof content === 'function';
  };

  _proto.parseClassName = function parseClassName(prop) {
    if (typeof prop === 'string') {
      return prop;
    } else if (prop !== null && typeof prop === 'object' && 'toString' in prop) {
      return prop.toString();
    }

    return null;
  };

  _proto.show = function show(content, options) {
    var _this4 = this,
        _extends2;

    if (!this.canBeRendered(content)) {
      throw new Error("The element you provided cannot be rendered. You provided an element of type " + typeof content);
    }

    var toastId = options.toastId;

    var closeToast = function closeToast() {
      return _this4.removeToast(toastId);
    };

    var toastOptions = {
      id: toastId,
      // ⚠️ if no options.key, this.toastKey - 1 is assigned
      key: options.key || this.toastKey++,
      type: options.type,
      closeToast: closeToast,
      updateId: options.updateId,
      rtl: this.props.rtl,
      position: options.position || this.props.position,
      transition: options.transition || this.props.transition,
      className: this.parseClassName(options.className || this.props.toastClassName),
      bodyClassName: this.parseClassName(options.bodyClassName || this.props.bodyClassName),
      closeButton: this.makeCloseButton(options.closeButton, toastId, options.type),
      pauseOnHover: typeof options.pauseOnHover === 'boolean' ? options.pauseOnHover : this.props.pauseOnHover,
      pauseOnFocusLoss: typeof options.pauseOnFocusLoss === 'boolean' ? options.pauseOnFocusLoss : this.props.pauseOnFocusLoss,
      draggable: typeof options.draggable === 'boolean' ? options.draggable : this.props.draggable,
      draggablePercent: typeof options.draggablePercent === 'number' && !isNaN(options.draggablePercent) ? options.draggablePercent : this.props.draggablePercent,
      closeOnClick: typeof options.closeOnClick === 'boolean' ? options.closeOnClick : this.props.closeOnClick,
      progressClassName: this.parseClassName(options.progressClassName || this.props.progressClassName),
      progressStyle: this.props.progressStyle,
      autoClose: this.getAutoCloseDelay(options.autoClose),
      hideProgressBar: typeof options.hideProgressBar === 'boolean' ? options.hideProgressBar : this.props.hideProgressBar,
      progress: parseFloat(options.progress),
      isProgressDone: options.isProgressDone
    };
    typeof options.onOpen === 'function' && (toastOptions.onOpen = options.onOpen);
    typeof options.onClose === 'function' && (toastOptions.onClose = options.onClose); // add closeToast function to react component only

    if ((0, _react.isValidElement)(content) && typeof content.type !== 'string' && typeof content.type !== 'number') {
      content = (0, _react.cloneElement)(content, {
        closeToast: closeToast
      });
    } else if (typeof content === 'function') {
      content = content({
        closeToast: closeToast
      });
    }

    this.collection = _extends({}, this.collection, (_extends2 = {}, _extends2[toastId] = {
      position: toastOptions.position,
      options: toastOptions,
      content: content
    }, _extends2));
    this.setState({
      toast: (toastOptions.updateId ? _toConsumableArray(this.state.toast) : _toConsumableArray(this.state.toast).concat([toastId])).filter(function (id) {
        return id !== options.staleToastId;
      })
    }, this.dispatchChange);
  };

  _proto.makeToast = function makeToast(content, options) {
    return _react.default.createElement(_Toast.default, _extends({}, options, {
      isDocumentHidden: this.state.isDocumentHidden,
      key: "toast-" + options.key
    }), content);
  };

  _proto.clear = function clear() {
    this.setState({
      toast: []
    });
  };

  _proto.renderToast = function renderToast() {
    var _this5 = this;

    var toastToRender = {};
    var _this$props = this.props,
        className = _this$props.className,
        style = _this$props.style,
        newestOnTop = _this$props.newestOnTop;
    var collection = newestOnTop ? Object.keys(this.collection).reverse() : Object.keys(this.collection); // group toast by position

    collection.forEach(function (toastId) {
      var _this5$collection$toa = _this5.collection[toastId],
          position = _this5$collection$toa.position,
          options = _this5$collection$toa.options,
          content = _this5$collection$toa.content;
      toastToRender[position] || (toastToRender[position] = []);

      if (_this5.state.toast.indexOf(options.id) !== -1) {
        toastToRender[position].push(_this5.makeToast(content, options));
      } else {
        toastToRender[position].push(null);
        delete _this5.collection[toastId];
      }
    });
    return Object.keys(toastToRender).map(function (position) {
      var disablePointer = toastToRender[position].length === 1 && toastToRender[position][0] === null;
      var props = {
        className: (0, _classnames.default)('Toastify__toast-container', "Toastify__toast-container--" + position, {
          'Toastify__toast-container--rtl': _this5.props.rtl
        }, _this5.parseClassName(className)),
        style: disablePointer ? _extends({}, style, {
          pointerEvents: 'none'
        }) : _extends({}, style)
      };
      return _react.default.createElement(_TransitionGroup.default, _extends({}, props, {
        key: "container-" + position
      }), toastToRender[position]);
    });
  };

  _proto.render = function render() {
    return _react.default.createElement("div", {
      className: "Toastify"
    }, this.renderToast());
  };

  return ToastContainer;
}(_react.Component);

ToastContainer.propTypes = {
  /**
   * Set toast position
   */
  position: _propTypes.default.oneOf((0, _propValidator.objectValues)(_constant.POSITION)),

  /**
   * Disable or set autoClose delay
   */
  autoClose: _propValidator.falseOrDelay,

  /**
   * Disable or set a custom react element for the close button
   */
  closeButton: _propValidator.falseOrElement,

  /**
   * Hide or not progress bar when autoClose is enabled
   */
  hideProgressBar: _propTypes.default.bool,

  /**
   * Pause toast duration on hover
   */
  pauseOnHover: _propTypes.default.bool,

  /**
   * Dismiss toast on click
   */
  closeOnClick: _propTypes.default.bool,

  /**
   * Newest on top
   */
  newestOnTop: _propTypes.default.bool,

  /**
   * An optional className
   */
  className: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),

  /**
   * An optional style
   */
  style: _propTypes.default.object,

  /**
   * An optional className for the toast
   */
  toastClassName: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),

  /**
   * An optional className for the toast body
   */
  bodyClassName: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),

  /**
   * An optional className for the toast progress bar
   */
  progressClassName: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),

  /**
   * An optional style for the toast progress bar
   */
  progressStyle: _propTypes.default.object,

  /**
   * Define enter and exit transition using react-transition-group
   */
  transition: _propTypes.default.func,

  /**
   * Support rtl display
   */
  rtl: _propTypes.default.bool,

  /**
   * Allow toast to be draggable
   */
  draggable: _propTypes.default.bool,

  /**
   * The percentage of the toast's width it takes for a drag to dismiss a toast
   */
  draggablePercent: _propTypes.default.number,

  /**
   * Pause the toast on focus loss
   */
  pauseOnFocusLoss: _propTypes.default.bool
};
ToastContainer.defaultProps = {
  position: _constant.POSITION.TOP_RIGHT,
  transition: _Transitions.Bounce,
  rtl: false,
  autoClose: 5000,
  hideProgressBar: false,
  closeButton: _react.default.createElement(_CloseButton.default, null),
  pauseOnHover: true,
  pauseOnFocusLoss: true,
  closeOnClick: true,
  newestOnTop: false,
  draggable: true,
  draggablePercent: 80,
  className: null,
  style: null,
  toastClassName: null,
  bodyClassName: null,
  progressClassName: null,
  progressStyle: null
};
var _default = ToastContainer;
exports.default = _default;

/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var ReactPropTypesSecret = __webpack_require__(282);

function emptyFunction() {}

function emptyFunctionWithReset() {}

emptyFunctionWithReset.resetWarningCache = emptyFunction;

module.exports = function () {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }

    var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
    err.name = 'Invariant Violation';
    throw err;
  }

  ;
  shim.isRequired = shim;

  function getShim() {
    return shim;
  }

  ; // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,
    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,
    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };
  ReactPropTypes.PropTypes = ReactPropTypes;
  return ReactPropTypes;
};

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
module.exports = ReactPropTypesSecret;

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(__webpack_require__(42));

var _react = _interopRequireDefault(__webpack_require__(0));

var _reactLifecyclesCompat = __webpack_require__(188);

var _ChildMapping = __webpack_require__(284);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

var values = Object.values || function (obj) {
  return Object.keys(obj).map(function (k) {
    return obj[k];
  });
};

var defaultProps = {
  component: 'div',
  childFactory: function childFactory(child) {
    return child;
  }
  /**
   * The `<TransitionGroup>` component manages a set of transition components
   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
   * components, `<TransitionGroup>` is a state machine for managing the mounting
   * and unmounting of components over time.
   *
   * Consider the example below. As items are removed or added to the TodoList the
   * `in` prop is toggled automatically by the `<TransitionGroup>`.
   *
   * Note that `<TransitionGroup>`  does not define any animation behavior!
   * Exactly _how_ a list item animates is up to the individual transition
   * component. This means you can mix and match animations across different list
   * items.
   */

};

var TransitionGroup =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(TransitionGroup, _React$Component);

  function TransitionGroup(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;

    var handleExited = _this.handleExited.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Initial children should all be entering, dependent on appear


    _this.state = {
      handleExited: handleExited,
      firstRender: true
    };
    return _this;
  }

  var _proto = TransitionGroup.prototype;

  _proto.getChildContext = function getChildContext() {
    return {
      transitionGroup: {
        isMounting: !this.appeared
      }
    };
  };

  _proto.componentDidMount = function componentDidMount() {
    this.appeared = true;
    this.mounted = true;
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.mounted = false;
  };

  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
    var prevChildMapping = _ref.children,
        handleExited = _ref.handleExited,
        firstRender = _ref.firstRender;
    return {
      children: firstRender ? (0, _ChildMapping.getInitialChildMapping)(nextProps, handleExited) : (0, _ChildMapping.getNextChildMapping)(nextProps, prevChildMapping, handleExited),
      firstRender: false
    };
  };

  _proto.handleExited = function handleExited(child, node) {
    var currentChildMapping = (0, _ChildMapping.getChildMapping)(this.props.children);
    if (child.key in currentChildMapping) return;

    if (child.props.onExited) {
      child.props.onExited(node);
    }

    if (this.mounted) {
      this.setState(function (state) {
        var children = _extends({}, state.children);

        delete children[child.key];
        return {
          children: children
        };
      });
    }
  };

  _proto.render = function render() {
    var _this$props = this.props,
        Component = _this$props.component,
        childFactory = _this$props.childFactory,
        props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);

    var children = values(this.state.children).map(childFactory);
    delete props.appear;
    delete props.enter;
    delete props.exit;

    if (Component === null) {
      return children;
    }

    return _react.default.createElement(Component, props, children);
  };

  return TransitionGroup;
}(_react.default.Component);

TransitionGroup.childContextTypes = {
  transitionGroup: _propTypes.default.object.isRequired
};
TransitionGroup.propTypes =  false ? undefined : {};
TransitionGroup.defaultProps = defaultProps;

var _default = (0, _reactLifecyclesCompat.polyfill)(TransitionGroup);

exports.default = _default;
module.exports = exports["default"];

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.getChildMapping = getChildMapping;
exports.mergeChildMappings = mergeChildMappings;
exports.getInitialChildMapping = getInitialChildMapping;
exports.getNextChildMapping = getNextChildMapping;

var _react = __webpack_require__(0);
/**
 * Given `this.props.children`, return an object mapping key to child.
 *
 * @param {*} children `this.props.children`
 * @return {object} Mapping of key to child
 */


function getChildMapping(children, mapFn) {
  var mapper = function mapper(child) {
    return mapFn && (0, _react.isValidElement)(child) ? mapFn(child) : child;
  };

  var result = Object.create(null);
  if (children) _react.Children.map(children, function (c) {
    return c;
  }).forEach(function (child) {
    // run the map function here instead so that the key is the computed one
    result[child.key] = mapper(child);
  });
  return result;
}
/**
 * When you're adding or removing children some may be added or removed in the
 * same render pass. We want to show *both* since we want to simultaneously
 * animate elements in and out. This function takes a previous set of keys
 * and a new set of keys and merges them with its best guess of the correct
 * ordering. In the future we may expose some of the utilities in
 * ReactMultiChild to make this easy, but for now React itself does not
 * directly have this concept of the union of prevChildren and nextChildren
 * so we implement it here.
 *
 * @param {object} prev prev children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @param {object} next next children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @return {object} a key set that contains all keys in `prev` and all keys
 * in `next` in a reasonable order.
 */


function mergeChildMappings(prev, next) {
  prev = prev || {};
  next = next || {};

  function getValueForKey(key) {
    return key in next ? next[key] : prev[key];
  } // For each key of `next`, the list of keys to insert before that key in
  // the combined list


  var nextKeysPending = Object.create(null);
  var pendingKeys = [];

  for (var prevKey in prev) {
    if (prevKey in next) {
      if (pendingKeys.length) {
        nextKeysPending[prevKey] = pendingKeys;
        pendingKeys = [];
      }
    } else {
      pendingKeys.push(prevKey);
    }
  }

  var i;
  var childMapping = {};

  for (var nextKey in next) {
    if (nextKeysPending[nextKey]) {
      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
        var pendingNextKey = nextKeysPending[nextKey][i];
        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
      }
    }

    childMapping[nextKey] = getValueForKey(nextKey);
  } // Finally, add the keys which didn't appear before any key in `next`


  for (i = 0; i < pendingKeys.length; i++) {
    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
  }

  return childMapping;
}

function getProp(child, prop, props) {
  return props[prop] != null ? props[prop] : child.props[prop];
}

function getInitialChildMapping(props, onExited) {
  return getChildMapping(props.children, function (child) {
    return (0, _react.cloneElement)(child, {
      onExited: onExited.bind(null, child),
      in: true,
      appear: getProp(child, 'appear', props),
      enter: getProp(child, 'enter', props),
      exit: getProp(child, 'exit', props)
    });
  });
}

function getNextChildMapping(nextProps, prevChildMapping, onExited) {
  var nextChildMapping = getChildMapping(nextProps.children);
  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
  Object.keys(children).forEach(function (key) {
    var child = children[key];
    if (!(0, _react.isValidElement)(child)) return;
    var hasPrev = key in prevChildMapping;
    var hasNext = key in nextChildMapping;
    var prevChild = prevChildMapping[key];
    var isLeaving = (0, _react.isValidElement)(prevChild) && !prevChild.props.in; // item is new (entering)

    if (hasNext && (!hasPrev || isLeaving)) {
      // console.log('entering', key)
      children[key] = (0, _react.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        exit: getProp(child, 'exit', nextProps),
        enter: getProp(child, 'enter', nextProps)
      });
    } else if (!hasNext && hasPrev && !isLeaving) {
      // item is old (exiting)
      // console.log('leaving', key)
      children[key] = (0, _react.cloneElement)(child, {
        in: false
      });
    } else if (hasNext && hasPrev && (0, _react.isValidElement)(prevChild)) {
      // item hasn't changed transition states
      // copy over the last transition props;
      // console.log('unchanged', key)
      children[key] = (0, _react.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: prevChild.props.in,
        exit: getProp(child, 'exit', nextProps),
        enter: getProp(child, 'enter', nextProps)
      });
    }
  });
  return children;
}

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(__webpack_require__(0));

var _propTypes = _interopRequireDefault(__webpack_require__(42));

var _classnames = _interopRequireDefault(__webpack_require__(135));

var _ProgressBar = _interopRequireDefault(__webpack_require__(286));

var _constant = __webpack_require__(83);

var _propValidator = __webpack_require__(136);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

          if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }

    newObj.default = obj;
    return newObj;
  }
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function getX(e) {
  return e.targetTouches && e.targetTouches.length >= 1 ? e.targetTouches[0].clientX : e.clientX;
}

function getY(e) {
  return e.targetTouches && e.targetTouches.length >= 1 ? e.targetTouches[0].clientY : e.clientY;
}

var noop = function noop() {};

var Toast =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(Toast, _Component);

  function Toast() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = {
      isRunning: true,
      preventExitTransition: false
    };
    _this.flag = {
      canCloseOnClick: true,
      canDrag: false
    };
    _this.drag = {
      start: 0,
      x: 0,
      y: 0,
      deltaX: 0,
      removalDistance: 0
    };
    _this.ref = null;

    _this.pauseToast = function () {
      if (_this.props.autoClose) {
        _this.setState({
          isRunning: false
        });
      }
    };

    _this.playToast = function () {
      if (_this.props.autoClose) {
        _this.setState({
          isRunning: true
        });
      }
    };

    _this.onDragStart = function (e) {
      _this.flag.canCloseOnClick = true;
      _this.flag.canDrag = true;
      _this.ref.style.transition = '';
      _this.drag.start = _this.drag.x = getX(e.nativeEvent);
      _this.drag.removalDistance = _this.ref.offsetWidth * (_this.props.draggablePercent / 100);
    };

    _this.onDragMove = function (e) {
      if (_this.flag.canDrag) {
        if (_this.state.isRunning) {
          _this.pauseToast();
        }

        _this.drag.x = getX(e);
        _this.drag.deltaX = _this.drag.x - _this.drag.start; // prevent false positif during a toast click

        _this.drag.start !== _this.drag.x && (_this.flag.canCloseOnClick = false);
        _this.ref.style.transform = "translateX(" + _this.drag.deltaX + "px)";
        _this.ref.style.opacity = 1 - Math.abs(_this.drag.deltaX / _this.drag.removalDistance);
      }
    };

    _this.onDragEnd = function (e) {
      if (_this.flag.canDrag) {
        _this.flag.canDrag = false;

        if (Math.abs(_this.drag.deltaX) > _this.drag.removalDistance) {
          _this.setState({
            preventExitTransition: true
          }, _this.props.closeToast);

          return;
        }

        _this.drag.y = getY(e);
        _this.ref.style.transition = 'transform 0.2s, opacity 0.2s';
        _this.ref.style.transform = 'translateX(0)';
        _this.ref.style.opacity = 1;
      }
    };

    _this.onDragTransitionEnd = function () {
      var _this$ref$getBounding = _this.ref.getBoundingClientRect(),
          top = _this$ref$getBounding.top,
          bottom = _this$ref$getBounding.bottom,
          left = _this$ref$getBounding.left,
          right = _this$ref$getBounding.right;

      if (_this.props.pauseOnHover && _this.drag.x >= left && _this.drag.x <= right && _this.drag.y >= top && _this.drag.y <= bottom) {
        _this.pauseToast();
      } else {
        _this.playToast();
      }
    };

    return _this;
  }

  var _proto = Toast.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.props.onOpen(this.props.children.props);

    if (this.props.draggable) {
      this.bindDragEvents();
    } // Maybe I could bind the event in the ToastContainer and rely on delegation


    if (this.props.pauseOnFocusLoss) {
      this.bindFocusEvents();
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (prevProps.draggable !== this.props.draggable) {
      if (this.props.draggable) {
        this.bindDragEvents();
      } else {
        this.unbindDragEvents();
      }
    }

    if (prevProps.pauseOnFocusLoss !== this.props.pauseOnFocusLoss) {
      if (this.props.pauseOnFocusLoss) {
        this.bindFocusEvents();
      } else {
        this.unbindFocusEvents();
      }
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.props.onClose(this.props.children.props);

    if (this.props.draggable) {
      this.unbindDragEvents();
    }

    if (this.props.pauseOnFocusLoss) {
      this.unbindFocusEvents();
    }
  };

  _proto.bindFocusEvents = function bindFocusEvents() {
    window.addEventListener('focus', this.playToast);
    window.addEventListener('blur', this.pauseToast);
  };

  _proto.unbindFocusEvents = function unbindFocusEvents() {
    window.removeEventListener('focus', this.playToast);
    window.removeEventListener('blur', this.pauseToast);
  };

  _proto.bindDragEvents = function bindDragEvents() {
    document.addEventListener('mousemove', this.onDragMove);
    document.addEventListener('mouseup', this.onDragEnd);
    document.addEventListener('touchmove', this.onDragMove);
    document.addEventListener('touchend', this.onDragEnd);
  };

  _proto.unbindDragEvents = function unbindDragEvents() {
    document.removeEventListener('mousemove', this.onDragMove);
    document.removeEventListener('mouseup', this.onDragEnd);
    document.removeEventListener('touchmove', this.onDragMove);
    document.removeEventListener('touchend', this.onDragEnd);
  };

  _proto.render = function render() {
    var _this2 = this;

    var _this$props = this.props,
        closeButton = _this$props.closeButton,
        children = _this$props.children,
        autoClose = _this$props.autoClose,
        pauseOnHover = _this$props.pauseOnHover,
        closeOnClick = _this$props.closeOnClick,
        type = _this$props.type,
        hideProgressBar = _this$props.hideProgressBar,
        closeToast = _this$props.closeToast,
        Transition = _this$props.transition,
        position = _this$props.position,
        onExited = _this$props.onExited,
        className = _this$props.className,
        bodyClassName = _this$props.bodyClassName,
        progressClassName = _this$props.progressClassName,
        progressStyle = _this$props.progressStyle,
        updateId = _this$props.updateId,
        role = _this$props.role,
        progress = _this$props.progress,
        isProgressDone = _this$props.isProgressDone,
        rtl = _this$props.rtl;
    var toastProps = {
      className: (0, _classnames.default)('Toastify__toast', "Toastify__toast--" + type, {
        'Toastify__toast--rtl': rtl
      }, className)
    };

    if (autoClose && pauseOnHover) {
      toastProps.onMouseEnter = this.pauseToast;
      toastProps.onMouseLeave = this.playToast;
    } // prevent toast from closing when user drags the toast


    if (closeOnClick) {
      toastProps.onClick = function () {
        return _this2.flag.canCloseOnClick && closeToast();
      };
    }

    var controlledProgress = parseFloat(progress) === progress;
    return _react.default.createElement(Transition, {
      in: this.props.in,
      appear: true,
      unmountOnExit: true,
      onExited: onExited,
      position: position,
      preventExitTransition: this.state.preventExitTransition
    }, _react.default.createElement("div", _extends({}, toastProps, {
      ref: function ref(_ref) {
        return _this2.ref = _ref;
      },
      onMouseDown: this.onDragStart,
      onTouchStart: this.onDragStart,
      onTransitionEnd: this.onDragTransitionEnd
    }), _react.default.createElement("div", _extends({}, this.props.in && {
      role: role
    }, {
      className: (0, _classnames.default)('Toastify__toast-body', bodyClassName)
    }), children), closeButton && closeButton, (autoClose || controlledProgress) && _react.default.createElement(_ProgressBar.default, _extends({}, updateId && !controlledProgress ? {
      key: "pb-" + updateId
    } : {}, {
      rtl: rtl,
      delay: autoClose,
      isRunning: this.state.isRunning,
      closeToast: closeToast,
      hide: hideProgressBar,
      type: type,
      style: progressStyle,
      className: progressClassName,
      controlledProgress: controlledProgress,
      isProgressDone: isProgressDone,
      progress: progress
    }))));
  };

  return Toast;
}(_react.Component);

Toast.propTypes = {
  closeButton: _propValidator.falseOrElement.isRequired,
  autoClose: _propValidator.falseOrDelay.isRequired,
  children: _propTypes.default.node.isRequired,
  closeToast: _propTypes.default.func.isRequired,
  position: _propTypes.default.oneOf((0, _propValidator.objectValues)(_constant.POSITION)).isRequired,
  pauseOnHover: _propTypes.default.bool.isRequired,
  pauseOnFocusLoss: _propTypes.default.bool.isRequired,
  closeOnClick: _propTypes.default.bool.isRequired,
  transition: _propTypes.default.func.isRequired,
  rtl: _propTypes.default.bool.isRequired,
  hideProgressBar: _propTypes.default.bool.isRequired,
  draggable: _propTypes.default.bool.isRequired,
  draggablePercent: _propTypes.default.number.isRequired,
  in: _propTypes.default.bool,
  onExited: _propTypes.default.func,
  onOpen: _propTypes.default.func,
  onClose: _propTypes.default.func,
  type: _propTypes.default.oneOf((0, _propValidator.objectValues)(_constant.TYPE)),
  className: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),
  bodyClassName: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),
  progressClassName: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),
  progressStyle: _propTypes.default.object,
  progress: _propTypes.default.number,
  isProgressDone: _propTypes.default.bool,
  updateId: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  ariaLabel: _propTypes.default.string
};
Toast.defaultProps = {
  type: _constant.TYPE.DEFAULT,
  in: true,
  onOpen: noop,
  onClose: noop,
  className: null,
  bodyClassName: null,
  progressClassName: null,
  updateId: null,
  role: 'alert'
};
var _default = Toast;
exports.default = _default;

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(__webpack_require__(0));

var _propTypes = _interopRequireDefault(__webpack_require__(42));

var _classnames = _interopRequireDefault(__webpack_require__(135));

var _constant = __webpack_require__(83);

var _propValidator = __webpack_require__(136);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function ProgressBar(_ref) {
  var _animationEvent;

  var delay = _ref.delay,
      isRunning = _ref.isRunning,
      closeToast = _ref.closeToast,
      type = _ref.type,
      hide = _ref.hide,
      className = _ref.className,
      userStyle = _ref.style,
      controlledProgress = _ref.controlledProgress,
      progress = _ref.progress,
      isProgressDone = _ref.isProgressDone,
      rtl = _ref.rtl;

  var style = _extends({}, userStyle, {
    animationDuration: delay + "ms",
    animationPlayState: isRunning ? 'running' : 'paused',
    opacity: hide ? 0 : 1,
    transform: controlledProgress ? "scaleX(" + progress + ")" : null
  });

  var classNames = (0, _classnames.default)('Toastify__progress-bar', controlledProgress ? 'Toastify__progress-bar--controlled' : 'Toastify__progress-bar--animated', "Toastify__progress-bar--" + type, {
    'Toastify__progress-bar--rtl': rtl
  }, className);
  var animationEvent = (_animationEvent = {}, _animationEvent[controlledProgress && isProgressDone ? 'onTransitionEnd' : 'onAnimationEnd'] = controlledProgress && !isProgressDone ? null : closeToast, _animationEvent);
  return _react.default.createElement("div", _extends({
    className: classNames,
    style: style
  }, animationEvent));
}

ProgressBar.propTypes = {
  /**
   * The animation delay which determine when to close the toast
   */
  delay: _propValidator.falseOrDelay.isRequired,

  /**
   * Whether or not the animation is running or paused
   */
  isRunning: _propTypes.default.bool.isRequired,

  /**
   * Func to close the current toast
   */
  closeToast: _propTypes.default.func.isRequired,

  /**
   * Support rtl content
   */
  rtl: _propTypes.default.bool.isRequired,

  /**
   * Optional type : info, success ...
   */
  type: _propTypes.default.string,

  /**
   * Hide or not the progress bar
   */
  hide: _propTypes.default.bool,

  /**
   * Optionnal className
   */
  className: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),

  /**
   * Controlled progress value
   */
  progress: _propTypes.default.number,

  /**
   * Tell wether or not controlled progress bar is used
   */
  controlledProgress: _propTypes.default.bool,

  /**
   * Helper to close the toast when using controlled progress value
   */
  isProgressDone: _propTypes.default.bool
};
ProgressBar.defaultProps = {
  type: _constant.TYPE.DEFAULT,
  hide: false
};
var _default = ProgressBar;
exports.default = _default;

/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(__webpack_require__(0));

var _propTypes = _interopRequireDefault(__webpack_require__(42));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function CloseButton(_ref) {
  var closeToast = _ref.closeToast,
      type = _ref.type,
      ariaLabel = _ref.ariaLabel;
  return _react.default.createElement("button", {
    className: "Toastify__close-button Toastify__close-button--" + type,
    type: "button",
    onClick: closeToast,
    "aria-label": ariaLabel
  }, "\u2716");
}

CloseButton.propTypes = {
  closeToast: _propTypes.default.func,
  arialLabel: _propTypes.default.string
};
CloseButton.defaultProps = {
  ariaLabel: 'close'
};
var _default = CloseButton;
exports.default = _default;

/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = void 0;

var PropTypes = _interopRequireWildcard(__webpack_require__(42));

var _react = _interopRequireDefault(__webpack_require__(0));

var _reactDom = _interopRequireDefault(__webpack_require__(80));

var _reactLifecyclesCompat = __webpack_require__(188);

var _PropTypes = __webpack_require__(289);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

          if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }

    newObj.default = obj;
    return newObj;
  }
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

var UNMOUNTED = 'unmounted';
exports.UNMOUNTED = UNMOUNTED;
var EXITED = 'exited';
exports.EXITED = EXITED;
var ENTERING = 'entering';
exports.ENTERING = ENTERING;
var ENTERED = 'entered';
exports.ENTERED = ENTERED;
var EXITING = 'exiting';
/**
 * The Transition component lets you describe a transition from one component
 * state to another _over time_ with a simple declarative API. Most commonly
 * it's used to animate the mounting and unmounting of a component, but can also
 * be used to describe in-place transition states as well.
 *
 * ---
 *
 * **Note**: `Transition` is a platform-agnostic base component. If you're using
 * transitions in CSS, you'll probably want to use
 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
 * instead. It inherits all the features of `Transition`, but contains
 * additional features necessary to play nice with CSS transitions (hence the
 * name of the component).
 *
 * ---
 *
 * By default the `Transition` component does not alter the behavior of the
 * component it renders, it only tracks "enter" and "exit" states for the
 * components. It's up to you to give meaning and effect to those states. For
 * example we can add styles to a component when it enters or exits:
 *
 * ```jsx
 * import { Transition } from 'react-transition-group';
 *
 * const duration = 300;
 *
 * const defaultStyle = {
 *   transition: `opacity ${duration}ms ease-in-out`,
 *   opacity: 0,
 * }
 *
 * const transitionStyles = {
 *   entering: { opacity: 0 },
 *   entered:  { opacity: 1 },
 * };
 *
 * const Fade = ({ in: inProp }) => (
 *   <Transition in={inProp} timeout={duration}>
 *     {state => (
 *       <div style={{
 *         ...defaultStyle,
 *         ...transitionStyles[state]
 *       }}>
 *         I'm a fade Transition!
 *       </div>
 *     )}
 *   </Transition>
 * );
 * ```
 *
 * There are 4 main states a Transition can be in:
 *  - `'entering'`
 *  - `'entered'`
 *  - `'exiting'`
 *  - `'exited'`
 *
 * Transition state is toggled via the `in` prop. When `true` the component
 * begins the "Enter" stage. During this stage, the component will shift from
 * its current transition state, to `'entering'` for the duration of the
 * transition and then to the `'entered'` stage once it's complete. Let's take
 * the following example (we'll use the
 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
 *
 * ```jsx
 * function App() {
 *   const [inProp, setInProp] = useState(false);
 *   return (
 *     <div>
 *       <Transition in={inProp} timeout={500}>
 *         {state => (
 *           // ...
 *         )}
 *       </Transition>
 *       <button onClick={() => setInProp(true)}>
 *         Click to Enter
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the button is clicked the component will shift to the `'entering'` state
 * and stay there for 500ms (the value of `timeout`) before it finally switches
 * to `'entered'`.
 *
 * When `in` is `false` the same thing happens except the state moves from
 * `'exiting'` to `'exited'`.
 */

exports.EXITING = EXITING;

var Transition =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Transition, _React$Component);

  function Transition(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;
    var parentGroup = context.transitionGroup; // In the context of a TransitionGroup all enters are really appears

    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
    var initialStatus;
    _this.appearStatus = null;

    if (props.in) {
      if (appear) {
        initialStatus = EXITED;
        _this.appearStatus = ENTERING;
      } else {
        initialStatus = ENTERED;
      }
    } else {
      if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = UNMOUNTED;
      } else {
        initialStatus = EXITED;
      }
    }

    _this.state = {
      status: initialStatus
    };
    _this.nextCallback = null;
    return _this;
  }

  var _proto = Transition.prototype;

  _proto.getChildContext = function getChildContext() {
    return {
      transitionGroup: null // allows for nested Transitions

    };
  };

  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
    var nextIn = _ref.in;

    if (nextIn && prevState.status === UNMOUNTED) {
      return {
        status: EXITED
      };
    }

    return null;
  }; // getSnapshotBeforeUpdate(prevProps) {
  //   let nextStatus = null
  //   if (prevProps !== this.props) {
  //     const { status } = this.state
  //     if (this.props.in) {
  //       if (status !== ENTERING && status !== ENTERED) {
  //         nextStatus = ENTERING
  //       }
  //     } else {
  //       if (status === ENTERING || status === ENTERED) {
  //         nextStatus = EXITING
  //       }
  //     }
  //   }
  //   return { nextStatus }
  // }


  _proto.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextStatus = null;

    if (prevProps !== this.props) {
      var status = this.state.status;

      if (this.props.in) {
        if (status !== ENTERING && status !== ENTERED) {
          nextStatus = ENTERING;
        }
      } else {
        if (status === ENTERING || status === ENTERED) {
          nextStatus = EXITING;
        }
      }
    }

    this.updateStatus(false, nextStatus);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };

  _proto.getTimeouts = function getTimeouts() {
    var timeout = this.props.timeout;
    var exit, enter, appear;
    exit = enter = appear = timeout;

    if (timeout != null && typeof timeout !== 'number') {
      exit = timeout.exit;
      enter = timeout.enter; // TODO: remove fallback for next major

      appear = timeout.appear !== undefined ? timeout.appear : enter;
    }

    return {
      exit: exit,
      enter: enter,
      appear: appear
    };
  };

  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
    if (mounting === void 0) {
      mounting = false;
    }

    if (nextStatus !== null) {
      // nextStatus will always be ENTERING or EXITING.
      this.cancelNextCallback();

      var node = _reactDom.default.findDOMNode(this);

      if (nextStatus === ENTERING) {
        this.performEnter(node, mounting);
      } else {
        this.performExit(node);
      }
    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
      this.setState({
        status: UNMOUNTED
      });
    }
  };

  _proto.performEnter = function performEnter(node, mounting) {
    var _this2 = this;

    var enter = this.props.enter;
    var appearing = this.context.transitionGroup ? this.context.transitionGroup.isMounting : mounting;
    var timeouts = this.getTimeouts();
    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
    // if we are mounting and running this it means appear _must_ be set

    if (!mounting && !enter) {
      this.safeSetState({
        status: ENTERED
      }, function () {
        _this2.props.onEntered(node);
      });
      return;
    }

    this.props.onEnter(node, appearing);
    this.safeSetState({
      status: ENTERING
    }, function () {
      _this2.props.onEntering(node, appearing);

      _this2.onTransitionEnd(node, enterTimeout, function () {
        _this2.safeSetState({
          status: ENTERED
        }, function () {
          _this2.props.onEntered(node, appearing);
        });
      });
    });
  };

  _proto.performExit = function performExit(node) {
    var _this3 = this;

    var exit = this.props.exit;
    var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED

    if (!exit) {
      this.safeSetState({
        status: EXITED
      }, function () {
        _this3.props.onExited(node);
      });
      return;
    }

    this.props.onExit(node);
    this.safeSetState({
      status: EXITING
    }, function () {
      _this3.props.onExiting(node);

      _this3.onTransitionEnd(node, timeouts.exit, function () {
        _this3.safeSetState({
          status: EXITED
        }, function () {
          _this3.props.onExited(node);
        });
      });
    });
  };

  _proto.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };

  _proto.safeSetState = function safeSetState(nextState, callback) {
    // This shouldn't be necessary, but there are weird race conditions with
    // setState callbacks and unmounting in testing, so always make sure that
    // we can cancel any pending setState callbacks after we unmount.
    callback = this.setNextCallback(callback);
    this.setState(nextState, callback);
  };

  _proto.setNextCallback = function setNextCallback(callback) {
    var _this4 = this;

    var active = true;

    this.nextCallback = function (event) {
      if (active) {
        active = false;
        _this4.nextCallback = null;
        callback(event);
      }
    };

    this.nextCallback.cancel = function () {
      active = false;
    };

    return this.nextCallback;
  };

  _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {
    this.setNextCallback(handler);
    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

    if (!node || doesNotHaveTimeoutOrListener) {
      setTimeout(this.nextCallback, 0);
      return;
    }

    if (this.props.addEndListener) {
      this.props.addEndListener(node, this.nextCallback);
    }

    if (timeout != null) {
      setTimeout(this.nextCallback, timeout);
    }
  };

  _proto.render = function render() {
    var status = this.state.status;

    if (status === UNMOUNTED) {
      return null;
    }

    var _this$props = this.props,
        children = _this$props.children,
        childProps = _objectWithoutPropertiesLoose(_this$props, ["children"]); // filter props for Transtition


    delete childProps.in;
    delete childProps.mountOnEnter;
    delete childProps.unmountOnExit;
    delete childProps.appear;
    delete childProps.enter;
    delete childProps.exit;
    delete childProps.timeout;
    delete childProps.addEndListener;
    delete childProps.onEnter;
    delete childProps.onEntering;
    delete childProps.onEntered;
    delete childProps.onExit;
    delete childProps.onExiting;
    delete childProps.onExited;

    if (typeof children === 'function') {
      return children(status, childProps);
    }

    var child = _react.default.Children.only(children);

    return _react.default.cloneElement(child, childProps);
  };

  return Transition;
}(_react.default.Component);

Transition.contextTypes = {
  transitionGroup: PropTypes.object
};
Transition.childContextTypes = {
  transitionGroup: function transitionGroup() {}
};
Transition.propTypes =  false ? undefined : {};

function noop() {}

Transition.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: noop,
  onEntering: noop,
  onEntered: noop,
  onExit: noop,
  onExiting: noop,
  onExited: noop
};
Transition.UNMOUNTED = 0;
Transition.EXITED = 1;
Transition.ENTERING = 2;
Transition.ENTERED = 3;
Transition.EXITING = 4;

var _default = (0, _reactLifecyclesCompat.polyfill)(Transition);

exports.default = _default;

/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.classNamesShape = exports.timeoutsShape = void 0;

var _propTypes = _interopRequireDefault(__webpack_require__(42));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var timeoutsShape =  false ? undefined : null;
exports.timeoutsShape = timeoutsShape;
var classNamesShape =  false ? undefined : null;
exports.classNamesShape = classNamesShape;

/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _eventManager = _interopRequireDefault(__webpack_require__(191));

var _constant = __webpack_require__(83);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var container = null;
var queue = [];

var noop = function noop() {
  return false;
};
/**
 * Merge provided options with the defaults settings and generate the toastId
 */


function mergeOptions(options, type) {
  return _extends({}, options, {
    type: type,
    toastId: getToastId(options)
  });
}
/**
 * Generate a random toastId
 */


function generateToastId() {
  return (Math.random().toString(36) + Date.now().toString(36)).substr(2, 10);
}
/**
 * Generate the toastId either automatically or by provided toastId
 */


function getToastId(options) {
  if (options && (typeof options.toastId === 'string' || typeof options.toastId === 'number' && !isNaN(options.toastId))) {
    return options.toastId;
  }

  return generateToastId();
}
/**
 * Dispatch toast. If the container is not mounted, the toast is enqueued
 */


function emitEvent(content, options) {
  if (container !== null) {
    _eventManager.default.emit(_constant.ACTION.SHOW, content, options);
  } else {
    queue.push({
      action: _constant.ACTION.SHOW,
      content: content,
      options: options
    });
  }

  return options.toastId;
}

var toast = _extends(function (content, options) {
  return emitEvent(content, mergeOptions(options, options && options.type || _constant.TYPE.DEFAULT));
}, {
  success: function success(content, options) {
    return emitEvent(content, mergeOptions(options, _constant.TYPE.SUCCESS));
  },
  info: function info(content, options) {
    return emitEvent(content, mergeOptions(options, _constant.TYPE.INFO));
  },
  warn: function warn(content, options) {
    return emitEvent(content, mergeOptions(options, _constant.TYPE.WARNING));
  },
  warning: function warning(content, options) {
    return emitEvent(content, mergeOptions(options, _constant.TYPE.WARNING));
  },
  error: function error(content, options) {
    return emitEvent(content, mergeOptions(options, _constant.TYPE.ERROR));
  },
  dismiss: function dismiss(id) {
    if (id === void 0) {
      id = null;
    }

    return container && _eventManager.default.emit(_constant.ACTION.CLEAR, id);
  },
  isActive: noop,
  update: function update(toastId, options) {
    setTimeout(function () {
      if (container && typeof container.collection[toastId] !== 'undefined') {
        var _container$collection = container.collection[toastId],
            oldOptions = _container$collection.options,
            oldContent = _container$collection.content;

        var nextOptions = _extends({}, oldOptions, options, {
          toastId: options.toastId || toastId
        });

        if (!options.toastId || options.toastId === toastId) {
          nextOptions.updateId = generateToastId();
        } else {
          nextOptions.staleToastId = toastId;
        }

        var content = typeof nextOptions.render !== 'undefined' ? nextOptions.render : oldContent;
        delete nextOptions.render;
        emitEvent(content, nextOptions);
      }
    }, 0);
  },
  done: function done(id, progress) {
    if (progress === void 0) {
      progress = 1;
    }

    toast.update(id, {
      progress: progress,
      isProgressDone: true
    });
  },
  onChange: function onChange(callback) {
    if (typeof callback === 'function') {
      _eventManager.default.on(_constant.ACTION.ON_CHANGE, callback);
    }
  },
  POSITION: _constant.POSITION,
  TYPE: _constant.TYPE
});
/**
 * Wait until the ToastContainer is mounted to dispatch the toast
 * and attach isActive method
 */


_eventManager.default.on(_constant.ACTION.DID_MOUNT, function (containerInstance) {
  container = containerInstance;

  toast.isActive = function (id) {
    return container.isToastActive(id);
  };

  queue.forEach(function (item) {
    _eventManager.default.emit(item.action, item.content, item.options);
  });
  queue = [];
}).on(_constant.ACTION.WILL_UNMOUNT, function () {
  container = null;
  toast.isActive = noop;
});

var _default = toast;
exports.default = _default;

/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// ag-grid-react v20.2.0


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var React = __webpack_require__(0);

var ReactDOM = __webpack_require__(80);

var PropTypes = __webpack_require__(42);

var AgGrid = __webpack_require__(56);

var ag_grid_community_1 = __webpack_require__(56);

var agGridColumn_1 = __webpack_require__(227);

var reactComponent_1 = __webpack_require__(317);

var changeDetectionService_1 = __webpack_require__(318);

var legacyReactComponent_1 = __webpack_require__(319);

var AgGridReact =
/** @class */
function (_super) {
  __extends(AgGridReact, _super);

  function AgGridReact(props, state) {
    var _this = _super.call(this, props, state) || this;

    _this.props = props;
    _this.state = state;
    _this.destroyed = false;
    _this.changeDetectionService = new changeDetectionService_1.ChangeDetectionService();
    _this.api = null;
    _this.portals = [];
    _this.hasPendingPortalUpdate = false;
    return _this;
  }

  AgGridReact.prototype.render = function () {
    var _this = this;

    return React.createElement("div", {
      style: this.createStyleForDiv(),
      ref: function ref(e) {
        _this.eGridDiv = e;
      }
    }, this.portals);
  };

  AgGridReact.prototype.createStyleForDiv = function () {
    var style = {
      height: "100%"
    }; // allow user to override styles

    var containerStyle = this.props.containerStyle;

    if (containerStyle) {
      Object.keys(containerStyle).forEach(function (key) {
        style[key] = containerStyle[key];
      });
    }

    return style;
  };

  AgGridReact.prototype.componentDidMount = function () {
    var gridParams = {
      seedBeanInstances: {
        agGridReact: this
      }
    };
    var gridOptions = this.props.gridOptions || {};

    if (agGridColumn_1.AgGridColumn.hasChildColumns(this.props)) {
      gridOptions.columnDefs = agGridColumn_1.AgGridColumn.mapChildColumnDefs(this.props);
    }

    this.gridOptions = AgGrid.ComponentUtil.copyAttributesToGridOptions(gridOptions, this.props); // don't need the return value

    new AgGrid.Grid(this.eGridDiv, this.gridOptions, gridParams);
    this.api = this.gridOptions.api;
    this.columnApi = this.gridOptions.columnApi;
  };

  AgGridReact.prototype.shouldComponentUpdate = function () {
    // we want full control of the dom, as ag-Grid doesn't use React internally,
    // so for performance reasons we tell React we don't need render called after
    // property changes.
    return false;
  };

  AgGridReact.prototype.waitForInstance = function (reactComponent, resolve, runningTime) {
    var _this = this;

    if (runningTime === void 0) {
      runningTime = 0;
    }

    if (reactComponent.getFrameworkComponentInstance() || reactComponent.isStatelesComponent()) {
      resolve(null);
    } else {
      if (runningTime >= AgGridReact.MAX_COMPONENT_CREATION_TIME) {
        console.error("ag-Grid: React Component '" + reactComponent.getReactComponentName() + "' not created within " + AgGridReact.MAX_COMPONENT_CREATION_TIME + "ms");
        return;
      }

      window.setTimeout(function () {
        return _this.waitForInstance(reactComponent, resolve, runningTime + 5);
      }, 5);
    }
  };
  /**
   * Mounts a react portal for components registered under the componentFramework.
   * We do this because we want all portals to be in the same tree - in order to get
   * Context to work properly.
   */


  AgGridReact.prototype.mountReactPortal = function (portal, reactComponent, resolve) {
    this.portals = this.portals.concat([portal]);
    this.batchUpdate(this.waitForInstance(reactComponent, resolve));
  };

  AgGridReact.prototype.batchUpdate = function (callback) {
    var _this = this;

    if (this.hasPendingPortalUpdate) {
      return callback && callback();
    }

    setTimeout(function () {
      if (_this.api) {
        // destroyed?
        _this.forceUpdate(function () {
          callback && callback();
          _this.hasPendingPortalUpdate = false;
        });
      }
    });
    this.hasPendingPortalUpdate = true;
  };

  AgGridReact.prototype.destroyPortal = function (portal) {
    this.portals = this.portals.filter(function (curPortal) {
      return curPortal !== portal;
    });
    this.batchUpdate();
  };

  AgGridReact.prototype.getStrategyTypeForProp = function (propKey) {
    if (propKey === 'rowData') {
      // for row data we either return the supplied strategy, or:
      // if deltaRowDataMode we default to IdentityChecks,
      // if not we default to DeepValueChecks (with the rest of the properties)
      if (!!this.props.rowDataChangeDetectionStrategy) {
        return this.props.rowDataChangeDetectionStrategy;
      } else if (this.props['deltaRowDataMode']) {
        return changeDetectionService_1.ChangeDetectionStrategyType.IdentityCheck;
      }
    } // all non row data properties will default to DeepValueCheck


    return changeDetectionService_1.ChangeDetectionStrategyType.DeepValueCheck;
  };

  AgGridReact.prototype.componentWillReceiveProps = function (nextProps) {
    var _this = this;

    var debugLogging = !!nextProps.debug;
    var changes = {};
    var changedKeys = Object.keys(nextProps);
    changedKeys.forEach(function (propKey) {
      if (AgGrid.ComponentUtil.ALL_PROPERTIES.indexOf(propKey) !== -1) {
        var changeDetectionStrategy = _this.changeDetectionService.getStrategy(_this.getStrategyTypeForProp(propKey));

        if (!changeDetectionStrategy.areEqual(_this.props[propKey], nextProps[propKey])) {
          if (debugLogging) {
            console.log("agGridReact: [" + propKey + "] property changed");
          }

          changes[propKey] = {
            previousValue: _this.props[propKey],
            currentValue: nextProps[propKey]
          };
        }
      }
    });
    AgGrid.ComponentUtil.getEventCallbacks().forEach(function (funcName) {
      if (_this.props[funcName] !== nextProps[funcName]) {
        if (debugLogging) {
          console.log("agGridReact: [" + funcName + "] event callback changed");
        }

        changes[funcName] = {
          previousValue: _this.props[funcName],
          currentValue: nextProps[funcName]
        };
      }
    });
    AgGrid.ComponentUtil.processOnChange(changes, this.gridOptions, this.api, this.columnApi);
  };

  AgGridReact.prototype.componentWillUnmount = function () {
    if (this.api) {
      this.api.destroy();
      this.api = null;
    }
  };

  AgGridReact.MAX_COMPONENT_CREATION_TIME = 1000; // a second should be more than enough to instantiate a component

  return AgGridReact;
}(React.Component);

exports.AgGridReact = AgGridReact;
AgGridReact.propTypes = {
  gridOptions: PropTypes.object
};
addProperties(AgGrid.ComponentUtil.getEventCallbacks(), PropTypes.func);
addProperties(AgGrid.ComponentUtil.BOOLEAN_PROPERTIES, PropTypes.bool);
addProperties(AgGrid.ComponentUtil.STRING_PROPERTIES, PropTypes.string);
addProperties(AgGrid.ComponentUtil.OBJECT_PROPERTIES, PropTypes.object);
addProperties(AgGrid.ComponentUtil.ARRAY_PROPERTIES, PropTypes.array);
addProperties(AgGrid.ComponentUtil.NUMBER_PROPERTIES, PropTypes.number);
addProperties(AgGrid.ComponentUtil.FUNCTION_PROPERTIES, PropTypes.func);

function addProperties(listOfProps, propType) {
  listOfProps.forEach(function (propKey) {
    AgGridReact[propKey] = propType;
  });
}

var ReactFrameworkComponentWrapper =
/** @class */
function (_super) {
  __extends(ReactFrameworkComponentWrapper, _super);

  function ReactFrameworkComponentWrapper() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ReactFrameworkComponentWrapper.prototype.createWrapper = function (UserReactComponent) {
    // at some point soon unstable_renderSubtreeIntoContainer is going to be dropped (and in a minor release at that)
    // this uses the existing mechanism as long as possible, but switches over to using Portals when
    // unstable_renderSubtreeIntoContainer is no longer an option
    return this.useLegacyReact() ? new legacyReactComponent_1.LegacyReactComponent(UserReactComponent, this.agGridReact) : new reactComponent_1.ReactComponent(UserReactComponent, this.agGridReact);
  };

  ReactFrameworkComponentWrapper.prototype.useLegacyReact = function () {
    // force use of react next (ie portals) if unstable_renderSubtreeIntoContainer is no longer present
    // or if the user elects to try it
    return typeof ReactDOM.unstable_renderSubtreeIntoContainer !== "function" || this.agGridReact && this.agGridReact.gridOptions && !this.agGridReact.gridOptions.reactNext;
  };

  __decorate([ag_grid_community_1.Autowired("agGridReact"), __metadata("design:type", AgGridReact)], ReactFrameworkComponentWrapper.prototype, "agGridReact", void 0);

  ReactFrameworkComponentWrapper = __decorate([ag_grid_community_1.Bean("frameworkComponentWrapper")], ReactFrameworkComponentWrapper);
  return ReactFrameworkComponentWrapper;
}(ag_grid_community_1.BaseComponentWrapper);

AgGrid.Grid.setFrameworkBeans([ReactFrameworkComponentWrapper]);

/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var component_1 = __webpack_require__(22);

var context_1 = __webpack_require__(2);

var rowNode_1 = __webpack_require__(39);

var dragAndDropService_1 = __webpack_require__(34);

var eventKeys_1 = __webpack_require__(57);

var beanStub_1 = __webpack_require__(32);

var utils_1 = __webpack_require__(6);

var RowDragComp =
/** @class */
function (_super) {
  __extends(RowDragComp, _super);

  function RowDragComp(rowNode, column, cellValue, beans) {
    var _this = _super.call(this, "<div class=\"ag-row-drag\"></div>") || this;

    _this.visibleMode = null;
    _this.rowNode = rowNode;
    _this.column = column;
    _this.cellValue = cellValue;
    _this.beans = beans;
    return _this;
  }

  RowDragComp.prototype.postConstruct = function () {
    var eGui = this.getGui();
    eGui.appendChild(utils_1._.createIconNoSpan('rowDrag', this.beans.gridOptionsWrapper, null));
    this.addDragSource();
    this.checkCompatibility();

    if (this.beans.gridOptionsWrapper.isRowDragManaged()) {
      this.addFeature(this.beans.context, new ManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column));
    } else {
      this.addFeature(this.beans.context, new NonManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column));
    }
  }; // returns true if all compatibility items work out


  RowDragComp.prototype.checkCompatibility = function () {
    var managed = this.beans.gridOptionsWrapper.isRowDragManaged();
    var treeData = this.beans.gridOptionsWrapper.isTreeData();

    if (treeData && managed) {
      utils_1._.doOnce(function () {
        return console.warn('ag-Grid: If using row drag with tree data, you cannot have rowDragManaged=true');
      }, 'RowDragComp.managedAndTreeData');
    }
  };

  RowDragComp.prototype.addDragSource = function () {
    var _this = this;

    var dragItem = {
      rowNode: this.rowNode
    };
    var dragSource = {
      type: dragAndDropService_1.DragSourceType.RowDrag,
      eElement: this.getGui(),
      dragItemName: this.cellValue,
      dragItemCallback: function dragItemCallback() {
        return dragItem;
      },
      dragStartPixels: 0
    };
    this.beans.dragAndDropService.addDragSource(dragSource, true);
    this.addDestroyFunc(function () {
      return _this.beans.dragAndDropService.removeDragSource(dragSource);
    });
  };

  RowDragComp.prototype.getVisibleMode = function () {
    return this.visibleMode;
  };

  RowDragComp.prototype.setVisibleMode = function (type) {
    this.visibleMode = type;
  };

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], RowDragComp.prototype, "postConstruct", null);

  return RowDragComp;
}(component_1.Component);

exports.RowDragComp = RowDragComp; // when non managed, the visibility depends on suppressRowDrag property only

var NonManagedVisibilityStrategy =
/** @class */
function (_super) {
  __extends(NonManagedVisibilityStrategy, _super);

  function NonManagedVisibilityStrategy(parent, beans, rowNode, column) {
    var _this = _super.call(this) || this;

    _this.parent = parent;
    _this.beans = beans;
    _this.column = column;
    _this.rowNode = rowNode;
    return _this;
  }

  NonManagedVisibilityStrategy.prototype.postConstruct = function () {
    this.addDestroyableEventListener(this.beans.gridOptionsWrapper, 'suppressRowDrag', this.onSuppressRowDrag.bind(this)); // in case data changes, then we need to update visibility of drag item

    this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));
    this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));
    this.workOutVisibility();
  };

  NonManagedVisibilityStrategy.prototype.onSuppressRowDrag = function () {
    this.workOutVisibility();
  };

  NonManagedVisibilityStrategy.prototype.workOutVisibility = function () {
    // only show the drag if both sort and filter are not present
    var suppressRowDrag = this.beans.gridOptionsWrapper.isSuppressRowDrag();

    if (suppressRowDrag) {
      this.parent.setVisibleMode('display');
      this.parent.setVisible(false, 'display');
    } else {
      var visible = this.column.isRowDrag(this.rowNode);

      if (!this.parent.getVisibleMode()) {
        var isRowDragFunc = utils_1._.isFunction(this.column.getColDef().rowDrag);

        this.parent.setVisibleMode(isRowDragFunc ? 'visibility' : 'display');
      }

      this.parent.setVisible(visible, this.parent.getVisibleMode());
    }
  };

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], NonManagedVisibilityStrategy.prototype, "postConstruct", null);

  return NonManagedVisibilityStrategy;
}(beanStub_1.BeanStub); // when managed, the visibility depends on sort, filter and row group, as well as suppressRowDrag property


var ManagedVisibilityStrategy =
/** @class */
function (_super) {
  __extends(ManagedVisibilityStrategy, _super);

  function ManagedVisibilityStrategy(parent, beans, rowNode, column) {
    var _this = _super.call(this) || this;

    _this.parent = parent;
    _this.beans = beans;
    _this.column = column;
    _this.rowNode = rowNode;
    return _this;
  }

  ManagedVisibilityStrategy.prototype.postConstruct = function () {
    // we do not show the component if sort, filter or grouping is active
    this.addDestroyableEventListener(this.beans.eventService, eventKeys_1.Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
    this.addDestroyableEventListener(this.beans.eventService, eventKeys_1.Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
    this.addDestroyableEventListener(this.beans.eventService, eventKeys_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onRowGroupChanged.bind(this)); // in case data changes, then we need to update visibility of drag item

    this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));
    this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));
    this.addDestroyableEventListener(this.beans.gridOptionsWrapper, 'suppressRowDrag', this.onSuppressRowDrag.bind(this));
    this.updateSortActive();
    this.updateFilterActive();
    this.updateRowGroupActive();
    this.workOutVisibility();
  };

  ManagedVisibilityStrategy.prototype.updateRowGroupActive = function () {
    var rowGroups = this.beans.columnController.getRowGroupColumns();
    this.rowGroupActive = !utils_1._.missingOrEmpty(rowGroups);
  };

  ManagedVisibilityStrategy.prototype.onRowGroupChanged = function () {
    this.updateRowGroupActive();
    this.workOutVisibility();
  };

  ManagedVisibilityStrategy.prototype.updateSortActive = function () {
    var sortModel = this.beans.sortController.getSortModel();
    this.sortActive = !utils_1._.missingOrEmpty(sortModel);
  };

  ManagedVisibilityStrategy.prototype.onSortChanged = function () {
    this.updateSortActive();
    this.workOutVisibility();
  };

  ManagedVisibilityStrategy.prototype.updateFilterActive = function () {
    this.filterActive = this.beans.filterManager.isAnyFilterPresent();
  };

  ManagedVisibilityStrategy.prototype.onFilterChanged = function () {
    this.updateFilterActive();
    this.workOutVisibility();
  };

  ManagedVisibilityStrategy.prototype.onSuppressRowDrag = function () {
    this.workOutVisibility();
  };

  ManagedVisibilityStrategy.prototype.workOutVisibility = function () {
    // only show the drag if both sort and filter are not present
    var sortOrFilterOrGroupActive = this.sortActive || this.filterActive || this.rowGroupActive;
    var suppressRowDrag = this.beans.gridOptionsWrapper.isSuppressRowDrag();
    var alwaysHide = sortOrFilterOrGroupActive || suppressRowDrag;

    if (alwaysHide) {
      this.parent.setVisibleMode('display');
      this.parent.setVisible(false, 'display');
    } else {
      var visible = this.column.isRowDrag(this.rowNode);

      if (!this.parent.getVisibleMode()) {
        var isRowDragFunc = utils_1._.isFunction(this.column.getColDef().rowDrag);

        this.parent.setVisibleMode(isRowDragFunc ? 'visibility' : 'display');
      }

      this.parent.setVisible(visible, this.parent.getVisibleMode());
    }
  };

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], ManagedVisibilityStrategy.prototype, "postConstruct", null);

  return ManagedVisibilityStrategy;
}(beanStub_1.BeanStub);

/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var component_1 = __webpack_require__(22);

var column_1 = __webpack_require__(24);

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var sortController_1 = __webpack_require__(49);

var touchListener_1 = __webpack_require__(92);

var eventService_1 = __webpack_require__(14);

var componentAnnotations_1 = __webpack_require__(25);

var events_1 = __webpack_require__(18);

var utils_1 = __webpack_require__(6);

var HeaderComp =
/** @class */
function (_super) {
  __extends(HeaderComp, _super);

  function HeaderComp() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.lastMovingChanged = 0;
    return _this;
  }

  HeaderComp.prototype.init = function (params) {
    var template = utils_1._.firstExistingValue(params.template, HeaderComp.TEMPLATE); // take account of any newlines & whitespace before/after the actual template


    template = template && template.trim ? template.trim() : template;
    this.setTemplate(template);
    this.params = params;
    this.setupTap();
    this.setupIcons(params.column);
    this.setupMenu();
    this.setupSort();
    this.setupFilterIcon();
    this.setupText(params.displayName);
  };

  HeaderComp.prototype.setupText = function (displayName) {
    var displayNameSanitised = utils_1._.escape(displayName);

    if (this.eText) {
      this.eText.innerHTML = displayNameSanitised;
    }
  };

  HeaderComp.prototype.setupIcons = function (column) {
    this.addInIcon('sortAscending', this.eSortAsc, column);
    this.addInIcon('sortDescending', this.eSortDesc, column);
    this.addInIcon('sortUnSort', this.eSortNone, column);
    this.addInIcon('menu', this.eMenu, column);
    this.addInIcon('filter', this.eFilter, column);
  };

  HeaderComp.prototype.addInIcon = function (iconName, eParent, column) {
    if (eParent == null) {
      return;
    }

    var eIcon = utils_1._.createIconNoSpan(iconName, this.gridOptionsWrapper, column);

    eParent.appendChild(eIcon);
  };

  HeaderComp.prototype.setupTap = function () {
    var _this = this;

    var gow = this.gridOptionsWrapper;

    if (gow.isSuppressTouch()) {
      return;
    }

    var suppressMenuHide = gow.isSuppressMenuHide();
    var touchListener = new touchListener_1.TouchListener(this.getGui(), true);
    var menuTouchListener = suppressMenuHide ? new touchListener_1.TouchListener(this.eMenu, true) : touchListener;

    if (this.params.enableMenu) {
      var eventType = suppressMenuHide ? 'EVENT_TAP' : 'EVENT_LONG_TAP';

      var showMenuFn = function showMenuFn(event) {
        gow.getApi().showColumnMenuAfterMouseClick(_this.params.column, event.touchStart);
      };

      this.addDestroyableEventListener(menuTouchListener, touchListener_1.TouchListener[eventType], showMenuFn);
    }

    if (this.params.enableSorting) {
      var tapListener = function tapListener(event) {
        var target = event.touchStart.target; // When suppressMenuHide is true, a tap on the menu icon will bubble up
        // to the header container, in that case we should not sort

        if (suppressMenuHide && _this.eMenu.contains(target)) {
          return;
        }

        _this.sortController.progressSort(_this.params.column, false, "uiColumnSorted");
      };

      this.addDestroyableEventListener(touchListener, touchListener_1.TouchListener.EVENT_TAP, tapListener);
    }

    this.addDestroyFunc(function () {
      return touchListener.destroy();
    });

    if (menuTouchListener !== touchListener) {
      this.addDestroyFunc(function () {
        return menuTouchListener.destroy();
      });
    }
  };

  HeaderComp.prototype.setupMenu = function () {
    var _this = this; // if no menu provided in template, do nothing


    if (!this.eMenu) {
      return;
    } // we don't show the menu if on an iPad/iPhone, as the user cannot have a pointer device
    // Note: If suppressMenuHide is set to true the menu will be displayed, and if suppressMenuHide
    // is false (default) user will need to use longpress to display the menu.


    var suppressMenuHide = this.gridOptionsWrapper.isSuppressMenuHide();
    var dontShowMenu = !this.params.enableMenu || utils_1._.isUserAgentIPad() && !suppressMenuHide;

    if (dontShowMenu) {
      utils_1._.removeFromParent(this.eMenu);

      return;
    }

    this.addDestroyableEventListener(this.eMenu, 'click', function () {
      return _this.showMenu(_this.eMenu);
    });

    if (!suppressMenuHide) {
      this.eMenu.style.opacity = '0';
      this.addGuiEventListener('mouseover', function () {
        _this.eMenu.style.opacity = '1';
      });
      this.addGuiEventListener('mouseout', function () {
        _this.eMenu.style.opacity = '0';
      });
    }

    var style = this.eMenu.style;
    style.transition = 'opacity 0.2s, border 0.2s';
    style['-webkit-transition'] = 'opacity 0.2s, border 0.2s';
  };

  HeaderComp.prototype.showMenu = function (eventSource) {
    this.menuFactory.showMenuAfterButtonClick(this.params.column, eventSource);
  };

  HeaderComp.prototype.removeSortIcons = function () {
    utils_1._.removeFromParent(this.eSortAsc);

    utils_1._.removeFromParent(this.eSortDesc);

    utils_1._.removeFromParent(this.eSortNone);

    utils_1._.removeFromParent(this.eSortOrder);
  };

  HeaderComp.prototype.setupSort = function () {
    var _this = this;

    var enableSorting = this.params.enableSorting;

    if (!enableSorting) {
      this.removeSortIcons();
      return;
    }

    var sortUsingCtrl = this.gridOptionsWrapper.isMultiSortKeyCtrl(); // keep track of last time the moving changed flag was set

    this.addDestroyableEventListener(this.params.column, column_1.Column.EVENT_MOVING_CHANGED, function () {
      _this.lastMovingChanged = new Date().getTime();
    }); // add the event on the header, so when clicked, we do sorting

    if (this.eLabel) {
      this.addDestroyableEventListener(this.eLabel, 'click', function (event) {
        // sometimes when moving a column via dragging, this was also firing a clicked event.
        // here is issue raised by user: https://ag-grid.zendesk.com/agent/tickets/1076
        // this check stops sort if a) column is moving or b) column moved less than 200ms ago (so caters for race condition)
        var moving = _this.params.column.isMoving();

        var nowTime = new Date().getTime(); // typically there is <2ms if moving flag was set recently, as it would be done in same VM turn

        var movedRecently = nowTime - _this.lastMovingChanged < 50;
        var columnMoving = moving || movedRecently;

        if (!columnMoving) {
          var multiSort = sortUsingCtrl ? event.ctrlKey || event.metaKey : event.shiftKey;

          _this.params.progressSort(multiSort);
        }
      });
    }

    this.addDestroyableEventListener(this.params.column, column_1.Column.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
    this.onSortChanged();
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_SORT_CHANGED, this.setMultiSortOrder.bind(this));
    this.setMultiSortOrder();
  };

  HeaderComp.prototype.onSortChanged = function () {
    utils_1._.addOrRemoveCssClass(this.getGui(), 'ag-header-cell-sorted-asc', this.params.column.isSortAscending());

    utils_1._.addOrRemoveCssClass(this.getGui(), 'ag-header-cell-sorted-desc', this.params.column.isSortDescending());

    utils_1._.addOrRemoveCssClass(this.getGui(), 'ag-header-cell-sorted-none', this.params.column.isSortNone());

    if (this.eSortAsc) {
      utils_1._.addOrRemoveCssClass(this.eSortAsc, 'ag-hidden', !this.params.column.isSortAscending());
    }

    if (this.eSortDesc) {
      utils_1._.addOrRemoveCssClass(this.eSortDesc, 'ag-hidden', !this.params.column.isSortDescending());
    }

    if (this.eSortNone) {
      var alwaysHideNoSort = !this.params.column.getColDef().unSortIcon && !this.gridOptionsWrapper.isUnSortIcon();

      utils_1._.addOrRemoveCssClass(this.eSortNone, 'ag-hidden', alwaysHideNoSort || !this.params.column.isSortNone());
    }
  }; // we listen here for global sort events, NOT column sort events, as we want to do this
  // when sorting has been set on all column (if we listened just for our col (where we
  // set the asc / desc icons) then it's possible other cols are yet to get their sorting state.


  HeaderComp.prototype.setMultiSortOrder = function () {
    if (!this.eSortOrder) {
      return;
    }

    var col = this.params.column;
    var allColumnsWithSorting = this.sortController.getColumnsWithSortingOrdered();
    var indexThisCol = allColumnsWithSorting.indexOf(col);
    var moreThanOneColSorting = allColumnsWithSorting.length > 1;
    var showIndex = col.isSorting() && moreThanOneColSorting;

    utils_1._.setVisible(this.eSortOrder, showIndex);

    if (indexThisCol >= 0) {
      this.eSortOrder.innerHTML = (indexThisCol + 1).toString();
    } else {
      utils_1._.clearElement(this.eSortOrder);
    }
  };

  HeaderComp.prototype.setupFilterIcon = function () {
    if (!this.eFilter) {
      return;
    }

    this.addDestroyableEventListener(this.params.column, column_1.Column.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
    this.onFilterChanged();
  };

  HeaderComp.prototype.onFilterChanged = function () {
    var filterPresent = this.params.column.isFilterActive();

    utils_1._.addOrRemoveCssClass(this.eFilter, 'ag-hidden', !filterPresent);
  };

  HeaderComp.TEMPLATE = '<div class="ag-cell-label-container" role="presentation">' + '  <span ref="eMenu" class="ag-header-icon ag-header-cell-menu-button" aria-hidden="true"></span>' + '  <div ref="eLabel" class="ag-header-cell-label" role="presentation" unselectable="on">' + '    <span ref="eText" class="ag-header-cell-text" role="columnheader" unselectable="on"></span>' + '    <span ref="eFilter" class="ag-header-icon ag-filter-icon" aria-hidden="true"></span>' + '    <span ref="eSortOrder" class="ag-header-icon ag-sort-order" aria-hidden="true"></span>' + '    <span ref="eSortAsc" class="ag-header-icon ag-sort-ascending-icon" aria-hidden="true"></span>' + '    <span ref="eSortDesc" class="ag-header-icon ag-sort-descending-icon" aria-hidden="true"></span>' + '    <span ref="eSortNone" class="ag-header-icon ag-sort-none-icon" aria-hidden="true"></span>' + '  </div>' + '</div>';

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], HeaderComp.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('sortController'), __metadata("design:type", sortController_1.SortController)], HeaderComp.prototype, "sortController", void 0);

  __decorate([context_1.Autowired('menuFactory'), __metadata("design:type", Object)], HeaderComp.prototype, "menuFactory", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], HeaderComp.prototype, "eventService", void 0);

  __decorate([componentAnnotations_1.RefSelector('eFilter'), __metadata("design:type", HTMLElement)], HeaderComp.prototype, "eFilter", void 0);

  __decorate([componentAnnotations_1.RefSelector('eSortAsc'), __metadata("design:type", HTMLElement)], HeaderComp.prototype, "eSortAsc", void 0);

  __decorate([componentAnnotations_1.RefSelector('eSortDesc'), __metadata("design:type", HTMLElement)], HeaderComp.prototype, "eSortDesc", void 0);

  __decorate([componentAnnotations_1.RefSelector('eSortNone'), __metadata("design:type", HTMLElement)], HeaderComp.prototype, "eSortNone", void 0);

  __decorate([componentAnnotations_1.RefSelector('eSortOrder'), __metadata("design:type", HTMLElement)], HeaderComp.prototype, "eSortOrder", void 0);

  __decorate([componentAnnotations_1.RefSelector('eMenu'), __metadata("design:type", HTMLElement)], HeaderComp.prototype, "eMenu", void 0);

  __decorate([componentAnnotations_1.RefSelector('eLabel'), __metadata("design:type", HTMLElement)], HeaderComp.prototype, "eLabel", void 0);

  __decorate([componentAnnotations_1.RefSelector('eText'), __metadata("design:type", HTMLElement)], HeaderComp.prototype, "eText", void 0);

  return HeaderComp;
}(component_1.Component);

exports.HeaderComp = HeaderComp;

/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var component_1 = __webpack_require__(22);

var columnController_1 = __webpack_require__(17);

var gridOptionsWrapper_1 = __webpack_require__(7);

var context_1 = __webpack_require__(2);

var touchListener_1 = __webpack_require__(92);

var componentAnnotations_1 = __webpack_require__(25);

var originalColumnGroup_1 = __webpack_require__(70);

var utils_1 = __webpack_require__(6);

var HeaderGroupComp =
/** @class */
function (_super) {
  __extends(HeaderGroupComp, _super);

  function HeaderGroupComp() {
    return _super.call(this, HeaderGroupComp.TEMPLATE) || this;
  }

  HeaderGroupComp.prototype.init = function (params) {
    this.params = params;
    this.setupLabel();
    this.addGroupExpandIcon();
    this.setupExpandIcons();
  };

  HeaderGroupComp.prototype.setupExpandIcons = function () {
    var _this = this;

    this.addInIcon("columnGroupOpened", "agOpened");
    this.addInIcon("columnGroupClosed", "agClosed");

    var expandAction = function expandAction(event) {
      if (utils_1._.isStopPropagationForAgGrid(event)) {
        return;
      }

      var newExpandedValue = !_this.params.columnGroup.isExpanded();

      _this.columnController.setColumnGroupOpened(_this.params.columnGroup.getOriginalColumnGroup(), newExpandedValue, "uiColumnExpanded");
    };

    this.addTouchAndClickListeners(this.eCloseIcon, expandAction);
    this.addTouchAndClickListeners(this.eOpenIcon, expandAction);

    var stopPropagationAction = function stopPropagationAction(event) {
      utils_1._.stopPropagationForAgGrid(event);
    }; // adding stopPropagation to the double click for the icons prevents double click action happening
    // when the icons are clicked. if the icons are double clicked, then the groups should open and
    // then close again straight away. if we also listened to double click, then the group would open,
    // close, then open, which is not what we want. double click should only action if the user double
    // clicks outside of the icons.


    this.addDestroyableEventListener(this.eCloseIcon, "dblclick", stopPropagationAction);
    this.addDestroyableEventListener(this.eOpenIcon, "dblclick", stopPropagationAction);
    this.addDestroyableEventListener(this.getGui(), "dblclick", expandAction);
    this.updateIconVisibility();
    var originalColumnGroup = this.params.columnGroup.getOriginalColumnGroup();
    this.addDestroyableEventListener(originalColumnGroup, originalColumnGroup_1.OriginalColumnGroup.EVENT_EXPANDED_CHANGED, this.updateIconVisibility.bind(this));
    this.addDestroyableEventListener(originalColumnGroup, originalColumnGroup_1.OriginalColumnGroup.EVENT_EXPANDABLE_CHANGED, this.updateIconVisibility.bind(this));
  };

  HeaderGroupComp.prototype.addTouchAndClickListeners = function (eElement, action) {
    var touchListener = new touchListener_1.TouchListener(this.eCloseIcon);
    this.addDestroyableEventListener(touchListener, touchListener_1.TouchListener.EVENT_TAP, action);
    this.addDestroyFunc(function () {
      return touchListener.destroy();
    });
    this.addDestroyableEventListener(eElement, "click", action);
  };

  HeaderGroupComp.prototype.updateIconVisibility = function () {
    var columnGroup = this.params.columnGroup;

    if (columnGroup.isExpandable()) {
      var expanded = this.params.columnGroup.isExpanded();

      utils_1._.setVisible(this.eOpenIcon, !expanded);

      utils_1._.setVisible(this.eCloseIcon, expanded);
    } else {
      utils_1._.setVisible(this.eOpenIcon, false);

      utils_1._.setVisible(this.eCloseIcon, false);
    }
  };

  HeaderGroupComp.prototype.addInIcon = function (iconName, refName) {
    var eIcon = utils_1._.createIconNoSpan(iconName, this.gridOptionsWrapper, null);

    this.getRefElement(refName).appendChild(eIcon);
  };

  HeaderGroupComp.prototype.addGroupExpandIcon = function () {
    if (!this.params.columnGroup.isExpandable()) {
      utils_1._.setVisible(this.eOpenIcon, false);

      utils_1._.setVisible(this.eCloseIcon, false);

      return;
    }
  };

  HeaderGroupComp.prototype.setupLabel = function () {
    // no renderer, default text render
    if (this.params.displayName && this.params.displayName !== "") {
      var eInnerText = this.getRefElement("agLabel");
      eInnerText.innerHTML = this.params.displayName;
    }
  };

  HeaderGroupComp.TEMPLATE = "<div class=\"ag-header-group-cell-label\" ref=\"agContainer\">" + "<span ref=\"agLabel\" class=\"ag-header-group-text\"></span>" + "<span ref=\"agOpened\" class=\"ag-header-icon ag-header-expand-icon ag-header-expand-icon-expanded\"></span>" + "<span ref=\"agClosed\" class=\"ag-header-icon ag-header-expand-icon ag-header-expand-icon-collapsed\"></span>" + "</div>";

  __decorate([context_1.Autowired("columnController"), __metadata("design:type", columnController_1.ColumnController)], HeaderGroupComp.prototype, "columnController", void 0);

  __decorate([context_1.Autowired("gridOptionsWrapper"), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], HeaderGroupComp.prototype, "gridOptionsWrapper", void 0);

  __decorate([componentAnnotations_1.RefSelector("agOpened"), __metadata("design:type", HTMLElement)], HeaderGroupComp.prototype, "eOpenIcon", void 0);

  __decorate([componentAnnotations_1.RefSelector("agClosed"), __metadata("design:type", HTMLElement)], HeaderGroupComp.prototype, "eCloseIcon", void 0);

  return HeaderGroupComp;
}(component_1.Component);

exports.HeaderGroupComp = HeaderGroupComp;

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var component_1 = __webpack_require__(22);

var gridOptionsWrapper_1 = __webpack_require__(7);

var componentAnnotations_1 = __webpack_require__(25);

var utils_1 = __webpack_require__(6);

var LoadingCellRenderer =
/** @class */
function (_super) {
  __extends(LoadingCellRenderer, _super);

  function LoadingCellRenderer() {
    return _super.call(this, LoadingCellRenderer.TEMPLATE) || this;
  }

  LoadingCellRenderer.prototype.init = function (params) {
    var eLoadingIcon = utils_1._.createIconNoSpan('groupLoading', this.gridOptionsWrapper, null);

    this.eLoadingIcon.appendChild(eLoadingIcon);
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    this.eLoadingText.innerText = localeTextFunc('loadingOoo', 'Loading');
  };

  LoadingCellRenderer.prototype.refresh = function (params) {
    return false;
  };

  LoadingCellRenderer.TEMPLATE = "<div class=\"ag-stub-cell\">\n            <span class=\"ag-loading-icon\" ref=\"eLoadingIcon\"></span>\n            <span class=\"ag-loading-text\" ref=\"eLoadingText\"></span>\n        </div>";

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], LoadingCellRenderer.prototype, "gridOptionsWrapper", void 0);

  __decorate([componentAnnotations_1.RefSelector('eLoadingIcon'), __metadata("design:type", HTMLElement)], LoadingCellRenderer.prototype, "eLoadingIcon", void 0);

  __decorate([componentAnnotations_1.RefSelector('eLoadingText'), __metadata("design:type", HTMLElement)], LoadingCellRenderer.prototype, "eLoadingText", void 0);

  return LoadingCellRenderer;
}(component_1.Component);

exports.LoadingCellRenderer = LoadingCellRenderer;

/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var gridOptionsWrapper_1 = __webpack_require__(7);

var context_1 = __webpack_require__(2);

var component_1 = __webpack_require__(22);

var LoadingOverlayComponent =
/** @class */
function (_super) {
  __extends(LoadingOverlayComponent, _super);

  function LoadingOverlayComponent() {
    return _super.call(this) || this;
  }

  LoadingOverlayComponent.prototype.init = function (params) {
    var template = this.gridOptionsWrapper.getOverlayLoadingTemplate() ? this.gridOptionsWrapper.getOverlayLoadingTemplate() : LoadingOverlayComponent.DEFAULT_LOADING_OVERLAY_TEMPLATE;
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    var localisedTemplate = template.replace('[LOADING...]', localeTextFunc('loadingOoo', 'Loading...'));
    this.setTemplate(localisedTemplate);
  };

  LoadingOverlayComponent.DEFAULT_LOADING_OVERLAY_TEMPLATE = '<span class="ag-overlay-loading-center">[LOADING...]</span>';

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], LoadingOverlayComponent.prototype, "gridOptionsWrapper", void 0);

  return LoadingOverlayComponent;
}(component_1.Component);

exports.LoadingOverlayComponent = LoadingOverlayComponent;

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var gridOptionsWrapper_1 = __webpack_require__(7);

var context_1 = __webpack_require__(2);

var component_1 = __webpack_require__(22);

var NoRowsOverlayComponent =
/** @class */
function (_super) {
  __extends(NoRowsOverlayComponent, _super);

  function NoRowsOverlayComponent() {
    return _super.call(this) || this;
  }

  NoRowsOverlayComponent.prototype.init = function (params) {
    var template = this.gridOptionsWrapper.getOverlayNoRowsTemplate() ? this.gridOptionsWrapper.getOverlayNoRowsTemplate() : NoRowsOverlayComponent.DEFAULT_NO_ROWS_TEMPLATE;
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    var localisedTemplate = template.replace('[NO_ROWS_TO_SHOW]', localeTextFunc('noRowsToShow', 'No Rows To Show'));
    this.setTemplate(localisedTemplate);
  };

  NoRowsOverlayComponent.DEFAULT_NO_ROWS_TEMPLATE = '<span class="ag-overlay-no-rows-center">[NO_ROWS_TO_SHOW]</span>';

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], NoRowsOverlayComponent.prototype, "gridOptionsWrapper", void 0);

  return NoRowsOverlayComponent;
}(component_1.Component);

exports.NoRowsOverlayComponent = NoRowsOverlayComponent;

/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var popupComponent_1 = __webpack_require__(72);

var TooltipComponent =
/** @class */
function (_super) {
  __extends(TooltipComponent, _super);

  function TooltipComponent() {
    return _super.call(this, "<div class=\"ag-tooltip\"></div>") || this;
  } // will need to type params


  TooltipComponent.prototype.init = function (params) {
    var value = params.value;
    this.getGui().innerHTML = value;
  };

  return TooltipComponent;
}(popupComponent_1.PopupComponent);

exports.TooltipComponent = TooltipComponent;

/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var agCheckbox_1 = __webpack_require__(113);

var beanStub_1 = __webpack_require__(32);

var context_1 = __webpack_require__(2);

var columnApi_1 = __webpack_require__(21);

var gridApi_1 = __webpack_require__(20);

var events_1 = __webpack_require__(18);

var eventService_1 = __webpack_require__(14);

var constants_1 = __webpack_require__(19);

var selectionController_1 = __webpack_require__(44);

var gridOptionsWrapper_1 = __webpack_require__(7);

var SelectAllFeature =
/** @class */
function (_super) {
  __extends(SelectAllFeature, _super);

  function SelectAllFeature(cbSelectAll, column) {
    var _this = _super.call(this) || this;

    _this.cbSelectAllVisible = false;
    _this.processingEventFromCheckbox = false;
    _this.cbSelectAll = cbSelectAll;
    _this.column = column;
    var colDef = column.getColDef();
    _this.filteredOnly = colDef ? !!colDef.headerCheckboxSelectionFilteredOnly : false;
    return _this;
  }

  SelectAllFeature.prototype.postConstruct = function () {
    this.showOrHideSelectAll();
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.showOrHideSelectAll.bind(this));
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_SELECTION_CHANGED, this.onSelectionChanged.bind(this));
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_MODEL_UPDATED, this.onModelChanged.bind(this));
    this.addDestroyableEventListener(this.cbSelectAll, agCheckbox_1.AgCheckbox.EVENT_CHANGED, this.onCbSelectAll.bind(this));
  };

  SelectAllFeature.prototype.showOrHideSelectAll = function () {
    this.cbSelectAllVisible = this.isCheckboxSelection();
    this.cbSelectAll.setVisible(this.cbSelectAllVisible);

    if (this.cbSelectAllVisible) {
      // in case user is trying this feature with the wrong model type
      this.checkRightRowModelType(); // make sure checkbox is showing the right state

      this.updateStateOfCheckbox();
    }
  };

  SelectAllFeature.prototype.onModelChanged = function () {
    if (!this.cbSelectAllVisible) {
      return;
    }

    this.updateStateOfCheckbox();
  };

  SelectAllFeature.prototype.onSelectionChanged = function () {
    if (!this.cbSelectAllVisible) {
      return;
    }

    this.updateStateOfCheckbox();
  };

  SelectAllFeature.prototype.getNextCheckboxState = function (selectionCount) {
    if (selectionCount.selected === 0 && selectionCount.notSelected === 0) {
      // if no rows, always have it unselected
      return false;
    } else if (selectionCount.selected > 0 && selectionCount.notSelected > 0) {
      // if mix of selected and unselected, this is the tri-state
      return null;
    } else if (selectionCount.selected > 0) {
      // only selected
      return true;
    } else {
      // nothing selected
      return false;
    }
  };

  SelectAllFeature.prototype.updateStateOfCheckbox = function () {
    if (this.processingEventFromCheckbox) {
      return;
    }

    this.processingEventFromCheckbox = true;
    var selectionCount = this.getSelectionCount();
    var allSelected = this.getNextCheckboxState(selectionCount);
    this.cbSelectAll.setSelected(allSelected);
    this.processingEventFromCheckbox = false;
  };

  SelectAllFeature.prototype.getSelectionCount = function () {
    var _this = this;

    var selectedCount = 0;
    var notSelectedCount = 0;

    var callback = function callback(node) {
      if (_this.gridOptionsWrapper.isGroupSelectsChildren() && node.group) {
        return;
      }

      if (node.isSelected()) {
        selectedCount++;
      } else if (!node.selectable) {// don't count non-selectable nodes!
      } else {
        notSelectedCount++;
      }
    };

    if (this.filteredOnly) {
      this.gridApi.forEachNodeAfterFilter(callback);
    } else {
      this.gridApi.forEachNode(callback);
    }

    return {
      notSelected: notSelectedCount,
      selected: selectedCount
    };
  };

  SelectAllFeature.prototype.checkRightRowModelType = function () {
    var rowModelType = this.rowModel.getType();
    var rowModelMatches = rowModelType === constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE;

    if (!rowModelMatches) {
      console.warn("ag-Grid: selectAllCheckbox is only available if using normal row model, you are using " + rowModelType);
    }
  };

  SelectAllFeature.prototype.onCbSelectAll = function () {
    if (this.processingEventFromCheckbox) {
      return;
    }

    if (!this.cbSelectAllVisible) {
      return;
    }

    var value = this.cbSelectAll.isSelected();

    if (value) {
      this.selectionController.selectAllRowNodes(this.filteredOnly);
    } else {
      this.selectionController.deselectAllRowNodes(this.filteredOnly);
    }
  };

  SelectAllFeature.prototype.isCheckboxSelection = function () {
    var result = this.column.getColDef().headerCheckboxSelection;

    if (typeof result === 'function') {
      var func = result;
      result = func({
        column: this.column,
        colDef: this.column.getColDef(),
        columnApi: this.columnApi,
        api: this.gridApi
      });
    }

    if (result) {
      if (this.gridOptionsWrapper.isRowModelServerSide()) {
        console.warn('headerCheckboxSelection is not supported for Server Side Row Model');
        return false;
      }

      if (this.gridOptionsWrapper.isRowModelInfinite()) {
        console.warn('headerCheckboxSelection is not supported for Infinite Row Model');
        return false;
      }

      if (this.gridOptionsWrapper.isRowModelViewport()) {
        console.warn('headerCheckboxSelection is not supported for Viewport Row Model');
        return false;
      } // otherwise the row model is compatible, so return true


      return true;
    } else {
      return false;
    }
  };

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], SelectAllFeature.prototype, "gridApi", void 0);

  __decorate([context_1.Autowired('columnApi'), __metadata("design:type", columnApi_1.ColumnApi)], SelectAllFeature.prototype, "columnApi", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], SelectAllFeature.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('rowModel'), __metadata("design:type", Object)], SelectAllFeature.prototype, "rowModel", void 0);

  __decorate([context_1.Autowired('selectionController'), __metadata("design:type", selectionController_1.SelectionController)], SelectAllFeature.prototype, "selectionController", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], SelectAllFeature.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], SelectAllFeature.prototype, "postConstruct", null);

  return SelectAllFeature;
}(beanStub_1.BeanStub);

exports.SelectAllFeature = SelectAllFeature;

/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefaultColumnTypes = {
  numericColumn: {
    headerClass: "ag-numeric-header",
    cellClass: "ag-numeric-cell"
  }
};

/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});

var grid_1 = __webpack_require__(160);

function initialiseAgGridWithAngular1(angular) {
  var angularModule = angular.module("agGrid", []);
  angularModule.directive("agGrid", function () {
    return {
      restrict: "A",
      controller: ['$element', '$scope', '$compile', '$attrs', AngularDirectiveController],
      scope: true
    };
  });
}

exports.initialiseAgGridWithAngular1 = initialiseAgGridWithAngular1;

function AngularDirectiveController($element, $scope, $compile, $attrs) {
  var gridOptions;
  var quickFilterOnScope;
  var keyOfGridInScope = $attrs.agGrid;
  quickFilterOnScope = keyOfGridInScope + '.quickFilterText';
  gridOptions = $scope.$eval(keyOfGridInScope);

  if (!gridOptions) {
    console.warn("WARNING - grid options for ag-Grid not found. Please ensure the attribute ag-grid points to a valid object on the scope");
    return;
  }

  var eGridDiv = $element[0];
  var gridParams = {
    $scope: $scope,
    $compile: $compile,
    quickFilterOnScope: quickFilterOnScope
  };
  var grid = new grid_1.Grid(eGridDiv, gridOptions, gridParams);
  $scope.$on("$destroy", function () {
    grid.destroy();
    grid = null;
  });
}

/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var component_1 = __webpack_require__(22);

var column_1 = __webpack_require__(24);

var columnGroup_1 = __webpack_require__(58);

var columnApi_1 = __webpack_require__(21);

var columnController_1 = __webpack_require__(17);

var gridOptionsWrapper_1 = __webpack_require__(7);

var horizontalResizeService_1 = __webpack_require__(111);

var context_1 = __webpack_require__(2);

var cssClassApplier_1 = __webpack_require__(155);

var dragAndDropService_1 = __webpack_require__(34);

var setLeftFeature_1 = __webpack_require__(112);

var gridApi_1 = __webpack_require__(20);

var userComponentFactory_1 = __webpack_require__(35);

var beans_1 = __webpack_require__(60);

var hoverFeature_1 = __webpack_require__(156);

var utils_1 = __webpack_require__(6);

var HeaderGroupWrapperComp =
/** @class */
function (_super) {
  __extends(HeaderGroupWrapperComp, _super);

  function HeaderGroupWrapperComp(columnGroup, dragSourceDropTarget, pinned) {
    var _this = _super.call(this, HeaderGroupWrapperComp.TEMPLATE) || this; // the children can change, we keep destroy functions related to listening to the children here


    _this.childColumnsDestroyFuncs = [];
    _this.columnGroup = columnGroup;
    _this.dragSourceDropTarget = dragSourceDropTarget;
    _this.pinned = pinned;
    return _this;
  }

  HeaderGroupWrapperComp.prototype.postConstruct = function () {
    cssClassApplier_1.CssClassApplier.addHeaderClassesFromColDef(this.getComponentHolder(), this.getGui(), this.gridOptionsWrapper, null, this.columnGroup);
    var displayName = this.columnController.getDisplayNameForColumnGroup(this.columnGroup, 'header');
    this.appendHeaderGroupComp(displayName);
    this.setupResize();
    this.addClasses();
    this.setupWidth();
    this.addAttributes();
    this.setupMovingCss();
    this.setupTooltip();
    this.addFeature(this.getContext(), new hoverFeature_1.HoverFeature(this.columnGroup.getOriginalColumnGroup().getLeafColumns(), this.getGui()));
    var setLeftFeature = new setLeftFeature_1.SetLeftFeature(this.columnGroup, this.getGui(), this.beans);
    setLeftFeature.init();
    this.addDestroyFunc(setLeftFeature.destroy.bind(setLeftFeature));
  };

  HeaderGroupWrapperComp.prototype.setupMovingCss = function () {
    var _this = this;

    var originalColumnGroup = this.columnGroup.getOriginalColumnGroup();
    var leafColumns = originalColumnGroup.getLeafColumns();
    leafColumns.forEach(function (col) {
      _this.addDestroyableEventListener(col, column_1.Column.EVENT_MOVING_CHANGED, _this.onColumnMovingChanged.bind(_this));
    });
    this.onColumnMovingChanged();
  };

  HeaderGroupWrapperComp.prototype.getComponentHolder = function () {
    return this.columnGroup.getColGroupDef();
  };

  HeaderGroupWrapperComp.prototype.getTooltipText = function () {
    var colGroupDef = this.getComponentHolder();
    return colGroupDef && colGroupDef.headerTooltip;
  };

  HeaderGroupWrapperComp.prototype.setupTooltip = function () {
    var tooltipText = this.getTooltipText();

    if (tooltipText == null) {
      return;
    }

    if (this.gridOptionsWrapper.isEnableBrowserTooltips()) {
      this.getGui().setAttribute('title', tooltipText);
    } else {
      this.beans.tooltipManager.registerTooltip(this);
    }
  };

  HeaderGroupWrapperComp.prototype.onColumnMovingChanged = function () {
    // this function adds or removes the moving css, based on if the col is moving.
    // this is what makes the header go dark when it is been moved (gives impression to
    // user that the column was picked up).
    utils_1._.addOrRemoveCssClass(this.getGui(), 'ag-header-cell-moving', this.columnGroup.isMoving());
  };

  HeaderGroupWrapperComp.prototype.addAttributes = function () {
    this.getGui().setAttribute("col-id", this.columnGroup.getUniqueId());
  };

  HeaderGroupWrapperComp.prototype.appendHeaderGroupComp = function (displayName) {
    var _this = this;

    var params = {
      displayName: displayName,
      columnGroup: this.columnGroup,
      setExpanded: function setExpanded(expanded) {
        _this.columnController.setColumnGroupOpened(_this.columnGroup.getOriginalColumnGroup(), expanded, "gridInitializing");
      },
      api: this.gridApi,
      columnApi: this.columnApi,
      context: this.gridOptionsWrapper.getContext()
    };

    if (!displayName) {
      var columnGroup = this.columnGroup;
      var leafCols = columnGroup.getLeafColumns(); // find the top most column group that represents the same columns. so if we are dragging a group, we also
      // want to visually show the parent groups dragging for the same column set. for example imaging 5 levels
      // of grouping, with each group only containing the next group, and the last group containing three columns,
      // then when you move any group (even the lowest level group) you are in-fact moving all the groups, as all
      // the groups represent the same column set.

      while (columnGroup.getParent() && columnGroup.getParent().getLeafColumns().length === leafCols.length) {
        columnGroup = columnGroup.getParent();
      }

      var colGroupDef = columnGroup.getColGroupDef();

      if (colGroupDef) {
        displayName = colGroupDef.headerName;
      }

      if (!displayName) {
        displayName = leafCols ? this.columnController.getDisplayNameForColumn(leafCols[0], 'header', true) : '';
      }
    }

    var callback = this.afterHeaderCompCreated.bind(this, displayName);
    this.userComponentFactory.newHeaderGroupComponent(params).then(callback);
  };

  HeaderGroupWrapperComp.prototype.afterHeaderCompCreated = function (displayName, headerGroupComp) {
    this.appendChild(headerGroupComp);
    this.setupMove(headerGroupComp.getGui(), displayName);
  };

  HeaderGroupWrapperComp.prototype.addClasses = function () {
    // having different classes below allows the style to not have a bottom border
    // on the group header, if no group is specified
    // columnGroup.getColGroupDef
    if (this.columnGroup.isPadding()) {
      this.addCssClass('ag-header-group-cell-no-group');
    } else {
      this.addCssClass('ag-header-group-cell-with-group');
    }
  };

  HeaderGroupWrapperComp.prototype.setupMove = function (eHeaderGroup, displayName) {
    var _this = this;

    if (!eHeaderGroup) {
      return;
    }

    if (this.isSuppressMoving()) {
      return;
    }

    var allLeafColumns = this.columnGroup.getOriginalColumnGroup().getLeafColumns();

    if (eHeaderGroup) {
      var dragSource_1 = {
        type: dragAndDropService_1.DragSourceType.HeaderCell,
        eElement: eHeaderGroup,
        dragItemName: displayName,
        // we add in the original group leaf columns, so we move both visible and non-visible items
        dragItemCallback: this.getDragItemForGroup.bind(this),
        dragSourceDropTarget: this.dragSourceDropTarget,
        dragStarted: function dragStarted() {
          return allLeafColumns.forEach(function (col) {
            return col.setMoving(true, "uiColumnDragged");
          });
        },
        dragStopped: function dragStopped() {
          return allLeafColumns.forEach(function (col) {
            return col.setMoving(false, "uiColumnDragged");
          });
        }
      };
      this.dragAndDropService.addDragSource(dragSource_1, true);
      this.addDestroyFunc(function () {
        return _this.dragAndDropService.removeDragSource(dragSource_1);
      });
    }
  }; // when moving the columns, we want to move all the columns (contained within the DragItem) in this group in one go,
  // and in the order they are currently in the screen.


  HeaderGroupWrapperComp.prototype.getDragItemForGroup = function () {
    var allColumnsOriginalOrder = this.columnGroup.getOriginalColumnGroup().getLeafColumns(); // capture visible state, used when re-entering grid to dictate which columns should be visible

    var visibleState = {};
    allColumnsOriginalOrder.forEach(function (column) {
      return visibleState[column.getId()] = column.isVisible();
    });
    var allColumnsCurrentOrder = [];
    this.columnController.getAllDisplayedColumns().forEach(function (column) {
      if (allColumnsOriginalOrder.indexOf(column) >= 0) {
        allColumnsCurrentOrder.push(column);

        utils_1._.removeFromArray(allColumnsOriginalOrder, column);
      }
    }); // we are left with non-visible columns, stick these in at the end

    allColumnsOriginalOrder.forEach(function (column) {
      return allColumnsCurrentOrder.push(column);
    }); // create and return dragItem

    return {
      columns: allColumnsCurrentOrder,
      visibleState: visibleState
    };
  };

  HeaderGroupWrapperComp.prototype.isSuppressMoving = function () {
    // if any child is fixed, then don't allow moving
    var childSuppressesMoving = false;
    this.columnGroup.getLeafColumns().forEach(function (column) {
      if (column.getColDef().suppressMovable || column.isLockPosition()) {
        childSuppressesMoving = true;
      }
    });
    var result = childSuppressesMoving || this.gridOptionsWrapper.isSuppressMovableColumns();
    return result;
  };

  HeaderGroupWrapperComp.prototype.setupWidth = function () {
    // we need to listen to changes in child columns, as they impact our width
    this.addListenersToChildrenColumns(); // the children belonging to this group can change, so we need to add and remove listeners as they change

    this.addDestroyableEventListener(this.columnGroup, columnGroup_1.ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED, this.onDisplayedChildrenChanged.bind(this));
    this.onWidthChanged(); // the child listeners are not tied to this components life-cycle, as children can get added and removed
    // to the group - hence they are on a different life-cycle. so we must make sure the existing children
    // listeners are removed when we finally get destroyed

    this.addDestroyFunc(this.destroyListenersOnChildrenColumns.bind(this));
  };

  HeaderGroupWrapperComp.prototype.onDisplayedChildrenChanged = function () {
    this.addListenersToChildrenColumns();
    this.onWidthChanged();
  };

  HeaderGroupWrapperComp.prototype.addListenersToChildrenColumns = function () {
    var _this = this; // first destroy any old listeners


    this.destroyListenersOnChildrenColumns(); // now add new listeners to the new set of children

    var widthChangedListener = this.onWidthChanged.bind(this);
    this.columnGroup.getLeafColumns().forEach(function (column) {
      column.addEventListener(column_1.Column.EVENT_WIDTH_CHANGED, widthChangedListener);
      column.addEventListener(column_1.Column.EVENT_VISIBLE_CHANGED, widthChangedListener);

      _this.childColumnsDestroyFuncs.push(function () {
        column.removeEventListener(column_1.Column.EVENT_WIDTH_CHANGED, widthChangedListener);
        column.removeEventListener(column_1.Column.EVENT_VISIBLE_CHANGED, widthChangedListener);
      });
    });
  };

  HeaderGroupWrapperComp.prototype.destroyListenersOnChildrenColumns = function () {
    this.childColumnsDestroyFuncs.forEach(function (func) {
      return func();
    });
    this.childColumnsDestroyFuncs = [];
  };

  HeaderGroupWrapperComp.prototype.onWidthChanged = function () {
    this.getGui().style.width = this.columnGroup.getActualWidth() + 'px';
  };

  HeaderGroupWrapperComp.prototype.setupResize = function () {
    var _this = this;

    this.eHeaderCellResize = this.getRefElement('agResize');

    if (!this.columnGroup.isResizable()) {
      utils_1._.removeFromParent(this.eHeaderCellResize);

      return;
    }

    var finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({
      eResizeBar: this.eHeaderCellResize,
      onResizeStart: this.onResizeStart.bind(this),
      onResizing: this.onResizing.bind(this, false),
      onResizeEnd: this.onResizing.bind(this, true)
    });
    this.addDestroyFunc(finishedWithResizeFunc);

    if (!this.gridOptionsWrapper.isSuppressAutoSize()) {
      this.eHeaderCellResize.addEventListener('dblclick', function (event) {
        // get list of all the column keys we are responsible for
        var keys = [];

        _this.columnGroup.getDisplayedLeafColumns().forEach(function (column) {
          // not all cols in the group may be participating with auto-resize
          if (!column.getColDef().suppressAutoSize) {
            keys.push(column.getColId());
          }
        });

        if (keys.length > 0) {
          _this.columnController.autoSizeColumns(keys, "uiColumnResized");
        }
      });
    }
  };

  HeaderGroupWrapperComp.prototype.onResizeStart = function (shiftKey) {
    var _this = this;

    var leafCols = this.columnGroup.getDisplayedLeafColumns();
    this.resizeCols = utils_1._.filter(leafCols, function (col) {
      return col.isResizable();
    });
    this.resizeStartWidth = 0;
    this.resizeCols.forEach(function (col) {
      return _this.resizeStartWidth += col.getActualWidth();
    });
    this.resizeRatios = [];
    this.resizeCols.forEach(function (col) {
      return _this.resizeRatios.push(col.getActualWidth() / _this.resizeStartWidth);
    });
    var takeFromGroup = null;

    if (shiftKey) {
      takeFromGroup = this.columnController.getDisplayedGroupAfter(this.columnGroup);
    }

    if (takeFromGroup) {
      var takeFromLeafCols = takeFromGroup.getDisplayedLeafColumns();
      this.resizeTakeFromCols = utils_1._.filter(takeFromLeafCols, function (col) {
        return col.isResizable();
      });
      this.resizeTakeFromStartWidth = 0;
      this.resizeTakeFromCols.forEach(function (col) {
        return _this.resizeTakeFromStartWidth += col.getActualWidth();
      });
      this.resizeTakeFromRatios = [];
      this.resizeTakeFromCols.forEach(function (col) {
        return _this.resizeTakeFromRatios.push(col.getActualWidth() / _this.resizeTakeFromStartWidth);
      });
    } else {
      this.resizeTakeFromCols = null;
      this.resizeTakeFromStartWidth = null;
      this.resizeTakeFromRatios = null;
    }

    utils_1._.addCssClass(this.getGui(), 'ag-column-resizing');
  };

  HeaderGroupWrapperComp.prototype.onResizing = function (finished, resizeAmount) {
    var resizeSets = [];
    var resizeAmountNormalised = this.normaliseDragChange(resizeAmount);
    resizeSets.push({
      columns: this.resizeCols,
      ratios: this.resizeRatios,
      width: this.resizeStartWidth + resizeAmountNormalised
    });

    if (this.resizeTakeFromCols) {
      resizeSets.push({
        columns: this.resizeTakeFromCols,
        ratios: this.resizeTakeFromRatios,
        width: this.resizeTakeFromStartWidth - resizeAmountNormalised
      });
    }

    this.columnController.resizeColumnSets(resizeSets, finished, 'uiColumnDragged');

    if (finished) {
      utils_1._.removeCssClass(this.getGui(), 'ag-column-resizing');
    }
  }; // optionally inverts the drag, depending on pinned and RTL
  // note - this method is duplicated in RenderedHeaderCell - should refactor out?


  HeaderGroupWrapperComp.prototype.normaliseDragChange = function (dragChange) {
    var result = dragChange;

    if (this.gridOptionsWrapper.isEnableRtl()) {
      // for RTL, dragging left makes the col bigger, except when pinning left
      if (this.pinned !== column_1.Column.PINNED_LEFT) {
        result *= -1;
      }
    } else {
      // for LTR (ie normal), dragging left makes the col smaller, except when pinning right
      if (this.pinned === column_1.Column.PINNED_RIGHT) {
        result *= -1;
      }
    }

    return result;
  };

  HeaderGroupWrapperComp.TEMPLATE = '<div class="ag-header-group-cell">' + '<div ref="agResize" class="ag-header-cell-resize"></div>' + '</div>';

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], HeaderGroupWrapperComp.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('columnController'), __metadata("design:type", columnController_1.ColumnController)], HeaderGroupWrapperComp.prototype, "columnController", void 0);

  __decorate([context_1.Autowired('horizontalResizeService'), __metadata("design:type", horizontalResizeService_1.HorizontalResizeService)], HeaderGroupWrapperComp.prototype, "horizontalResizeService", void 0);

  __decorate([context_1.Autowired('dragAndDropService'), __metadata("design:type", dragAndDropService_1.DragAndDropService)], HeaderGroupWrapperComp.prototype, "dragAndDropService", void 0);

  __decorate([context_1.Autowired('userComponentFactory'), __metadata("design:type", userComponentFactory_1.UserComponentFactory)], HeaderGroupWrapperComp.prototype, "userComponentFactory", void 0);

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], HeaderGroupWrapperComp.prototype, "gridApi", void 0);

  __decorate([context_1.Autowired('columnApi'), __metadata("design:type", columnApi_1.ColumnApi)], HeaderGroupWrapperComp.prototype, "columnApi", void 0);

  __decorate([context_1.Autowired('beans'), __metadata("design:type", beans_1.Beans)], HeaderGroupWrapperComp.prototype, "beans", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], HeaderGroupWrapperComp.prototype, "postConstruct", null);

  return HeaderGroupWrapperComp;
}(component_1.Component);

exports.HeaderGroupWrapperComp = HeaderGroupWrapperComp;

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var column_1 = __webpack_require__(24);

var setLeftFeature_1 = __webpack_require__(112);

var floatingFilter_1 = __webpack_require__(193);

var component_1 = __webpack_require__(22);

var componentAnnotations_1 = __webpack_require__(25);

var gridOptionsWrapper_1 = __webpack_require__(7);

var beans_1 = __webpack_require__(60);

var hoverFeature_1 = __webpack_require__(156);

var events_1 = __webpack_require__(18);

var eventService_1 = __webpack_require__(14);

var columnHoverService_1 = __webpack_require__(93);

var utils_1 = __webpack_require__(6);

var userComponentFactory_1 = __webpack_require__(35);

var gridApi_1 = __webpack_require__(20);

var columnApi_1 = __webpack_require__(21);

var filterManager_1 = __webpack_require__(40);

var FloatingFilterWrapper =
/** @class */
function (_super) {
  __extends(FloatingFilterWrapper, _super);

  function FloatingFilterWrapper(column) {
    var _this = _super.call(this, FloatingFilterWrapper.TEMPLATE) || this;

    _this.column = column;
    return _this;
  }

  FloatingFilterWrapper.prototype.postConstruct = function () {
    this.setupFloatingFilter();
    this.setupWidth();
    this.setupLeftPositioning();
    this.setupColumnHover();
    this.addFeature(this.getContext(), new hoverFeature_1.HoverFeature([this.column], this.getGui()));
    this.addDestroyableEventListener(this.eButtonShowMainFilter, 'click', this.showParentFilter.bind(this));
  };

  FloatingFilterWrapper.prototype.setupFloatingFilter = function () {
    var _this = this;

    var colDef = this.column.getColDef();

    if (colDef.filter) {
      this.floatingFilterCompPromise = this.getFloatingFilterInstance();

      if (this.floatingFilterCompPromise) {
        this.floatingFilterCompPromise.then(function (compInstance) {
          if (compInstance) {
            _this.setupWithFloatingFilter(compInstance);
          } else {
            _this.setupEmpty();
          }
        });
      } else {
        this.setupEmpty();
      }

      this.setupSyncWithFilter();
    } else {
      this.setupEmpty();
    }
  };

  FloatingFilterWrapper.prototype.setupLeftPositioning = function () {
    var setLeftFeature = new setLeftFeature_1.SetLeftFeature(this.column, this.getGui(), this.beans);
    setLeftFeature.init();
    this.addDestroyFunc(setLeftFeature.destroy.bind(setLeftFeature));
  };

  FloatingFilterWrapper.prototype.setupSyncWithFilter = function () {
    var _this = this;

    var syncWithFilter = function syncWithFilter() {
      var filterComponentPromise = _this.filterManager.getFilterComponent(_this.column, 'NO_UI');

      _this.onParentModelChanged(filterComponentPromise.resolveNow(null, function (filter) {
        return filter.getModel();
      }));
    };

    this.addDestroyableEventListener(this.column, column_1.Column.EVENT_FILTER_CHANGED, syncWithFilter);
    var cachedFilter = this.filterManager.cachedFilter(this.column);

    if (cachedFilter) {
      syncWithFilter();
    }
  }; // linked to event listener in template


  FloatingFilterWrapper.prototype.showParentFilter = function () {
    this.menuFactory.showMenuAfterButtonClick(this.column, this.eButtonShowMainFilter, 'filterMenuTab', ['filterMenuTab']);
  };

  FloatingFilterWrapper.prototype.setupColumnHover = function () {
    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_COLUMN_HOVER_CHANGED, this.onColumnHover.bind(this));
    this.onColumnHover();
  };

  FloatingFilterWrapper.prototype.onColumnHover = function () {
    var isHovered = this.columnHoverService.isHovered(this.column);

    utils_1._.addOrRemoveCssClass(this.getGui(), 'ag-column-hover', isHovered);
  };

  FloatingFilterWrapper.prototype.setupWidth = function () {
    this.addDestroyableEventListener(this.column, column_1.Column.EVENT_WIDTH_CHANGED, this.onColumnWidthChanged.bind(this));
    this.onColumnWidthChanged();
  };

  FloatingFilterWrapper.prototype.onColumnWidthChanged = function () {
    this.getGui().style.width = this.column.getActualWidth() + 'px';
  };

  FloatingFilterWrapper.prototype.setupWithFloatingFilter = function (floatingFilterComp) {
    var disposeFunc = function disposeFunc() {
      if (floatingFilterComp.destroy) {
        floatingFilterComp.destroy();
      }
    };

    if (!this.isAlive()) {
      disposeFunc();
      return;
    }

    this.addDestroyFunc(disposeFunc);
    var floatingFilterCompUi = floatingFilterComp.getGui();

    utils_1._.addOrRemoveCssClass(this.eFloatingFilterBody, 'ag-floating-filter-body', !this.suppressFilterButton);

    utils_1._.addOrRemoveCssClass(this.eFloatingFilterBody, 'ag-floating-filter-full-body', this.suppressFilterButton);

    utils_1._.setVisible(this.eButtonWrapper, !this.suppressFilterButton);

    var eIcon = utils_1._.createIconNoSpan('filter', this.gridOptionsWrapper, this.column);

    this.eButtonShowMainFilter.appendChild(eIcon);
    this.eFloatingFilterBody.appendChild(floatingFilterCompUi);

    if (floatingFilterComp.afterGuiAttached) {
      floatingFilterComp.afterGuiAttached();
    }

    this.wireQuerySelectors();
  };

  FloatingFilterWrapper.prototype.getFloatingFilterInstance = function () {
    var _this = this;

    var colDef = this.column.getColDef();
    var defaultFloatingFilterType;

    if (typeof colDef.filter === 'string') {
      // will be undefined if not in the map
      defaultFloatingFilterType = FloatingFilterWrapper.filterToFloatingFilterNames[colDef.filter];
    } else if (colDef.filter === true) {
      defaultFloatingFilterType = this.gridOptionsWrapper.isEnterprise() ? 'agSetColumnFloatingFilter' : 'agTextColumnFloatingFilter';
    }

    var params = {
      api: this.gridApi,
      column: this.column,
      currentParentModel: this.currentParentModel.bind(this),
      onFloatingFilterChanged: this.onFloatingFilterChanged.bind(this),
      suppressFilterButton: false // This one might be overridden from the colDef

    }; // this is unusual - we need a params value OUTSIDE the component the params are for.
    // the params are for the floating filter component, but this property is actually for the wrapper.

    this.suppressFilterButton = colDef.floatingFilterComponentParams ? !!colDef.floatingFilterComponentParams.suppressFilterButton : false;
    var promise = this.userComponentFactory.newFloatingFilterComponent(colDef, params, defaultFloatingFilterType);

    if (!promise) {
      var filterComponent = this.getFilterComponentPrototype(colDef);
      var getModelAsStringExists = filterComponent && filterComponent.prototype && filterComponent.prototype.getModelAsString;

      if (getModelAsStringExists) {
        var rawModelFn_1 = params.currentParentModel;

        params.currentParentModel = function () {
          var parentPromise = _this.filterManager.getFilterComponent(_this.column, 'NO_UI');

          return parentPromise.resolveNow(null, function (parent) {
            return parent.getModelAsString ? parent.getModelAsString(rawModelFn_1()) : null;
          });
        };

        var compInstance = this.userComponentFactory.createUserComponentFromConcreteClass(floatingFilter_1.ReadModelAsStringFloatingFilterComp, params);
        promise = utils_1.Promise.resolve(compInstance);
      }
    }

    return promise;
  };

  FloatingFilterWrapper.prototype.createDynamicParams = function () {
    return {
      column: this.column,
      colDef: this.column.getColDef(),
      api: this.gridApi,
      columnApi: this.columnApi
    };
  };

  FloatingFilterWrapper.prototype.getFilterComponentPrototype = function (colDef) {
    var resolvedComponent = this.userComponentFactory.lookupComponentClassDef(colDef, "filter", this.createDynamicParams());
    return resolvedComponent ? resolvedComponent.component : null;
  };

  FloatingFilterWrapper.prototype.setupEmpty = function () {
    utils_1._.setVisible(this.eButtonWrapper, false);
  };

  FloatingFilterWrapper.prototype.currentParentModel = function () {
    var filterComponentPromise = this.filterManager.getFilterComponent(this.column, 'NO_UI');
    var wholeParentFilter = filterComponentPromise.resolveNow(null, function (filter) {
      return filter.getNullableModel ? filter.getNullableModel() : filter.getModel();
    });
    return wholeParentFilter && wholeParentFilter.operator != null ? wholeParentFilter.condition1 : wholeParentFilter;
  };

  FloatingFilterWrapper.prototype.onFloatingFilterChanged = function (change) {
    var _this = this;

    var captureModelChangedResolveFunc;
    var modelChanged = new utils_1.Promise(function (resolve) {
      captureModelChangedResolveFunc = resolve;
    });
    var filterComponentPromise = this.filterManager.getFilterComponent(this.column, 'NO_UI');
    filterComponentPromise.then(function (filterComponent) {
      if (filterComponent.onFloatingFilterChanged) {
        //If going through this branch of code the user MUST
        //be passing an object of type change that contains
        //a model property inside and some other stuff
        var result = filterComponent.onFloatingFilterChanged(change);
        captureModelChangedResolveFunc(result);
      } else {
        //If going through this branch of code the user MUST
        //be passing the plain model and delegating to ag-Grid
        //the responsibility to set the parent model and refresh
        //the filters
        filterComponent.setModel(change);

        _this.filterManager.onFilterChanged();

        captureModelChangedResolveFunc(true);
      }
    });
    return modelChanged.resolveNow(true, function (changed) {
      return changed;
    });
  };

  FloatingFilterWrapper.prototype.onParentModelChanged = function (parentModel) {
    if (!this.floatingFilterCompPromise) {
      return;
    }

    var combinedFilter;
    var mainModel = null;

    if (parentModel && parentModel.operator) {
      combinedFilter = parentModel;
      mainModel = combinedFilter.condition1;
    } else {
      mainModel = parentModel;
    }

    this.floatingFilterCompPromise.then(function (floatingFilterComp) {
      floatingFilterComp.onParentModelChanged(mainModel, combinedFilter);
    });
  };

  FloatingFilterWrapper.filterToFloatingFilterNames = {
    set: 'agSetColumnFloatingFilter',
    agSetColumnFilter: 'agSetColumnFloatingFilter',
    number: 'agNumberColumnFloatingFilter',
    agNumberColumnFilter: 'agNumberColumnFloatingFilter',
    date: 'agDateColumnFloatingFilter',
    agDateColumnFilter: 'agDateColumnFloatingFilter',
    text: 'agTextColumnFloatingFilter',
    agTextColumnFilter: 'agTextColumnFloatingFilter'
  };
  FloatingFilterWrapper.TEMPLATE = "<div class=\"ag-header-cell\" aria-hidden=\"true\">\n            <div ref=\"eFloatingFilterBody\" aria-hidden=\"true\"></div>\n            <div class=\"ag-floating-filter-button\" ref=\"eButtonWrapper\" aria-hidden=\"true\">\n                    <button type=\"button\" ref=\"eButtonShowMainFilter\"></button>\n            </div>\n        </div>";

  __decorate([context_1.Autowired('columnHoverService'), __metadata("design:type", columnHoverService_1.ColumnHoverService)], FloatingFilterWrapper.prototype, "columnHoverService", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], FloatingFilterWrapper.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('beans'), __metadata("design:type", beans_1.Beans)], FloatingFilterWrapper.prototype, "beans", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], FloatingFilterWrapper.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired("userComponentFactory"), __metadata("design:type", userComponentFactory_1.UserComponentFactory)], FloatingFilterWrapper.prototype, "userComponentFactory", void 0);

  __decorate([context_1.Autowired("gridApi"), __metadata("design:type", gridApi_1.GridApi)], FloatingFilterWrapper.prototype, "gridApi", void 0);

  __decorate([context_1.Autowired("columnApi"), __metadata("design:type", columnApi_1.ColumnApi)], FloatingFilterWrapper.prototype, "columnApi", void 0);

  __decorate([context_1.Autowired("filterManager"), __metadata("design:type", filterManager_1.FilterManager)], FloatingFilterWrapper.prototype, "filterManager", void 0);

  __decorate([context_1.Autowired('menuFactory'), __metadata("design:type", Object)], FloatingFilterWrapper.prototype, "menuFactory", void 0);

  __decorate([componentAnnotations_1.RefSelector('eFloatingFilterBody'), __metadata("design:type", HTMLElement)], FloatingFilterWrapper.prototype, "eFloatingFilterBody", void 0);

  __decorate([componentAnnotations_1.RefSelector('eButtonWrapper'), __metadata("design:type", HTMLElement)], FloatingFilterWrapper.prototype, "eButtonWrapper", void 0);

  __decorate([componentAnnotations_1.RefSelector('eButtonShowMainFilter'), __metadata("design:type", HTMLElement)], FloatingFilterWrapper.prototype, "eButtonShowMainFilter", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], FloatingFilterWrapper.prototype, "postConstruct", null);

  return FloatingFilterWrapper;
}(component_1.Component);

exports.FloatingFilterWrapper = FloatingFilterWrapper;

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var utils_1 = __webpack_require__(6);
/**
 * There are many instances of this component covering each of the areas a row can be entered
 * eg body, pinned left, fullWidth. The component differs from others in that it's given the
 * elements, there is no template. All of the elements are part of the GridPanel.
 */


var RowContainerComponent =
/** @class */
function () {
  function RowContainerComponent(params) {
    this.childCount = 0;
    this.rowTemplatesToAdd = [];
    this.afterGuiAttachedCallbacks = []; // this is to cater for a 'strange behaviour' where when a panel is made visible, it is firing a scroll
    // event which we want to ignore. see gridPanel.onAnyBodyScroll()

    this.lastMadeVisibleTime = 0;
    this.eContainer = params.eContainer;
    this.eViewport = params.eViewport;

    if (params.eWrapper) {
      this.eWrapper = params.eWrapper;
    }

    this.hideWhenNoChildren = params.hideWhenNoChildren;
  }

  RowContainerComponent.prototype.setVerticalScrollPosition = function (verticalScrollPosition) {
    this.scrollTop = verticalScrollPosition;
  };

  RowContainerComponent.prototype.postConstruct = function () {
    this.checkDomOrder();
    this.checkVisibility();
    this.gridOptionsWrapper.addEventListener(gridOptionsWrapper_1.GridOptionsWrapper.PROP_DOM_LAYOUT, this.checkDomOrder.bind(this));
  };

  RowContainerComponent.prototype.checkDomOrder = function () {
    this.domOrder = this.gridOptionsWrapper.isEnsureDomOrder();
  };

  RowContainerComponent.prototype.getRowElement = function (compId) {
    return this.eContainer.querySelector("[comp-id=\"" + compId + "\"]");
  };

  RowContainerComponent.prototype.setHeight = function (height) {
    if (height == null) {
      this.eContainer.style.height = '';
      return;
    }

    this.eContainer.style.height = height + "px";

    if (this.eWrapper) {
      this.eWrapper.style.height = height + "px";
    }
  };

  RowContainerComponent.prototype.flushRowTemplates = function () {
    // if doing dom order, then rowTemplates will be empty,
    // or if no rows added since last time also empty.
    if (this.rowTemplatesToAdd.length !== 0) {
      var htmlToAdd = this.rowTemplatesToAdd.join('');

      utils_1._.appendHtml(this.eContainer, htmlToAdd);

      this.rowTemplatesToAdd.length = 0;
    } // this only empty if no rows since last time, as when
    // doing dom order, we still have callbacks to process


    this.afterGuiAttachedCallbacks.forEach(function (func) {
      return func();
    });
    this.afterGuiAttachedCallbacks.length = 0;
    this.lastPlacedElement = null;
  };

  RowContainerComponent.prototype.appendRowTemplate = function (rowTemplate, callback) {
    if (this.domOrder) {
      this.lastPlacedElement = utils_1._.insertTemplateWithDomOrder(this.eContainer, rowTemplate, this.lastPlacedElement);
    } else {
      this.rowTemplatesToAdd.push(rowTemplate);
    }

    this.afterGuiAttachedCallbacks.push(callback); // it is important we put items in in order, so that when we open a row group,
    // the new rows are inserted after the opened group, but before the rows below.
    // that way, the rows below are over the new rows (as dom renders last in dom over
    // items previous in dom), otherwise the child rows would cover the row below and
    // that meant the user doesn't see the rows below slide away.

    this.childCount++;
    this.checkVisibility();
  };

  RowContainerComponent.prototype.ensureDomOrder = function (eRow) {
    if (this.domOrder) {
      utils_1._.ensureDomOrder(this.eContainer, eRow, this.lastPlacedElement);

      this.lastPlacedElement = eRow;
    }
  };

  RowContainerComponent.prototype.removeRowElement = function (eRow) {
    this.eContainer.removeChild(eRow);
    this.childCount--;
    this.checkVisibility();
  };

  RowContainerComponent.prototype.checkVisibility = function () {
    if (!this.hideWhenNoChildren) {
      return;
    }

    var eGui = this.eViewport ? this.eViewport : this.eContainer;
    var visible = this.childCount > 0;

    if (this.visible !== visible) {
      this.visible = visible;
      this.lastMadeVisibleTime = new Date().getTime();

      utils_1._.setVisible(eGui, visible); // if we are showing the viewport, then the scroll is always zero,
      // so we need to align with the other sections (ie if this is full
      // width container, and first time showing a full width row, we need to
      // scroll it so full width rows are show in right place alongside the
      // body rows). without this, there was an issue with 'loading rows' for
      // server side row model, as loading rows are full width, and they were
      // not getting displayed in the right location when rows were expanded.


      if (visible && this.eViewport) {
        this.eViewport.scrollTop = this.scrollTop;
      }
    }
  };

  RowContainerComponent.prototype.isMadeVisibleRecently = function () {
    var now = new Date().getTime();
    var millisSinceVisible = now - this.lastMadeVisibleTime;
    return millisSinceVisible < 500;
  };

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], RowContainerComponent.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], RowContainerComponent.prototype, "postConstruct", null);

  return RowContainerComponent;
}();

exports.RowContainerComponent = RowContainerComponent;

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var dragAndDropService_1 = __webpack_require__(34);

var context_1 = __webpack_require__(2);

var focusedCellController_1 = __webpack_require__(48);

var gridOptionsWrapper_1 = __webpack_require__(7);

var eventService_1 = __webpack_require__(14);

var eventKeys_1 = __webpack_require__(57);

var constants_1 = __webpack_require__(19);

var RowDragFeature =
/** @class */
function () {
  function RowDragFeature(eContainer, gridPanel) {
    this.eContainer = eContainer;
    this.gridPanel = gridPanel;
  }

  RowDragFeature.prototype.postConstruct = function () {
    if (this.gridOptionsWrapper.isRowModelDefault()) {
      this.clientSideRowModel = this.rowModel;
    }
  };

  RowDragFeature.prototype.getContainer = function () {
    return this.eContainer;
  };

  RowDragFeature.prototype.isInterestedIn = function (type) {
    return type === dragAndDropService_1.DragSourceType.RowDrag;
  };

  RowDragFeature.prototype.getIconName = function () {
    return dragAndDropService_1.DragAndDropService.ICON_MOVE;
  };

  RowDragFeature.prototype.onDragEnter = function (draggingEvent) {
    // when entering, we fire the enter event, then in onEnterOrDragging,
    // we also fire the move event. so we get both events when entering.
    this.dispatchEvent(eventKeys_1.Events.EVENT_ROW_DRAG_ENTER, draggingEvent);
    this.dragAndDropService.setGhostIcon(dragAndDropService_1.DragAndDropService.ICON_MOVE);
    draggingEvent.dragItem.rowNode.setDragging(true);
    this.onEnterOrDragging(draggingEvent);
  };

  RowDragFeature.prototype.onDragging = function (draggingEvent) {
    this.onEnterOrDragging(draggingEvent);
  };

  RowDragFeature.prototype.onEnterOrDragging = function (draggingEvent) {
    // this event is fired for enter and move
    this.dispatchEvent(eventKeys_1.Events.EVENT_ROW_DRAG_MOVE, draggingEvent);
    this.lastDraggingEvent = draggingEvent;
    var pixel = this.normaliseForScroll(draggingEvent.y);
    var managedDrag = this.gridOptionsWrapper.isRowDragManaged();

    if (managedDrag) {
      this.doManagedDrag(draggingEvent, pixel);
    }

    this.checkCenterForScrolling(pixel);
  };

  RowDragFeature.prototype.doManagedDrag = function (draggingEvent, pixel) {
    var rowNode = draggingEvent.dragItem.rowNode;
    var rowWasMoved = this.clientSideRowModel.ensureRowAtPixel(rowNode, pixel);

    if (rowWasMoved) {
      this.focusedCellController.clearFocusedCell();

      if (this.rangeController) {
        this.rangeController.clearSelection();
      }
    }
  };

  RowDragFeature.prototype.normaliseForScroll = function (pixel) {
    var gridPanelHasScrolls = this.gridOptionsWrapper.getDomLayout() === constants_1.Constants.DOM_LAYOUT_NORMAL;

    if (gridPanelHasScrolls) {
      var pixelRange = this.gridPanel.getVScrollPosition();
      return pixel + pixelRange.top;
    } else {
      return pixel;
    }
  };

  RowDragFeature.prototype.checkCenterForScrolling = function (pixel) {
    // scroll if the mouse is within 50px of the grid edge
    var pixelRange = this.gridPanel.getVScrollPosition(); // console.log(`pixelRange = (${pixelRange.top}, ${pixelRange.bottom})`);

    this.needToMoveUp = pixel < pixelRange.top + 50;
    this.needToMoveDown = pixel > pixelRange.bottom - 50; // console.log(`needToMoveUp = ${this.needToMoveUp} = pixel < (pixelRange.top + 50) = ${pixel} < (${pixelRange.top} + 50)`);
    // console.log(`needToMoveDown = ${this.needToMoveDown} = pixel < (pixelRange.top + 50) = ${pixel} < (${pixelRange.top} + 50)`);

    if (this.needToMoveUp || this.needToMoveDown) {
      this.ensureIntervalStarted();
    } else {
      this.ensureIntervalCleared();
    }
  };

  RowDragFeature.prototype.ensureIntervalStarted = function () {
    if (!this.movingIntervalId) {
      this.intervalCount = 0;
      this.movingIntervalId = window.setInterval(this.moveInterval.bind(this), 100);
    }
  };

  RowDragFeature.prototype.ensureIntervalCleared = function () {
    if (this.moveInterval) {
      window.clearInterval(this.movingIntervalId);
      this.movingIntervalId = null;
    }
  };

  RowDragFeature.prototype.moveInterval = function () {
    // the amounts we move get bigger at each interval, so the speed accelerates, starting a bit slow
    // and getting faster. this is to give smoother user experience. we max at 100px to limit the speed.
    var pixelsToMove;
    this.intervalCount++;
    pixelsToMove = 10 + this.intervalCount * 5;

    if (pixelsToMove > 100) {
      pixelsToMove = 100;
    }

    var pixelsMoved;

    if (this.needToMoveDown) {
      pixelsMoved = this.gridPanel.scrollVertically(pixelsToMove);
    } else if (this.needToMoveUp) {
      pixelsMoved = this.gridPanel.scrollVertically(-pixelsToMove);
    }

    if (pixelsMoved !== 0) {
      this.onDragging(this.lastDraggingEvent);
    }
  }; // i tried using generics here with this:
  //     public createEvent<T extends RowDragEvent>(type: string, clazz: {new(): T; }, draggingEvent: DraggingEvent) {
  // but it didn't work - i think it's because it only works with classes, and not interfaces, (the events are interfaces)


  RowDragFeature.prototype.dispatchEvent = function (type, draggingEvent) {
    var yNormalised = this.normaliseForScroll(draggingEvent.y);
    var overIndex = -1;
    var overNode = null;
    var mouseIsPastLastRow = yNormalised > this.rowModel.getCurrentPageHeight();

    if (!mouseIsPastLastRow) {
      overIndex = this.rowModel.getRowIndexAtPixel(yNormalised);
      overNode = this.rowModel.getRow(overIndex);
    }

    var vDirectionString;

    switch (draggingEvent.vDirection) {
      case dragAndDropService_1.VDirection.Down:
        vDirectionString = 'down';
        break;

      case dragAndDropService_1.VDirection.Up:
        vDirectionString = 'up';
        break;

      default:
        vDirectionString = null;
        break;
    }

    var event = {
      type: type,
      api: this.gridOptionsWrapper.getApi(),
      columnApi: this.gridOptionsWrapper.getColumnApi(),
      event: draggingEvent.event,
      node: draggingEvent.dragItem.rowNode,
      overIndex: overIndex,
      overNode: overNode,
      y: yNormalised,
      vDirection: vDirectionString
    };
    this.eventService.dispatchEvent(event);
  };

  RowDragFeature.prototype.onDragLeave = function (draggingEvent) {
    this.dispatchEvent(eventKeys_1.Events.EVENT_ROW_DRAG_LEAVE, draggingEvent);
    this.stopDragging(draggingEvent);
  };

  RowDragFeature.prototype.onDragStop = function (draggingEvent) {
    this.dispatchEvent(eventKeys_1.Events.EVENT_ROW_DRAG_END, draggingEvent);
    this.stopDragging(draggingEvent);
  };

  RowDragFeature.prototype.stopDragging = function (draggingEvent) {
    this.ensureIntervalCleared();
    draggingEvent.dragItem.rowNode.setDragging(false);
  };

  __decorate([context_1.Autowired('dragAndDropService'), __metadata("design:type", dragAndDropService_1.DragAndDropService)], RowDragFeature.prototype, "dragAndDropService", void 0);

  __decorate([context_1.Autowired('rowModel'), __metadata("design:type", Object)], RowDragFeature.prototype, "rowModel", void 0);

  __decorate([context_1.Autowired('focusedCellController'), __metadata("design:type", focusedCellController_1.FocusedCellController)], RowDragFeature.prototype, "focusedCellController", void 0);

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], RowDragFeature.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Optional('rangeController'), __metadata("design:type", Object)], RowDragFeature.prototype, "rangeController", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], RowDragFeature.prototype, "eventService", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], RowDragFeature.prototype, "postConstruct", null);

  return RowDragFeature;
}();

exports.RowDragFeature = RowDragFeature;

/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var __param = this && this.__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var eventService_1 = __webpack_require__(14);

var events_1 = __webpack_require__(18);

var logger_1 = __webpack_require__(30);

var infiniteBlock_1 = __webpack_require__(307);

var rowNodeCache_1 = __webpack_require__(165);

var gridApi_1 = __webpack_require__(20);

var columnApi_1 = __webpack_require__(21);

var InfiniteCache =
/** @class */
function (_super) {
  __extends(InfiniteCache, _super);

  function InfiniteCache(params) {
    return _super.call(this, params) || this;
  }

  InfiniteCache.prototype.setBeans = function (loggerFactory) {
    this.logger = loggerFactory.create('InfiniteCache');
  };

  InfiniteCache.prototype.init = function () {
    _super.prototype.init.call(this); // start load of data, as the virtualRowCount will remain at 0 otherwise,
    // so we need this to kick things off, otherwise grid would never call getRow()


    this.getRow(0);
  };

  InfiniteCache.prototype.moveItemsDown = function (block, moveFromIndex, moveCount) {
    var startRow = block.getStartRow();
    var endRow = block.getEndRow();
    var indexOfLastRowToMove = moveFromIndex + moveCount; // all rows need to be moved down below the insertion index

    for (var currentRowIndex = endRow - 1; currentRowIndex >= startRow; currentRowIndex--) {
      // don't move rows at or before the insertion index
      if (currentRowIndex < indexOfLastRowToMove) {
        continue;
      }

      var indexOfNodeWeWant = currentRowIndex - moveCount;
      var nodeForThisIndex = this.getRow(indexOfNodeWeWant, true);

      if (nodeForThisIndex) {
        block.setRowNode(currentRowIndex, nodeForThisIndex);
      } else {
        block.setBlankRowNode(currentRowIndex);
        block.setDirty();
      }
    }
  };

  InfiniteCache.prototype.insertItems = function (block, indexToInsert, items) {
    var pageStartRow = block.getStartRow();
    var pageEndRow = block.getEndRow();
    var newRowNodes = []; // next stage is insert the rows into this page, if applicable

    for (var index = 0; index < items.length; index++) {
      var rowIndex = indexToInsert + index;
      var currentRowInThisPage = rowIndex >= pageStartRow && rowIndex < pageEndRow;

      if (currentRowInThisPage) {
        var dataItem = items[index];
        var newRowNode = block.setNewData(rowIndex, dataItem);
        newRowNodes.push(newRowNode);
      }
    }

    return newRowNodes;
  };

  InfiniteCache.prototype.insertItemsAtIndex = function (indexToInsert, items) {
    // get all page id's as NUMBERS (not strings, as we need to sort as numbers) and in descending order
    var _this = this;

    var newNodes = [];
    this.forEachBlockInReverseOrder(function (block) {
      var pageEndRow = block.getEndRow(); // if the insertion is after this page, then this page is not impacted

      if (pageEndRow <= indexToInsert) {
        return;
      }

      _this.moveItemsDown(block, indexToInsert, items.length);

      var newNodesThisPage = _this.insertItems(block, indexToInsert, items);

      newNodesThisPage.forEach(function (rowNode) {
        return newNodes.push(rowNode);
      });
    });

    if (this.isMaxRowFound()) {
      this.hack_setVirtualRowCount(this.getVirtualRowCount() + items.length);
    }

    this.onCacheUpdated();
    var event = {
      type: events_1.Events.EVENT_ROW_DATA_UPDATED,
      api: this.gridApi,
      columnApi: this.columnApi
    };
    this.eventService.dispatchEvent(event);
  }; // the rowRenderer will not pass dontCreatePage, meaning when rendering the grid,
  // it will want new pages in the cache as it asks for rows. only when we are inserting /
  // removing rows via the api is dontCreatePage set, where we move rows between the pages.


  InfiniteCache.prototype.getRow = function (rowIndex, dontCreatePage) {
    if (dontCreatePage === void 0) {
      dontCreatePage = false;
    }

    var blockId = Math.floor(rowIndex / this.cacheParams.blockSize);
    var block = this.getBlock(blockId);

    if (!block) {
      if (dontCreatePage) {
        return null;
      } else {
        block = this.createBlock(blockId);
      }
    }

    return block.getRow(rowIndex);
  };

  InfiniteCache.prototype.createBlock = function (blockNumber) {
    var newBlock = new infiniteBlock_1.InfiniteBlock(blockNumber, this.cacheParams);
    this.getContext().wireBean(newBlock);
    this.postCreateBlock(newBlock);
    return newBlock;
  }; // we have this on infinite row model only, not server side row model,
  // because for server side, it would leave the children in inconsistent
  // state - eg if a node had children, but after the refresh it had data
  // for a different row, then the children would be with the wrong row node.


  InfiniteCache.prototype.refreshCache = function () {
    this.forEachBlockInOrder(function (block) {
      return block.setDirty();
    });
    this.checkBlockToLoad();
  };

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], InfiniteCache.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('columnApi'), __metadata("design:type", columnApi_1.ColumnApi)], InfiniteCache.prototype, "columnApi", void 0);

  __decorate([context_1.Autowired('gridApi'), __metadata("design:type", gridApi_1.GridApi)], InfiniteCache.prototype, "gridApi", void 0);

  __decorate([__param(0, context_1.Qualifier('loggerFactory')), __metadata("design:type", Function), __metadata("design:paramtypes", [logger_1.LoggerFactory]), __metadata("design:returntype", void 0)], InfiniteCache.prototype, "setBeans", null);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], InfiniteCache.prototype, "init", null);

  return InfiniteCache;
}(rowNodeCache_1.RowNodeCache);

exports.InfiniteCache = InfiniteCache;

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var gridOptionsWrapper_1 = __webpack_require__(7);

var context_1 = __webpack_require__(2);

var rowNodeBlock_1 = __webpack_require__(115);

var rowRenderer_1 = __webpack_require__(37);

var utils_1 = __webpack_require__(6);

var InfiniteBlock =
/** @class */
function (_super) {
  __extends(InfiniteBlock, _super);

  function InfiniteBlock(pageNumber, params) {
    var _this = _super.call(this, pageNumber, params) || this;

    _this.cacheParams = params;
    return _this;
  }

  InfiniteBlock.prototype.createBlankRowNode = function (rowIndex) {
    var rowNode = _super.prototype.createBlankRowNode.call(this, rowIndex);

    rowNode.uiLevel = 0;
    this.setIndexAndTopOnRowNode(rowNode, rowIndex);
    return rowNode;
  };

  InfiniteBlock.prototype.setDataAndId = function (rowNode, data, index) {
    if (utils_1._.exists(data)) {
      // this means if the user is not providing id's we just use the
      // index for the row. this will allow selection to work (that is based
      // on index) as long user is not inserting or deleting rows,
      // or wanting to keep selection between server side sorting or filtering
      rowNode.setDataAndId(data, index.toString());
    } else {
      rowNode.setDataAndId(undefined, undefined);
    }
  };

  InfiniteBlock.prototype.setRowNode = function (rowIndex, rowNode) {
    _super.prototype.setRowNode.call(this, rowIndex, rowNode);

    this.setIndexAndTopOnRowNode(rowNode, rowIndex);
  };

  InfiniteBlock.prototype.init = function () {
    _super.prototype.init.call(this, {
      context: this.getContext(),
      rowRenderer: this.rowRenderer
    });
  };

  InfiniteBlock.prototype.getNodeIdPrefix = function () {
    return null;
  };

  InfiniteBlock.prototype.getRow = function (displayIndex) {
    return this.getRowUsingLocalIndex(displayIndex);
  };

  InfiniteBlock.prototype.setIndexAndTopOnRowNode = function (rowNode, rowIndex) {
    rowNode.setRowIndex(rowIndex);
    rowNode.rowTop = this.cacheParams.rowHeight * rowIndex;
  };

  InfiniteBlock.prototype.loadFromDatasource = function () {
    var _this = this; // PROBLEM . . . . when the user sets sort via colDef.sort, then this code
    // is executing before the sort is set up, so server is not getting the sort
    // model. need to change with regards order - so the server side request is
    // AFTER thus it gets the right sort model.


    var params = {
      startRow: this.getStartRow(),
      endRow: this.getEndRow(),
      successCallback: this.pageLoaded.bind(this, this.getVersion()),
      failCallback: this.pageLoadFailed.bind(this),
      sortModel: this.cacheParams.sortModel,
      filterModel: this.cacheParams.filterModel,
      context: this.gridOptionsWrapper.getContext()
    };

    if (utils_1._.missing(this.cacheParams.datasource.getRows)) {
      console.warn("ag-Grid: datasource is missing getRows method");
      return;
    } // check if old version of datasource used


    var getRowsParams = utils_1._.getFunctionParameters(this.cacheParams.datasource.getRows);

    if (getRowsParams.length > 1) {
      console.warn('ag-grid: It looks like your paging datasource is of the old type, taking more than one parameter.');
      console.warn('ag-grid: From ag-grid 1.9.0, now the getRows takes one parameter. See the documentation for details.');
    } // put in timeout, to force result to be async


    window.setTimeout(function () {
      _this.cacheParams.datasource.getRows(params);
    }, 0);
  };

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], InfiniteBlock.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('rowRenderer'), __metadata("design:type", rowRenderer_1.RowRenderer)], InfiniteBlock.prototype, "rowRenderer", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], InfiniteBlock.prototype, "init", null);

  return InfiniteBlock;
}(rowNodeBlock_1.RowNodeBlock);

exports.InfiniteBlock = InfiniteBlock;

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var changedPath_1 = __webpack_require__(106);

var rowRenderer_1 = __webpack_require__(37);

var eventService_1 = __webpack_require__(14);

var constants_1 = __webpack_require__(19);

var beanStub_1 = __webpack_require__(32);

var events_1 = __webpack_require__(18);

var ChangeDetectionService =
/** @class */
function (_super) {
  __extends(ChangeDetectionService, _super);

  function ChangeDetectionService() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ChangeDetectionService.prototype.init = function () {
    if (this.rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
      this.clientSideRowModel = this.rowModel;
    }

    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged.bind(this));
  };

  ChangeDetectionService.prototype.onCellValueChanged = function (event) {
    this.doChangeDetection(event.node, event.column);
  };

  ChangeDetectionService.prototype.doChangeDetection = function (rowNode, column) {
    if (this.gridOptionsWrapper.isSuppressChangeDetection()) {
      return;
    } // step 1 of change detection is to update the aggregated values


    if (this.clientSideRowModel && !rowNode.isRowPinned()) {
      var onlyChangedColumns = this.gridOptionsWrapper.isAggregateOnlyChangedColumns();
      var changedPath = new changedPath_1.ChangedPath(onlyChangedColumns, this.clientSideRowModel.getRootNode());
      changedPath.addParentNode(rowNode.parent, [column]);
      this.clientSideRowModel.doAggregate(changedPath);
    } // step 2 of change detection is to refresh the cells


    this.rowRenderer.refreshCells();
  };

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], ChangeDetectionService.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('rowModel'), __metadata("design:type", Object)], ChangeDetectionService.prototype, "rowModel", void 0);

  __decorate([context_1.Autowired('rowRenderer'), __metadata("design:type", rowRenderer_1.RowRenderer)], ChangeDetectionService.prototype, "rowRenderer", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], ChangeDetectionService.prototype, "eventService", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], ChangeDetectionService.prototype, "init", null);

  ChangeDetectionService = __decorate([context_1.Bean('changeDetectionService')], ChangeDetectionService);
  return ChangeDetectionService;
}(beanStub_1.BeanStub);

exports.ChangeDetectionService = ChangeDetectionService;

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var component_1 = __webpack_require__(22);

var context_1 = __webpack_require__(2);

var gridOptionsWrapper_1 = __webpack_require__(7);

var componentAnnotations_1 = __webpack_require__(25);

var eventService_1 = __webpack_require__(14);

var events_1 = __webpack_require__(18);

var rowRenderer_1 = __webpack_require__(37);

var paginationProxy_1 = __webpack_require__(53);

var utils_1 = __webpack_require__(6);

var PaginationComp =
/** @class */
function (_super) {
  __extends(PaginationComp, _super);

  function PaginationComp() {
    return _super.call(this) || this;
  }

  PaginationComp.prototype.postConstruct = function () {
    this.setTemplate(this.getTemplate());
    var isPaging = this.gridOptionsWrapper.isPagination();
    var paginationPanelEnabled = isPaging && !this.gridOptionsWrapper.isSuppressPaginationPanel();

    if (!paginationPanelEnabled) {
      this.setVisible(false);
      return;
    }

    this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));
    this.addDestroyableEventListener(this.btFirst, 'click', this.onBtFirst.bind(this));
    this.addDestroyableEventListener(this.btLast, 'click', this.onBtLast.bind(this));
    this.addDestroyableEventListener(this.btNext, 'click', this.onBtNext.bind(this));
    this.addDestroyableEventListener(this.btPrevious, 'click', this.onBtPrevious.bind(this));
    this.onPaginationChanged();
  };

  PaginationComp.prototype.onPaginationChanged = function () {
    this.enableOrDisableButtons();
    this.updateRowLabels();
    this.setCurrentPageLabel();
    this.setTotalLabels();
  };

  PaginationComp.prototype.setCurrentPageLabel = function () {
    var pagesExist = this.paginationProxy.getTotalPages() > 0;
    var currentPage = this.paginationProxy.getCurrentPage();
    var toDisplay = pagesExist ? currentPage + 1 : 0;
    this.lbCurrent.innerHTML = this.formatNumber(toDisplay);
  };

  PaginationComp.prototype.formatNumber = function (value) {
    var userFunc = this.gridOptionsWrapper.getPaginationNumberFormatterFunc();

    if (userFunc) {
      return userFunc({
        value: value
      });
    } else {
      return utils_1._.formatNumberCommas(value);
    }
  };

  PaginationComp.prototype.getTemplate = function () {
    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
    var strPage = localeTextFunc('page', 'Page');
    var strTo = localeTextFunc('to', 'to');
    var strOf = localeTextFunc('of', 'of');
    var strFirst = localeTextFunc('first', 'First');
    var strPrevious = localeTextFunc('previous', 'Previous');
    var strNext = localeTextFunc('next', 'Next');
    var strLast = localeTextFunc('last', 'Last');
    return "<div class=\"ag-paging-panel ag-unselectable\">\n                <span ref=\"eSummaryPanel\" class=\"ag-paging-row-summary-panel\">\n                    <span ref=\"lbFirstRowOnPage\"></span> " + strTo + " <span ref=\"lbLastRowOnPage\"></span> " + strOf + " <span ref=\"lbRecordCount\"></span>\n                </span>\n                <span class=\"ag-paging-page-summary-panel\">\n                    <button type=\"button\" class=\"ag-paging-button\" ref=\"btFirst\">" + strFirst + "</button>\n                    <button type=\"button\" class=\"ag-paging-button\" ref=\"btPrevious\">" + strPrevious + "</button>\n                    " + strPage + " <span ref=\"lbCurrent\"></span> " + strOf + " <span ref=\"lbTotal\"></span>\n                    <button type=\"button\" class=\"ag-paging-button\" ref=\"btNext\">" + strNext + "</button>\n                    <button type=\"button\" class=\"ag-paging-button\" ref=\"btLast\">" + strLast + "</button>\n                </span>\n            </div>";
  };

  PaginationComp.prototype.onBtNext = function () {
    this.paginationProxy.goToNextPage();
  };

  PaginationComp.prototype.onBtPrevious = function () {
    this.paginationProxy.goToPreviousPage();
  };

  PaginationComp.prototype.onBtFirst = function () {
    this.paginationProxy.goToFirstPage();
  };

  PaginationComp.prototype.onBtLast = function () {
    this.paginationProxy.goToLastPage();
  };

  PaginationComp.prototype.enableOrDisableButtons = function () {
    var currentPage = this.paginationProxy.getCurrentPage();
    var maxRowFound = this.paginationProxy.isLastPageFound();
    var totalPages = this.paginationProxy.getTotalPages();
    var disablePreviousAndFirst = currentPage === 0;
    this.btPrevious.disabled = disablePreviousAndFirst;
    this.btFirst.disabled = disablePreviousAndFirst;
    var zeroPagesToDisplay = this.isZeroPagesToDisplay();
    var onLastPage = maxRowFound && currentPage === totalPages - 1;
    var disableNext = onLastPage || zeroPagesToDisplay;
    this.btNext.disabled = disableNext;
    var disableLast = !maxRowFound || zeroPagesToDisplay || currentPage === totalPages - 1;
    this.btLast.disabled = disableLast;
  };

  PaginationComp.prototype.updateRowLabels = function () {
    var currentPage = this.paginationProxy.getCurrentPage();
    var pageSize = this.paginationProxy.getPageSize();
    var maxRowFound = this.paginationProxy.isLastPageFound();
    var rowCount = this.paginationProxy.isLastPageFound() ? this.paginationProxy.getTotalRowCount() : null;
    var startRow;
    var endRow;

    if (this.isZeroPagesToDisplay()) {
      startRow = 0;
      endRow = 0;
    } else {
      startRow = pageSize * currentPage + 1;
      endRow = startRow + pageSize - 1;

      if (maxRowFound && endRow > rowCount) {
        endRow = rowCount;
      }
    }

    this.lbFirstRowOnPage.innerHTML = this.formatNumber(startRow);
    this.lbLastRowOnPage.innerHTML = this.formatNumber(endRow);
  };

  PaginationComp.prototype.isZeroPagesToDisplay = function () {
    var maxRowFound = this.paginationProxy.isLastPageFound();
    var totalPages = this.paginationProxy.getTotalPages();
    return maxRowFound && totalPages === 0;
  };

  PaginationComp.prototype.setTotalLabels = function () {
    var lastPageFound = this.paginationProxy.isLastPageFound();
    var totalPages = this.paginationProxy.getTotalPages();
    var rowCount = this.paginationProxy.isLastPageFound() ? this.paginationProxy.getTotalRowCount() : null;

    if (lastPageFound) {
      this.lbTotal.innerHTML = this.formatNumber(totalPages);
      this.lbRecordCount.innerHTML = this.formatNumber(rowCount);
    } else {
      var moreText = this.gridOptionsWrapper.getLocaleTextFunc()('more', 'more');
      this.lbTotal.innerHTML = moreText;
      this.lbRecordCount.innerHTML = moreText;
    }
  };

  __decorate([context_1.Autowired('gridOptionsWrapper'), __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)], PaginationComp.prototype, "gridOptionsWrapper", void 0);

  __decorate([context_1.Autowired('eventService'), __metadata("design:type", eventService_1.EventService)], PaginationComp.prototype, "eventService", void 0);

  __decorate([context_1.Autowired('paginationProxy'), __metadata("design:type", paginationProxy_1.PaginationProxy)], PaginationComp.prototype, "paginationProxy", void 0);

  __decorate([context_1.Autowired('rowRenderer'), __metadata("design:type", rowRenderer_1.RowRenderer)], PaginationComp.prototype, "rowRenderer", void 0);

  __decorate([componentAnnotations_1.RefSelector('btFirst'), __metadata("design:type", HTMLButtonElement)], PaginationComp.prototype, "btFirst", void 0);

  __decorate([componentAnnotations_1.RefSelector('btPrevious'), __metadata("design:type", HTMLButtonElement)], PaginationComp.prototype, "btPrevious", void 0);

  __decorate([componentAnnotations_1.RefSelector('btNext'), __metadata("design:type", HTMLButtonElement)], PaginationComp.prototype, "btNext", void 0);

  __decorate([componentAnnotations_1.RefSelector('btLast'), __metadata("design:type", HTMLButtonElement)], PaginationComp.prototype, "btLast", void 0);

  __decorate([componentAnnotations_1.RefSelector('lbRecordCount'), __metadata("design:type", Object)], PaginationComp.prototype, "lbRecordCount", void 0);

  __decorate([componentAnnotations_1.RefSelector('lbFirstRowOnPage'), __metadata("design:type", Object)], PaginationComp.prototype, "lbFirstRowOnPage", void 0);

  __decorate([componentAnnotations_1.RefSelector('lbLastRowOnPage'), __metadata("design:type", Object)], PaginationComp.prototype, "lbLastRowOnPage", void 0);

  __decorate([componentAnnotations_1.RefSelector('eSummaryPanel'), __metadata("design:type", Object)], PaginationComp.prototype, "eSummaryPanel", void 0);

  __decorate([componentAnnotations_1.RefSelector('lbCurrent'), __metadata("design:type", Object)], PaginationComp.prototype, "lbCurrent", void 0);

  __decorate([componentAnnotations_1.RefSelector('lbTotal'), __metadata("design:type", Object)], PaginationComp.prototype, "lbTotal", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], PaginationComp.prototype, "postConstruct", null);

  return PaginationComp;
}(component_1.Component);

exports.PaginationComp = PaginationComp;

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});

var componentUtil_1 = __webpack_require__(137);

var grid_1 = __webpack_require__(160);

var registered = false;

function initialiseAgGridWithWebComponents() {
  console.warn('ag-grid: initialiseAgGridWithWebComponents is deprecated. Please use the ag-grid-webcomponent dependency instead. '); // only register to WebComponents once

  if (registered) {
    return;
  }

  registered = true;

  if (typeof document === 'undefined' || !document.registerElement) {
    console.error('ag-Grid: unable to find document.registerElement() function, unable to initialise ag-Grid as a Web Component');
  } // i don't think this type of extension is possible in TypeScript, so back to
  // plain Javascript to create this object


  var AgileGridProto = Object.create(HTMLElement.prototype); // wrap each property with a get and set method, so we can track when changes are done

  componentUtil_1.ComponentUtil.ALL_PROPERTIES.forEach(function (key) {
    Object.defineProperty(AgileGridProto, key, {
      set: function set(v) {
        this.__agGridSetProperty(key, v);
      },
      get: function get() {
        return this.__agGridGetProperty(key);
      },
      enumerable: true,
      configurable: true
    });
  });
  var agGridProtoNoType = AgileGridProto;

  agGridProtoNoType.__agGridSetProperty = function (key, value) {
    if (!this.__attributes) {
      this.__attributes = {};
    }

    this.__attributes[key] = value; // keeping this consistent with the ng2 onChange, so I can reuse the handling code

    var changeObject = {};
    changeObject[key] = {
      currentValue: value
    };
    this.onChange(changeObject);
  };

  agGridProtoNoType.onChange = function (changes) {
    if (this._initialised) {
      componentUtil_1.ComponentUtil.processOnChange(changes, this._gridOptions, this.api, this.columnApi);
    }
  };

  agGridProtoNoType.__agGridGetProperty = function (key) {
    if (!this.__attributes) {
      this.__attributes = {};
    }

    return this.__attributes[key];
  };

  agGridProtoNoType.setGridOptions = function (options) {
    var globalEventListener = this.globalEventListener.bind(this);
    this._gridOptions = componentUtil_1.ComponentUtil.copyAttributesToGridOptions(options, this);
    var gridParams = {
      globalEventListener: globalEventListener
    };
    this._agGrid = new grid_1.Grid(this, this._gridOptions, gridParams);
    this.api = options.api;
    this.columnApi = options.columnApi;
    this._initialised = true;
  }; // copies all the attributes into this object


  agGridProtoNoType.createdCallback = function () {
    for (var i = 0; i < this.attributes.length; i++) {
      var attribute = this.attributes[i];
      this.setPropertyFromAttribute(attribute);
    }
  };

  agGridProtoNoType.setPropertyFromAttribute = function (attribute) {
    var name = toCamelCase(attribute.nodeName);
    var value = attribute.nodeValue;

    if (componentUtil_1.ComponentUtil.ALL_PROPERTIES.indexOf(name) >= 0) {
      this[name] = value;
    }
  };

  agGridProtoNoType.attachedCallback = function (params) {};

  agGridProtoNoType.detachedCallback = function (params) {};

  agGridProtoNoType.attributeChangedCallback = function (attributeName) {
    var attribute = this.attributes[attributeName];
    this.setPropertyFromAttribute(attribute);
  };

  agGridProtoNoType.globalEventListener = function (eventType, event) {
    var eventLowerCase = eventType.toLowerCase();
    var browserEvent = new Event(eventLowerCase);
    var browserEventNoType = browserEvent;
    browserEventNoType.agGridDetails = event;
    this.dispatchEvent(browserEvent);
    var callbackMethod = 'on' + eventLowerCase;

    if (typeof this[callbackMethod] === 'function') {
      this[callbackMethod](browserEvent);
    }
  }; // finally, register


  document.registerElement('ag-grid', {
    prototype: AgileGridProto
  });
}

exports.initialiseAgGridWithWebComponents = initialiseAgGridWithWebComponents;

function toCamelCase(myString) {
  if (typeof myString === 'string') {
    var result = myString.replace(/-([a-z])/g, function (g) {
      return g[1].toUpperCase();
    });
    return result;
  } else {
    return myString;
  }
}

/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});

var utils_1 = __webpack_require__(6);

var TabbedLayout =
/** @class */
function () {
  function TabbedLayout(params) {
    var _this = this;

    this.items = [];
    this.params = params;
    this.eGui = document.createElement('div');
    this.eGui.innerHTML = TabbedLayout.TEMPLATE;
    this.eHeader = this.eGui.querySelector('[ref="tabHeader"]');
    this.eBody = this.eGui.querySelector('[ref="tabBody"]');

    utils_1._.addCssClass(this.eGui, params.cssClass);

    if (params.items) {
      params.items.forEach(function (item) {
        return _this.addItem(item);
      });
    }
  }

  TabbedLayout.prototype.setAfterAttachedParams = function (params) {
    this.afterAttachedParams = params;
  };

  TabbedLayout.prototype.getMinDimensions = function () {
    var eDummyContainer = this.eGui.cloneNode(true);
    var eDummyBody = eDummyContainer.querySelector('[ref="tabBody"]'); // position fixed, so it isn't restricted to the boundaries of the parent

    eDummyContainer.style.position = 'fixed'; // we put the dummy into the body container, so it will inherit all the
    // css styles that the real cells are inheriting

    this.eGui.appendChild(eDummyContainer);
    var minWidth = 0;
    var minHeight = 0;
    this.items.forEach(function (itemWrapper) {
      utils_1._.clearElement(eDummyBody);

      var eClone = itemWrapper.tabbedItem.bodyPromise.resolveNow(null, function (body) {
        return body.cloneNode(true);
      });

      if (eClone == null) {
        return;
      }

      eDummyBody.appendChild(eClone);

      if (minWidth < eDummyContainer.offsetWidth) {
        minWidth = eDummyContainer.offsetWidth;
      }

      if (minHeight < eDummyContainer.offsetHeight) {
        minHeight = eDummyContainer.offsetHeight;
      }
    }); // finally check the parent tabs are no wider, as if they
    // are, then these are the min width and not the child tabs
    // if (minWidth<this.eGui.offsetWidth) {
    //     minWidth = this.eGui.offsetWidth;
    // }

    this.eGui.removeChild(eDummyContainer);
    return {
      height: minHeight,
      width: minWidth
    };
  };

  TabbedLayout.prototype.showFirstItem = function () {
    if (this.items.length > 0) {
      this.showItemWrapper(this.items[0]);
    }
  };

  TabbedLayout.prototype.addItem = function (item) {
    var eHeaderButton = document.createElement('span');
    eHeaderButton.appendChild(item.title);

    utils_1._.addCssClass(eHeaderButton, 'ag-tab');

    this.eHeader.appendChild(eHeaderButton);
    var wrapper = {
      tabbedItem: item,
      eHeaderButton: eHeaderButton
    };
    this.items.push(wrapper);
    eHeaderButton.addEventListener('click', this.showItemWrapper.bind(this, wrapper));
  };

  TabbedLayout.prototype.showItem = function (tabbedItem) {
    var itemWrapper = utils_1._.find(this.items, function (wrapper) {
      return wrapper.tabbedItem === tabbedItem;
    });

    if (itemWrapper) {
      this.showItemWrapper(itemWrapper);
    }
  };

  TabbedLayout.prototype.showItemWrapper = function (wrapper) {
    var _this = this;

    if (this.params.onItemClicked) {
      this.params.onItemClicked({
        item: wrapper.tabbedItem
      });
    }

    if (this.activeItem === wrapper) {
      utils_1._.callIfPresent(this.params.onActiveItemClicked);

      return;
    }

    utils_1._.clearElement(this.eBody);

    wrapper.tabbedItem.bodyPromise.then(function (body) {
      _this.eBody.appendChild(body);
    });

    if (this.activeItem) {
      utils_1._.removeCssClass(this.activeItem.eHeaderButton, 'ag-tab-selected');
    }

    utils_1._.addCssClass(wrapper.eHeaderButton, 'ag-tab-selected');

    this.activeItem = wrapper;

    if (wrapper.tabbedItem.afterAttachedCallback) {
      wrapper.tabbedItem.afterAttachedCallback(this.afterAttachedParams);
    }
  };

  TabbedLayout.prototype.getGui = function () {
    return this.eGui;
  };

  TabbedLayout.TEMPLATE = '<div>' + '<div ref="tabHeader" class="ag-tab-header"></div>' + '<div ref="tabBody" class="ag-tab-body"></div>' + '</div>';
  return TabbedLayout;
}();

exports.TabbedLayout = TabbedLayout;

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});

var VerticalStack =
/** @class */
function () {
  function VerticalStack() {
    this.isLayoutPanel = true;
    this.childPanels = [];
    this.eGui = document.createElement('div');
    this.eGui.style.height = '100%';
  }

  VerticalStack.prototype.addPanel = function (panel, height) {
    var component;

    if (panel.isLayoutPanel) {
      this.childPanels.push(panel);
      component = panel.getGui();
    } else {
      component = panel;
    }

    if (height) {
      component.style.height = height;
    }

    this.eGui.appendChild(component);
  };

  VerticalStack.prototype.getGui = function () {
    return this.eGui;
  };

  VerticalStack.prototype.doLayout = function () {
    for (var i = 0; i < this.childPanels.length; i++) {
      this.childPanels[i].doLayout();
    }
  };

  return VerticalStack;
}();

exports.VerticalStack = VerticalStack;

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});

var utils_1 = __webpack_require__(6);

function simpleHttpRequest(params) {
  return new utils_1.Promise(function (resolve) {
    var httpRequest = new XMLHttpRequest();
    httpRequest.open('GET', params.url);
    httpRequest.send();

    httpRequest.onreadystatechange = function () {
      if (httpRequest.readyState == 4 && httpRequest.status == 200) {
        var httpResponse = JSON.parse(httpRequest.responseText);
        resolve(httpResponse);
      }
    };
  });
}

exports.simpleHttpRequest = simpleHttpRequest;

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = this && this.__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var popupWindow_1 = __webpack_require__(226);

var context_1 = __webpack_require__(2);

var component_1 = __webpack_require__(22);

var componentAnnotations_1 = __webpack_require__(25);

var PopupMessageBox =
/** @class */
function (_super) {
  __extends(PopupMessageBox, _super);

  function PopupMessageBox(title, message) {
    var _this = _super.call(this) || this;

    _this.title = title;
    _this.message = message;
    return _this;
  }

  PopupMessageBox.prototype.postConstruct = function () {
    var _this = this;

    _super.prototype.postConstruct.call(this);

    this.setTitle(this.title);
    var messageBodyComp = new MessageBody();
    this.addFeature(this.getContext(), messageBodyComp);
    messageBodyComp.setMessage(this.message);
    this.setBody(messageBodyComp.getGui());
    this.addDestroyableEventListener(messageBodyComp, 'onBtOk', function () {
      return _this.closePopup();
    });
  };

  return PopupMessageBox;
}(popupWindow_1.PopupWindow);

exports.PopupMessageBox = PopupMessageBox;

var MessageBody =
/** @class */
function (_super) {
  __extends(MessageBody, _super);

  function MessageBody() {
    return _super.call(this, MessageBody.TEMPLATE) || this;
  }

  MessageBody.prototype.setMessage = function (message) {
    this.eCenter.innerText = message;
  };

  MessageBody.prototype.postConstruct = function () {
    this.addDestroyableEventListener(this.eOk, 'click', this.onBtOk.bind(this));
  };

  MessageBody.prototype.onBtOk = function () {
    this.dispatchEvent({
      type: 'onBtOk'
    });
  };

  MessageBody.TEMPLATE = "<div>\n            <div ref=\"eCenter\"></div>\n            <div ref=\"eButtons\">\n                <button ref=\"eOk\">OK</button>\n            </div>\n        </div>";

  __decorate([componentAnnotations_1.RefSelector('eCenter'), __metadata("design:type", HTMLElement)], MessageBody.prototype, "eCenter", void 0);

  __decorate([componentAnnotations_1.RefSelector('eOk'), __metadata("design:type", HTMLElement)], MessageBody.prototype, "eOk", void 0);

  __decorate([context_1.PostConstruct, __metadata("design:type", Function), __metadata("design:paramtypes", []), __metadata("design:returntype", void 0)], MessageBody.prototype, "postConstruct", null);

  return MessageBody;
}(component_1.Component);

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});

var utils_1 = __webpack_require__(6);

function defaultGroupComparator(valueA, valueB, nodeA, nodeB, accentedCompare) {
  if (accentedCompare === void 0) {
    accentedCompare = false;
  }

  console.warn('ag-Grid: Since ag-grid 11.0.0 defaultGroupComparator is not necessary. You can remove this from your colDef');
  var nodeAIsGroup = utils_1._.exists(nodeA) && nodeA.group;
  var nodeBIsGroup = utils_1._.exists(nodeB) && nodeB.group;
  var bothAreGroups = nodeAIsGroup && nodeBIsGroup;
  var bothAreNormal = !nodeAIsGroup && !nodeBIsGroup;

  if (bothAreGroups) {
    return utils_1._.defaultComparator(nodeA.key, nodeB.key, accentedCompare);
  } else if (bothAreNormal) {
    return utils_1._.defaultComparator(valueA, valueB, accentedCompare);
  } else if (nodeAIsGroup) {
    return 1;
  } else {
    return -1;
  }
}

exports.defaultGroupComparator = defaultGroupComparator;

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v20.2.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */


Object.defineProperty(exports, "__esModule", {
  value: true
});

var BaseComponentWrapper =
/** @class */
function () {
  function BaseComponentWrapper() {}

  BaseComponentWrapper.prototype.wrap = function (OriginalConstructor, mandatoryMethodList, optionalMethodList, componentName) {
    var _this = this;

    if (optionalMethodList === void 0) {
      optionalMethodList = [];
    }

    var wrapper = this.createWrapper(OriginalConstructor, componentName);
    mandatoryMethodList.forEach(function (methodName) {
      _this.createMethod(wrapper, methodName, true);
    });
    optionalMethodList.forEach(function (methodName) {
      _this.createMethod(wrapper, methodName, false);
    });
    return wrapper;
  };

  BaseComponentWrapper.prototype.createMethod = function (wrapper, methodName, mandatory) {
    wrapper.addMethod(methodName, this.createMethodProxy(wrapper, methodName, mandatory));
  };

  BaseComponentWrapper.prototype.createMethodProxy = function (wrapper, methodName, mandatory) {
    return function () {
      if (wrapper.hasMethod(methodName)) {
        return wrapper.callMethod(methodName, arguments);
      }

      if (mandatory) {
        console.warn('ag-Grid: Framework component is missing the method ' + methodName + '()');
      }

      return null;
    };
  };

  return BaseComponentWrapper;
}();

exports.BaseComponentWrapper = BaseComponentWrapper;

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// ag-grid-react v20.2.0


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var React = __webpack_require__(0);

var ReactDOM = __webpack_require__(80);

var AgGrid = __webpack_require__(56);

var ag_grid_community_1 = __webpack_require__(56);

var baseReactComponent_1 = __webpack_require__(228);

var ReactComponent =
/** @class */
function (_super) {
  __extends(ReactComponent, _super);

  function ReactComponent(reactComponent, parentComponent) {
    var _this = _super.call(this) || this;

    _this.portal = null;
    _this.componentWrappingElement = 'div';
    _this.reactComponent = reactComponent;
    _this.parentComponent = parentComponent;
    _this.statelessComponent = ReactComponent.isStateless(_this.reactComponent);
    return _this;
  }

  ReactComponent.prototype.getFrameworkComponentInstance = function () {
    return this.componentInstance;
  };

  ReactComponent.prototype.isStatelesComponent = function () {
    return this.statelessComponent;
  };

  ReactComponent.prototype.getReactComponentName = function () {
    return this.reactComponent.name;
  };

  ReactComponent.prototype.init = function (params) {
    var _this = this;

    return new ag_grid_community_1.Promise(function (resolve) {
      _this.eParentElement = _this.createParentElement(params);

      _this.createReactComponent(params, resolve);
    });
  };

  ReactComponent.prototype.getGui = function () {
    return this.eParentElement;
  };

  ReactComponent.prototype.destroy = function () {
    return this.parentComponent.destroyPortal(this.portal);
  };

  ReactComponent.prototype.createReactComponent = function (params, resolve) {
    var _this = this;

    if (!this.statelessComponent) {
      // grab hold of the actual instance created - we use a react ref for this as there is no other mechanism to
      // retrieve the created instance from either createPortal or render
      params.ref = function (element) {
        _this.componentInstance = element;
      };
    }

    var ReactComponent = React.createElement(this.reactComponent, params);
    var portal = ReactDOM.createPortal(ReactComponent, this.eParentElement);
    this.portal = portal;
    this.parentComponent.mountReactPortal(portal, this, resolve);
  };

  ReactComponent.prototype.createParentElement = function (params) {
    var eParentElement = document.createElement(this.parentComponent.props.componentWrappingElement || 'div');
    AgGrid.Utils.addCssClass(eParentElement, 'ag-react-container'); // so user can have access to the react container,
    // to add css class or style

    params.reactContainer = this.eParentElement;
    return eParentElement;
  };

  ReactComponent.isStateless = function (Component) {
    return typeof Component === 'function' && !(Component.prototype && Component.prototype.isReactComponent);
  };

  return ReactComponent;
}(baseReactComponent_1.BaseReactComponent);

exports.ReactComponent = ReactComponent;

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// ag-grid-react v20.2.0


Object.defineProperty(exports, "__esModule", {
  value: true
});
var ChangeDetectionStrategyType;

(function (ChangeDetectionStrategyType) {
  ChangeDetectionStrategyType["IdentityCheck"] = "IdentityCheck";
  ChangeDetectionStrategyType["DeepValueCheck"] = "DeepValueCheck";
  ChangeDetectionStrategyType["NoCheck"] = "NoCheck";
})(ChangeDetectionStrategyType = exports.ChangeDetectionStrategyType || (exports.ChangeDetectionStrategyType = {}));

var ChangeDetectionService =
/** @class */
function () {
  function ChangeDetectionService() {
    var _a;

    this.strategyMap = (_a = {}, _a[ChangeDetectionStrategyType.DeepValueCheck] = new DeepValueStrategy(), _a[ChangeDetectionStrategyType.IdentityCheck] = new SimpleFunctionalStrategy(function (a, b) {
      return a === b;
    }), _a[ChangeDetectionStrategyType.NoCheck] = new SimpleFunctionalStrategy(function (a, b) {
      return true;
    }), _a);
  }

  ChangeDetectionService.prototype.getStrategy = function (changeDetectionStrategy) {
    return this.strategyMap[changeDetectionStrategy];
  };

  return ChangeDetectionService;
}();

exports.ChangeDetectionService = ChangeDetectionService;

var SimpleFunctionalStrategy =
/** @class */
function () {
  function SimpleFunctionalStrategy(strategy) {
    this.strategy = strategy;
  }

  SimpleFunctionalStrategy.prototype.areEqual = function (a, b) {
    return this.strategy(a, b);
  };

  return SimpleFunctionalStrategy;
}();

var DeepValueStrategy =
/** @class */
function () {
  function DeepValueStrategy() {}

  DeepValueStrategy.prototype.areEqual = function (a, b) {
    return DeepValueStrategy.areEquivalent(DeepValueStrategy.copy(a), DeepValueStrategy.copy(b));
  };
  /*
   * deeper object comparison - taken from https://stackoverflow.com/questions/1068834/object-comparison-in-javascript
   */


  DeepValueStrategy.unwrapStringOrNumber = function (obj) {
    return obj instanceof Number || obj instanceof String ? obj.valueOf() : obj;
  }; // sigh, here for ie compatibility


  DeepValueStrategy.copy = function (value) {
    if (!value) {
      return value;
    }

    if (Array.isArray(value)) {
      // shallow copy the array - this will typically be either rowData or columnDefs
      var arrayCopy = [];

      for (var i = 0; i < value.length; i++) {
        arrayCopy.push(this.copy(value[i]));
      }

      return arrayCopy;
    } // for anything without keys (boolean, string etc).
    // Object.keys - chrome will swallow them, IE will fail (correctly, imho)


    if (typeof value !== "object") {
      return value;
    }

    return [{}, value].reduce(function (r, o) {
      Object.keys(o).forEach(function (k) {
        r[k] = o[k];
      });
      return r;
    }, {});
  };
  /*
   * slightly modified, but taken from https://stackoverflow.com/questions/1068834/object-comparison-in-javascript
   *
   * What we're trying to do here is determine if the property being checked has changed in _value_, not just in reference
   *
   * For eg, if a user updates the columnDefs via property binding, but the actual columns defs are the same before and
   * after, then we don't want the grid to re-render
   */


  DeepValueStrategy.areEquivalent = function (a, b) {
    a = DeepValueStrategy.unwrapStringOrNumber(a);
    b = DeepValueStrategy.unwrapStringOrNumber(b);
    if (a === b) return true; //e.g. a and b both null

    if (a === null || b === null || typeof a !== typeof b) return false;

    if (a instanceof Date) {
      return b instanceof Date && a.valueOf() === b.valueOf();
    }

    if (typeof a === "function") {
      return a.toString() === b.toString();
    }

    if (typeof a !== "object") {
      return a == b; //for boolean, number, string, function, xml
    }

    var newA = a.areEquivPropertyTracking === undefined,
        newB = b.areEquivPropertyTracking === undefined;

    try {
      var prop = void 0;

      if (newA) {
        a.areEquivPropertyTracking = [];
      } else if (a.areEquivPropertyTracking.some(function (other) {
        return other === b;
      })) return true;

      if (newB) {
        b.areEquivPropertyTracking = [];
      } else if (b.areEquivPropertyTracking.some(function (other) {
        return other === a;
      })) {
        return true;
      }

      a.areEquivPropertyTracking.push(b);
      b.areEquivPropertyTracking.push(a);
      var tmp = {};

      for (prop in a) {
        if (prop != "areEquivPropertyTracking") {
          tmp[prop] = null;
        }
      }

      for (prop in b) {
        if (prop != "areEquivPropertyTracking") {
          tmp[prop] = null;
        }
      }

      for (prop in tmp) {
        if (!this.areEquivalent(a[prop], b[prop])) {
          return false;
        }
      }

      return true;
    } finally {
      if (newA) delete a.areEquivPropertyTracking;
      if (newB) delete b.areEquivPropertyTracking;
    }
  };

  return DeepValueStrategy;
}();

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// ag-grid-react v20.2.0


var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var React = __webpack_require__(0);

var ReactDOM = __webpack_require__(80);

var AgGrid = __webpack_require__(56);

var ag_grid_community_1 = __webpack_require__(56);

var baseReactComponent_1 = __webpack_require__(228);

var LegacyReactComponent =
/** @class */
function (_super) {
  __extends(LegacyReactComponent, _super);

  function LegacyReactComponent(reactComponent, parentComponent) {
    var _this = _super.call(this) || this;

    _this.reactComponent = reactComponent;
    _this.parentComponent = parentComponent;
    return _this;
  }

  LegacyReactComponent.prototype.getFrameworkComponentInstance = function () {
    return this.componentInstance;
  };

  LegacyReactComponent.prototype.getReactComponentName = function () {
    return this.reactComponent.name;
  };

  LegacyReactComponent.prototype.init = function (params) {
    var _this = this;

    return new ag_grid_community_1.Promise(function (resolve) {
      _this.eParentElement = document.createElement(_this.parentComponent.props.componentWrappingElement || 'div');
      AgGrid.Utils.addCssClass(_this.eParentElement, 'ag-react-container'); // so user can have access to the react container,
      // to add css class or style

      params.reactContainer = _this.eParentElement;

      _this.createReactComponentLegacy(params, resolve);
    });
  };

  LegacyReactComponent.prototype.getGui = function () {
    return this.eParentElement;
  };

  LegacyReactComponent.prototype.destroy = function () {
    // only attempt to unmount if not using a doc fragment
    ReactDOM.unmountComponentAtNode(this.eParentElement);
  };

  LegacyReactComponent.prototype.createReactComponentLegacy = function (params, resolve) {
    var self = this;
    var ReactComponent = React.createElement(this.reactComponent, params);

    if (!this.parentComponent) {
      // MUST be a function, not an arrow function
      ReactDOM.render(ReactComponent, this.eParentElement, function () {
        self.componentInstance = this;
        resolve(null);
      });
    } else {
      // MUST be a function, not an arrow function
      ReactDOM.unstable_renderSubtreeIntoContainer(this.parentComponent, ReactComponent, this.eParentElement, function () {
        self.componentInstance = this;
        resolve(null);
      });
    }
  };

  return LegacyReactComponent;
}(baseReactComponent_1.BaseReactComponent);

exports.LegacyReactComponent = LegacyReactComponent;

/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (true) {
  module.exports = __webpack_require__(321);
} else {}

/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.12.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


Object.defineProperty(exports, "__esModule", {
  value: !0
});
var b = "function" === typeof Symbol && Symbol.for,
    c = b ? Symbol.for("react.element") : 60103,
    d = b ? Symbol.for("react.portal") : 60106,
    e = b ? Symbol.for("react.fragment") : 60107,
    f = b ? Symbol.for("react.strict_mode") : 60108,
    g = b ? Symbol.for("react.profiler") : 60114,
    h = b ? Symbol.for("react.provider") : 60109,
    k = b ? Symbol.for("react.context") : 60110,
    l = b ? Symbol.for("react.async_mode") : 60111,
    m = b ? Symbol.for("react.concurrent_mode") : 60111,
    n = b ? Symbol.for("react.forward_ref") : 60112,
    p = b ? Symbol.for("react.suspense") : 60113,
    q = b ? Symbol.for("react.suspense_list") : 60120,
    r = b ? Symbol.for("react.memo") : 60115,
    t = b ? Symbol.for("react.lazy") : 60116,
    v = b ? Symbol.for("react.fundamental") : 60117,
    w = b ? Symbol.for("react.responder") : 60118,
    x = b ? Symbol.for("react.scope") : 60119;

function y(a) {
  if ("object" === typeof a && null !== a) {
    var u = a.$$typeof;

    switch (u) {
      case c:
        switch (a = a.type, a) {
          case l:
          case m:
          case e:
          case g:
          case f:
          case p:
            return a;

          default:
            switch (a = a && a.$$typeof, a) {
              case k:
              case n:
              case t:
              case r:
              case h:
                return a;

              default:
                return u;
            }

        }

      case d:
        return u;
    }
  }
}

function z(a) {
  return y(a) === m;
}

exports.typeOf = y;
exports.AsyncMode = l;
exports.ConcurrentMode = m;
exports.ContextConsumer = k;
exports.ContextProvider = h;
exports.Element = c;
exports.ForwardRef = n;
exports.Fragment = e;
exports.Lazy = t;
exports.Memo = r;
exports.Portal = d;
exports.Profiler = g;
exports.StrictMode = f;
exports.Suspense = p;

exports.isValidElementType = function (a) {
  return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === v || a.$$typeof === w || a.$$typeof === x);
};

exports.isAsyncMode = function (a) {
  return z(a) || y(a) === l;
};

exports.isConcurrentMode = z;

exports.isContextConsumer = function (a) {
  return y(a) === k;
};

exports.isContextProvider = function (a) {
  return y(a) === h;
};

exports.isElement = function (a) {
  return "object" === typeof a && null !== a && a.$$typeof === c;
};

exports.isForwardRef = function (a) {
  return y(a) === n;
};

exports.isFragment = function (a) {
  return y(a) === e;
};

exports.isLazy = function (a) {
  return y(a) === t;
};

exports.isMemo = function (a) {
  return y(a) === r;
};

exports.isPortal = function (a) {
  return y(a) === d;
};

exports.isProfiler = function (a) {
  return y(a) === g;
};

exports.isStrictMode = function (a) {
  return y(a) === f;
};

exports.isSuspense = function (a) {
  return y(a) === p;
};

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(42);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _gud = __webpack_require__(323);

var _gud2 = _interopRequireDefault(_gud);

var _warning = __webpack_require__(324);

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var MAX_SIGNED_31_BIT_INT = 1073741823; // Inlined Object.is polyfill.
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is

function objectIs(x, y) {
  if (x === y) {
    return x !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}

function createEventEmitter(value) {
  var handlers = [];
  return {
    on: function on(handler) {
      handlers.push(handler);
    },
    off: function off(handler) {
      handlers = handlers.filter(function (h) {
        return h !== handler;
      });
    },
    get: function get() {
      return value;
    },
    set: function set(newValue, changedBits) {
      value = newValue;
      handlers.forEach(function (handler) {
        return handler(value, changedBits);
      });
    }
  };
}

function onlyChild(children) {
  return Array.isArray(children) ? children[0] : children;
}

function createReactContext(defaultValue, calculateChangedBits) {
  var _Provider$childContex, _Consumer$contextType;

  var contextProp = '__create-react-context-' + (0, _gud2.default)() + '__';

  var Provider = function (_Component) {
    _inherits(Provider, _Component);

    function Provider() {
      var _temp, _this, _ret;

      _classCallCheck(this, Provider);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.emitter = createEventEmitter(_this.props.value), _temp), _possibleConstructorReturn(_this, _ret);
    }

    Provider.prototype.getChildContext = function getChildContext() {
      var _ref;

      return _ref = {}, _ref[contextProp] = this.emitter, _ref;
    };

    Provider.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      if (this.props.value !== nextProps.value) {
        var oldValue = this.props.value;
        var newValue = nextProps.value;
        var changedBits = void 0;

        if (objectIs(oldValue, newValue)) {
          changedBits = 0; // No change
        } else {
          changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

          if (false) {}

          changedBits |= 0;

          if (changedBits !== 0) {
            this.emitter.set(nextProps.value, changedBits);
          }
        }
      }
    };

    Provider.prototype.render = function render() {
      return this.props.children;
    };

    return Provider;
  }(_react.Component);

  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = _propTypes2.default.object.isRequired, _Provider$childContex);

  var Consumer = function (_Component2) {
    _inherits(Consumer, _Component2);

    function Consumer() {
      var _temp2, _this2, _ret2;

      _classCallCheck(this, Consumer);

      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return _ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, _Component2.call.apply(_Component2, [this].concat(args))), _this2), _this2.state = {
        value: _this2.getValue()
      }, _this2.onUpdate = function (newValue, changedBits) {
        var observedBits = _this2.observedBits | 0;

        if ((observedBits & changedBits) !== 0) {
          _this2.setState({
            value: _this2.getValue()
          });
        }
      }, _temp2), _possibleConstructorReturn(_this2, _ret2);
    }

    Consumer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      var observedBits = nextProps.observedBits;
      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT // Subscribe to all changes by default
      : observedBits;
    };

    Consumer.prototype.componentDidMount = function componentDidMount() {
      if (this.context[contextProp]) {
        this.context[contextProp].on(this.onUpdate);
      }

      var observedBits = this.props.observedBits;
      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT // Subscribe to all changes by default
      : observedBits;
    };

    Consumer.prototype.componentWillUnmount = function componentWillUnmount() {
      if (this.context[contextProp]) {
        this.context[contextProp].off(this.onUpdate);
      }
    };

    Consumer.prototype.getValue = function getValue() {
      if (this.context[contextProp]) {
        return this.context[contextProp].get();
      } else {
        return defaultValue;
      }
    };

    Consumer.prototype.render = function render() {
      return onlyChild(this.props.children)(this.state.value);
    };

    return Consumer;
  }(_react.Component);

  Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = _propTypes2.default.object, _Consumer$contextType);
  return {
    Provider: Provider,
    Consumer: Consumer
  };
}

exports.default = createReactContext;
module.exports = exports['default'];

/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {// @flow


var key = '__global_unique_id__';

module.exports = function () {
  return global[key] = (global[key] || 0) + 1;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(51)))

/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */


var emptyFunction = __webpack_require__(325);
/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */


var warning = emptyFunction;

if (false) { var printWarning; }

module.exports = warning;

/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}
/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */


var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);

emptyFunction.thatReturnsThis = function () {
  return this;
};

emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;

/***/ }),
/* 326 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.has` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */

function baseHas(object, key) {
  return object != null && hasOwnProperty.call(object, key);
}

module.exports = baseHas;

/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(76);
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var nativeObjectToString = objectProto.toString;
/** Built-in value references. */

var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */

function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);

  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }

  return result;
}

module.exports = getRawTag;

/***/ }),
/* 328 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var nativeObjectToString = objectProto.toString;
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */

function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

var memoizeCapped = __webpack_require__(330);
/** Used to match property names within property paths. */


var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
/** Used to match backslashes in property paths. */

var reEscapeChar = /\\(\\)?/g;
/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */

var stringToPath = memoizeCapped(function (string) {
  var result = [];

  if (string.charCodeAt(0) === 46
  /* . */
  ) {
      result.push('');
    }

  string.replace(rePropName, function (match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
  });
  return result;
});
module.exports = stringToPath;

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

var memoize = __webpack_require__(331);
/** Used as the maximum memoize cache size. */


var MAX_MEMOIZE_SIZE = 500;
/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */

function memoizeCapped(func) {
  var result = memoize(func, function (key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }

    return key;
  });
  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

var MapCache = __webpack_require__(168);
/** Error message constants. */


var FUNC_ERROR_TEXT = 'Expected a function';
/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */

function memoize(func, resolver) {
  if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }

  var memoized = function memoized() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }

    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };

  memoized.cache = new (memoize.Cache || MapCache)();
  return memoized;
} // Expose `MapCache`.


memoize.Cache = MapCache;
module.exports = memoize;

/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

var Hash = __webpack_require__(333),
    ListCache = __webpack_require__(118),
    Map = __webpack_require__(170);
/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */


function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash(),
    'map': new (Map || ListCache)(),
    'string': new Hash()
  };
}

module.exports = mapCacheClear;

/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

var hashClear = __webpack_require__(334),
    hashDelete = __webpack_require__(339),
    hashGet = __webpack_require__(340),
    hashHas = __webpack_require__(341),
    hashSet = __webpack_require__(342);
/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */


function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
} // Add methods to `Hash`.


Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
module.exports = Hash;

/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(117);
/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */


function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;

/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(232),
    isMasked = __webpack_require__(336),
    isObject = __webpack_require__(77),
    toSource = __webpack_require__(233);
/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */


var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to detect host constructors (Safari). */

var reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used for built-in method references. */

var funcProto = Function.prototype,
    objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */

var funcToString = funcProto.toString;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to detect if a method is native. */

var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */

function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }

  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;

/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

var coreJsData = __webpack_require__(337);
/** Used to detect methods masquerading as native. */


var maskSrcKey = function () {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? 'Symbol(src)_1.' + uid : '';
}();
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */


function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}

module.exports = isMasked;

/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(46);
/** Used to detect overreaching core-js shims. */


var coreJsData = root['__core-js_shared__'];
module.exports = coreJsData;

/***/ }),
/* 338 */
/***/ (function(module, exports) {

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;

/***/ }),
/* 339 */
/***/ (function(module, exports) {

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(117);
/** Used to stand-in for `undefined` hash values. */


var HASH_UNDEFINED = '__lodash_hash_undefined__';
/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

function hashGet(key) {
  var data = this.__data__;

  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }

  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;

/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(117);
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

module.exports = hashHas;

/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(117);
/** Used to stand-in for `undefined` hash values. */


var HASH_UNDEFINED = '__lodash_hash_undefined__';
/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */

function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;

/***/ }),
/* 343 */
/***/ (function(module, exports) {

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;

/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(119);
/** Used for built-in method references. */


var arrayProto = Array.prototype;
/** Built-in value references. */

var splice = arrayProto.splice;
/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }

  var lastIndex = data.length - 1;

  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }

  --this.size;
  return true;
}

module.exports = listCacheDelete;

/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(119);
/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */


function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);
  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;

/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(119);
/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */


function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;

/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(119);
/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */


function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }

  return this;
}

module.exports = listCacheSet;

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(120);
/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */


function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;

/***/ }),
/* 349 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}

module.exports = isKeyable;

/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(120);
/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */


function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;

/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(120);
/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */


function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;

/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(120);
/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */


function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;
  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;

/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(76),
    arrayMap = __webpack_require__(234),
    isArray = __webpack_require__(45),
    isSymbol = __webpack_require__(167);
/** Used as references for various `Number` constants. */


var INFINITY = 1 / 0;
/** Used to convert symbols to primitives and strings. */

var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;
/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */

function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }

  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }

  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }

  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}

module.exports = baseToString;

/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(75),
    isObjectLike = __webpack_require__(55);
/** `Object#toString` result references. */


var argsTag = '[object Arguments]';
/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */

function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

var baseClone = __webpack_require__(356);
/** Used to compose bitmasks for cloning. */


var CLONE_DEEP_FLAG = 1,
    CLONE_SYMBOLS_FLAG = 4;
/**
 * This method is like `_.cloneWith` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @param {Function} [customizer] The function to customize cloning.
 * @returns {*} Returns the deep cloned value.
 * @see _.cloneWith
 * @example
 *
 * function customizer(value) {
 *   if (_.isElement(value)) {
 *     return value.cloneNode(true);
 *   }
 * }
 *
 * var el = _.cloneDeepWith(document.body, customizer);
 *
 * console.log(el === document.body);
 * // => false
 * console.log(el.nodeName);
 * // => 'BODY'
 * console.log(el.childNodes.length);
 * // => 20
 */

function cloneDeepWith(value, customizer) {
  customizer = typeof customizer == 'function' ? customizer : undefined;
  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
}

module.exports = cloneDeepWith;

/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(172),
    arrayEach = __webpack_require__(362),
    assignValue = __webpack_require__(237),
    baseAssign = __webpack_require__(364),
    baseAssignIn = __webpack_require__(370),
    cloneBuffer = __webpack_require__(373),
    copyArray = __webpack_require__(242),
    copySymbols = __webpack_require__(374),
    copySymbolsIn = __webpack_require__(376),
    getAllKeys = __webpack_require__(247),
    getAllKeysIn = __webpack_require__(377),
    getTag = __webpack_require__(96),
    initCloneArray = __webpack_require__(382),
    initCloneByTag = __webpack_require__(383),
    initCloneObject = __webpack_require__(388),
    isArray = __webpack_require__(45),
    isBuffer = __webpack_require__(173),
    isMap = __webpack_require__(390),
    isObject = __webpack_require__(77),
    isSet = __webpack_require__(392),
    keys = __webpack_require__(78);
/** Used to compose bitmasks for cloning. */


var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;
/** `Object#toString` result references. */

var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';
/** Used to identify `toStringTag` values supported by `_.clone`. */

var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */

function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }

  if (result !== undefined) {
    return result;
  }

  if (!isObject(value)) {
    return value;
  }

  var isArr = isArray(value);

  if (isArr) {
    result = initCloneArray(value);

    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }

    if (tag == objectTag || tag == argsTag || isFunc && !object) {
      result = isFlat || isFunc ? {} : initCloneObject(value);

      if (!isDeep) {
        return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }

      result = initCloneByTag(value, tag, isDeep);
    }
  } // Check for circular references and return its corresponding clone.


  stack || (stack = new Stack());
  var stacked = stack.get(value);

  if (stacked) {
    return stacked;
  }

  stack.set(value, result);

  if (isSet(value)) {
    value.forEach(function (subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap(value)) {
    value.forEach(function (subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
  }

  var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function (subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    } // Recursively populate clone (susceptible to call stack limits).


    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

module.exports = baseClone;

/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(118);
/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */


function stackClear() {
  this.__data__ = new ListCache();
  this.size = 0;
}

module.exports = stackClear;

/***/ }),
/* 358 */
/***/ (function(module, exports) {

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);
  this.size = data.size;
  return result;
}

module.exports = stackDelete;

/***/ }),
/* 359 */
/***/ (function(module, exports) {

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;

/***/ }),
/* 360 */
/***/ (function(module, exports) {

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;

/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(118),
    Map = __webpack_require__(170),
    MapCache = __webpack_require__(168);
/** Used as the size to enable large array optimizations. */


var LARGE_ARRAY_SIZE = 200;
/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */

function stackSet(key, value) {
  var data = this.__data__;

  if (data instanceof ListCache) {
    var pairs = data.__data__;

    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }

    data = this.__data__ = new MapCache(pairs);
  }

  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;

/***/ }),
/* 362 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }

  return array;
}

module.exports = arrayEach;

/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(62);

var defineProperty = function () {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}();

module.exports = defineProperty;

/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(123),
    keys = __webpack_require__(78);
/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */


function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

module.exports = baseAssign;

/***/ }),
/* 365 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }

  return result;
}

module.exports = baseTimes;

/***/ }),
/* 366 */
/***/ (function(module, exports) {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;

/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(75),
    isLength = __webpack_require__(171),
    isObjectLike = __webpack_require__(55);
/** `Object#toString` result references. */


var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';
/** Used to identify `toStringTag` values of typed arrays. */

var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */

function baseIsTypedArray(value) {
  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;

/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

var isPrototype = __webpack_require__(177),
    nativeKeys = __webpack_require__(369);
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }

  var result = [];

  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }

  return result;
}

module.exports = baseKeys;

/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

var overArg = __webpack_require__(240);
/* Built-in method references for those with the same name as other `lodash` methods. */


var nativeKeys = overArg(Object.keys, Object);
module.exports = nativeKeys;

/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(123),
    keysIn = __webpack_require__(241);
/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */


function baseAssignIn(object, source) {
  return object && copyObject(source, keysIn(source), object);
}

module.exports = baseAssignIn;

/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(77),
    isPrototype = __webpack_require__(177),
    nativeKeysIn = __webpack_require__(372);
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }

  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }

  return result;
}

module.exports = baseKeysIn;

/***/ }),
/* 372 */
/***/ (function(module, exports) {

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];

  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }

  return result;
}

module.exports = nativeKeysIn;

/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(46);
/** Detect free variable `exports`. */


var freeExports =  true && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */

var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */

var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */

var Buffer = moduleExports ? root.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;
/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */

function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }

  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
  buffer.copy(result);
  return result;
}

module.exports = cloneBuffer;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(174)(module)))

/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(123),
    getSymbols = __webpack_require__(179);
/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */


function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

module.exports = copySymbols;

/***/ }),
/* 375 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];

    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }

  return result;
}

module.exports = arrayFilter;

/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(123),
    getSymbolsIn = __webpack_require__(244);
/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */


function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn(source), object);
}

module.exports = copySymbolsIn;

/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetAllKeys = __webpack_require__(248),
    getSymbolsIn = __webpack_require__(244),
    keysIn = __webpack_require__(241);
/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */


function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn, getSymbolsIn);
}

module.exports = getAllKeysIn;

/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(62),
    root = __webpack_require__(46);
/* Built-in method references that are verified to be native. */


var DataView = getNative(root, 'DataView');
module.exports = DataView;

/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(62),
    root = __webpack_require__(46);
/* Built-in method references that are verified to be native. */


var Promise = getNative(root, 'Promise');
module.exports = Promise;

/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(62),
    root = __webpack_require__(46);
/* Built-in method references that are verified to be native. */


var Set = getNative(root, 'Set');
module.exports = Set;

/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(62),
    root = __webpack_require__(46);
/* Built-in method references that are verified to be native. */


var WeakMap = getNative(root, 'WeakMap');
module.exports = WeakMap;

/***/ }),
/* 382 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */

function initCloneArray(array) {
  var length = array.length,
      result = new array.constructor(length); // Add properties assigned by `RegExp#exec`.

  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }

  return result;
}

module.exports = initCloneArray;

/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__(180),
    cloneDataView = __webpack_require__(384),
    cloneRegExp = __webpack_require__(385),
    cloneSymbol = __webpack_require__(386),
    cloneTypedArray = __webpack_require__(387);
/** `Object#toString` result references. */


var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';
var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';
/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */

function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;

  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag:
    case float64Tag:
    case int8Tag:
    case int16Tag:
    case int32Tag:
    case uint8Tag:
    case uint8ClampedTag:
    case uint16Tag:
    case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return new Ctor();

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return new Ctor();

    case symbolTag:
      return cloneSymbol(object);
  }
}

module.exports = initCloneByTag;

/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__(180);
/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */


function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

module.exports = cloneDataView;

/***/ }),
/* 385 */
/***/ (function(module, exports) {

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;
/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */

function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

module.exports = cloneRegExp;

/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(76);
/** Used to convert symbols to primitives and strings. */


var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */

function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

module.exports = cloneSymbol;

/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__(180);
/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */


function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

module.exports = cloneTypedArray;

/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

var baseCreate = __webpack_require__(389),
    getPrototype = __webpack_require__(246),
    isPrototype = __webpack_require__(177);
/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */


function initCloneObject(object) {
  return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
}

module.exports = initCloneObject;

/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(77);
/** Built-in value references. */


var objectCreate = Object.create;
/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */

var baseCreate = function () {
  function object() {}

  return function (proto) {
    if (!isObject(proto)) {
      return {};
    }

    if (objectCreate) {
      return objectCreate(proto);
    }

    object.prototype = proto;
    var result = new object();
    object.prototype = undefined;
    return result;
  };
}();

module.exports = baseCreate;

/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsMap = __webpack_require__(391),
    baseUnary = __webpack_require__(175),
    nodeUtil = __webpack_require__(176);
/* Node.js helper references. */


var nodeIsMap = nodeUtil && nodeUtil.isMap;
/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */

var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
module.exports = isMap;

/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

var getTag = __webpack_require__(96),
    isObjectLike = __webpack_require__(55);
/** `Object#toString` result references. */


var mapTag = '[object Map]';
/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */

function baseIsMap(value) {
  return isObjectLike(value) && getTag(value) == mapTag;
}

module.exports = baseIsMap;

/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsSet = __webpack_require__(393),
    baseUnary = __webpack_require__(175),
    nodeUtil = __webpack_require__(176);
/* Node.js helper references. */


var nodeIsSet = nodeUtil && nodeUtil.isSet;
/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */

var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
module.exports = isSet;

/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

var getTag = __webpack_require__(96),
    isObjectLike = __webpack_require__(55);
/** `Object#toString` result references. */


var setTag = '[object Set]';
/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */

function baseIsSet(value) {
  return isObjectLike(value) && getTag(value) == setTag;
}

module.exports = baseIsSet;

/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(76),
    copyArray = __webpack_require__(242),
    getTag = __webpack_require__(96),
    isArrayLike = __webpack_require__(178),
    isString = __webpack_require__(395),
    iteratorToArray = __webpack_require__(396),
    mapToArray = __webpack_require__(250),
    setToArray = __webpack_require__(251),
    stringToArray = __webpack_require__(252),
    values = __webpack_require__(399);
/** `Object#toString` result references. */


var mapTag = '[object Map]',
    setTag = '[object Set]';
/** Built-in value references. */

var symIterator = Symbol ? Symbol.iterator : undefined;
/**
 * Converts `value` to an array.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Array} Returns the converted array.
 * @example
 *
 * _.toArray({ 'a': 1, 'b': 2 });
 * // => [1, 2]
 *
 * _.toArray('abc');
 * // => ['a', 'b', 'c']
 *
 * _.toArray(1);
 * // => []
 *
 * _.toArray(null);
 * // => []
 */

function toArray(value) {
  if (!value) {
    return [];
  }

  if (isArrayLike(value)) {
    return isString(value) ? stringToArray(value) : copyArray(value);
  }

  if (symIterator && value[symIterator]) {
    return iteratorToArray(value[symIterator]());
  }

  var tag = getTag(value),
      func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
  return func(value);
}

module.exports = toArray;

/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(75),
    isArray = __webpack_require__(45),
    isObjectLike = __webpack_require__(55);
/** `Object#toString` result references. */


var stringTag = '[object String]';
/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */

function isString(value) {
  return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
}

module.exports = isString;

/***/ }),
/* 396 */
/***/ (function(module, exports) {

/**
 * Converts `iterator` to an array.
 *
 * @private
 * @param {Object} iterator The iterator to convert.
 * @returns {Array} Returns the converted array.
 */
function iteratorToArray(iterator) {
  var data,
      result = [];

  while (!(data = iterator.next()).done) {
    result.push(data.value);
  }

  return result;
}

module.exports = iteratorToArray;

/***/ }),
/* 397 */
/***/ (function(module, exports) {

/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function asciiToArray(string) {
  return string.split('');
}

module.exports = asciiToArray;

/***/ }),
/* 398 */
/***/ (function(module, exports) {

/** Used to compose unicode character classes. */
var rsAstralRange = "\\ud800-\\udfff",
    rsComboMarksRange = "\\u0300-\\u036f",
    reComboHalfMarksRange = "\\ufe20-\\ufe2f",
    rsComboSymbolsRange = "\\u20d0-\\u20ff",
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = "\\ufe0e\\ufe0f";
/** Used to compose unicode capture groups. */

var rsAstral = '[' + rsAstralRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsFitz = "\\ud83c[\\udffb-\\udfff]",
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
    rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
    rsZWJ = "\\u200d";
/** Used to compose unicode regexes. */

var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */

var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */

function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}

module.exports = unicodeToArray;

/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

var baseValues = __webpack_require__(400),
    keys = __webpack_require__(78);
/**
 * Creates an array of the own enumerable string keyed property values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.values(new Foo);
 * // => [1, 2] (iteration order is not guaranteed)
 *
 * _.values('hi');
 * // => ['h', 'i']
 */


function values(object) {
  return object == null ? [] : baseValues(object, keys(object));
}

module.exports = values;

/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

var arrayMap = __webpack_require__(234);
/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */


function baseValues(object, props) {
  return arrayMap(props, function (key) {
    return object[key];
  });
}

module.exports = baseValues;

/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(27);

exports.__esModule = true;
exports.default = void 0;

var _has = _interopRequireDefault(__webpack_require__(74));

var _isSchema = _interopRequireDefault(__webpack_require__(64));

function callOrConcat(schema) {
  if (typeof schema === 'function') return schema;
  return function (base) {
    return base.concat(schema);
  };
}

var Conditional =
/*#__PURE__*/
function () {
  function Conditional(refs, options) {
    var is = options.is,
        then = options.then,
        otherwise = options.otherwise;
    this.refs = [].concat(refs);
    then = callOrConcat(then);
    otherwise = callOrConcat(otherwise);
    if (typeof options === 'function') this.fn = options;else {
      if (!(0, _has.default)(options, 'is')) throw new TypeError('`is:` is required for `when()` conditions');
      if (!options.then && !options.otherwise) throw new TypeError('either `then:` or `otherwise:` is required for `when()` conditions');
      var isFn = typeof is === 'function' ? is : function () {
        for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {
          values[_key] = arguments[_key];
        }

        return values.every(function (value) {
          return value === is;
        });
      };

      this.fn = function () {
        for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          values[_key2] = arguments[_key2];
        }

        var currentSchema = values.pop();
        var option = isFn.apply(void 0, values) ? then : otherwise;
        return option(currentSchema);
      };
    }
  }

  var _proto = Conditional.prototype;

  _proto.getValue = function getValue(parent, context) {
    var values = this.refs.map(function (r) {
      return r.getValue(parent, context);
    });
    return values;
  };

  _proto.resolve = function resolve(ctx, values) {
    var schema = this.fn.apply(ctx, values.concat(ctx));
    if (schema !== undefined && !(0, _isSchema.default)(schema)) throw new TypeError('conditions must return a schema object');
    return schema || ctx;
  };

  return Conditional;
}();

var _default = Conditional;
exports.default = _default;
module.exports = exports["default"];

/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(27);

exports.__esModule = true;
exports.default = merge;

var _has = _interopRequireDefault(__webpack_require__(74));

var _isSchema = _interopRequireDefault(__webpack_require__(64));

var isObject = function isObject(obj) {
  return Object.prototype.toString.call(obj) === '[object Object]';
};

function merge(target, source) {
  for (var key in source) {
    if ((0, _has.default)(source, key)) {
      var targetVal = target[key],
          sourceVal = source[key];
      if (sourceVal === undefined) continue;

      if ((0, _isSchema.default)(sourceVal)) {
        target[key] = (0, _isSchema.default)(targetVal) ? targetVal.concat(sourceVal) : sourceVal;
      } else if (isObject(sourceVal)) {
        target[key] = isObject(targetVal) ? merge(targetVal, sourceVal) : sourceVal;
      } else if (Array.isArray(sourceVal)) {
        target[key] = Array.isArray(targetVal) ? targetVal.concat(sourceVal) : sourceVal;
      } else target[key] = source[key];
    }
  }

  return target;
}

module.exports = exports["default"];

/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(27);

exports.__esModule = true;
exports.createErrorFactory = createErrorFactory;
exports.default = createValidation;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(__webpack_require__(182));

var _extends2 = _interopRequireDefault(__webpack_require__(94));

var _mapValues = _interopRequireDefault(__webpack_require__(255));

var _ValidationError = _interopRequireDefault(__webpack_require__(183));

var _Reference = _interopRequireDefault(__webpack_require__(98));

var _synchronousPromise = __webpack_require__(254);

var formatError = _ValidationError.default.formatError;

var thenable = function thenable(p) {
  return p && typeof p.then === 'function' && typeof p.catch === 'function';
};

function runTest(testFn, ctx, value, sync) {
  var result = testFn.call(ctx, value);
  if (!sync) return Promise.resolve(result);

  if (thenable(result)) {
    throw new Error("Validation test of type: \"" + ctx.type + "\" returned a Promise during a synchronous validate. " + "This test will finish after the validate call has returned");
  }

  return _synchronousPromise.SynchronousPromise.resolve(result);
}

function resolveParams(oldParams, newParams, resolve) {
  return (0, _mapValues.default)((0, _extends2.default)({}, oldParams, newParams), resolve);
}

function createErrorFactory(_ref) {
  var value = _ref.value,
      label = _ref.label,
      resolve = _ref.resolve,
      originalValue = _ref.originalValue,
      opts = (0, _objectWithoutPropertiesLoose2.default)(_ref, ["value", "label", "resolve", "originalValue"]);
  return function createError(_temp) {
    var _ref2 = _temp === void 0 ? {} : _temp,
        _ref2$path = _ref2.path,
        path = _ref2$path === void 0 ? opts.path : _ref2$path,
        _ref2$message = _ref2.message,
        message = _ref2$message === void 0 ? opts.message : _ref2$message,
        _ref2$type = _ref2.type,
        type = _ref2$type === void 0 ? opts.name : _ref2$type,
        params = _ref2.params;

    params = (0, _extends2.default)({
      path: path,
      value: value,
      originalValue: originalValue,
      label: label
    }, resolveParams(opts.params, params, resolve));
    return (0, _extends2.default)(new _ValidationError.default(formatError(message, params), value, path, type), {
      params: params
    });
  };
}

function createValidation(options) {
  var name = options.name,
      message = options.message,
      test = options.test,
      params = options.params;

  function validate(_ref3) {
    var value = _ref3.value,
        path = _ref3.path,
        label = _ref3.label,
        options = _ref3.options,
        originalValue = _ref3.originalValue,
        sync = _ref3.sync,
        rest = (0, _objectWithoutPropertiesLoose2.default)(_ref3, ["value", "path", "label", "options", "originalValue", "sync"]);
    var parent = options.parent;

    var resolve = function resolve(value) {
      return _Reference.default.isRef(value) ? value.getValue(parent, options.context) : value;
    };

    var createError = createErrorFactory({
      message: message,
      path: path,
      value: value,
      originalValue: originalValue,
      params: params,
      label: label,
      resolve: resolve,
      name: name
    });
    var ctx = (0, _extends2.default)({
      path: path,
      parent: parent,
      type: name,
      createError: createError,
      resolve: resolve,
      options: options
    }, rest);
    return runTest(test, ctx, value, sync).then(function (validOrError) {
      if (_ValidationError.default.isError(validOrError)) throw validOrError;else if (!validOrError) throw createError();
    });
  }

  validate.OPTIONS = options;
  return validate;
}

/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

var createBaseFor = __webpack_require__(405);
/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */


var baseFor = createBaseFor();
module.exports = baseFor;

/***/ }),
/* 405 */
/***/ (function(module, exports) {

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function (object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];

      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }

    return object;
  };
}

module.exports = createBaseFor;

/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsMatch = __webpack_require__(407),
    getMatchData = __webpack_require__(416),
    matchesStrictComparable = __webpack_require__(261);
/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */


function baseMatches(source) {
  var matchData = getMatchData(source);

  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }

  return function (object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;

/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(172),
    baseIsEqual = __webpack_require__(258);
/** Used to compose bitmasks for value comparisons. */


var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;
/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */

function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }

  object = Object(object);

  while (index--) {
    var data = matchData[index];

    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
      return false;
    }
  }

  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack();

      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }

      if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
        return false;
      }
    }
  }

  return true;
}

module.exports = baseIsMatch;

/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(172),
    equalArrays = __webpack_require__(259),
    equalByTag = __webpack_require__(414),
    equalObjects = __webpack_require__(415),
    getTag = __webpack_require__(96),
    isArray = __webpack_require__(45),
    isBuffer = __webpack_require__(173),
    isTypedArray = __webpack_require__(239);
/** Used to compose bitmasks for value comparisons. */


var COMPARE_PARTIAL_FLAG = 1;
/** `Object#toString` result references. */

var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';
/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);
  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;
  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }

    objIsArr = true;
    objIsObj = false;
  }

  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack());
    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }

  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;
      stack || (stack = new Stack());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }

  if (!isSameTag) {
    return false;
  }

  stack || (stack = new Stack());
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;

/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

var MapCache = __webpack_require__(168),
    setCacheAdd = __webpack_require__(410),
    setCacheHas = __webpack_require__(411);
/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */


function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;
  this.__data__ = new MapCache();

  while (++index < length) {
    this.add(values[index]);
  }
} // Add methods to `SetCache`.


SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;
module.exports = SetCache;

/***/ }),
/* 410 */
/***/ (function(module, exports) {

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';
/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */

function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);

  return this;
}

module.exports = setCacheAdd;

/***/ }),
/* 411 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;

/***/ }),
/* 412 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }

  return false;
}

module.exports = arraySome;

/***/ }),
/* 413 */
/***/ (function(module, exports) {

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;

/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(76),
    Uint8Array = __webpack_require__(249),
    eq = __webpack_require__(169),
    equalArrays = __webpack_require__(259),
    mapToArray = __webpack_require__(250),
    setToArray = __webpack_require__(251);
/** Used to compose bitmasks for value comparisons. */


var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;
/** `Object#toString` result references. */

var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';
var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';
/** Used to convert symbols to primitives and strings. */

var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
        return false;
      }

      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }

      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == other + '';

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      } // Assume cyclic values are equal.


      var stacked = stack.get(object);

      if (stacked) {
        return stacked == other;
      }

      bitmask |= COMPARE_UNORDERED_FLAG; // Recursively compare objects (susceptible to call stack limits).

      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }

  }

  return false;
}

module.exports = equalByTag;

/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

var getAllKeys = __webpack_require__(247);
/** Used to compose bitmasks for value comparisons. */


var COMPARE_PARTIAL_FLAG = 1;
/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }

  var index = objLength;

  while (index--) {
    var key = objProps[index];

    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  } // Assume cyclic values are equal.


  var stacked = stack.get(object);

  if (stacked && stack.get(other)) {
    return stacked == other;
  }

  var result = true;
  stack.set(object, other);
  stack.set(other, object);
  var skipCtor = isPartial;

  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
    } // Recursively compare objects (susceptible to call stack limits).


    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
      result = false;
      break;
    }

    skipCtor || (skipCtor = key == 'constructor');
  }

  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor; // Non `Object` object instances with different constructors are not equal.

    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }

  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;

/***/ }),
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

var isStrictComparable = __webpack_require__(260),
    keys = __webpack_require__(78);
/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */


function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];
    result[length] = [key, value, isStrictComparable(value)];
  }

  return result;
}

module.exports = getMatchData;

/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqual = __webpack_require__(258),
    get = __webpack_require__(418),
    hasIn = __webpack_require__(419),
    isKey = __webpack_require__(166),
    isStrictComparable = __webpack_require__(260),
    matchesStrictComparable = __webpack_require__(261),
    toKey = __webpack_require__(121);
/** Used to compose bitmasks for value comparisons. */


var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;
/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */

function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }

  return function (object) {
    var objValue = get(object, path);
    return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

module.exports = baseMatchesProperty;

/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(262);
/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */


function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;

/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

var baseHasIn = __webpack_require__(420),
    hasPath = __webpack_require__(229);
/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */


function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;

/***/ }),
/* 420 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;

/***/ }),
/* 421 */
/***/ (function(module, exports) {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;

/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

var baseProperty = __webpack_require__(423),
    basePropertyDeep = __webpack_require__(424),
    isKey = __webpack_require__(166),
    toKey = __webpack_require__(121);
/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */


function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;

/***/ }),
/* 423 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function (object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;

/***/ }),
/* 424 */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(262);
/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */


function basePropertyDeep(path) {
  return function (object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;

/***/ }),
/* 425 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(27);

exports.__esModule = true;
exports.default = void 0;

var _inherits = _interopRequireDefault(__webpack_require__(79));

var _mixed = _interopRequireDefault(__webpack_require__(61));

var _default = BooleanSchema;
exports.default = _default;

function BooleanSchema() {
  var _this = this;

  if (!(this instanceof BooleanSchema)) return new BooleanSchema();

  _mixed.default.call(this, {
    type: 'boolean'
  });

  this.withMutation(function () {
    _this.transform(function (value) {
      if (!this.isType(value)) {
        if (/^(true|1)$/i.test(value)) return true;
        if (/^(false|0)$/i.test(value)) return false;
      }

      return value;
    });
  });
}

(0, _inherits.default)(BooleanSchema, _mixed.default, {
  _typeCheck: function _typeCheck(v) {
    if (v instanceof Boolean) v = v.valueOf();
    return typeof v === 'boolean';
  }
});
module.exports = exports["default"];

/***/ }),
/* 426 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(27);

exports.__esModule = true;
exports.default = StringSchema;

var _inherits = _interopRequireDefault(__webpack_require__(79));

var _mixed = _interopRequireDefault(__webpack_require__(61));

var _locale = __webpack_require__(63);

var _isAbsent = _interopRequireDefault(__webpack_require__(97)); // eslint-disable-next-line


var rEmail = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i; // eslint-disable-next-line

var rUrl = /^((https?|ftp):)?\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i;

var hasLength = function hasLength(value) {
  return (0, _isAbsent.default)(value) || value.length > 0;
};

var isTrimmed = function isTrimmed(value) {
  return (0, _isAbsent.default)(value) || value === value.trim();
};

function StringSchema() {
  var _this = this;

  if (!(this instanceof StringSchema)) return new StringSchema();

  _mixed.default.call(this, {
    type: 'string'
  });

  this.withMutation(function () {
    _this.transform(function (value) {
      if (this.isType(value)) return value;
      return value != null && value.toString ? value.toString() : value;
    });
  });
}

(0, _inherits.default)(StringSchema, _mixed.default, {
  _typeCheck: function _typeCheck(value) {
    if (value instanceof String) value = value.valueOf();
    return typeof value === 'string';
  },
  required: function required(message) {
    if (message === void 0) {
      message = _locale.mixed.required;
    }

    var next = _mixed.default.prototype.required.call(this, message);

    return next.test({
      message: message,
      name: 'required',
      test: hasLength
    });
  },
  length: function length(_length, message) {
    if (message === void 0) {
      message = _locale.string.length;
    }

    return this.test({
      message: message,
      name: 'length',
      exclusive: true,
      params: {
        length: _length
      },
      test: function test(value) {
        return (0, _isAbsent.default)(value) || value.length === this.resolve(_length);
      }
    });
  },
  min: function min(_min, message) {
    if (message === void 0) {
      message = _locale.string.min;
    }

    return this.test({
      message: message,
      name: 'min',
      exclusive: true,
      params: {
        min: _min
      },
      test: function test(value) {
        return (0, _isAbsent.default)(value) || value.length >= this.resolve(_min);
      }
    });
  },
  max: function max(_max, message) {
    if (message === void 0) {
      message = _locale.string.max;
    }

    return this.test({
      name: 'max',
      exclusive: true,
      message: message,
      params: {
        max: _max
      },
      test: function test(value) {
        return (0, _isAbsent.default)(value) || value.length <= this.resolve(_max);
      }
    });
  },
  matches: function matches(regex, options) {
    var excludeEmptyString = false;
    var message;

    if (options) {
      if (options.message || options.hasOwnProperty('excludeEmptyString')) {
        excludeEmptyString = options.excludeEmptyString;
        message = options.message;
      } else message = options;
    }

    return this.test({
      message: message || _locale.string.matches,
      params: {
        regex: regex
      },
      test: function test(value) {
        return (0, _isAbsent.default)(value) || value === '' && excludeEmptyString || regex.test(value);
      }
    });
  },
  email: function email(message) {
    if (message === void 0) {
      message = _locale.string.email;
    }

    return this.matches(rEmail, {
      message: message,
      excludeEmptyString: true
    });
  },
  url: function url(message) {
    if (message === void 0) {
      message = _locale.string.url;
    }

    return this.matches(rUrl, {
      message: message,
      excludeEmptyString: true
    });
  },
  //-- transforms --
  ensure: function ensure() {
    return this.default('').transform(function (val) {
      return val === null ? '' : val;
    });
  },
  trim: function trim(message) {
    if (message === void 0) {
      message = _locale.string.trim;
    }

    return this.transform(function (val) {
      return val != null ? val.trim() : val;
    }).test({
      message: message,
      name: 'trim',
      test: isTrimmed
    });
  },
  lowercase: function lowercase(message) {
    if (message === void 0) {
      message = _locale.string.lowercase;
    }

    return this.transform(function (value) {
      return !(0, _isAbsent.default)(value) ? value.toLowerCase() : value;
    }).test({
      message: message,
      name: 'string_case',
      exclusive: true,
      test: function test(value) {
        return (0, _isAbsent.default)(value) || value === value.toLowerCase();
      }
    });
  },
  uppercase: function uppercase(message) {
    if (message === void 0) {
      message = _locale.string.uppercase;
    }

    return this.transform(function (value) {
      return !(0, _isAbsent.default)(value) ? value.toUpperCase() : value;
    }).test({
      message: message,
      name: 'string_case',
      exclusive: true,
      test: function test(value) {
        return (0, _isAbsent.default)(value) || value === value.toUpperCase();
      }
    });
  }
});
module.exports = exports["default"];

/***/ }),
/* 427 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(27);

exports.__esModule = true;
exports.default = NumberSchema;

var _inherits = _interopRequireDefault(__webpack_require__(79));

var _mixed = _interopRequireDefault(__webpack_require__(61));

var _locale = __webpack_require__(63);

var _isAbsent = _interopRequireDefault(__webpack_require__(97));

var isNaN = function isNaN(value) {
  return value != +value;
};

var isInteger = function isInteger(val) {
  return (0, _isAbsent.default)(val) || val === (val | 0);
};

function NumberSchema() {
  var _this = this;

  if (!(this instanceof NumberSchema)) return new NumberSchema();

  _mixed.default.call(this, {
    type: 'number'
  });

  this.withMutation(function () {
    _this.transform(function (value) {
      var parsed = value;

      if (typeof parsed === 'string') {
        parsed = parsed.replace(/\s/g, '');
        if (parsed === '') return NaN; // don't use parseFloat to avoid positives on alpha-numeric strings

        parsed = +parsed;
      }

      if (this.isType(parsed)) return parsed;
      return parseFloat(parsed);
    });
  });
}

(0, _inherits.default)(NumberSchema, _mixed.default, {
  _typeCheck: function _typeCheck(value) {
    if (value instanceof Number) value = value.valueOf();
    return typeof value === 'number' && !isNaN(value);
  },
  min: function min(_min, message) {
    if (message === void 0) {
      message = _locale.number.min;
    }

    return this.test({
      message: message,
      name: 'min',
      exclusive: true,
      params: {
        min: _min
      },
      test: function test(value) {
        return (0, _isAbsent.default)(value) || value >= this.resolve(_min);
      }
    });
  },
  max: function max(_max, message) {
    if (message === void 0) {
      message = _locale.number.max;
    }

    return this.test({
      message: message,
      name: 'max',
      exclusive: true,
      params: {
        max: _max
      },
      test: function test(value) {
        return (0, _isAbsent.default)(value) || value <= this.resolve(_max);
      }
    });
  },
  lessThan: function lessThan(less, message) {
    if (message === void 0) {
      message = _locale.number.lessThan;
    }

    return this.test({
      message: message,
      name: 'max',
      exclusive: true,
      params: {
        less: less
      },
      test: function test(value) {
        return (0, _isAbsent.default)(value) || value < this.resolve(less);
      }
    });
  },
  moreThan: function moreThan(more, message) {
    if (message === void 0) {
      message = _locale.number.moreThan;
    }

    return this.test({
      message: message,
      name: 'min',
      exclusive: true,
      params: {
        more: more
      },
      test: function test(value) {
        return (0, _isAbsent.default)(value) || value > this.resolve(more);
      }
    });
  },
  positive: function positive(msg) {
    if (msg === void 0) {
      msg = _locale.number.positive;
    }

    return this.moreThan(0, msg);
  },
  negative: function negative(msg) {
    if (msg === void 0) {
      msg = _locale.number.negative;
    }

    return this.lessThan(0, msg);
  },
  integer: function integer(message) {
    if (message === void 0) {
      message = _locale.number.integer;
    }

    return this.test({
      name: 'integer',
      message: message,
      test: isInteger
    });
  },
  truncate: function truncate() {
    return this.transform(function (value) {
      return !(0, _isAbsent.default)(value) ? value | 0 : value;
    });
  },
  round: function round(method) {
    var avail = ['ceil', 'floor', 'round', 'trunc'];
    method = method && method.toLowerCase() || 'round'; // this exists for symemtry with the new Math.trunc

    if (method === 'trunc') return this.truncate();
    if (avail.indexOf(method.toLowerCase()) === -1) throw new TypeError('Only valid options for round() are: ' + avail.join(', '));
    return this.transform(function (value) {
      return !(0, _isAbsent.default)(value) ? Math[method](value) : value;
    });
  }
});
module.exports = exports["default"];

/***/ }),
/* 428 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(27);

exports.__esModule = true;
exports.default = void 0;

var _mixed = _interopRequireDefault(__webpack_require__(61));

var _inherits = _interopRequireDefault(__webpack_require__(79));

var _isodate = _interopRequireDefault(__webpack_require__(429));

var _locale = __webpack_require__(63);

var _isAbsent = _interopRequireDefault(__webpack_require__(97));

var _Reference = _interopRequireDefault(__webpack_require__(98));

var invalidDate = new Date('');

var isDate = function isDate(obj) {
  return Object.prototype.toString.call(obj) === '[object Date]';
};

var _default = DateSchema;
exports.default = _default;

function DateSchema() {
  var _this = this;

  if (!(this instanceof DateSchema)) return new DateSchema();

  _mixed.default.call(this, {
    type: 'date'
  });

  this.withMutation(function () {
    _this.transform(function (value) {
      if (this.isType(value)) return value;
      value = (0, _isodate.default)(value);
      return value ? new Date(value) : invalidDate;
    });
  });
}

(0, _inherits.default)(DateSchema, _mixed.default, {
  _typeCheck: function _typeCheck(v) {
    return isDate(v) && !isNaN(v.getTime());
  },
  min: function min(_min, message) {
    if (message === void 0) {
      message = _locale.date.min;
    }

    var limit = _min;

    if (!_Reference.default.isRef(limit)) {
      limit = this.cast(_min);
      if (!this._typeCheck(limit)) throw new TypeError('`min` must be a Date or a value that can be `cast()` to a Date');
    }

    return this.test({
      message: message,
      name: 'min',
      exclusive: true,
      params: {
        min: _min
      },
      test: function test(value) {
        return (0, _isAbsent.default)(value) || value >= this.resolve(limit);
      }
    });
  },
  max: function max(_max, message) {
    if (message === void 0) {
      message = _locale.date.max;
    }

    var limit = _max;

    if (!_Reference.default.isRef(limit)) {
      limit = this.cast(_max);
      if (!this._typeCheck(limit)) throw new TypeError('`max` must be a Date or a value that can be `cast()` to a Date');
    }

    return this.test({
      message: message,
      name: 'max',
      exclusive: true,
      params: {
        max: _max
      },
      test: function test(value) {
        return (0, _isAbsent.default)(value) || value <= this.resolve(limit);
      }
    });
  }
});
module.exports = exports["default"];

/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = parseIsoDate;
/* eslint-disable */

/**
 *
 * Date.parse with progressive enhancement for ISO 8601 <https://github.com/csnover/js-iso8601>
 * NON-CONFORMANT EDITION.
 * © 2011 Colin Snover <http://zetafleet.com>
 * Released under MIT license.
 */
//              1 YYYY                 2 MM        3 DD              4 HH     5 mm        6 ss            7 msec         8 Z 9 ±    10 tzHH    11 tzmm

var isoReg = /^(\d{4}|[+\-]\d{6})(?:-?(\d{2})(?:-?(\d{2}))?)?(?:[ T]?(\d{2}):?(\d{2})(?::?(\d{2})(?:[,\.](\d{1,}))?)?(?:(Z)|([+\-])(\d{2})(?::?(\d{2}))?)?)?$/;

function parseIsoDate(date) {
  var numericKeys = [1, 4, 5, 6, 7, 10, 11],
      minutesOffset = 0,
      timestamp,
      struct;

  if (struct = isoReg.exec(date)) {
    // avoid NaN timestamps caused by “undefined” values being passed to Date.UTC
    for (var i = 0, k; k = numericKeys[i]; ++i) {
      struct[k] = +struct[k] || 0;
    } // allow undefined days and months


    struct[2] = (+struct[2] || 1) - 1;
    struct[3] = +struct[3] || 1; // allow arbitrary sub-second precision beyond milliseconds

    struct[7] = struct[7] ? String(struct[7]).substr(0, 3) : 0; // timestamps without timezone identifiers should be considered local time

    if ((struct[8] === undefined || struct[8] === '') && (struct[9] === undefined || struct[9] === '')) timestamp = +new Date(struct[1], struct[2], struct[3], struct[4], struct[5], struct[6], struct[7]);else {
      if (struct[8] !== 'Z' && struct[9] !== undefined) {
        minutesOffset = struct[10] * 60 + struct[11];
        if (struct[9] === '+') minutesOffset = 0 - minutesOffset;
      }

      timestamp = Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7]);
    }
  } else timestamp = Date.parse ? Date.parse(date) : NaN;

  return timestamp;
}

module.exports = exports["default"];

/***/ }),
/* 430 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__(264);

var _interopRequireDefault = __webpack_require__(27);

exports.__esModule = true;
exports.default = ObjectSchema;

var _taggedTemplateLiteralLoose2 = _interopRequireDefault(__webpack_require__(265));

var _extends2 = _interopRequireDefault(__webpack_require__(94));

var _has = _interopRequireDefault(__webpack_require__(74));

var _snakeCase2 = _interopRequireDefault(__webpack_require__(431));

var _camelCase2 = _interopRequireDefault(__webpack_require__(440));

var _mapKeys = _interopRequireDefault(__webpack_require__(446));

var _mapValues = _interopRequireDefault(__webpack_require__(255));

var _propertyExpr = __webpack_require__(125);

var _mixed = _interopRequireDefault(__webpack_require__(61));

var _locale = __webpack_require__(63);

var _sortFields = _interopRequireDefault(__webpack_require__(447));

var _sortByKeyOrder = _interopRequireDefault(__webpack_require__(449));

var _inherits = _interopRequireDefault(__webpack_require__(79));

var _makePath = _interopRequireDefault(__webpack_require__(267));

var _runValidations = _interopRequireWildcard(__webpack_require__(181));

function _templateObject2() {
  var data = (0, _taggedTemplateLiteralLoose2.default)(["", ".", ""]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _taggedTemplateLiteralLoose2.default)(["", ".", ""]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var isObject = function isObject(obj) {
  return Object.prototype.toString.call(obj) === '[object Object]';
};

function unknown(ctx, value) {
  var known = Object.keys(ctx.fields);
  return Object.keys(value).filter(function (key) {
    return known.indexOf(key) === -1;
  });
}

function ObjectSchema(spec) {
  var _this2 = this;

  if (!(this instanceof ObjectSchema)) return new ObjectSchema(spec);

  _mixed.default.call(this, {
    type: 'object',
    default: function _default() {
      var _this = this;

      if (!this._nodes.length) return undefined;
      var dft = {};

      this._nodes.forEach(function (key) {
        dft[key] = _this.fields[key].default ? _this.fields[key].default() : undefined;
      });

      return dft;
    }
  });

  this.fields = Object.create(null);
  this._nodes = [];
  this._excludedEdges = [];
  this.withMutation(function () {
    _this2.transform(function coerce(value) {
      if (typeof value === 'string') {
        try {
          value = JSON.parse(value);
        } catch (err) {
          value = null;
        }
      }

      if (this.isType(value)) return value;
      return null;
    });

    if (spec) {
      _this2.shape(spec);
    }
  });
}

(0, _inherits.default)(ObjectSchema, _mixed.default, {
  _typeCheck: function _typeCheck(value) {
    return isObject(value) || typeof value === 'function';
  },
  _cast: function _cast(_value, options) {
    var _this3 = this;

    if (options === void 0) {
      options = {};
    }

    var value = _mixed.default.prototype._cast.call(this, _value, options); //should ignore nulls here


    if (value === undefined) return this.default();
    if (!this._typeCheck(value)) return value;
    var fields = this.fields;
    var strip = this._option('stripUnknown', options) === true;

    var props = this._nodes.concat(Object.keys(value).filter(function (v) {
      return _this3._nodes.indexOf(v) === -1;
    }));

    var intermediateValue = {}; // is filled during the transform below

    var innerOptions = (0, _extends2.default)({}, options, {
      parent: intermediateValue,
      __validating: false
    });
    var isChanged = false;
    props.forEach(function (prop) {
      var field = fields[prop];
      var exists = (0, _has.default)(value, prop);

      if (field) {
        var fieldValue;
        var strict = field._options && field._options.strict; // safe to mutate since this is fired in sequence

        innerOptions.path = (0, _makePath.default)(_templateObject(), options.path, prop);
        innerOptions.value = value[prop];
        field = field.resolve(innerOptions);

        if (field._strip === true) {
          isChanged = isChanged || prop in value;
          return;
        }

        fieldValue = !options.__validating || !strict ? field.cast(value[prop], innerOptions) : value[prop];
        if (fieldValue !== undefined) intermediateValue[prop] = fieldValue;
      } else if (exists && !strip) intermediateValue[prop] = value[prop];

      if (intermediateValue[prop] !== value[prop]) isChanged = true;
    });
    return isChanged ? intermediateValue : value;
  },
  _validate: function _validate(_value, opts) {
    var _this4 = this;

    if (opts === void 0) {
      opts = {};
    }

    var endEarly, recursive;
    var sync = opts.sync;
    var errors = [];
    var originalValue = opts.originalValue != null ? opts.originalValue : _value;
    endEarly = this._option('abortEarly', opts);
    recursive = this._option('recursive', opts);
    opts = (0, _extends2.default)({}, opts, {
      __validating: true,
      originalValue: originalValue
    });
    return _mixed.default.prototype._validate.call(this, _value, opts).catch((0, _runValidations.propagateErrors)(endEarly, errors)).then(function (value) {
      if (!recursive || !isObject(value)) {
        // only iterate though actual objects
        if (errors.length) throw errors[0];
        return value;
      }

      originalValue = originalValue || value;

      var validations = _this4._nodes.map(function (key) {
        var path = (0, _makePath.default)(_templateObject2(), opts.path, key);
        var field = _this4.fields[key];
        var innerOptions = (0, _extends2.default)({}, opts, {
          path: path,
          parent: value,
          originalValue: originalValue[key]
        });

        if (field && field.validate) {
          // inner fields are always strict:
          // 1. this isn't strict so the casting will also have cast inner values
          // 2. this is strict in which case the nested values weren't cast either
          innerOptions.strict = true;
          return field.validate(value[key], innerOptions);
        }

        return Promise.resolve(true);
      });

      return (0, _runValidations.default)({
        sync: sync,
        validations: validations,
        value: value,
        errors: errors,
        endEarly: endEarly,
        path: opts.path,
        sort: (0, _sortByKeyOrder.default)(_this4.fields)
      });
    });
  },
  concat: function concat(schema) {
    var next = _mixed.default.prototype.concat.call(this, schema);

    next._nodes = (0, _sortFields.default)(next.fields, next._excludedEdges);
    return next;
  },
  shape: function shape(schema, excludes) {
    if (excludes === void 0) {
      excludes = [];
    }

    var next = this.clone();
    var fields = (0, _extends2.default)(next.fields, schema);
    next.fields = fields;

    if (excludes.length) {
      if (!Array.isArray(excludes[0])) excludes = [excludes];
      var keys = excludes.map(function (_ref) {
        var first = _ref[0],
            second = _ref[1];
        return first + "-" + second;
      });
      next._excludedEdges = next._excludedEdges.concat(keys);
    }

    next._nodes = (0, _sortFields.default)(fields, next._excludedEdges);
    return next;
  },
  from: function from(_from, to, alias) {
    var fromGetter = (0, _propertyExpr.getter)(_from, true);
    return this.transform(function (obj) {
      if (obj == null) return obj;
      var newObj = obj;

      if ((0, _has.default)(obj, _from)) {
        newObj = (0, _extends2.default)({}, obj);
        if (!alias) delete newObj[_from];
        newObj[to] = fromGetter(obj);
      }

      return newObj;
    });
  },
  noUnknown: function noUnknown(noAllow, message) {
    if (noAllow === void 0) {
      noAllow = true;
    }

    if (message === void 0) {
      message = _locale.object.noUnknown;
    }

    if (typeof noAllow === 'string') {
      message = noAllow;
      noAllow = true;
    }

    var next = this.test({
      name: 'noUnknown',
      exclusive: true,
      message: message,
      test: function test(value) {
        return value == null || !noAllow || unknown(this.schema, value).length === 0;
      }
    });
    if (noAllow) next._options.stripUnknown = true;
    return next;
  },
  transformKeys: function transformKeys(fn) {
    return this.transform(function (obj) {
      return obj && (0, _mapKeys.default)(obj, function (_, key) {
        return fn(key);
      });
    });
  },
  camelCase: function camelCase() {
    return this.transformKeys(_camelCase2.default);
  },
  snakeCase: function snakeCase() {
    return this.transformKeys(_snakeCase2.default);
  },
  constantCase: function constantCase() {
    return this.transformKeys(function (key) {
      return (0, _snakeCase2.default)(key).toUpperCase();
    });
  },
  describe: function describe() {
    var base = _mixed.default.prototype.describe.call(this);

    base.fields = (0, _mapValues.default)(this.fields, function (value) {
      return value.describe();
    });
    return base;
  }
});
module.exports = exports["default"];

/***/ }),
/* 431 */
/***/ (function(module, exports, __webpack_require__) {

var createCompounder = __webpack_require__(266);
/**
 * Converts `string` to
 * [snake case](https://en.wikipedia.org/wiki/Snake_case).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the snake cased string.
 * @example
 *
 * _.snakeCase('Foo Bar');
 * // => 'foo_bar'
 *
 * _.snakeCase('fooBar');
 * // => 'foo_bar'
 *
 * _.snakeCase('--FOO-BAR--');
 * // => 'foo_bar'
 */


var snakeCase = createCompounder(function (result, word, index) {
  return result + (index ? '_' : '') + word.toLowerCase();
});
module.exports = snakeCase;

/***/ }),
/* 432 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array == null ? 0 : array.length;

  if (initAccum && length) {
    accumulator = array[++index];
  }

  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }

  return accumulator;
}

module.exports = arrayReduce;

/***/ }),
/* 433 */
/***/ (function(module, exports, __webpack_require__) {

var deburrLetter = __webpack_require__(434),
    toString = __webpack_require__(95);
/** Used to match Latin Unicode letters (excluding mathematical operators). */


var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
/** Used to compose unicode character classes. */

var rsComboMarksRange = "\\u0300-\\u036f",
    reComboHalfMarksRange = "\\ufe20-\\ufe2f",
    rsComboSymbolsRange = "\\u20d0-\\u20ff",
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
/** Used to compose unicode capture groups. */

var rsCombo = '[' + rsComboRange + ']';
/**
 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
 */

var reComboMark = RegExp(rsCombo, 'g');
/**
 * Deburrs `string` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */

function deburr(string) {
  string = toString(string);
  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
}

module.exports = deburr;

/***/ }),
/* 434 */
/***/ (function(module, exports, __webpack_require__) {

var basePropertyOf = __webpack_require__(435);
/** Used to map Latin Unicode letters to basic Latin letters. */


var deburredLetters = {
  // Latin-1 Supplement block.
  '\xc0': 'A',
  '\xc1': 'A',
  '\xc2': 'A',
  '\xc3': 'A',
  '\xc4': 'A',
  '\xc5': 'A',
  '\xe0': 'a',
  '\xe1': 'a',
  '\xe2': 'a',
  '\xe3': 'a',
  '\xe4': 'a',
  '\xe5': 'a',
  '\xc7': 'C',
  '\xe7': 'c',
  '\xd0': 'D',
  '\xf0': 'd',
  '\xc8': 'E',
  '\xc9': 'E',
  '\xca': 'E',
  '\xcb': 'E',
  '\xe8': 'e',
  '\xe9': 'e',
  '\xea': 'e',
  '\xeb': 'e',
  '\xcc': 'I',
  '\xcd': 'I',
  '\xce': 'I',
  '\xcf': 'I',
  '\xec': 'i',
  '\xed': 'i',
  '\xee': 'i',
  '\xef': 'i',
  '\xd1': 'N',
  '\xf1': 'n',
  '\xd2': 'O',
  '\xd3': 'O',
  '\xd4': 'O',
  '\xd5': 'O',
  '\xd6': 'O',
  '\xd8': 'O',
  '\xf2': 'o',
  '\xf3': 'o',
  '\xf4': 'o',
  '\xf5': 'o',
  '\xf6': 'o',
  '\xf8': 'o',
  '\xd9': 'U',
  '\xda': 'U',
  '\xdb': 'U',
  '\xdc': 'U',
  '\xf9': 'u',
  '\xfa': 'u',
  '\xfb': 'u',
  '\xfc': 'u',
  '\xdd': 'Y',
  '\xfd': 'y',
  '\xff': 'y',
  '\xc6': 'Ae',
  '\xe6': 'ae',
  '\xde': 'Th',
  '\xfe': 'th',
  '\xdf': 'ss',
  // Latin Extended-A block.
  "\u0100": 'A',
  "\u0102": 'A',
  "\u0104": 'A',
  "\u0101": 'a',
  "\u0103": 'a',
  "\u0105": 'a',
  "\u0106": 'C',
  "\u0108": 'C',
  "\u010A": 'C',
  "\u010C": 'C',
  "\u0107": 'c',
  "\u0109": 'c',
  "\u010B": 'c',
  "\u010D": 'c',
  "\u010E": 'D',
  "\u0110": 'D',
  "\u010F": 'd',
  "\u0111": 'd',
  "\u0112": 'E',
  "\u0114": 'E',
  "\u0116": 'E',
  "\u0118": 'E',
  "\u011A": 'E',
  "\u0113": 'e',
  "\u0115": 'e',
  "\u0117": 'e',
  "\u0119": 'e',
  "\u011B": 'e',
  "\u011C": 'G',
  "\u011E": 'G',
  "\u0120": 'G',
  "\u0122": 'G',
  "\u011D": 'g',
  "\u011F": 'g',
  "\u0121": 'g',
  "\u0123": 'g',
  "\u0124": 'H',
  "\u0126": 'H',
  "\u0125": 'h',
  "\u0127": 'h',
  "\u0128": 'I',
  "\u012A": 'I',
  "\u012C": 'I',
  "\u012E": 'I',
  "\u0130": 'I',
  "\u0129": 'i',
  "\u012B": 'i',
  "\u012D": 'i',
  "\u012F": 'i',
  "\u0131": 'i',
  "\u0134": 'J',
  "\u0135": 'j',
  "\u0136": 'K',
  "\u0137": 'k',
  "\u0138": 'k',
  "\u0139": 'L',
  "\u013B": 'L',
  "\u013D": 'L',
  "\u013F": 'L',
  "\u0141": 'L',
  "\u013A": 'l',
  "\u013C": 'l',
  "\u013E": 'l',
  "\u0140": 'l',
  "\u0142": 'l',
  "\u0143": 'N',
  "\u0145": 'N',
  "\u0147": 'N',
  "\u014A": 'N',
  "\u0144": 'n',
  "\u0146": 'n',
  "\u0148": 'n',
  "\u014B": 'n',
  "\u014C": 'O',
  "\u014E": 'O',
  "\u0150": 'O',
  "\u014D": 'o',
  "\u014F": 'o',
  "\u0151": 'o',
  "\u0154": 'R',
  "\u0156": 'R',
  "\u0158": 'R',
  "\u0155": 'r',
  "\u0157": 'r',
  "\u0159": 'r',
  "\u015A": 'S',
  "\u015C": 'S',
  "\u015E": 'S',
  "\u0160": 'S',
  "\u015B": 's',
  "\u015D": 's',
  "\u015F": 's',
  "\u0161": 's',
  "\u0162": 'T',
  "\u0164": 'T',
  "\u0166": 'T',
  "\u0163": 't',
  "\u0165": 't',
  "\u0167": 't',
  "\u0168": 'U',
  "\u016A": 'U',
  "\u016C": 'U',
  "\u016E": 'U',
  "\u0170": 'U',
  "\u0172": 'U',
  "\u0169": 'u',
  "\u016B": 'u',
  "\u016D": 'u',
  "\u016F": 'u',
  "\u0171": 'u',
  "\u0173": 'u',
  "\u0174": 'W',
  "\u0175": 'w',
  "\u0176": 'Y',
  "\u0177": 'y',
  "\u0178": 'Y',
  "\u0179": 'Z',
  "\u017B": 'Z',
  "\u017D": 'Z',
  "\u017A": 'z',
  "\u017C": 'z',
  "\u017E": 'z',
  "\u0132": 'IJ',
  "\u0133": 'ij',
  "\u0152": 'Oe',
  "\u0153": 'oe',
  "\u0149": "'n",
  "\u017F": 's'
};
/**
 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
 * letters to basic Latin letters.
 *
 * @private
 * @param {string} letter The matched letter to deburr.
 * @returns {string} Returns the deburred letter.
 */

var deburrLetter = basePropertyOf(deburredLetters);
module.exports = deburrLetter;

/***/ }),
/* 435 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyOf(object) {
  return function (key) {
    return object == null ? undefined : object[key];
  };
}

module.exports = basePropertyOf;

/***/ }),
/* 436 */
/***/ (function(module, exports, __webpack_require__) {

var asciiWords = __webpack_require__(437),
    hasUnicodeWord = __webpack_require__(438),
    toString = __webpack_require__(95),
    unicodeWords = __webpack_require__(439);
/**
 * Splits `string` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the words of `string`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */


function words(string, pattern, guard) {
  string = toString(string);
  pattern = guard ? undefined : pattern;

  if (pattern === undefined) {
    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
  }

  return string.match(pattern) || [];
}

module.exports = words;

/***/ }),
/* 437 */
/***/ (function(module, exports) {

/** Used to match words composed of alphanumeric characters. */
var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
/**
 * Splits an ASCII `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */

function asciiWords(string) {
  return string.match(reAsciiWord) || [];
}

module.exports = asciiWords;

/***/ }),
/* 438 */
/***/ (function(module, exports) {

/** Used to detect strings that need a more robust regexp to match words. */
var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
/**
 * Checks if `string` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a word is found, else `false`.
 */

function hasUnicodeWord(string) {
  return reHasUnicodeWord.test(string);
}

module.exports = hasUnicodeWord;

/***/ }),
/* 439 */
/***/ (function(module, exports) {

/** Used to compose unicode character classes. */
var rsAstralRange = "\\ud800-\\udfff",
    rsComboMarksRange = "\\u0300-\\u036f",
    reComboHalfMarksRange = "\\ufe20-\\ufe2f",
    rsComboSymbolsRange = "\\u20d0-\\u20ff",
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsDingbatRange = "\\u2700-\\u27bf",
    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
    rsPunctuationRange = "\\u2000-\\u206f",
    rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
    rsVarRange = "\\ufe0e\\ufe0f",
    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
/** Used to compose unicode capture groups. */

var rsApos = "['\u2019]",
    rsBreak = '[' + rsBreakRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsDigits = '\\d+',
    rsDingbat = '[' + rsDingbatRange + ']',
    rsLower = '[' + rsLowerRange + ']',
    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    rsFitz = "\\ud83c[\\udffb-\\udfff]",
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
    rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
    rsUpper = '[' + rsUpperRange + ']',
    rsZWJ = "\\u200d";
/** Used to compose unicode regexes. */

var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
    reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
    rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;
/** Used to match complex or compound words. */

var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');
/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */

function unicodeWords(string) {
  return string.match(reUnicodeWord) || [];
}

module.exports = unicodeWords;

/***/ }),
/* 440 */
/***/ (function(module, exports, __webpack_require__) {

var capitalize = __webpack_require__(441),
    createCompounder = __webpack_require__(266);
/**
 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the camel cased string.
 * @example
 *
 * _.camelCase('Foo Bar');
 * // => 'fooBar'
 *
 * _.camelCase('--foo-bar--');
 * // => 'fooBar'
 *
 * _.camelCase('__FOO_BAR__');
 * // => 'fooBar'
 */


var camelCase = createCompounder(function (result, word, index) {
  word = word.toLowerCase();
  return result + (index ? capitalize(word) : word);
});
module.exports = camelCase;

/***/ }),
/* 441 */
/***/ (function(module, exports, __webpack_require__) {

var toString = __webpack_require__(95),
    upperFirst = __webpack_require__(442);
/**
 * Converts the first character of `string` to upper case and the remaining
 * to lower case.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to capitalize.
 * @returns {string} Returns the capitalized string.
 * @example
 *
 * _.capitalize('FRED');
 * // => 'Fred'
 */


function capitalize(string) {
  return upperFirst(toString(string).toLowerCase());
}

module.exports = capitalize;

/***/ }),
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

var createCaseFirst = __webpack_require__(443);
/**
 * Converts the first character of `string` to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.upperFirst('fred');
 * // => 'Fred'
 *
 * _.upperFirst('FRED');
 * // => 'FRED'
 */


var upperFirst = createCaseFirst('toUpperCase');
module.exports = upperFirst;

/***/ }),
/* 443 */
/***/ (function(module, exports, __webpack_require__) {

var castSlice = __webpack_require__(444),
    hasUnicode = __webpack_require__(253),
    stringToArray = __webpack_require__(252),
    toString = __webpack_require__(95);
/**
 * Creates a function like `_.lowerFirst`.
 *
 * @private
 * @param {string} methodName The name of the `String` case method to use.
 * @returns {Function} Returns the new case function.
 */


function createCaseFirst(methodName) {
  return function (string) {
    string = toString(string);
    var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
    var chr = strSymbols ? strSymbols[0] : string.charAt(0);
    var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
    return chr[methodName]() + trailing;
  };
}

module.exports = createCaseFirst;

/***/ }),
/* 444 */
/***/ (function(module, exports, __webpack_require__) {

var baseSlice = __webpack_require__(445);
/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */


function castSlice(array, start, end) {
  var length = array.length;
  end = end === undefined ? length : end;
  return !start && end >= length ? array : baseSlice(array, start, end);
}

module.exports = castSlice;

/***/ }),
/* 445 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : length + start;
  }

  end = end > length ? length : end;

  if (end < 0) {
    end += length;
  }

  length = start > end ? 0 : end - start >>> 0;
  start >>>= 0;
  var result = Array(length);

  while (++index < length) {
    result[index] = array[index + start];
  }

  return result;
}

module.exports = baseSlice;

/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

var baseAssignValue = __webpack_require__(122),
    baseForOwn = __webpack_require__(256),
    baseIteratee = __webpack_require__(257);
/**
 * The opposite of `_.mapValues`; this method creates an object with the
 * same values as `object` and keys generated by running each own enumerable
 * string keyed property of `object` thru `iteratee`. The iteratee is invoked
 * with three arguments: (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 3.8.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapValues
 * @example
 *
 * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
 *   return key + value;
 * });
 * // => { 'a1': 1, 'b2': 2 }
 */


function mapKeys(object, iteratee) {
  var result = {};
  iteratee = baseIteratee(iteratee, 3);
  baseForOwn(object, function (value, key, object) {
    baseAssignValue(result, iteratee(value, key, object), value);
  });
  return result;
}

module.exports = mapKeys;

/***/ }),
/* 447 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(27);

exports.__esModule = true;
exports.default = sortFields;

var _has = _interopRequireDefault(__webpack_require__(74));

var _toposort = _interopRequireDefault(__webpack_require__(448));

var _propertyExpr = __webpack_require__(125);

var _Reference = _interopRequireDefault(__webpack_require__(98));

var _isSchema = _interopRequireDefault(__webpack_require__(64));

function sortFields(fields, excludes) {
  if (excludes === void 0) {
    excludes = [];
  }

  var edges = [],
      nodes = [];

  function addNode(depPath, key) {
    var node = (0, _propertyExpr.split)(depPath)[0];
    if (!~nodes.indexOf(node)) nodes.push(node);
    if (!~excludes.indexOf(key + "-" + node)) edges.push([key, node]);
  }

  for (var key in fields) {
    if ((0, _has.default)(fields, key)) {
      var value = fields[key];
      if (!~nodes.indexOf(key)) nodes.push(key);
      if (_Reference.default.isRef(value) && !value.isContext) addNode(value.path, key);else if ((0, _isSchema.default)(value) && value._deps) value._deps.forEach(function (path) {
        return addNode(path, key);
      });
    }
  }

  return _toposort.default.array(nodes, edges).reverse();
}

module.exports = exports["default"];

/***/ }),
/* 448 */
/***/ (function(module, exports) {

/**
 * Topological sorting function
 *
 * @param {Array} edges
 * @returns {Array}
 */
module.exports = function (edges) {
  return toposort(uniqueNodes(edges), edges);
};

module.exports.array = toposort;

function toposort(nodes, edges) {
  var cursor = nodes.length,
      sorted = new Array(cursor),
      visited = {},
      i = cursor // Better data structures make algorithm much faster.
  ,
      outgoingEdges = makeOutgoingEdges(edges),
      nodesHash = makeNodesHash(nodes); // check for unknown nodes

  edges.forEach(function (edge) {
    if (!nodesHash.has(edge[0]) || !nodesHash.has(edge[1])) {
      throw new Error('Unknown node. There is an unknown node in the supplied edges.');
    }
  });

  while (i--) {
    if (!visited[i]) visit(nodes[i], i, new Set());
  }

  return sorted;

  function visit(node, i, predecessors) {
    if (predecessors.has(node)) {
      var nodeRep;

      try {
        nodeRep = ", node was:" + JSON.stringify(node);
      } catch (e) {
        nodeRep = "";
      }

      throw new Error('Cyclic dependency' + nodeRep);
    }

    if (!nodesHash.has(node)) {
      throw new Error('Found unknown node. Make sure to provided all involved nodes. Unknown node: ' + JSON.stringify(node));
    }

    if (visited[i]) return;
    visited[i] = true;
    var outgoing = outgoingEdges.get(node) || new Set();
    outgoing = Array.from(outgoing);

    if (i = outgoing.length) {
      predecessors.add(node);

      do {
        var child = outgoing[--i];
        visit(child, nodesHash.get(child), predecessors);
      } while (i);

      predecessors.delete(node);
    }

    sorted[--cursor] = node;
  }
}

function uniqueNodes(arr) {
  var res = new Set();

  for (var i = 0, len = arr.length; i < len; i++) {
    var edge = arr[i];
    res.add(edge[0]);
    res.add(edge[1]);
  }

  return Array.from(res);
}

function makeOutgoingEdges(arr) {
  var edges = new Map();

  for (var i = 0, len = arr.length; i < len; i++) {
    var edge = arr[i];
    if (!edges.has(edge[0])) edges.set(edge[0], new Set());
    if (!edges.has(edge[1])) edges.set(edge[1], new Set());
    edges.get(edge[0]).add(edge[1]);
  }

  return edges;
}

function makeNodesHash(arr) {
  var res = new Map();

  for (var i = 0, len = arr.length; i < len; i++) {
    res.set(arr[i], i);
  }

  return res;
}

/***/ }),
/* 449 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = sortByKeyOrder;

function findIndex(arr, err) {
  var idx = Infinity;
  arr.some(function (key, ii) {
    if (err.path.indexOf(key) !== -1) {
      idx = ii;
      return true;
    }
  });
  return idx;
}

function sortByKeyOrder(fields) {
  var keys = Object.keys(fields);
  return function (a, b) {
    return findIndex(keys, a) - findIndex(keys, b);
  };
}

module.exports = exports["default"];

/***/ }),
/* 450 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__(264);

var _interopRequireDefault = __webpack_require__(27);

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(__webpack_require__(94));

var _taggedTemplateLiteralLoose2 = _interopRequireDefault(__webpack_require__(265));

var _inherits = _interopRequireDefault(__webpack_require__(79));

var _isAbsent = _interopRequireDefault(__webpack_require__(97));

var _isSchema = _interopRequireDefault(__webpack_require__(64));

var _makePath = _interopRequireDefault(__webpack_require__(267));

var _printValue = _interopRequireDefault(__webpack_require__(124));

var _mixed = _interopRequireDefault(__webpack_require__(61));

var _locale = __webpack_require__(63);

var _runValidations = _interopRequireWildcard(__webpack_require__(181));

function _templateObject() {
  var data = (0, _taggedTemplateLiteralLoose2.default)(["", "[", "]"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var hasLength = function hasLength(value) {
  return !(0, _isAbsent.default)(value) && value.length > 0;
};

var _default = ArraySchema;
exports.default = _default;

function ArraySchema(type) {
  var _this = this;

  if (!(this instanceof ArraySchema)) return new ArraySchema(type);

  _mixed.default.call(this, {
    type: 'array'
  }); // `undefined` specifically means uninitialized, as opposed to
  // "no subtype"


  this._subType = undefined;
  this.withMutation(function () {
    _this.transform(function (values) {
      if (typeof values === 'string') try {
        values = JSON.parse(values);
      } catch (err) {
        values = null;
      }
      return this.isType(values) ? values : null;
    });

    if (type) _this.of(type);
  });
}

(0, _inherits.default)(ArraySchema, _mixed.default, {
  _typeCheck: function _typeCheck(v) {
    return Array.isArray(v);
  },
  _cast: function _cast(_value, _opts) {
    var _this2 = this;

    var value = _mixed.default.prototype._cast.call(this, _value, _opts); //should ignore nulls here


    if (!this._typeCheck(value) || !this._subType) return value;
    var isChanged = false;
    var castArray = value.map(function (v) {
      var castElement = _this2._subType.cast(v, _opts);

      if (castElement !== v) {
        isChanged = true;
      }

      return castElement;
    });
    return isChanged ? castArray : value;
  },
  _validate: function _validate(_value, options) {
    var _this3 = this;

    if (options === void 0) {
      options = {};
    }

    var errors = [];
    var sync = options.sync;
    var path = options.path;
    var subType = this._subType;

    var endEarly = this._option('abortEarly', options);

    var recursive = this._option('recursive', options);

    var originalValue = options.originalValue != null ? options.originalValue : _value;
    return _mixed.default.prototype._validate.call(this, _value, options).catch((0, _runValidations.propagateErrors)(endEarly, errors)).then(function (value) {
      if (!recursive || !subType || !_this3._typeCheck(value)) {
        if (errors.length) throw errors[0];
        return value;
      }

      originalValue = originalValue || value;
      var validations = value.map(function (item, idx) {
        var path = (0, _makePath.default)(_templateObject(), options.path, idx); // object._validate note for isStrict explanation

        var innerOptions = (0, _extends2.default)({}, options, {
          path: path,
          strict: true,
          parent: value,
          originalValue: originalValue[idx]
        });
        if (subType.validate) return subType.validate(item, innerOptions);
        return true;
      });
      return (0, _runValidations.default)({
        sync: sync,
        path: path,
        value: value,
        errors: errors,
        endEarly: endEarly,
        validations: validations
      });
    });
  },
  of: function of(schema) {
    var next = this.clone();
    if (schema !== false && !(0, _isSchema.default)(schema)) throw new TypeError('`array.of()` sub-schema must be a valid yup schema, or `false` to negate a current sub-schema. ' + 'not: ' + (0, _printValue.default)(schema));
    next._subType = schema;
    return next;
  },
  required: function required(message) {
    if (message === void 0) {
      message = _locale.mixed.required;
    }

    var next = _mixed.default.prototype.required.call(this, message);

    return next.test({
      message: message,
      name: 'required',
      test: hasLength
    });
  },
  min: function min(_min, message) {
    message = message || _locale.array.min;
    return this.test({
      message: message,
      name: 'min',
      exclusive: true,
      params: {
        min: _min
      },
      test: function test(value) {
        return (0, _isAbsent.default)(value) || value.length >= this.resolve(_min);
      }
    });
  },
  max: function max(_max, message) {
    message = message || _locale.array.max;
    return this.test({
      message: message,
      name: 'max',
      exclusive: true,
      params: {
        max: _max
      },
      test: function test(value) {
        return (0, _isAbsent.default)(value) || value.length <= this.resolve(_max);
      }
    });
  },
  ensure: function ensure() {
    var _this4 = this;

    return this.default(function () {
      return [];
    }).transform(function (val) {
      if (_this4.isType(val)) return val;
      return val === null ? [] : [].concat(val);
    });
  },
  compact: function compact(rejector) {
    var reject = !rejector ? function (v) {
      return !!v;
    } : function (v, i, a) {
      return !rejector(v, i, a);
    };
    return this.transform(function (values) {
      return values != null ? values.filter(reject) : values;
    });
  },
  describe: function describe() {
    var base = _mixed.default.prototype.describe.call(this);

    if (this._subType) base.innerType = this._subType.describe();
    return base;
  }
});
module.exports = exports["default"];

/***/ }),
/* 451 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(27);

exports.__esModule = true;
exports.default = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(__webpack_require__(182));

var _isSchema = _interopRequireDefault(__webpack_require__(64));

var Lazy =
/*#__PURE__*/
function () {
  function Lazy(mapFn) {
    this._resolve = function () {
      var schema = mapFn.apply(void 0, arguments);
      if (!(0, _isSchema.default)(schema)) throw new TypeError('lazy() functions must return a valid schema');
      return schema;
    };
  }

  var _proto = Lazy.prototype;

  _proto.resolve = function resolve(_ref) {
    var value = _ref.value,
        rest = (0, _objectWithoutPropertiesLoose2.default)(_ref, ["value"]);
    return this._resolve(value, rest);
  };

  _proto.cast = function cast(value, options) {
    return this._resolve(value, options).cast(value, options);
  };

  _proto.validate = function validate(value, options) {
    return this._resolve(value, options).validate(value, options);
  };

  _proto.validateSync = function validateSync(value, options) {
    return this._resolve(value, options).validateSync(value, options);
  };

  _proto.validateAt = function validateAt(path, value, options) {
    return this._resolve(value, options).validateAt(path, value, options);
  };

  _proto.validateSyncAt = function validateSyncAt(path, value, options) {
    return this._resolve(value, options).validateSyncAt(path, value, options);
  };

  return Lazy;
}();

Lazy.prototype.__isYupSchema__ = true;
var _default = Lazy;
exports.default = _default;
module.exports = exports["default"];

/***/ }),
/* 452 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(27);

exports.__esModule = true;
exports.default = setLocale;

var _locale = _interopRequireDefault(__webpack_require__(63));

function setLocale(custom) {
  Object.keys(custom).forEach(function (type) {
    Object.keys(custom[type]).forEach(function (method) {
      _locale.default[type][method] = custom[type][method];
    });
  });
}

module.exports = exports["default"];

/***/ }),
/* 453 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 454 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 *
 *
 * @author Jerry Bendy <jerry@icewingcc.com>
 * @licence MIT
 *
 */
(function (self) {
  'use strict';

  var nativeURLSearchParams = self.URLSearchParams && self.URLSearchParams.prototype.get ? self.URLSearchParams : null,
      isSupportObjectConstructor = nativeURLSearchParams && new nativeURLSearchParams({
    a: 1
  }).toString() === 'a=1',
      // There is a bug in safari 10.1 (and earlier) that incorrectly decodes `%2B` as an empty space and not a plus.
  decodesPlusesCorrectly = nativeURLSearchParams && new nativeURLSearchParams('s=%2B').get('s') === '+',
      __URLSearchParams__ = "__URLSearchParams__",
      // Fix bug in Edge which cannot encode ' &' correctly
  encodesAmpersandsCorrectly = nativeURLSearchParams ? function () {
    var ampersandTest = new nativeURLSearchParams();
    ampersandTest.append('s', ' &');
    return ampersandTest.toString() === 's=+%26';
  }() : true,
      prototype = URLSearchParamsPolyfill.prototype,
      iterable = !!(self.Symbol && self.Symbol.iterator);

  if (nativeURLSearchParams && isSupportObjectConstructor && decodesPlusesCorrectly && encodesAmpersandsCorrectly) {
    return;
  }
  /**
   * Make a URLSearchParams instance
   *
   * @param {object|string|URLSearchParams} search
   * @constructor
   */


  function URLSearchParamsPolyfill(search) {
    search = search || ""; // support construct object with another URLSearchParams instance

    if (search instanceof URLSearchParams || search instanceof URLSearchParamsPolyfill) {
      search = search.toString();
    }

    this[__URLSearchParams__] = parseToDict(search);
  }
  /**
   * Appends a specified key/value pair as a new search parameter.
   *
   * @param {string} name
   * @param {string} value
   */


  prototype.append = function (name, value) {
    appendTo(this[__URLSearchParams__], name, value);
  };
  /**
   * Deletes the given search parameter, and its associated value,
   * from the list of all search parameters.
   *
   * @param {string} name
   */


  prototype['delete'] = function (name) {
    delete this[__URLSearchParams__][name];
  };
  /**
   * Returns the first value associated to the given search parameter.
   *
   * @param {string} name
   * @returns {string|null}
   */


  prototype.get = function (name) {
    var dict = this[__URLSearchParams__];
    return name in dict ? dict[name][0] : null;
  };
  /**
   * Returns all the values association with a given search parameter.
   *
   * @param {string} name
   * @returns {Array}
   */


  prototype.getAll = function (name) {
    var dict = this[__URLSearchParams__];
    return name in dict ? dict[name].slice(0) : [];
  };
  /**
   * Returns a Boolean indicating if such a search parameter exists.
   *
   * @param {string} name
   * @returns {boolean}
   */


  prototype.has = function (name) {
    return name in this[__URLSearchParams__];
  };
  /**
   * Sets the value associated to a given search parameter to
   * the given value. If there were several values, delete the
   * others.
   *
   * @param {string} name
   * @param {string} value
   */


  prototype.set = function set(name, value) {
    this[__URLSearchParams__][name] = ['' + value];
  };
  /**
   * Returns a string containg a query string suitable for use in a URL.
   *
   * @returns {string}
   */


  prototype.toString = function () {
    var dict = this[__URLSearchParams__],
        query = [],
        i,
        key,
        name,
        value;

    for (key in dict) {
      name = encode(key);

      for (i = 0, value = dict[key]; i < value.length; i++) {
        query.push(name + '=' + encode(value[i]));
      }
    }

    return query.join('&');
  }; // There is a bug in Safari 10.1 and `Proxy`ing it is not enough.


  var forSureUsePolyfill = !decodesPlusesCorrectly;
  var useProxy = !forSureUsePolyfill && nativeURLSearchParams && !isSupportObjectConstructor && self.Proxy;
  /*
   * Apply polifill to global object and append other prototype into it
   */

  Object.defineProperty(self, 'URLSearchParams', {
    value: useProxy ? // Safari 10.0 doesn't support Proxy, so it won't extend URLSearchParams on safari 10.0
    new Proxy(nativeURLSearchParams, {
      construct: function construct(target, args) {
        return new target(new URLSearchParamsPolyfill(args[0]).toString());
      }
    }) : URLSearchParamsPolyfill
  });
  var USPProto = self.URLSearchParams.prototype;
  USPProto.polyfill = true;
  /**
   *
   * @param {function} callback
   * @param {object} thisArg
   */

  USPProto.forEach = USPProto.forEach || function (callback, thisArg) {
    var dict = parseToDict(this.toString());
    Object.getOwnPropertyNames(dict).forEach(function (name) {
      dict[name].forEach(function (value) {
        callback.call(thisArg, value, name, this);
      }, this);
    }, this);
  };
  /**
   * Sort all name-value pairs
   */


  USPProto.sort = USPProto.sort || function () {
    var dict = parseToDict(this.toString()),
        keys = [],
        k,
        i,
        j;

    for (k in dict) {
      keys.push(k);
    }

    keys.sort();

    for (i = 0; i < keys.length; i++) {
      this['delete'](keys[i]);
    }

    for (i = 0; i < keys.length; i++) {
      var key = keys[i],
          values = dict[key];

      for (j = 0; j < values.length; j++) {
        this.append(key, values[j]);
      }
    }
  };
  /**
   * Returns an iterator allowing to go through all keys of
   * the key/value pairs contained in this object.
   *
   * @returns {function}
   */


  USPProto.keys = USPProto.keys || function () {
    var items = [];
    this.forEach(function (item, name) {
      items.push(name);
    });
    return makeIterator(items);
  };
  /**
   * Returns an iterator allowing to go through all values of
   * the key/value pairs contained in this object.
   *
   * @returns {function}
   */


  USPProto.values = USPProto.values || function () {
    var items = [];
    this.forEach(function (item) {
      items.push(item);
    });
    return makeIterator(items);
  };
  /**
   * Returns an iterator allowing to go through all key/value
   * pairs contained in this object.
   *
   * @returns {function}
   */


  USPProto.entries = USPProto.entries || function () {
    var items = [];
    this.forEach(function (item, name) {
      items.push([name, item]);
    });
    return makeIterator(items);
  };

  if (iterable) {
    USPProto[self.Symbol.iterator] = USPProto[self.Symbol.iterator] || USPProto.entries;
  }

  function encode(str) {
    var replace = {
      '!': '%21',
      "'": '%27',
      '(': '%28',
      ')': '%29',
      '~': '%7E',
      '%20': '+',
      '%00': '\x00'
    };
    return encodeURIComponent(str).replace(/[!'\(\)~]|%20|%00/g, function (match) {
      return replace[match];
    });
  }

  function decode(str) {
    return decodeURIComponent(str.replace(/\+/g, ' '));
  }

  function makeIterator(arr) {
    var iterator = {
      next: function next() {
        var value = arr.shift();
        return {
          done: value === undefined,
          value: value
        };
      }
    };

    if (iterable) {
      iterator[self.Symbol.iterator] = function () {
        return iterator;
      };
    }

    return iterator;
  }

  function parseToDict(search) {
    var dict = {};

    if (typeof search === "object") {
      for (var key in search) {
        if (search.hasOwnProperty(key)) {
          appendTo(dict, key, search[key]);
        }
      }
    } else {
      // remove first '?'
      if (search.indexOf("?") === 0) {
        search = search.slice(1);
      }

      var pairs = search.split("&");

      for (var j = 0; j < pairs.length; j++) {
        var value = pairs[j],
            index = value.indexOf('=');

        if (-1 < index) {
          appendTo(dict, decode(value.slice(0, index)), decode(value.slice(index + 1)));
        } else {
          if (value) {
            appendTo(dict, decode(value), '');
          }
        }
      }
    }

    return dict;
  }

  function appendTo(dict, name, value) {
    var val = typeof value === 'string' ? value : value !== null && value !== undefined && typeof value.toString === 'function' ? value.toString() : JSON.stringify(value);

    if (name in dict) {
      dict[name].push(val);
    } else {
      dict[name] = [val];
    }
  }
})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(51)))

/***/ }),
/* 455 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 456 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 457 */,
/* 458 */,
/* 459 */,
/* 460 */,
/* 461 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DndProvider; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _DndContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(100);
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function _iterableToArrayLimit(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}




var refCount = 0;
/**
 * A React component that provides the React-DnD context
 */

var DndProvider = Object(react__WEBPACK_IMPORTED_MODULE_0__["memo"])(function (_ref) {
  var children = _ref.children,
      props = _objectWithoutProperties(_ref, ["children"]);

  var _getDndContextValue = getDndContextValue(props),
      _getDndContextValue2 = _slicedToArray(_getDndContextValue, 2),
      manager = _getDndContextValue2[0],
      isGlobalInstance = _getDndContextValue2[1]; // memoized from props

  /**
   * If the global context was used to store the DND context
   * then where theres no more references to it we should
   * clean it up to avoid memory leaks
   */


  react__WEBPACK_IMPORTED_MODULE_0__["useEffect"](function () {
    if (isGlobalInstance) {
      refCount++;
    }

    return function () {
      if (isGlobalInstance) {
        refCount--;

        if (refCount === 0) {
          var context = getGlobalContext();
          context[instanceSymbol] = null;
        }
      }
    };
  }, []);
  return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_DndContext__WEBPACK_IMPORTED_MODULE_1__[/* DndContext */ "a"].Provider, {
    value: manager
  }, children);
});
DndProvider.displayName = 'DndProvider';

function getDndContextValue(props) {
  if ('manager' in props) {
    var _manager = {
      dragDropManager: props.manager
    };
    return [_manager, false];
  }

  var manager = createSingletonDndContext(props.backend, props.context, props.options, props.debugMode);
  var isGlobalInstance = !props.context;
  return [manager, isGlobalInstance];
}

var instanceSymbol = Symbol.for('__REACT_DND_CONTEXT_INSTANCE__');

function createSingletonDndContext(backend) {
  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getGlobalContext();
  var options = arguments.length > 2 ? arguments[2] : undefined;
  var debugMode = arguments.length > 3 ? arguments[3] : undefined;
  var ctx = context;

  if (!ctx[instanceSymbol]) {
    ctx[instanceSymbol] = Object(_DndContext__WEBPACK_IMPORTED_MODULE_1__[/* createDndContext */ "b"])(backend, context, options, debugMode);
  }

  return ctx[instanceSymbol];
}

function getGlobalContext() {
  return typeof global !== 'undefined' ? global : window;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(51)))

/***/ }),
/* 462 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(0);

// EXTERNAL MODULE: ./node_modules/@react-dnd/invariant/dist/invariant.esm.js
var invariant_esm = __webpack_require__(8);

// EXTERNAL MODULE: ./node_modules/react-dnd/dist/esm/hooks/internal/useMonitorOutput.js + 1 modules
var useMonitorOutput = __webpack_require__(131);

// EXTERNAL MODULE: ./node_modules/react-dnd/dist/esm/hooks/internal/useIsomorphicLayoutEffect.js
var useIsomorphicLayoutEffect = __webpack_require__(33);

// EXTERNAL MODULE: ./node_modules/react-dnd/dist/esm/common/registration.js
var registration = __webpack_require__(129);

// EXTERNAL MODULE: ./node_modules/react-dnd/dist/esm/hooks/internal/useDragDropManager.js
var useDragDropManager = __webpack_require__(82);

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/common/DragSourceMonitorImpl.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}


var isCallingCanDrag = false;
var isCallingIsDragging = false;
var DragSourceMonitorImpl_DragSourceMonitorImpl =
/*#__PURE__*/
function () {
  function DragSourceMonitorImpl(manager) {
    _classCallCheck(this, DragSourceMonitorImpl);

    this.sourceId = null;
    this.internalMonitor = manager.getMonitor();
  }

  _createClass(DragSourceMonitorImpl, [{
    key: "receiveHandlerId",
    value: function receiveHandlerId(sourceId) {
      this.sourceId = sourceId;
    }
  }, {
    key: "getHandlerId",
    value: function getHandlerId() {
      return this.sourceId;
    }
  }, {
    key: "canDrag",
    value: function canDrag() {
      Object(invariant_esm["a" /* invariant */])(!isCallingCanDrag, 'You may not call monitor.canDrag() inside your canDrag() implementation. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor');

      try {
        isCallingCanDrag = true;
        return this.internalMonitor.canDragSource(this.sourceId);
      } finally {
        isCallingCanDrag = false;
      }
    }
  }, {
    key: "isDragging",
    value: function isDragging() {
      if (!this.sourceId) {
        return false;
      }

      Object(invariant_esm["a" /* invariant */])(!isCallingIsDragging, 'You may not call monitor.isDragging() inside your isDragging() implementation. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor');

      try {
        isCallingIsDragging = true;
        return this.internalMonitor.isDraggingSource(this.sourceId);
      } finally {
        isCallingIsDragging = false;
      }
    }
  }, {
    key: "subscribeToStateChange",
    value: function subscribeToStateChange(listener, options) {
      return this.internalMonitor.subscribeToStateChange(listener, options);
    }
  }, {
    key: "isDraggingSource",
    value: function isDraggingSource(sourceId) {
      return this.internalMonitor.isDraggingSource(sourceId);
    }
  }, {
    key: "isOverTarget",
    value: function isOverTarget(targetId, options) {
      return this.internalMonitor.isOverTarget(targetId, options);
    }
  }, {
    key: "getTargetIds",
    value: function getTargetIds() {
      return this.internalMonitor.getTargetIds();
    }
  }, {
    key: "isSourcePublic",
    value: function isSourcePublic() {
      return this.internalMonitor.isSourcePublic();
    }
  }, {
    key: "getSourceId",
    value: function getSourceId() {
      return this.internalMonitor.getSourceId();
    }
  }, {
    key: "subscribeToOffsetChange",
    value: function subscribeToOffsetChange(listener) {
      return this.internalMonitor.subscribeToOffsetChange(listener);
    }
  }, {
    key: "canDragSource",
    value: function canDragSource(sourceId) {
      return this.internalMonitor.canDragSource(sourceId);
    }
  }, {
    key: "canDropOnTarget",
    value: function canDropOnTarget(targetId) {
      return this.internalMonitor.canDropOnTarget(targetId);
    }
  }, {
    key: "getItemType",
    value: function getItemType() {
      return this.internalMonitor.getItemType();
    }
  }, {
    key: "getItem",
    value: function getItem() {
      return this.internalMonitor.getItem();
    }
  }, {
    key: "getDropResult",
    value: function getDropResult() {
      return this.internalMonitor.getDropResult();
    }
  }, {
    key: "didDrop",
    value: function didDrop() {
      return this.internalMonitor.didDrop();
    }
  }, {
    key: "getInitialClientOffset",
    value: function getInitialClientOffset() {
      return this.internalMonitor.getInitialClientOffset();
    }
  }, {
    key: "getInitialSourceClientOffset",
    value: function getInitialSourceClientOffset() {
      return this.internalMonitor.getInitialSourceClientOffset();
    }
  }, {
    key: "getSourceClientOffset",
    value: function getSourceClientOffset() {
      return this.internalMonitor.getSourceClientOffset();
    }
  }, {
    key: "getClientOffset",
    value: function getClientOffset() {
      return this.internalMonitor.getClientOffset();
    }
  }, {
    key: "getDifferenceFromInitialOffset",
    value: function getDifferenceFromInitialOffset() {
      return this.internalMonitor.getDifferenceFromInitialOffset();
    }
  }]);

  return DragSourceMonitorImpl;
}();
// EXTERNAL MODULE: ./node_modules/react-dnd/dist/esm/common/wrapConnectorHooks.js + 1 modules
var wrapConnectorHooks = __webpack_require__(132);

// EXTERNAL MODULE: ./node_modules/react-dnd/dist/esm/utils/isRef.js
var isRef = __webpack_require__(99);

// EXTERNAL MODULE: ./node_modules/@react-dnd/shallowequal/dist/shallowequal.esm.js
var shallowequal_esm = __webpack_require__(65);

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/common/SourceConnector.js
function SourceConnector_classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function SourceConnector_defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function SourceConnector_createClass(Constructor, protoProps, staticProps) {
  if (protoProps) SourceConnector_defineProperties(Constructor.prototype, protoProps);
  if (staticProps) SourceConnector_defineProperties(Constructor, staticProps);
  return Constructor;
}




var SourceConnector_SourceConnector =
/*#__PURE__*/
function () {
  function SourceConnector(backend) {
    var _this = this;

    SourceConnector_classCallCheck(this, SourceConnector);

    this.hooks = Object(wrapConnectorHooks["a" /* default */])({
      dragSource: function dragSource(node, options) {
        _this.clearDragSource();

        _this.dragSourceOptions = options || null;

        if (Object(isRef["a" /* isRef */])(node)) {
          _this.dragSourceRef = node;
        } else {
          _this.dragSourceNode = node;
        }

        _this.reconnectDragSource();
      },
      dragPreview: function dragPreview(node, options) {
        _this.clearDragPreview();

        _this.dragPreviewOptions = options || null;

        if (Object(isRef["a" /* isRef */])(node)) {
          _this.dragPreviewRef = node;
        } else {
          _this.dragPreviewNode = node;
        }

        _this.reconnectDragPreview();
      }
    });
    this.handlerId = null; // The drop target may either be attached via ref or connect function

    this.dragSourceRef = null;
    this.dragSourceOptionsInternal = null; // The drag preview may either be attached via ref or connect function

    this.dragPreviewRef = null;
    this.dragPreviewOptionsInternal = null;
    this.lastConnectedHandlerId = null;
    this.lastConnectedDragSource = null;
    this.lastConnectedDragSourceOptions = null;
    this.lastConnectedDragPreview = null;
    this.lastConnectedDragPreviewOptions = null;
    this.backend = backend;
  }

  SourceConnector_createClass(SourceConnector, [{
    key: "receiveHandlerId",
    value: function receiveHandlerId(newHandlerId) {
      if (this.handlerId === newHandlerId) {
        return;
      }

      this.handlerId = newHandlerId;
      this.reconnect();
    }
  }, {
    key: "reconnect",
    value: function reconnect() {
      this.reconnectDragSource();
      this.reconnectDragPreview();
    }
  }, {
    key: "reconnectDragSource",
    value: function reconnectDragSource() {
      var dragSource = this.dragSource; // if nothing has changed then don't resubscribe

      var didChange = this.didHandlerIdChange() || this.didConnectedDragSourceChange() || this.didDragSourceOptionsChange();

      if (didChange) {
        this.disconnectDragSource();
      }

      if (!this.handlerId) {
        return;
      }

      if (!dragSource) {
        this.lastConnectedDragSource = dragSource;
        return;
      }

      if (didChange) {
        this.lastConnectedHandlerId = this.handlerId;
        this.lastConnectedDragSource = dragSource;
        this.lastConnectedDragSourceOptions = this.dragSourceOptions;
        this.dragSourceUnsubscribe = this.backend.connectDragSource(this.handlerId, dragSource, this.dragSourceOptions);
      }
    }
  }, {
    key: "reconnectDragPreview",
    value: function reconnectDragPreview() {
      var dragPreview = this.dragPreview; // if nothing has changed then don't resubscribe

      var didChange = this.didHandlerIdChange() || this.didConnectedDragPreviewChange() || this.didDragPreviewOptionsChange();

      if (!this.handlerId) {
        this.disconnectDragPreview();
      } else if (this.dragPreview && didChange) {
        this.lastConnectedHandlerId = this.handlerId;
        this.lastConnectedDragPreview = dragPreview;
        this.lastConnectedDragPreviewOptions = this.dragPreviewOptions;
        this.disconnectDragPreview();
        this.dragPreviewUnsubscribe = this.backend.connectDragPreview(this.handlerId, dragPreview, this.dragPreviewOptions);
      }
    }
  }, {
    key: "didHandlerIdChange",
    value: function didHandlerIdChange() {
      return this.lastConnectedHandlerId !== this.handlerId;
    }
  }, {
    key: "didConnectedDragSourceChange",
    value: function didConnectedDragSourceChange() {
      return this.lastConnectedDragSource !== this.dragSource;
    }
  }, {
    key: "didConnectedDragPreviewChange",
    value: function didConnectedDragPreviewChange() {
      return this.lastConnectedDragPreview !== this.dragPreview;
    }
  }, {
    key: "didDragSourceOptionsChange",
    value: function didDragSourceOptionsChange() {
      return !Object(shallowequal_esm["a" /* shallowEqual */])(this.lastConnectedDragSourceOptions, this.dragSourceOptions);
    }
  }, {
    key: "didDragPreviewOptionsChange",
    value: function didDragPreviewOptionsChange() {
      return !Object(shallowequal_esm["a" /* shallowEqual */])(this.lastConnectedDragPreviewOptions, this.dragPreviewOptions);
    }
  }, {
    key: "disconnectDragSource",
    value: function disconnectDragSource() {
      if (this.dragSourceUnsubscribe) {
        this.dragSourceUnsubscribe();
        this.dragSourceUnsubscribe = undefined;
      }
    }
  }, {
    key: "disconnectDragPreview",
    value: function disconnectDragPreview() {
      if (this.dragPreviewUnsubscribe) {
        this.dragPreviewUnsubscribe();
        this.dragPreviewUnsubscribe = undefined;
        this.dragPreviewNode = null;
        this.dragPreviewRef = null;
      }
    }
  }, {
    key: "clearDragSource",
    value: function clearDragSource() {
      this.dragSourceNode = null;
      this.dragSourceRef = null;
    }
  }, {
    key: "clearDragPreview",
    value: function clearDragPreview() {
      this.dragPreviewNode = null;
      this.dragPreviewRef = null;
    }
  }, {
    key: "connectTarget",
    get: function get() {
      return this.dragSource;
    }
  }, {
    key: "dragSourceOptions",
    get: function get() {
      return this.dragSourceOptionsInternal;
    },
    set: function set(options) {
      this.dragSourceOptionsInternal = options;
    }
  }, {
    key: "dragPreviewOptions",
    get: function get() {
      return this.dragPreviewOptionsInternal;
    },
    set: function set(options) {
      this.dragPreviewOptionsInternal = options;
    }
  }, {
    key: "dragSource",
    get: function get() {
      return this.dragSourceNode || this.dragSourceRef && this.dragSourceRef.current;
    }
  }, {
    key: "dragPreview",
    get: function get() {
      return this.dragPreviewNode || this.dragPreviewRef && this.dragPreviewRef.current;
    }
  }]);

  return SourceConnector;
}();
// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/internal/drag.js
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function _iterableToArrayLimit(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}








function useDragSourceMonitor() {
  var manager = Object(useDragDropManager["a" /* useDragDropManager */])();
  var monitor = Object(react["useMemo"])(function () {
    return new DragSourceMonitorImpl_DragSourceMonitorImpl(manager);
  }, [manager]);
  var connector = Object(react["useMemo"])(function () {
    return new SourceConnector_SourceConnector(manager.getBackend());
  }, [manager]);
  return [monitor, connector];
}
function useDragHandler(spec, monitor, connector) {
  var manager = Object(useDragDropManager["a" /* useDragDropManager */])();
  var handler = Object(react["useMemo"])(function () {
    return {
      beginDrag: function beginDrag() {
        var _spec$current = spec.current,
            begin = _spec$current.begin,
            item = _spec$current.item;

        if (begin) {
          var beginResult = begin(monitor);
          Object(invariant_esm["a" /* invariant */])(beginResult == null || _typeof(beginResult) === 'object', 'dragSpec.begin() must either return an object, undefined, or null');
          return beginResult || item || {};
        }

        return item || {};
      },
      canDrag: function canDrag() {
        if (typeof spec.current.canDrag === 'boolean') {
          return spec.current.canDrag;
        } else if (typeof spec.current.canDrag === 'function') {
          return spec.current.canDrag(monitor);
        } else {
          return true;
        }
      },
      isDragging: function isDragging(globalMonitor, target) {
        var isDragging = spec.current.isDragging;
        return isDragging ? isDragging(monitor) : target === globalMonitor.getSourceId();
      },
      endDrag: function endDrag() {
        var end = spec.current.end;

        if (end) {
          end(monitor.getItem(), monitor);
        }

        connector.reconnect();
      }
    };
  }, []);
  Object(useIsomorphicLayoutEffect["a" /* useIsomorphicLayoutEffect */])(function registerHandler() {
    var _registerSource = Object(registration["a" /* registerSource */])(spec.current.item.type, handler, manager),
        _registerSource2 = _slicedToArray(_registerSource, 2),
        handlerId = _registerSource2[0],
        unregister = _registerSource2[1];

    monitor.receiveHandlerId(handlerId);
    connector.receiveHandlerId(handlerId);
    return unregister;
  }, []);
}
// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/useDrag.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return useDrag; });
function useDrag_slicedToArray(arr, i) {
  return useDrag_arrayWithHoles(arr) || useDrag_iterableToArrayLimit(arr, i) || useDrag_nonIterableRest();
}

function useDrag_nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function useDrag_iterableToArrayLimit(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function useDrag_arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}






/**
 * useDragSource hook
 * @param sourceSpec The drag source specification *
 */

function useDrag(spec) {
  var specRef = Object(react["useRef"])(spec);
  specRef.current = spec; // TODO: wire options into createSourceConnector

  Object(invariant_esm["a" /* invariant */])(spec.item != null, 'item must be defined');
  Object(invariant_esm["a" /* invariant */])(spec.item.type != null, 'item type must be defined');

  var _useDragSourceMonitor = useDragSourceMonitor(),
      _useDragSourceMonitor2 = useDrag_slicedToArray(_useDragSourceMonitor, 2),
      monitor = _useDragSourceMonitor2[0],
      connector = _useDragSourceMonitor2[1];

  useDragHandler(specRef, monitor, connector);
  var result = Object(useMonitorOutput["a" /* useMonitorOutput */])(monitor, specRef.current.collect || function () {
    return {};
  }, function () {
    return connector.reconnect();
  });
  var connectDragSource = Object(react["useMemo"])(function () {
    return connector.hooks.dragSource();
  }, [connector]);
  var connectDragPreview = Object(react["useMemo"])(function () {
    return connector.hooks.dragPreview();
  }, [connector]);
  Object(useIsomorphicLayoutEffect["a" /* useIsomorphicLayoutEffect */])(function () {
    connector.dragSourceOptions = specRef.current.options || null;
    connector.reconnect();
  }, [connector]);
  Object(useIsomorphicLayoutEffect["a" /* useIsomorphicLayoutEffect */])(function () {
    connector.dragPreviewOptions = specRef.current.previewOptions || null;
    connector.reconnect();
  }, [connector]);
  return [result, connectDragSource, connectDragPreview];
}

/***/ }),
/* 463 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(0);

// EXTERNAL MODULE: ./node_modules/@react-dnd/invariant/dist/invariant.esm.js
var invariant_esm = __webpack_require__(8);

// EXTERNAL MODULE: ./node_modules/react-dnd/dist/esm/hooks/internal/useMonitorOutput.js + 1 modules
var useMonitorOutput = __webpack_require__(131);

// EXTERNAL MODULE: ./node_modules/react-dnd/dist/esm/hooks/internal/useIsomorphicLayoutEffect.js
var useIsomorphicLayoutEffect = __webpack_require__(33);

// EXTERNAL MODULE: ./node_modules/react-dnd/dist/esm/common/registration.js
var registration = __webpack_require__(129);

// EXTERNAL MODULE: ./node_modules/react-dnd/dist/esm/hooks/internal/useDragDropManager.js
var useDragDropManager = __webpack_require__(82);

// EXTERNAL MODULE: ./node_modules/@react-dnd/shallowequal/dist/shallowequal.esm.js
var shallowequal_esm = __webpack_require__(65);

// EXTERNAL MODULE: ./node_modules/react-dnd/dist/esm/common/wrapConnectorHooks.js + 1 modules
var wrapConnectorHooks = __webpack_require__(132);

// EXTERNAL MODULE: ./node_modules/react-dnd/dist/esm/utils/isRef.js
var isRef = __webpack_require__(99);

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/common/TargetConnector.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}




var TargetConnector_TargetConnector =
/*#__PURE__*/
function () {
  function TargetConnector(backend) {
    var _this = this;

    _classCallCheck(this, TargetConnector);

    this.hooks = Object(wrapConnectorHooks["a" /* default */])({
      dropTarget: function dropTarget(node, options) {
        _this.clearDropTarget();

        _this.dropTargetOptions = options;

        if (Object(isRef["a" /* isRef */])(node)) {
          _this.dropTargetRef = node;
        } else {
          _this.dropTargetNode = node;
        }

        _this.reconnect();
      }
    });
    this.handlerId = null; // The drop target may either be attached via ref or connect function

    this.dropTargetRef = null;
    this.dropTargetOptionsInternal = null;
    this.lastConnectedHandlerId = null;
    this.lastConnectedDropTarget = null;
    this.lastConnectedDropTargetOptions = null;
    this.backend = backend;
  }

  _createClass(TargetConnector, [{
    key: "reconnect",
    value: function reconnect() {
      // if nothing has changed then don't resubscribe
      var didChange = this.didHandlerIdChange() || this.didDropTargetChange() || this.didOptionsChange();

      if (didChange) {
        this.disconnectDropTarget();
      }

      var dropTarget = this.dropTarget;

      if (!this.handlerId) {
        return;
      }

      if (!dropTarget) {
        this.lastConnectedDropTarget = dropTarget;
        return;
      }

      if (didChange) {
        this.lastConnectedHandlerId = this.handlerId;
        this.lastConnectedDropTarget = dropTarget;
        this.lastConnectedDropTargetOptions = this.dropTargetOptions;
        this.unsubscribeDropTarget = this.backend.connectDropTarget(this.handlerId, dropTarget, this.dropTargetOptions);
      }
    }
  }, {
    key: "receiveHandlerId",
    value: function receiveHandlerId(newHandlerId) {
      if (newHandlerId === this.handlerId) {
        return;
      }

      this.handlerId = newHandlerId;
      this.reconnect();
    }
  }, {
    key: "didHandlerIdChange",
    value: function didHandlerIdChange() {
      return this.lastConnectedHandlerId !== this.handlerId;
    }
  }, {
    key: "didDropTargetChange",
    value: function didDropTargetChange() {
      return this.lastConnectedDropTarget !== this.dropTarget;
    }
  }, {
    key: "didOptionsChange",
    value: function didOptionsChange() {
      return !Object(shallowequal_esm["a" /* shallowEqual */])(this.lastConnectedDropTargetOptions, this.dropTargetOptions);
    }
  }, {
    key: "disconnectDropTarget",
    value: function disconnectDropTarget() {
      if (this.unsubscribeDropTarget) {
        this.unsubscribeDropTarget();
        this.unsubscribeDropTarget = undefined;
      }
    }
  }, {
    key: "clearDropTarget",
    value: function clearDropTarget() {
      this.dropTargetRef = null;
      this.dropTargetNode = null;
    }
  }, {
    key: "connectTarget",
    get: function get() {
      return this.dropTarget;
    }
  }, {
    key: "dropTargetOptions",
    get: function get() {
      return this.dropTargetOptionsInternal;
    },
    set: function set(options) {
      this.dropTargetOptionsInternal = options;
    }
  }, {
    key: "dropTarget",
    get: function get() {
      return this.dropTargetNode || this.dropTargetRef && this.dropTargetRef.current;
    }
  }]);

  return TargetConnector;
}();
// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/common/DropTargetMonitorImpl.js
function DropTargetMonitorImpl_classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function DropTargetMonitorImpl_defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function DropTargetMonitorImpl_createClass(Constructor, protoProps, staticProps) {
  if (protoProps) DropTargetMonitorImpl_defineProperties(Constructor.prototype, protoProps);
  if (staticProps) DropTargetMonitorImpl_defineProperties(Constructor, staticProps);
  return Constructor;
}


var isCallingCanDrop = false;
var DropTargetMonitorImpl_DropTargetMonitorImpl =
/*#__PURE__*/
function () {
  function DropTargetMonitorImpl(manager) {
    DropTargetMonitorImpl_classCallCheck(this, DropTargetMonitorImpl);

    this.targetId = null;
    this.internalMonitor = manager.getMonitor();
  }

  DropTargetMonitorImpl_createClass(DropTargetMonitorImpl, [{
    key: "receiveHandlerId",
    value: function receiveHandlerId(targetId) {
      this.targetId = targetId;
    }
  }, {
    key: "getHandlerId",
    value: function getHandlerId() {
      return this.targetId;
    }
  }, {
    key: "subscribeToStateChange",
    value: function subscribeToStateChange(listener, options) {
      return this.internalMonitor.subscribeToStateChange(listener, options);
    }
  }, {
    key: "canDrop",
    value: function canDrop() {
      // Cut out early if the target id has not been set. This should prevent errors
      // where the user has an older version of dnd-core like in
      // https://github.com/react-dnd/react-dnd/issues/1310
      if (!this.targetId) {
        return false;
      }

      Object(invariant_esm["a" /* invariant */])(!isCallingCanDrop, 'You may not call monitor.canDrop() inside your canDrop() implementation. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drop-target-monitor');

      try {
        isCallingCanDrop = true;
        return this.internalMonitor.canDropOnTarget(this.targetId);
      } finally {
        isCallingCanDrop = false;
      }
    }
  }, {
    key: "isOver",
    value: function isOver(options) {
      if (!this.targetId) {
        return false;
      }

      return this.internalMonitor.isOverTarget(this.targetId, options);
    }
  }, {
    key: "getItemType",
    value: function getItemType() {
      return this.internalMonitor.getItemType();
    }
  }, {
    key: "getItem",
    value: function getItem() {
      return this.internalMonitor.getItem();
    }
  }, {
    key: "getDropResult",
    value: function getDropResult() {
      return this.internalMonitor.getDropResult();
    }
  }, {
    key: "didDrop",
    value: function didDrop() {
      return this.internalMonitor.didDrop();
    }
  }, {
    key: "getInitialClientOffset",
    value: function getInitialClientOffset() {
      return this.internalMonitor.getInitialClientOffset();
    }
  }, {
    key: "getInitialSourceClientOffset",
    value: function getInitialSourceClientOffset() {
      return this.internalMonitor.getInitialSourceClientOffset();
    }
  }, {
    key: "getSourceClientOffset",
    value: function getSourceClientOffset() {
      return this.internalMonitor.getSourceClientOffset();
    }
  }, {
    key: "getClientOffset",
    value: function getClientOffset() {
      return this.internalMonitor.getClientOffset();
    }
  }, {
    key: "getDifferenceFromInitialOffset",
    value: function getDifferenceFromInitialOffset() {
      return this.internalMonitor.getDifferenceFromInitialOffset();
    }
  }]);

  return DropTargetMonitorImpl;
}();
// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/internal/drop.js
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function _iterableToArrayLimit(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}







function useDropTargetMonitor() {
  var manager = Object(useDragDropManager["a" /* useDragDropManager */])();
  var monitor = Object(react["useMemo"])(function () {
    return new DropTargetMonitorImpl_DropTargetMonitorImpl(manager);
  }, [manager]);
  var connector = Object(react["useMemo"])(function () {
    return new TargetConnector_TargetConnector(manager.getBackend());
  }, [manager]);
  return [monitor, connector];
}
function useDropHandler(spec, monitor, connector) {
  var manager = Object(useDragDropManager["a" /* useDragDropManager */])();
  var handler = Object(react["useMemo"])(function () {
    return {
      canDrop: function canDrop() {
        var canDrop = spec.current.canDrop;
        return canDrop ? canDrop(monitor.getItem(), monitor) : true;
      },
      hover: function hover() {
        var hover = spec.current.hover;

        if (hover) {
          hover(monitor.getItem(), monitor);
        }
      },
      drop: function drop() {
        var drop = spec.current.drop;

        if (drop) {
          return drop(monitor.getItem(), monitor);
        }
      }
    };
  }, [monitor]);
  Object(useIsomorphicLayoutEffect["a" /* useIsomorphicLayoutEffect */])(function registerHandler() {
    var _registerTarget = Object(registration["b" /* registerTarget */])(spec.current.accept, handler, manager),
        _registerTarget2 = _slicedToArray(_registerTarget, 2),
        handlerId = _registerTarget2[0],
        unregister = _registerTarget2[1];

    monitor.receiveHandlerId(handlerId);
    connector.receiveHandlerId(handlerId);
    return unregister;
  }, [monitor, connector]);
}
// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/useDrop.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return useDrop; });
function useDrop_slicedToArray(arr, i) {
  return useDrop_arrayWithHoles(arr) || useDrop_iterableToArrayLimit(arr, i) || useDrop_nonIterableRest();
}

function useDrop_nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function useDrop_iterableToArrayLimit(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function useDrop_arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}






/**
 * useDropTarget Hook
 * @param spec The drop target specification
 */

function useDrop(spec) {
  var specRef = Object(react["useRef"])(spec);
  specRef.current = spec;
  Object(invariant_esm["a" /* invariant */])(spec.accept != null, 'accept must be defined');

  var _useDropTargetMonitor = useDropTargetMonitor(),
      _useDropTargetMonitor2 = useDrop_slicedToArray(_useDropTargetMonitor, 2),
      monitor = _useDropTargetMonitor2[0],
      connector = _useDropTargetMonitor2[1];

  useDropHandler(specRef, monitor, connector);
  var result = Object(useMonitorOutput["a" /* useMonitorOutput */])(monitor, specRef.current.collect || function () {
    return {};
  }, function () {
    return connector.reconnect();
  });
  var connectDropTarget = Object(react["useMemo"])(function () {
    return connector.hooks.dropTarget();
  }, [connector]);
  Object(useIsomorphicLayoutEffect["a" /* useIsomorphicLayoutEffect */])(function () {
    connector.dropTargetOptions = spec.options || null;
    connector.reconnect();
  }, [spec.options]);
  return [result, connectDropTarget];
}

/***/ })
]]);
//# sourceMappingURL=2.65940d50.chunk.js.map