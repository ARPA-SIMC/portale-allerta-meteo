/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.allerta.messages.services.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.service.BaseServiceImpl;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import it.eng.allerta.messages.services.model.CounterSms;
import it.eng.allerta.messages.services.service.CounterSmsService;
import it.eng.allerta.messages.services.service.persistence.AuthPersistence;
import it.eng.allerta.messages.services.service.persistence.CounterSmsPersistence;
import it.eng.allerta.messages.services.service.persistence.NodoPersistence;
import it.eng.allerta.messages.services.service.persistence.ParametroFinder;
import it.eng.allerta.messages.services.service.persistence.ParametroPersistence;
import it.eng.allerta.messages.services.service.persistence.SmsSchedulerContextPersistence;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the counter sms remote service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link it.eng.allerta.messages.services.service.impl.CounterSmsServiceImpl}.
 * </p>
 *
 * @author Giorgianni_F
 * @see it.eng.allerta.messages.services.service.impl.CounterSmsServiceImpl
 * @generated
 */
public abstract class CounterSmsServiceBaseImpl
	extends BaseServiceImpl
	implements CounterSmsService, IdentifiableOSGiService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>CounterSmsService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>it.eng.allerta.messages.services.service.CounterSmsServiceUtil</code>.
	 */

	/**
	 * Returns the auth local service.
	 *
	 * @return the auth local service
	 */
	public it.eng.allerta.messages.services.service.AuthLocalService
		getAuthLocalService() {

		return authLocalService;
	}

	/**
	 * Sets the auth local service.
	 *
	 * @param authLocalService the auth local service
	 */
	public void setAuthLocalService(
		it.eng.allerta.messages.services.service.AuthLocalService
			authLocalService) {

		this.authLocalService = authLocalService;
	}

	/**
	 * Returns the auth persistence.
	 *
	 * @return the auth persistence
	 */
	public AuthPersistence getAuthPersistence() {
		return authPersistence;
	}

	/**
	 * Sets the auth persistence.
	 *
	 * @param authPersistence the auth persistence
	 */
	public void setAuthPersistence(AuthPersistence authPersistence) {
		this.authPersistence = authPersistence;
	}

	/**
	 * Returns the counter sms local service.
	 *
	 * @return the counter sms local service
	 */
	public it.eng.allerta.messages.services.service.CounterSmsLocalService
		getCounterSmsLocalService() {

		return counterSmsLocalService;
	}

	/**
	 * Sets the counter sms local service.
	 *
	 * @param counterSmsLocalService the counter sms local service
	 */
	public void setCounterSmsLocalService(
		it.eng.allerta.messages.services.service.CounterSmsLocalService
			counterSmsLocalService) {

		this.counterSmsLocalService = counterSmsLocalService;
	}

	/**
	 * Returns the counter sms remote service.
	 *
	 * @return the counter sms remote service
	 */
	public CounterSmsService getCounterSmsService() {
		return counterSmsService;
	}

	/**
	 * Sets the counter sms remote service.
	 *
	 * @param counterSmsService the counter sms remote service
	 */
	public void setCounterSmsService(CounterSmsService counterSmsService) {
		this.counterSmsService = counterSmsService;
	}

	/**
	 * Returns the counter sms persistence.
	 *
	 * @return the counter sms persistence
	 */
	public CounterSmsPersistence getCounterSmsPersistence() {
		return counterSmsPersistence;
	}

	/**
	 * Sets the counter sms persistence.
	 *
	 * @param counterSmsPersistence the counter sms persistence
	 */
	public void setCounterSmsPersistence(
		CounterSmsPersistence counterSmsPersistence) {

		this.counterSmsPersistence = counterSmsPersistence;
	}

	/**
	 * Returns the nodo local service.
	 *
	 * @return the nodo local service
	 */
	public it.eng.allerta.messages.services.service.NodoLocalService
		getNodoLocalService() {

		return nodoLocalService;
	}

	/**
	 * Sets the nodo local service.
	 *
	 * @param nodoLocalService the nodo local service
	 */
	public void setNodoLocalService(
		it.eng.allerta.messages.services.service.NodoLocalService
			nodoLocalService) {

		this.nodoLocalService = nodoLocalService;
	}

	/**
	 * Returns the nodo remote service.
	 *
	 * @return the nodo remote service
	 */
	public it.eng.allerta.messages.services.service.NodoService
		getNodoService() {

		return nodoService;
	}

	/**
	 * Sets the nodo remote service.
	 *
	 * @param nodoService the nodo remote service
	 */
	public void setNodoService(
		it.eng.allerta.messages.services.service.NodoService nodoService) {

		this.nodoService = nodoService;
	}

	/**
	 * Returns the nodo persistence.
	 *
	 * @return the nodo persistence
	 */
	public NodoPersistence getNodoPersistence() {
		return nodoPersistence;
	}

	/**
	 * Sets the nodo persistence.
	 *
	 * @param nodoPersistence the nodo persistence
	 */
	public void setNodoPersistence(NodoPersistence nodoPersistence) {
		this.nodoPersistence = nodoPersistence;
	}

	/**
	 * Returns the parametro local service.
	 *
	 * @return the parametro local service
	 */
	public it.eng.allerta.messages.services.service.ParametroLocalService
		getParametroLocalService() {

		return parametroLocalService;
	}

	/**
	 * Sets the parametro local service.
	 *
	 * @param parametroLocalService the parametro local service
	 */
	public void setParametroLocalService(
		it.eng.allerta.messages.services.service.ParametroLocalService
			parametroLocalService) {

		this.parametroLocalService = parametroLocalService;
	}

	/**
	 * Returns the parametro remote service.
	 *
	 * @return the parametro remote service
	 */
	public it.eng.allerta.messages.services.service.ParametroService
		getParametroService() {

		return parametroService;
	}

	/**
	 * Sets the parametro remote service.
	 *
	 * @param parametroService the parametro remote service
	 */
	public void setParametroService(
		it.eng.allerta.messages.services.service.ParametroService
			parametroService) {

		this.parametroService = parametroService;
	}

	/**
	 * Returns the parametro persistence.
	 *
	 * @return the parametro persistence
	 */
	public ParametroPersistence getParametroPersistence() {
		return parametroPersistence;
	}

	/**
	 * Sets the parametro persistence.
	 *
	 * @param parametroPersistence the parametro persistence
	 */
	public void setParametroPersistence(
		ParametroPersistence parametroPersistence) {

		this.parametroPersistence = parametroPersistence;
	}

	/**
	 * Returns the parametro finder.
	 *
	 * @return the parametro finder
	 */
	public ParametroFinder getParametroFinder() {
		return parametroFinder;
	}

	/**
	 * Sets the parametro finder.
	 *
	 * @param parametroFinder the parametro finder
	 */
	public void setParametroFinder(ParametroFinder parametroFinder) {
		this.parametroFinder = parametroFinder;
	}

	/**
	 * Returns the sms scheduler context local service.
	 *
	 * @return the sms scheduler context local service
	 */
	public
		it.eng.allerta.messages.services.service.SmsSchedulerContextLocalService
			getSmsSchedulerContextLocalService() {

		return smsSchedulerContextLocalService;
	}

	/**
	 * Sets the sms scheduler context local service.
	 *
	 * @param smsSchedulerContextLocalService the sms scheduler context local service
	 */
	public void setSmsSchedulerContextLocalService(
		it.eng.allerta.messages.services.service.SmsSchedulerContextLocalService
			smsSchedulerContextLocalService) {

		this.smsSchedulerContextLocalService = smsSchedulerContextLocalService;
	}

	/**
	 * Returns the sms scheduler context remote service.
	 *
	 * @return the sms scheduler context remote service
	 */
	public it.eng.allerta.messages.services.service.SmsSchedulerContextService
		getSmsSchedulerContextService() {

		return smsSchedulerContextService;
	}

	/**
	 * Sets the sms scheduler context remote service.
	 *
	 * @param smsSchedulerContextService the sms scheduler context remote service
	 */
	public void setSmsSchedulerContextService(
		it.eng.allerta.messages.services.service.SmsSchedulerContextService
			smsSchedulerContextService) {

		this.smsSchedulerContextService = smsSchedulerContextService;
	}

	/**
	 * Returns the sms scheduler context persistence.
	 *
	 * @return the sms scheduler context persistence
	 */
	public SmsSchedulerContextPersistence getSmsSchedulerContextPersistence() {
		return smsSchedulerContextPersistence;
	}

	/**
	 * Sets the sms scheduler context persistence.
	 *
	 * @param smsSchedulerContextPersistence the sms scheduler context persistence
	 */
	public void setSmsSchedulerContextPersistence(
		SmsSchedulerContextPersistence smsSchedulerContextPersistence) {

		this.smsSchedulerContextPersistence = smsSchedulerContextPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService
		getCounterLocalService() {

		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService
			counterLocalService) {

		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService
		getClassNameLocalService() {

		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService
			classNameLocalService) {

		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name remote service.
	 *
	 * @return the class name remote service
	 */
	public com.liferay.portal.kernel.service.ClassNameService
		getClassNameService() {

		return classNameService;
	}

	/**
	 * Sets the class name remote service.
	 *
	 * @param classNameService the class name remote service
	 */
	public void setClassNameService(
		com.liferay.portal.kernel.service.ClassNameService classNameService) {

		this.classNameService = classNameService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {

		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService
		getResourceLocalService() {

		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService
			resourceLocalService) {

		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService
		getUserLocalService() {

		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {

		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.kernel.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.kernel.service.UserService userService) {

		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
	}

	public void destroy() {
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return CounterSmsService.class.getName();
	}

	protected Class<?> getModelClass() {
		return CounterSms.class;
	}

	protected String getModelClassName() {
		return CounterSms.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = counterSmsPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(
		type = it.eng.allerta.messages.services.service.AuthLocalService.class
	)
	protected it.eng.allerta.messages.services.service.AuthLocalService
		authLocalService;

	@BeanReference(type = AuthPersistence.class)
	protected AuthPersistence authPersistence;

	@BeanReference(
		type = it.eng.allerta.messages.services.service.CounterSmsLocalService.class
	)
	protected it.eng.allerta.messages.services.service.CounterSmsLocalService
		counterSmsLocalService;

	@BeanReference(type = CounterSmsService.class)
	protected CounterSmsService counterSmsService;

	@BeanReference(type = CounterSmsPersistence.class)
	protected CounterSmsPersistence counterSmsPersistence;

	@BeanReference(
		type = it.eng.allerta.messages.services.service.NodoLocalService.class
	)
	protected it.eng.allerta.messages.services.service.NodoLocalService
		nodoLocalService;

	@BeanReference(
		type = it.eng.allerta.messages.services.service.NodoService.class
	)
	protected it.eng.allerta.messages.services.service.NodoService nodoService;

	@BeanReference(type = NodoPersistence.class)
	protected NodoPersistence nodoPersistence;

	@BeanReference(
		type = it.eng.allerta.messages.services.service.ParametroLocalService.class
	)
	protected it.eng.allerta.messages.services.service.ParametroLocalService
		parametroLocalService;

	@BeanReference(
		type = it.eng.allerta.messages.services.service.ParametroService.class
	)
	protected it.eng.allerta.messages.services.service.ParametroService
		parametroService;

	@BeanReference(type = ParametroPersistence.class)
	protected ParametroPersistence parametroPersistence;

	@BeanReference(type = ParametroFinder.class)
	protected ParametroFinder parametroFinder;

	@BeanReference(
		type = it.eng.allerta.messages.services.service.SmsSchedulerContextLocalService.class
	)
	protected
		it.eng.allerta.messages.services.service.SmsSchedulerContextLocalService
			smsSchedulerContextLocalService;

	@BeanReference(
		type = it.eng.allerta.messages.services.service.SmsSchedulerContextService.class
	)
	protected
		it.eng.allerta.messages.services.service.SmsSchedulerContextService
			smsSchedulerContextService;

	@BeanReference(type = SmsSchedulerContextPersistence.class)
	protected SmsSchedulerContextPersistence smsSchedulerContextPersistence;

	@ServiceReference(
		type = com.liferay.counter.kernel.service.CounterLocalService.class
	)
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ClassNameLocalService.class
	)
	protected com.liferay.portal.kernel.service.ClassNameLocalService
		classNameLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ClassNameService.class
	)
	protected com.liferay.portal.kernel.service.ClassNameService
		classNameService;

	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ResourceLocalService.class
	)
	protected com.liferay.portal.kernel.service.ResourceLocalService
		resourceLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.UserLocalService.class
	)
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.UserService.class
	)
	protected com.liferay.portal.kernel.service.UserService userService;

	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;

}