/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.allerta.messages.services.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.allerta.messages.services.model.Parametro;
import it.eng.allerta.messages.services.model.ParametroModel;
import it.eng.allerta.messages.services.model.ParametroSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Parametro service. Represents a row in the &quot;smsService_Parametro&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ParametroModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ParametroImpl}.
 * </p>
 *
 * @author Giorgianni_F
 * @see ParametroImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ParametroModelImpl
	extends BaseModelImpl<Parametro> implements ParametroModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a parametro model instance should use the <code>Parametro</code> interface instead.
	 */
	public static final String TABLE_NAME = "smsService_Parametro";

	public static final Object[][] TABLE_COLUMNS = {
		{"Id", Types.BIGINT}, {"ip", Types.VARCHAR}, {"porta", Types.INTEGER},
		{"username", Types.VARCHAR}, {"password_", Types.VARCHAR},
		{"mittente", Types.VARCHAR}, {"nodo", Types.VARCHAR},
		{"dataConnessione", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("Id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ip", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("porta", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("username", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("password_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mittente", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nodo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dataConnessione", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table smsService_Parametro (Id LONG not null primary key,ip VARCHAR(75) null,porta INTEGER,username VARCHAR(75) null,password_ VARCHAR(75) null,mittente VARCHAR(75) null,nodo VARCHAR(75) null,dataConnessione DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table smsService_Parametro";

	public static final String ORDER_BY_JPQL = " ORDER BY parametro.Id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY smsService_Parametro.Id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.allerta.messages.services.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.allerta.messages.services.model.Parametro"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.allerta.messages.services.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.allerta.messages.services.model.Parametro"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		it.eng.allerta.messages.services.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.it.eng.allerta.messages.services.model.Parametro"),
		true);

	public static final long NODO_COLUMN_BITMASK = 1L;

	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Parametro toModel(ParametroSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Parametro model = new ParametroImpl();

		model.setId(soapModel.getId());
		model.setIp(soapModel.getIp());
		model.setPorta(soapModel.getPorta());
		model.setUsername(soapModel.getUsername());
		model.setPassword(soapModel.getPassword());
		model.setMittente(soapModel.getMittente());
		model.setNodo(soapModel.getNodo());
		model.setDataConnessione(soapModel.getDataConnessione());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Parametro> toModels(ParametroSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Parametro> models = new ArrayList<Parametro>(soapModels.length);

		for (ParametroSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		it.eng.allerta.messages.services.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.allerta.messages.services.model.Parametro"));

	public ParametroModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _Id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _Id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Parametro.class;
	}

	@Override
	public String getModelClassName() {
		return Parametro.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Parametro, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Parametro, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Parametro, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Parametro)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Parametro, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Parametro, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Parametro)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Parametro, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Parametro, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Parametro, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Parametro, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Parametro, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Parametro, Object>>();
		Map<String, BiConsumer<Parametro, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Parametro, ?>>();

		attributeGetterFunctions.put(
			"Id",
			new Function<Parametro, Object>() {

				@Override
				public Object apply(Parametro parametro) {
					return parametro.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"Id",
			new BiConsumer<Parametro, Object>() {

				@Override
				public void accept(Parametro parametro, Object Id) {
					parametro.setId((Long)Id);
				}

			});
		attributeGetterFunctions.put(
			"ip",
			new Function<Parametro, Object>() {

				@Override
				public Object apply(Parametro parametro) {
					return parametro.getIp();
				}

			});
		attributeSetterBiConsumers.put(
			"ip",
			new BiConsumer<Parametro, Object>() {

				@Override
				public void accept(Parametro parametro, Object ip) {
					parametro.setIp((String)ip);
				}

			});
		attributeGetterFunctions.put(
			"porta",
			new Function<Parametro, Object>() {

				@Override
				public Object apply(Parametro parametro) {
					return parametro.getPorta();
				}

			});
		attributeSetterBiConsumers.put(
			"porta",
			new BiConsumer<Parametro, Object>() {

				@Override
				public void accept(Parametro parametro, Object porta) {
					parametro.setPorta((Integer)porta);
				}

			});
		attributeGetterFunctions.put(
			"username",
			new Function<Parametro, Object>() {

				@Override
				public Object apply(Parametro parametro) {
					return parametro.getUsername();
				}

			});
		attributeSetterBiConsumers.put(
			"username",
			new BiConsumer<Parametro, Object>() {

				@Override
				public void accept(Parametro parametro, Object username) {
					parametro.setUsername((String)username);
				}

			});
		attributeGetterFunctions.put(
			"password",
			new Function<Parametro, Object>() {

				@Override
				public Object apply(Parametro parametro) {
					return parametro.getPassword();
				}

			});
		attributeSetterBiConsumers.put(
			"password",
			new BiConsumer<Parametro, Object>() {

				@Override
				public void accept(Parametro parametro, Object password) {
					parametro.setPassword((String)password);
				}

			});
		attributeGetterFunctions.put(
			"mittente",
			new Function<Parametro, Object>() {

				@Override
				public Object apply(Parametro parametro) {
					return parametro.getMittente();
				}

			});
		attributeSetterBiConsumers.put(
			"mittente",
			new BiConsumer<Parametro, Object>() {

				@Override
				public void accept(Parametro parametro, Object mittente) {
					parametro.setMittente((String)mittente);
				}

			});
		attributeGetterFunctions.put(
			"nodo",
			new Function<Parametro, Object>() {

				@Override
				public Object apply(Parametro parametro) {
					return parametro.getNodo();
				}

			});
		attributeSetterBiConsumers.put(
			"nodo",
			new BiConsumer<Parametro, Object>() {

				@Override
				public void accept(Parametro parametro, Object nodo) {
					parametro.setNodo((String)nodo);
				}

			});
		attributeGetterFunctions.put(
			"dataConnessione",
			new Function<Parametro, Object>() {

				@Override
				public Object apply(Parametro parametro) {
					return parametro.getDataConnessione();
				}

			});
		attributeSetterBiConsumers.put(
			"dataConnessione",
			new BiConsumer<Parametro, Object>() {

				@Override
				public void accept(
					Parametro parametro, Object dataConnessione) {

					parametro.setDataConnessione((Date)dataConnessione);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _Id;
	}

	@Override
	public void setId(long Id) {
		_Id = Id;
	}

	@JSON
	@Override
	public String getIp() {
		if (_ip == null) {
			return "";
		}
		else {
			return _ip;
		}
	}

	@Override
	public void setIp(String ip) {
		_ip = ip;
	}

	@JSON
	@Override
	public int getPorta() {
		return _porta;
	}

	@Override
	public void setPorta(int porta) {
		_porta = porta;
	}

	@JSON
	@Override
	public String getUsername() {
		if (_username == null) {
			return "";
		}
		else {
			return _username;
		}
	}

	@Override
	public void setUsername(String username) {
		_username = username;
	}

	@JSON
	@Override
	public String getPassword() {
		if (_password == null) {
			return "";
		}
		else {
			return _password;
		}
	}

	@Override
	public void setPassword(String password) {
		_password = password;
	}

	@JSON
	@Override
	public String getMittente() {
		if (_mittente == null) {
			return "";
		}
		else {
			return _mittente;
		}
	}

	@Override
	public void setMittente(String mittente) {
		_mittente = mittente;
	}

	@JSON
	@Override
	public String getNodo() {
		if (_nodo == null) {
			return "";
		}
		else {
			return _nodo;
		}
	}

	@Override
	public void setNodo(String nodo) {
		_columnBitmask |= NODO_COLUMN_BITMASK;

		if (_originalNodo == null) {
			_originalNodo = _nodo;
		}

		_nodo = nodo;
	}

	public String getOriginalNodo() {
		return GetterUtil.getString(_originalNodo);
	}

	@JSON
	@Override
	public Date getDataConnessione() {
		return _dataConnessione;
	}

	@Override
	public void setDataConnessione(Date dataConnessione) {
		_dataConnessione = dataConnessione;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Parametro.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Parametro toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Parametro)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ParametroImpl parametroImpl = new ParametroImpl();

		parametroImpl.setId(getId());
		parametroImpl.setIp(getIp());
		parametroImpl.setPorta(getPorta());
		parametroImpl.setUsername(getUsername());
		parametroImpl.setPassword(getPassword());
		parametroImpl.setMittente(getMittente());
		parametroImpl.setNodo(getNodo());
		parametroImpl.setDataConnessione(getDataConnessione());

		parametroImpl.resetOriginalValues();

		return parametroImpl;
	}

	@Override
	public int compareTo(Parametro parametro) {
		long primaryKey = parametro.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Parametro)) {
			return false;
		}

		Parametro parametro = (Parametro)obj;

		long primaryKey = parametro.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ParametroModelImpl parametroModelImpl = this;

		parametroModelImpl._originalNodo = parametroModelImpl._nodo;

		parametroModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Parametro> toCacheModel() {
		ParametroCacheModel parametroCacheModel = new ParametroCacheModel();

		parametroCacheModel.Id = getId();

		parametroCacheModel.ip = getIp();

		String ip = parametroCacheModel.ip;

		if ((ip != null) && (ip.length() == 0)) {
			parametroCacheModel.ip = null;
		}

		parametroCacheModel.porta = getPorta();

		parametroCacheModel.username = getUsername();

		String username = parametroCacheModel.username;

		if ((username != null) && (username.length() == 0)) {
			parametroCacheModel.username = null;
		}

		parametroCacheModel.password = getPassword();

		String password = parametroCacheModel.password;

		if ((password != null) && (password.length() == 0)) {
			parametroCacheModel.password = null;
		}

		parametroCacheModel.mittente = getMittente();

		String mittente = parametroCacheModel.mittente;

		if ((mittente != null) && (mittente.length() == 0)) {
			parametroCacheModel.mittente = null;
		}

		parametroCacheModel.nodo = getNodo();

		String nodo = parametroCacheModel.nodo;

		if ((nodo != null) && (nodo.length() == 0)) {
			parametroCacheModel.nodo = null;
		}

		Date dataConnessione = getDataConnessione();

		if (dataConnessione != null) {
			parametroCacheModel.dataConnessione = dataConnessione.getTime();
		}
		else {
			parametroCacheModel.dataConnessione = Long.MIN_VALUE;
		}

		return parametroCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Parametro, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Parametro, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Parametro, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Parametro)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Parametro, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Parametro, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Parametro, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Parametro)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		Parametro.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		Parametro.class, ModelWrapper.class
	};

	private long _Id;
	private String _ip;
	private int _porta;
	private String _username;
	private String _password;
	private String _mittente;
	private String _nodo;
	private String _originalNodo;
	private Date _dataConnessione;
	private long _columnBitmask;
	private Parametro _escapedModel;

}