/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.allerta.messages.services.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.allerta.messages.services.model.CounterSms;
import it.eng.allerta.messages.services.model.CounterSmsModel;
import it.eng.allerta.messages.services.model.CounterSmsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CounterSms service. Represents a row in the &quot;smsService_CounterSms&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>CounterSmsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CounterSmsImpl}.
 * </p>
 *
 * @author Giorgianni_F
 * @see CounterSmsImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CounterSmsModelImpl
	extends BaseModelImpl<CounterSms> implements CounterSmsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a counter sms model instance should use the <code>CounterSms</code> interface instead.
	 */
	public static final String TABLE_NAME = "smsService_CounterSms";

	public static final Object[][] TABLE_COLUMNS = {
		{"counterId", Types.BIGINT}, {"date_", Types.TIMESTAMP},
		{"numerosms", Types.INTEGER}, {"nodo", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("counterId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("date_", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("numerosms", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("nodo", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table smsService_CounterSms (counterId LONG not null primary key,date_ DATE null,numerosms INTEGER,nodo VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table smsService_CounterSms";

	public static final String ORDER_BY_JPQL = " ORDER BY counterSms.date ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY smsService_CounterSms.date_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.allerta.messages.services.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.allerta.messages.services.model.CounterSms"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.allerta.messages.services.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.allerta.messages.services.model.CounterSms"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		it.eng.allerta.messages.services.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.it.eng.allerta.messages.services.model.CounterSms"),
		true);

	public static final long DATE_COLUMN_BITMASK = 1L;

	public static final long NODO_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CounterSms toModel(CounterSmsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CounterSms model = new CounterSmsImpl();

		model.setCounterId(soapModel.getCounterId());
		model.setDate(soapModel.getDate());
		model.setNumerosms(soapModel.getNumerosms());
		model.setNodo(soapModel.getNodo());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CounterSms> toModels(CounterSmsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CounterSms> models = new ArrayList<CounterSms>(soapModels.length);

		for (CounterSmsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		it.eng.allerta.messages.services.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.allerta.messages.services.model.CounterSms"));

	public CounterSmsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _counterId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCounterId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _counterId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CounterSms.class;
	}

	@Override
	public String getModelClassName() {
		return CounterSms.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CounterSms, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CounterSms, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CounterSms, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((CounterSms)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CounterSms, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CounterSms, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CounterSms)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CounterSms, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CounterSms, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<CounterSms, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CounterSms, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CounterSms, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<CounterSms, Object>>();
		Map<String, BiConsumer<CounterSms, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<CounterSms, ?>>();

		attributeGetterFunctions.put(
			"counterId",
			new Function<CounterSms, Object>() {

				@Override
				public Object apply(CounterSms counterSms) {
					return counterSms.getCounterId();
				}

			});
		attributeSetterBiConsumers.put(
			"counterId",
			new BiConsumer<CounterSms, Object>() {

				@Override
				public void accept(CounterSms counterSms, Object counterId) {
					counterSms.setCounterId((Long)counterId);
				}

			});
		attributeGetterFunctions.put(
			"date",
			new Function<CounterSms, Object>() {

				@Override
				public Object apply(CounterSms counterSms) {
					return counterSms.getDate();
				}

			});
		attributeSetterBiConsumers.put(
			"date",
			new BiConsumer<CounterSms, Object>() {

				@Override
				public void accept(CounterSms counterSms, Object date) {
					counterSms.setDate((Date)date);
				}

			});
		attributeGetterFunctions.put(
			"numerosms",
			new Function<CounterSms, Object>() {

				@Override
				public Object apply(CounterSms counterSms) {
					return counterSms.getNumerosms();
				}

			});
		attributeSetterBiConsumers.put(
			"numerosms",
			new BiConsumer<CounterSms, Object>() {

				@Override
				public void accept(CounterSms counterSms, Object numerosms) {
					counterSms.setNumerosms((Integer)numerosms);
				}

			});
		attributeGetterFunctions.put(
			"nodo",
			new Function<CounterSms, Object>() {

				@Override
				public Object apply(CounterSms counterSms) {
					return counterSms.getNodo();
				}

			});
		attributeSetterBiConsumers.put(
			"nodo",
			new BiConsumer<CounterSms, Object>() {

				@Override
				public void accept(CounterSms counterSms, Object nodo) {
					counterSms.setNodo((String)nodo);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getCounterId() {
		return _counterId;
	}

	@Override
	public void setCounterId(long counterId) {
		_counterId = counterId;
	}

	@JSON
	@Override
	public Date getDate() {
		return _date;
	}

	@Override
	public void setDate(Date date) {
		_columnBitmask = -1L;

		if (_originalDate == null) {
			_originalDate = _date;
		}

		_date = date;
	}

	public Date getOriginalDate() {
		return _originalDate;
	}

	@JSON
	@Override
	public int getNumerosms() {
		return _numerosms;
	}

	@Override
	public void setNumerosms(int numerosms) {
		_numerosms = numerosms;
	}

	@JSON
	@Override
	public String getNodo() {
		if (_nodo == null) {
			return "";
		}
		else {
			return _nodo;
		}
	}

	@Override
	public void setNodo(String nodo) {
		_columnBitmask |= NODO_COLUMN_BITMASK;

		if (_originalNodo == null) {
			_originalNodo = _nodo;
		}

		_nodo = nodo;
	}

	public String getOriginalNodo() {
		return GetterUtil.getString(_originalNodo);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, CounterSms.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CounterSms toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CounterSms)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CounterSmsImpl counterSmsImpl = new CounterSmsImpl();

		counterSmsImpl.setCounterId(getCounterId());
		counterSmsImpl.setDate(getDate());
		counterSmsImpl.setNumerosms(getNumerosms());
		counterSmsImpl.setNodo(getNodo());

		counterSmsImpl.resetOriginalValues();

		return counterSmsImpl;
	}

	@Override
	public int compareTo(CounterSms counterSms) {
		int value = 0;

		value = DateUtil.compareTo(getDate(), counterSms.getDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CounterSms)) {
			return false;
		}

		CounterSms counterSms = (CounterSms)obj;

		long primaryKey = counterSms.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CounterSmsModelImpl counterSmsModelImpl = this;

		counterSmsModelImpl._originalDate = counterSmsModelImpl._date;

		counterSmsModelImpl._originalNodo = counterSmsModelImpl._nodo;

		counterSmsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CounterSms> toCacheModel() {
		CounterSmsCacheModel counterSmsCacheModel = new CounterSmsCacheModel();

		counterSmsCacheModel.counterId = getCounterId();

		Date date = getDate();

		if (date != null) {
			counterSmsCacheModel.date = date.getTime();
		}
		else {
			counterSmsCacheModel.date = Long.MIN_VALUE;
		}

		counterSmsCacheModel.numerosms = getNumerosms();

		counterSmsCacheModel.nodo = getNodo();

		String nodo = counterSmsCacheModel.nodo;

		if ((nodo != null) && (nodo.length() == 0)) {
			counterSmsCacheModel.nodo = null;
		}

		return counterSmsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CounterSms, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CounterSms, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CounterSms, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((CounterSms)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CounterSms, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CounterSms, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CounterSms, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((CounterSms)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		CounterSms.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		CounterSms.class, ModelWrapper.class
	};

	private long _counterId;
	private Date _date;
	private Date _originalDate;
	private int _numerosms;
	private String _nodo;
	private String _originalNodo;
	private long _columnBitmask;
	private CounterSms _escapedModel;

}