/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.allerter.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.allerter.model.Geografia;
import it.eng.allerter.model.GeografiaModel;
import it.eng.allerter.model.GeografiaSoap;
import it.eng.allerter.service.persistence.GeografiaPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Geografia service. Represents a row in the &quot;ALLERTER_Geografia&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>GeografiaModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GeografiaImpl}.
 * </p>
 *
 * @author GFAVINI
 * @see GeografiaImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class GeografiaModelImpl
	extends BaseModelImpl<Geografia> implements GeografiaModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a geografia model instance should use the <code>Geografia</code> interface instead.
	 */
	public static final String TABLE_NAME = "ALLERTER_Geografia";

	public static final Object[][] TABLE_COLUMNS = {
		{"geografiaId", Types.VARCHAR}, {"tipo", Types.VARCHAR},
		{"area", Types.VARCHAR}, {"complessita", Types.VARCHAR},
		{"geometria", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("geografiaId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tipo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("area", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("complessita", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("geometria", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ALLERTER_Geografia (geografiaId VARCHAR(75) not null,tipo VARCHAR(75) not null,area VARCHAR(75) not null,complessita VARCHAR(75) not null,geometria TEXT null,primary key (geografiaId, tipo, area, complessita))";

	public static final String TABLE_SQL_DROP = "drop table ALLERTER_Geografia";

	public static final String ORDER_BY_JPQL =
		" ORDER BY geografia.id.geografiaId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ALLERTER_Geografia.geografiaId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.allertaer.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.allerter.model.Geografia"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.allertaer.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.allerter.model.Geografia"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		it.eng.allertaer.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.it.eng.allerter.model.Geografia"),
		true);

	public static final long AREA_COLUMN_BITMASK = 1L;

	public static final long COMPLESSITA_COLUMN_BITMASK = 2L;

	public static final long GEOGRAFIAID_COLUMN_BITMASK = 4L;

	public static final long TIPO_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Geografia toModel(GeografiaSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Geografia model = new GeografiaImpl();

		model.setGeografiaId(soapModel.getGeografiaId());
		model.setTipo(soapModel.getTipo());
		model.setArea(soapModel.getArea());
		model.setComplessita(soapModel.getComplessita());
		model.setGeometria(soapModel.getGeometria());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Geografia> toModels(GeografiaSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Geografia> models = new ArrayList<Geografia>(soapModels.length);

		for (GeografiaSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		it.eng.allertaer.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.allerter.model.Geografia"));

	public GeografiaModelImpl() {
	}

	@Override
	public GeografiaPK getPrimaryKey() {
		return new GeografiaPK(_geografiaId, _tipo, _area, _complessita);
	}

	@Override
	public void setPrimaryKey(GeografiaPK primaryKey) {
		setGeografiaId(primaryKey.geografiaId);
		setTipo(primaryKey.tipo);
		setArea(primaryKey.area);
		setComplessita(primaryKey.complessita);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new GeografiaPK(_geografiaId, _tipo, _area, _complessita);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((GeografiaPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Geografia.class;
	}

	@Override
	public String getModelClassName() {
		return Geografia.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Geografia, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Geografia, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Geografia, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Geografia)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Geografia, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Geografia, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Geografia)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Geografia, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Geografia, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Geografia, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Geografia, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Geografia, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Geografia, Object>>();
		Map<String, BiConsumer<Geografia, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Geografia, ?>>();

		attributeGetterFunctions.put(
			"geografiaId",
			new Function<Geografia, Object>() {

				@Override
				public Object apply(Geografia geografia) {
					return geografia.getGeografiaId();
				}

			});
		attributeSetterBiConsumers.put(
			"geografiaId",
			new BiConsumer<Geografia, Object>() {

				@Override
				public void accept(Geografia geografia, Object geografiaId) {
					geografia.setGeografiaId((String)geografiaId);
				}

			});
		attributeGetterFunctions.put(
			"tipo",
			new Function<Geografia, Object>() {

				@Override
				public Object apply(Geografia geografia) {
					return geografia.getTipo();
				}

			});
		attributeSetterBiConsumers.put(
			"tipo",
			new BiConsumer<Geografia, Object>() {

				@Override
				public void accept(Geografia geografia, Object tipo) {
					geografia.setTipo((String)tipo);
				}

			});
		attributeGetterFunctions.put(
			"area",
			new Function<Geografia, Object>() {

				@Override
				public Object apply(Geografia geografia) {
					return geografia.getArea();
				}

			});
		attributeSetterBiConsumers.put(
			"area",
			new BiConsumer<Geografia, Object>() {

				@Override
				public void accept(Geografia geografia, Object area) {
					geografia.setArea((String)area);
				}

			});
		attributeGetterFunctions.put(
			"complessita",
			new Function<Geografia, Object>() {

				@Override
				public Object apply(Geografia geografia) {
					return geografia.getComplessita();
				}

			});
		attributeSetterBiConsumers.put(
			"complessita",
			new BiConsumer<Geografia, Object>() {

				@Override
				public void accept(Geografia geografia, Object complessita) {
					geografia.setComplessita((String)complessita);
				}

			});
		attributeGetterFunctions.put(
			"geometria",
			new Function<Geografia, Object>() {

				@Override
				public Object apply(Geografia geografia) {
					return geografia.getGeometria();
				}

			});
		attributeSetterBiConsumers.put(
			"geometria",
			new BiConsumer<Geografia, Object>() {

				@Override
				public void accept(Geografia geografia, Object geometria) {
					geografia.setGeometria((String)geometria);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getGeografiaId() {
		if (_geografiaId == null) {
			return "";
		}
		else {
			return _geografiaId;
		}
	}

	@Override
	public void setGeografiaId(String geografiaId) {
		_columnBitmask = -1L;

		if (_originalGeografiaId == null) {
			_originalGeografiaId = _geografiaId;
		}

		_geografiaId = geografiaId;
	}

	public String getOriginalGeografiaId() {
		return GetterUtil.getString(_originalGeografiaId);
	}

	@JSON
	@Override
	public String getTipo() {
		if (_tipo == null) {
			return "";
		}
		else {
			return _tipo;
		}
	}

	@Override
	public void setTipo(String tipo) {
		_columnBitmask |= TIPO_COLUMN_BITMASK;

		if (_originalTipo == null) {
			_originalTipo = _tipo;
		}

		_tipo = tipo;
	}

	public String getOriginalTipo() {
		return GetterUtil.getString(_originalTipo);
	}

	@JSON
	@Override
	public String getArea() {
		if (_area == null) {
			return "";
		}
		else {
			return _area;
		}
	}

	@Override
	public void setArea(String area) {
		_columnBitmask |= AREA_COLUMN_BITMASK;

		if (_originalArea == null) {
			_originalArea = _area;
		}

		_area = area;
	}

	public String getOriginalArea() {
		return GetterUtil.getString(_originalArea);
	}

	@JSON
	@Override
	public String getComplessita() {
		if (_complessita == null) {
			return "";
		}
		else {
			return _complessita;
		}
	}

	@Override
	public void setComplessita(String complessita) {
		_columnBitmask |= COMPLESSITA_COLUMN_BITMASK;

		if (_originalComplessita == null) {
			_originalComplessita = _complessita;
		}

		_complessita = complessita;
	}

	public String getOriginalComplessita() {
		return GetterUtil.getString(_originalComplessita);
	}

	@JSON
	@Override
	public String getGeometria() {
		if (_geometria == null) {
			return "";
		}
		else {
			return _geometria;
		}
	}

	@Override
	public void setGeometria(String geometria) {
		_geometria = geometria;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Geografia toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Geografia)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GeografiaImpl geografiaImpl = new GeografiaImpl();

		geografiaImpl.setGeografiaId(getGeografiaId());
		geografiaImpl.setTipo(getTipo());
		geografiaImpl.setArea(getArea());
		geografiaImpl.setComplessita(getComplessita());
		geografiaImpl.setGeometria(getGeometria());

		geografiaImpl.resetOriginalValues();

		return geografiaImpl;
	}

	@Override
	public int compareTo(Geografia geografia) {
		int value = 0;

		value = getGeografiaId().compareTo(geografia.getGeografiaId());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Geografia)) {
			return false;
		}

		Geografia geografia = (Geografia)obj;

		GeografiaPK primaryKey = geografia.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		GeografiaModelImpl geografiaModelImpl = this;

		geografiaModelImpl._originalGeografiaId =
			geografiaModelImpl._geografiaId;

		geografiaModelImpl._originalTipo = geografiaModelImpl._tipo;

		geografiaModelImpl._originalArea = geografiaModelImpl._area;

		geografiaModelImpl._originalComplessita =
			geografiaModelImpl._complessita;

		geografiaModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Geografia> toCacheModel() {
		GeografiaCacheModel geografiaCacheModel = new GeografiaCacheModel();

		geografiaCacheModel.geografiaPK = getPrimaryKey();

		geografiaCacheModel.geografiaId = getGeografiaId();

		String geografiaId = geografiaCacheModel.geografiaId;

		if ((geografiaId != null) && (geografiaId.length() == 0)) {
			geografiaCacheModel.geografiaId = null;
		}

		geografiaCacheModel.tipo = getTipo();

		String tipo = geografiaCacheModel.tipo;

		if ((tipo != null) && (tipo.length() == 0)) {
			geografiaCacheModel.tipo = null;
		}

		geografiaCacheModel.area = getArea();

		String area = geografiaCacheModel.area;

		if ((area != null) && (area.length() == 0)) {
			geografiaCacheModel.area = null;
		}

		geografiaCacheModel.complessita = getComplessita();

		String complessita = geografiaCacheModel.complessita;

		if ((complessita != null) && (complessita.length() == 0)) {
			geografiaCacheModel.complessita = null;
		}

		geografiaCacheModel.geometria = getGeometria();

		String geometria = geografiaCacheModel.geometria;

		if ((geometria != null) && (geometria.length() == 0)) {
			geografiaCacheModel.geometria = null;
		}

		return geografiaCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Geografia, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Geografia, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Geografia, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Geografia)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Geografia, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Geografia, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Geografia, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Geografia)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		Geografia.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		Geografia.class, ModelWrapper.class
	};

	private String _geografiaId;
	private String _originalGeografiaId;
	private String _tipo;
	private String _originalTipo;
	private String _area;
	private String _originalArea;
	private String _complessita;
	private String _originalComplessita;
	private String _geometria;
	private long _columnBitmask;
	private Geografia _escapedModel;

}