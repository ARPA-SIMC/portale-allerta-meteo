/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.allerter.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.allerter.model.LogInterno;
import it.eng.allerter.model.LogInternoModel;
import it.eng.allerter.model.LogInternoSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the LogInterno service. Represents a row in the &quot;ALLERTER_LogInterno&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>LogInternoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LogInternoImpl}.
 * </p>
 *
 * @author GFAVINI
 * @see LogInternoImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class LogInternoModelImpl
	extends BaseModelImpl<LogInterno> implements LogInternoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a log interno model instance should use the <code>LogInterno</code> interface instead.
	 */
	public static final String TABLE_NAME = "ALLERTER_LogInterno";

	public static final Object[][] TABLE_COLUMNS = {
		{"logId", Types.BIGINT}, {"timestamp", Types.TIMESTAMP},
		{"thread", Types.VARCHAR}, {"cosa", Types.VARCHAR},
		{"dettaglio", Types.VARCHAR}, {"utente", Types.VARCHAR},
		{"risultato", Types.VARCHAR}, {"eccezione", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("logId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("timestamp", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("thread", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cosa", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dettaglio", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("utente", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("risultato", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eccezione", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ALLERTER_LogInterno (logId LONG not null primary key,timestamp DATE null,thread VARCHAR(128) null,cosa VARCHAR(128) null,dettaglio VARCHAR(256) null,utente VARCHAR(75) null,risultato TEXT null,eccezione TEXT null)";

	public static final String TABLE_SQL_DROP =
		"drop table ALLERTER_LogInterno";

	public static final String ORDER_BY_JPQL =
		" ORDER BY logInterno.timestamp DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ALLERTER_LogInterno.timestamp DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.allertaer.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.allerter.model.LogInterno"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.allertaer.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.allerter.model.LogInterno"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LogInterno toModel(LogInternoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LogInterno model = new LogInternoImpl();

		model.setLogId(soapModel.getLogId());
		model.setTimestamp(soapModel.getTimestamp());
		model.setThread(soapModel.getThread());
		model.setCosa(soapModel.getCosa());
		model.setDettaglio(soapModel.getDettaglio());
		model.setUtente(soapModel.getUtente());
		model.setRisultato(soapModel.getRisultato());
		model.setEccezione(soapModel.getEccezione());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LogInterno> toModels(LogInternoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LogInterno> models = new ArrayList<LogInterno>(soapModels.length);

		for (LogInternoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		it.eng.allertaer.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.allerter.model.LogInterno"));

	public LogInternoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _logId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLogId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _logId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LogInterno.class;
	}

	@Override
	public String getModelClassName() {
		return LogInterno.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<LogInterno, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<LogInterno, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LogInterno, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((LogInterno)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<LogInterno, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<LogInterno, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(LogInterno)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<LogInterno, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<LogInterno, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<LogInterno, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<LogInterno, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<LogInterno, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<LogInterno, Object>>();
		Map<String, BiConsumer<LogInterno, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<LogInterno, ?>>();

		attributeGetterFunctions.put(
			"logId",
			new Function<LogInterno, Object>() {

				@Override
				public Object apply(LogInterno logInterno) {
					return logInterno.getLogId();
				}

			});
		attributeSetterBiConsumers.put(
			"logId",
			new BiConsumer<LogInterno, Object>() {

				@Override
				public void accept(LogInterno logInterno, Object logId) {
					logInterno.setLogId((Long)logId);
				}

			});
		attributeGetterFunctions.put(
			"timestamp",
			new Function<LogInterno, Object>() {

				@Override
				public Object apply(LogInterno logInterno) {
					return logInterno.getTimestamp();
				}

			});
		attributeSetterBiConsumers.put(
			"timestamp",
			new BiConsumer<LogInterno, Object>() {

				@Override
				public void accept(LogInterno logInterno, Object timestamp) {
					logInterno.setTimestamp((Date)timestamp);
				}

			});
		attributeGetterFunctions.put(
			"thread",
			new Function<LogInterno, Object>() {

				@Override
				public Object apply(LogInterno logInterno) {
					return logInterno.getThread();
				}

			});
		attributeSetterBiConsumers.put(
			"thread",
			new BiConsumer<LogInterno, Object>() {

				@Override
				public void accept(LogInterno logInterno, Object thread) {
					logInterno.setThread((String)thread);
				}

			});
		attributeGetterFunctions.put(
			"cosa",
			new Function<LogInterno, Object>() {

				@Override
				public Object apply(LogInterno logInterno) {
					return logInterno.getCosa();
				}

			});
		attributeSetterBiConsumers.put(
			"cosa",
			new BiConsumer<LogInterno, Object>() {

				@Override
				public void accept(LogInterno logInterno, Object cosa) {
					logInterno.setCosa((String)cosa);
				}

			});
		attributeGetterFunctions.put(
			"dettaglio",
			new Function<LogInterno, Object>() {

				@Override
				public Object apply(LogInterno logInterno) {
					return logInterno.getDettaglio();
				}

			});
		attributeSetterBiConsumers.put(
			"dettaglio",
			new BiConsumer<LogInterno, Object>() {

				@Override
				public void accept(LogInterno logInterno, Object dettaglio) {
					logInterno.setDettaglio((String)dettaglio);
				}

			});
		attributeGetterFunctions.put(
			"utente",
			new Function<LogInterno, Object>() {

				@Override
				public Object apply(LogInterno logInterno) {
					return logInterno.getUtente();
				}

			});
		attributeSetterBiConsumers.put(
			"utente",
			new BiConsumer<LogInterno, Object>() {

				@Override
				public void accept(LogInterno logInterno, Object utente) {
					logInterno.setUtente((String)utente);
				}

			});
		attributeGetterFunctions.put(
			"risultato",
			new Function<LogInterno, Object>() {

				@Override
				public Object apply(LogInterno logInterno) {
					return logInterno.getRisultato();
				}

			});
		attributeSetterBiConsumers.put(
			"risultato",
			new BiConsumer<LogInterno, Object>() {

				@Override
				public void accept(LogInterno logInterno, Object risultato) {
					logInterno.setRisultato((String)risultato);
				}

			});
		attributeGetterFunctions.put(
			"eccezione",
			new Function<LogInterno, Object>() {

				@Override
				public Object apply(LogInterno logInterno) {
					return logInterno.getEccezione();
				}

			});
		attributeSetterBiConsumers.put(
			"eccezione",
			new BiConsumer<LogInterno, Object>() {

				@Override
				public void accept(LogInterno logInterno, Object eccezione) {
					logInterno.setEccezione((String)eccezione);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getLogId() {
		return _logId;
	}

	@Override
	public void setLogId(long logId) {
		_logId = logId;
	}

	@JSON
	@Override
	public Date getTimestamp() {
		return _timestamp;
	}

	@Override
	public void setTimestamp(Date timestamp) {
		_timestamp = timestamp;
	}

	@JSON
	@Override
	public String getThread() {
		if (_thread == null) {
			return "";
		}
		else {
			return _thread;
		}
	}

	@Override
	public void setThread(String thread) {
		_thread = thread;
	}

	@JSON
	@Override
	public String getCosa() {
		if (_cosa == null) {
			return "";
		}
		else {
			return _cosa;
		}
	}

	@Override
	public void setCosa(String cosa) {
		_cosa = cosa;
	}

	@JSON
	@Override
	public String getDettaglio() {
		if (_dettaglio == null) {
			return "";
		}
		else {
			return _dettaglio;
		}
	}

	@Override
	public void setDettaglio(String dettaglio) {
		_dettaglio = dettaglio;
	}

	@JSON
	@Override
	public String getUtente() {
		if (_utente == null) {
			return "";
		}
		else {
			return _utente;
		}
	}

	@Override
	public void setUtente(String utente) {
		_utente = utente;
	}

	@JSON
	@Override
	public String getRisultato() {
		if (_risultato == null) {
			return "";
		}
		else {
			return _risultato;
		}
	}

	@Override
	public void setRisultato(String risultato) {
		_risultato = risultato;
	}

	@JSON
	@Override
	public String getEccezione() {
		if (_eccezione == null) {
			return "";
		}
		else {
			return _eccezione;
		}
	}

	@Override
	public void setEccezione(String eccezione) {
		_eccezione = eccezione;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, LogInterno.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LogInterno toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LogInterno)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LogInternoImpl logInternoImpl = new LogInternoImpl();

		logInternoImpl.setLogId(getLogId());
		logInternoImpl.setTimestamp(getTimestamp());
		logInternoImpl.setThread(getThread());
		logInternoImpl.setCosa(getCosa());
		logInternoImpl.setDettaglio(getDettaglio());
		logInternoImpl.setUtente(getUtente());
		logInternoImpl.setRisultato(getRisultato());
		logInternoImpl.setEccezione(getEccezione());

		logInternoImpl.resetOriginalValues();

		return logInternoImpl;
	}

	@Override
	public int compareTo(LogInterno logInterno) {
		int value = 0;

		value = DateUtil.compareTo(getTimestamp(), logInterno.getTimestamp());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LogInterno)) {
			return false;
		}

		LogInterno logInterno = (LogInterno)obj;

		long primaryKey = logInterno.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<LogInterno> toCacheModel() {
		LogInternoCacheModel logInternoCacheModel = new LogInternoCacheModel();

		logInternoCacheModel.logId = getLogId();

		Date timestamp = getTimestamp();

		if (timestamp != null) {
			logInternoCacheModel.timestamp = timestamp.getTime();
		}
		else {
			logInternoCacheModel.timestamp = Long.MIN_VALUE;
		}

		logInternoCacheModel.thread = getThread();

		String thread = logInternoCacheModel.thread;

		if ((thread != null) && (thread.length() == 0)) {
			logInternoCacheModel.thread = null;
		}

		logInternoCacheModel.cosa = getCosa();

		String cosa = logInternoCacheModel.cosa;

		if ((cosa != null) && (cosa.length() == 0)) {
			logInternoCacheModel.cosa = null;
		}

		logInternoCacheModel.dettaglio = getDettaglio();

		String dettaglio = logInternoCacheModel.dettaglio;

		if ((dettaglio != null) && (dettaglio.length() == 0)) {
			logInternoCacheModel.dettaglio = null;
		}

		logInternoCacheModel.utente = getUtente();

		String utente = logInternoCacheModel.utente;

		if ((utente != null) && (utente.length() == 0)) {
			logInternoCacheModel.utente = null;
		}

		logInternoCacheModel.risultato = getRisultato();

		String risultato = logInternoCacheModel.risultato;

		if ((risultato != null) && (risultato.length() == 0)) {
			logInternoCacheModel.risultato = null;
		}

		logInternoCacheModel.eccezione = getEccezione();

		String eccezione = logInternoCacheModel.eccezione;

		if ((eccezione != null) && (eccezione.length() == 0)) {
			logInternoCacheModel.eccezione = null;
		}

		return logInternoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<LogInterno, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<LogInterno, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LogInterno, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((LogInterno)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<LogInterno, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<LogInterno, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LogInterno, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((LogInterno)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		LogInterno.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		LogInterno.class, ModelWrapper.class
	};

	private long _logId;
	private Date _timestamp;
	private String _thread;
	private String _cosa;
	private String _dettaglio;
	private String _utente;
	private String _risultato;
	private String _eccezione;
	private LogInterno _escapedModel;

}