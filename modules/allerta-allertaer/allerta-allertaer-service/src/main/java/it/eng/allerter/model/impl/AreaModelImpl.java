/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.allerter.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.allerter.model.Area;
import it.eng.allerter.model.AreaModel;
import it.eng.allerter.model.AreaSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Area service. Represents a row in the &quot;ALLERTER_Area&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>AreaModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AreaImpl}.
 * </p>
 *
 * @author GFAVINI
 * @see AreaImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class AreaModelImpl extends BaseModelImpl<Area> implements AreaModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a area model instance should use the <code>Area</code> interface instead.
	 */
	public static final String TABLE_NAME = "ALLERTER_Area";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"areaId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"nome", Types.VARCHAR}, {"tipoArea", Types.VARCHAR},
		{"costiero", Types.BOOLEAN}, {"dataInizio", Types.TIMESTAMP},
		{"dataFine", Types.TIMESTAMP}, {"parentId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("areaId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nome", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tipoArea", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("costiero", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("dataInizio", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dataFine", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("parentId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ALLERTER_Area (uuid_ VARCHAR(75) null,areaId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,nome VARCHAR(75) null,tipoArea VARCHAR(75) null,costiero BOOLEAN,dataInizio DATE null,dataFine DATE null,parentId LONG)";

	public static final String TABLE_SQL_DROP = "drop table ALLERTER_Area";

	public static final String ORDER_BY_JPQL = " ORDER BY area.nome ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ALLERTER_Area.nome ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.allertaer.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.allerter.model.Area"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.allertaer.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.allerter.model.Area"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		it.eng.allertaer.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.it.eng.allerter.model.Area"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long NOME_COLUMN_BITMASK = 4L;

	public static final long TIPOAREA_COLUMN_BITMASK = 8L;

	public static final long UUID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Area toModel(AreaSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Area model = new AreaImpl();

		model.setUuid(soapModel.getUuid());
		model.setAreaId(soapModel.getAreaId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setNome(soapModel.getNome());
		model.setTipoArea(soapModel.getTipoArea());
		model.setCostiero(soapModel.isCostiero());
		model.setDataInizio(soapModel.getDataInizio());
		model.setDataFine(soapModel.getDataFine());
		model.setParentId(soapModel.getParentId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Area> toModels(AreaSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Area> models = new ArrayList<Area>(soapModels.length);

		for (AreaSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		it.eng.allertaer.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.allerter.model.Area"));

	public AreaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _areaId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAreaId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _areaId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Area.class;
	}

	@Override
	public String getModelClassName() {
		return Area.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Area, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Area, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Area, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Area)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Area, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Area, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Area)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Area, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Area, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Area, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Area, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Area, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Area, Object>>();
		Map<String, BiConsumer<Area, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Area, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<Area, Object>() {

				@Override
				public Object apply(Area area) {
					return area.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<Area, Object>() {

				@Override
				public void accept(Area area, Object uuid) {
					area.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"areaId",
			new Function<Area, Object>() {

				@Override
				public Object apply(Area area) {
					return area.getAreaId();
				}

			});
		attributeSetterBiConsumers.put(
			"areaId",
			new BiConsumer<Area, Object>() {

				@Override
				public void accept(Area area, Object areaId) {
					area.setAreaId((Long)areaId);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<Area, Object>() {

				@Override
				public Object apply(Area area) {
					return area.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<Area, Object>() {

				@Override
				public void accept(Area area, Object groupId) {
					area.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<Area, Object>() {

				@Override
				public Object apply(Area area) {
					return area.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<Area, Object>() {

				@Override
				public void accept(Area area, Object companyId) {
					area.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<Area, Object>() {

				@Override
				public Object apply(Area area) {
					return area.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<Area, Object>() {

				@Override
				public void accept(Area area, Object userId) {
					area.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<Area, Object>() {

				@Override
				public Object apply(Area area) {
					return area.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<Area, Object>() {

				@Override
				public void accept(Area area, Object userName) {
					area.setUserName((String)userName);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<Area, Object>() {

				@Override
				public Object apply(Area area) {
					return area.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<Area, Object>() {

				@Override
				public void accept(Area area, Object createDate) {
					area.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<Area, Object>() {

				@Override
				public Object apply(Area area) {
					return area.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<Area, Object>() {

				@Override
				public void accept(Area area, Object modifiedDate) {
					area.setModifiedDate((Date)modifiedDate);
				}

			});
		attributeGetterFunctions.put(
			"nome",
			new Function<Area, Object>() {

				@Override
				public Object apply(Area area) {
					return area.getNome();
				}

			});
		attributeSetterBiConsumers.put(
			"nome",
			new BiConsumer<Area, Object>() {

				@Override
				public void accept(Area area, Object nome) {
					area.setNome((String)nome);
				}

			});
		attributeGetterFunctions.put(
			"tipoArea",
			new Function<Area, Object>() {

				@Override
				public Object apply(Area area) {
					return area.getTipoArea();
				}

			});
		attributeSetterBiConsumers.put(
			"tipoArea",
			new BiConsumer<Area, Object>() {

				@Override
				public void accept(Area area, Object tipoArea) {
					area.setTipoArea((String)tipoArea);
				}

			});
		attributeGetterFunctions.put(
			"costiero",
			new Function<Area, Object>() {

				@Override
				public Object apply(Area area) {
					return area.getCostiero();
				}

			});
		attributeSetterBiConsumers.put(
			"costiero",
			new BiConsumer<Area, Object>() {

				@Override
				public void accept(Area area, Object costiero) {
					area.setCostiero((Boolean)costiero);
				}

			});
		attributeGetterFunctions.put(
			"dataInizio",
			new Function<Area, Object>() {

				@Override
				public Object apply(Area area) {
					return area.getDataInizio();
				}

			});
		attributeSetterBiConsumers.put(
			"dataInizio",
			new BiConsumer<Area, Object>() {

				@Override
				public void accept(Area area, Object dataInizio) {
					area.setDataInizio((Date)dataInizio);
				}

			});
		attributeGetterFunctions.put(
			"dataFine",
			new Function<Area, Object>() {

				@Override
				public Object apply(Area area) {
					return area.getDataFine();
				}

			});
		attributeSetterBiConsumers.put(
			"dataFine",
			new BiConsumer<Area, Object>() {

				@Override
				public void accept(Area area, Object dataFine) {
					area.setDataFine((Date)dataFine);
				}

			});
		attributeGetterFunctions.put(
			"parentId",
			new Function<Area, Object>() {

				@Override
				public Object apply(Area area) {
					return area.getParentId();
				}

			});
		attributeSetterBiConsumers.put(
			"parentId",
			new BiConsumer<Area, Object>() {

				@Override
				public void accept(Area area, Object parentId) {
					area.setParentId((Long)parentId);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getAreaId() {
		return _areaId;
	}

	@Override
	public void setAreaId(long areaId) {
		_areaId = areaId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getNome() {
		if (_nome == null) {
			return "";
		}
		else {
			return _nome;
		}
	}

	@Override
	public void setNome(String nome) {
		_columnBitmask = -1L;

		if (_originalNome == null) {
			_originalNome = _nome;
		}

		_nome = nome;
	}

	public String getOriginalNome() {
		return GetterUtil.getString(_originalNome);
	}

	@JSON
	@Override
	public String getTipoArea() {
		if (_tipoArea == null) {
			return "";
		}
		else {
			return _tipoArea;
		}
	}

	@Override
	public void setTipoArea(String tipoArea) {
		_columnBitmask |= TIPOAREA_COLUMN_BITMASK;

		if (_originalTipoArea == null) {
			_originalTipoArea = _tipoArea;
		}

		_tipoArea = tipoArea;
	}

	public String getOriginalTipoArea() {
		return GetterUtil.getString(_originalTipoArea);
	}

	@JSON
	@Override
	public boolean getCostiero() {
		return _costiero;
	}

	@JSON
	@Override
	public boolean isCostiero() {
		return _costiero;
	}

	@Override
	public void setCostiero(boolean costiero) {
		_costiero = costiero;
	}

	@JSON
	@Override
	public Date getDataInizio() {
		return _dataInizio;
	}

	@Override
	public void setDataInizio(Date dataInizio) {
		_dataInizio = dataInizio;
	}

	@JSON
	@Override
	public Date getDataFine() {
		return _dataFine;
	}

	@Override
	public void setDataFine(Date dataFine) {
		_dataFine = dataFine;
	}

	@JSON
	@Override
	public long getParentId() {
		return _parentId;
	}

	@Override
	public void setParentId(long parentId) {
		_parentId = parentId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Area.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Area.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Area toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Area)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AreaImpl areaImpl = new AreaImpl();

		areaImpl.setUuid(getUuid());
		areaImpl.setAreaId(getAreaId());
		areaImpl.setGroupId(getGroupId());
		areaImpl.setCompanyId(getCompanyId());
		areaImpl.setUserId(getUserId());
		areaImpl.setUserName(getUserName());
		areaImpl.setCreateDate(getCreateDate());
		areaImpl.setModifiedDate(getModifiedDate());
		areaImpl.setNome(getNome());
		areaImpl.setTipoArea(getTipoArea());
		areaImpl.setCostiero(isCostiero());
		areaImpl.setDataInizio(getDataInizio());
		areaImpl.setDataFine(getDataFine());
		areaImpl.setParentId(getParentId());

		areaImpl.resetOriginalValues();

		return areaImpl;
	}

	@Override
	public int compareTo(Area area) {
		int value = 0;

		value = getNome().compareTo(area.getNome());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Area)) {
			return false;
		}

		Area area = (Area)obj;

		long primaryKey = area.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		AreaModelImpl areaModelImpl = this;

		areaModelImpl._originalUuid = areaModelImpl._uuid;

		areaModelImpl._originalGroupId = areaModelImpl._groupId;

		areaModelImpl._setOriginalGroupId = false;

		areaModelImpl._originalCompanyId = areaModelImpl._companyId;

		areaModelImpl._setOriginalCompanyId = false;

		areaModelImpl._setModifiedDate = false;

		areaModelImpl._originalNome = areaModelImpl._nome;

		areaModelImpl._originalTipoArea = areaModelImpl._tipoArea;

		areaModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Area> toCacheModel() {
		AreaCacheModel areaCacheModel = new AreaCacheModel();

		areaCacheModel.uuid = getUuid();

		String uuid = areaCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			areaCacheModel.uuid = null;
		}

		areaCacheModel.areaId = getAreaId();

		areaCacheModel.groupId = getGroupId();

		areaCacheModel.companyId = getCompanyId();

		areaCacheModel.userId = getUserId();

		areaCacheModel.userName = getUserName();

		String userName = areaCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			areaCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			areaCacheModel.createDate = createDate.getTime();
		}
		else {
			areaCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			areaCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			areaCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		areaCacheModel.nome = getNome();

		String nome = areaCacheModel.nome;

		if ((nome != null) && (nome.length() == 0)) {
			areaCacheModel.nome = null;
		}

		areaCacheModel.tipoArea = getTipoArea();

		String tipoArea = areaCacheModel.tipoArea;

		if ((tipoArea != null) && (tipoArea.length() == 0)) {
			areaCacheModel.tipoArea = null;
		}

		areaCacheModel.costiero = isCostiero();

		Date dataInizio = getDataInizio();

		if (dataInizio != null) {
			areaCacheModel.dataInizio = dataInizio.getTime();
		}
		else {
			areaCacheModel.dataInizio = Long.MIN_VALUE;
		}

		Date dataFine = getDataFine();

		if (dataFine != null) {
			areaCacheModel.dataFine = dataFine.getTime();
		}
		else {
			areaCacheModel.dataFine = Long.MIN_VALUE;
		}

		areaCacheModel.parentId = getParentId();

		return areaCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Area, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Area, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Area, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Area)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Area, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Area, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Area, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Area)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Area.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		Area.class, ModelWrapper.class
	};

	private String _uuid;
	private String _originalUuid;
	private long _areaId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _nome;
	private String _originalNome;
	private String _tipoArea;
	private String _originalTipoArea;
	private boolean _costiero;
	private Date _dataInizio;
	private Date _dataFine;
	private long _parentId;
	private long _columnBitmask;
	private Area _escapedModel;

}