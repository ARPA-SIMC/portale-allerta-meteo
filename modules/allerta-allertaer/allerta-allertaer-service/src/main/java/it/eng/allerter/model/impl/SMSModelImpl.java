/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.allerter.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.allerter.model.SMS;
import it.eng.allerter.model.SMSModel;
import it.eng.allerter.model.SMSSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the SMS service. Represents a row in the &quot;ALLERTER_SMS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>SMSModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SMSImpl}.
 * </p>
 *
 * @author GFAVINI
 * @see SMSImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class SMSModelImpl extends BaseModelImpl<SMS> implements SMSModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sms model instance should use the <code>SMS</code> interface instead.
	 */
	public static final String TABLE_NAME = "ALLERTER_SMS";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"tipo", Types.VARCHAR},
		{"sottotipo", Types.VARCHAR}, {"param", Types.BIGINT},
		{"testo", Types.VARCHAR}, {"destinatario", Types.BIGINT},
		{"numeroDa", Types.VARCHAR}, {"numero", Types.VARCHAR},
		{"nomeDestinatario", Types.VARCHAR}, {"stato", Types.BIGINT},
		{"dataInvio", Types.TIMESTAMP}, {"dataAck", Types.TIMESTAMP},
		{"dataRicevuta", Types.TIMESTAMP}, {"tentativi", Types.BIGINT},
		{"prossimoInvio", Types.TIMESTAMP}, {"codiceErrore", Types.VARCHAR},
		{"descrizioneErrore", Types.VARCHAR}, {"timestamp", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tipo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sottotipo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("param", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("testo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("destinatario", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("numeroDa", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numero", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nomeDestinatario", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stato", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataInvio", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dataAck", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dataRicevuta", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("tentativi", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("prossimoInvio", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("codiceErrore", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("descrizioneErrore", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("timestamp", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ALLERTER_SMS (id_ LONG not null primary key,tipo VARCHAR(75) null,sottotipo VARCHAR(75) null,param LONG,testo VARCHAR(160) null,destinatario LONG,numeroDa VARCHAR(75) null,numero VARCHAR(75) null,nomeDestinatario VARCHAR(75) null,stato LONG,dataInvio DATE null,dataAck DATE null,dataRicevuta DATE null,tentativi LONG,prossimoInvio DATE null,codiceErrore VARCHAR(75) null,descrizioneErrore VARCHAR(200) null,timestamp VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table ALLERTER_SMS";

	public static final String ORDER_BY_JPQL = " ORDER BY sms.id DESC";

	public static final String ORDER_BY_SQL = " ORDER BY ALLERTER_SMS.id_ DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.allertaer.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.allerter.model.SMS"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.allertaer.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.allerter.model.SMS"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		it.eng.allertaer.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.it.eng.allerter.model.SMS"),
		true);

	public static final long DATAACK_COLUMN_BITMASK = 1L;

	public static final long DESTINATARIO_COLUMN_BITMASK = 2L;

	public static final long NUMERO_COLUMN_BITMASK = 4L;

	public static final long PARAM_COLUMN_BITMASK = 8L;

	public static final long SOTTOTIPO_COLUMN_BITMASK = 16L;

	public static final long TIMESTAMP_COLUMN_BITMASK = 32L;

	public static final long TIPO_COLUMN_BITMASK = 64L;

	public static final long ID_COLUMN_BITMASK = 128L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SMS toModel(SMSSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SMS model = new SMSImpl();

		model.setId(soapModel.getId());
		model.setTipo(soapModel.getTipo());
		model.setSottotipo(soapModel.getSottotipo());
		model.setParam(soapModel.getParam());
		model.setTesto(soapModel.getTesto());
		model.setDestinatario(soapModel.getDestinatario());
		model.setNumeroDa(soapModel.getNumeroDa());
		model.setNumero(soapModel.getNumero());
		model.setNomeDestinatario(soapModel.getNomeDestinatario());
		model.setStato(soapModel.getStato());
		model.setDataInvio(soapModel.getDataInvio());
		model.setDataAck(soapModel.getDataAck());
		model.setDataRicevuta(soapModel.getDataRicevuta());
		model.setTentativi(soapModel.getTentativi());
		model.setProssimoInvio(soapModel.getProssimoInvio());
		model.setCodiceErrore(soapModel.getCodiceErrore());
		model.setDescrizioneErrore(soapModel.getDescrizioneErrore());
		model.setTimestamp(soapModel.getTimestamp());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SMS> toModels(SMSSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SMS> models = new ArrayList<SMS>(soapModels.length);

		for (SMSSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		it.eng.allertaer.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.allerter.model.SMS"));

	public SMSModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SMS.class;
	}

	@Override
	public String getModelClassName() {
		return SMS.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<SMS, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<SMS, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SMS, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((SMS)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<SMS, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SMS, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((SMS)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<SMS, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<SMS, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<SMS, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<SMS, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<SMS, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<SMS, Object>>();
		Map<String, BiConsumer<SMS, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<SMS, ?>>();

		attributeGetterFunctions.put(
			"id",
			new Function<SMS, Object>() {

				@Override
				public Object apply(SMS sms) {
					return sms.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<SMS, Object>() {

				@Override
				public void accept(SMS sms, Object id) {
					sms.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"tipo",
			new Function<SMS, Object>() {

				@Override
				public Object apply(SMS sms) {
					return sms.getTipo();
				}

			});
		attributeSetterBiConsumers.put(
			"tipo",
			new BiConsumer<SMS, Object>() {

				@Override
				public void accept(SMS sms, Object tipo) {
					sms.setTipo((String)tipo);
				}

			});
		attributeGetterFunctions.put(
			"sottotipo",
			new Function<SMS, Object>() {

				@Override
				public Object apply(SMS sms) {
					return sms.getSottotipo();
				}

			});
		attributeSetterBiConsumers.put(
			"sottotipo",
			new BiConsumer<SMS, Object>() {

				@Override
				public void accept(SMS sms, Object sottotipo) {
					sms.setSottotipo((String)sottotipo);
				}

			});
		attributeGetterFunctions.put(
			"param",
			new Function<SMS, Object>() {

				@Override
				public Object apply(SMS sms) {
					return sms.getParam();
				}

			});
		attributeSetterBiConsumers.put(
			"param",
			new BiConsumer<SMS, Object>() {

				@Override
				public void accept(SMS sms, Object param) {
					sms.setParam((Long)param);
				}

			});
		attributeGetterFunctions.put(
			"testo",
			new Function<SMS, Object>() {

				@Override
				public Object apply(SMS sms) {
					return sms.getTesto();
				}

			});
		attributeSetterBiConsumers.put(
			"testo",
			new BiConsumer<SMS, Object>() {

				@Override
				public void accept(SMS sms, Object testo) {
					sms.setTesto((String)testo);
				}

			});
		attributeGetterFunctions.put(
			"destinatario",
			new Function<SMS, Object>() {

				@Override
				public Object apply(SMS sms) {
					return sms.getDestinatario();
				}

			});
		attributeSetterBiConsumers.put(
			"destinatario",
			new BiConsumer<SMS, Object>() {

				@Override
				public void accept(SMS sms, Object destinatario) {
					sms.setDestinatario((Long)destinatario);
				}

			});
		attributeGetterFunctions.put(
			"numeroDa",
			new Function<SMS, Object>() {

				@Override
				public Object apply(SMS sms) {
					return sms.getNumeroDa();
				}

			});
		attributeSetterBiConsumers.put(
			"numeroDa",
			new BiConsumer<SMS, Object>() {

				@Override
				public void accept(SMS sms, Object numeroDa) {
					sms.setNumeroDa((String)numeroDa);
				}

			});
		attributeGetterFunctions.put(
			"numero",
			new Function<SMS, Object>() {

				@Override
				public Object apply(SMS sms) {
					return sms.getNumero();
				}

			});
		attributeSetterBiConsumers.put(
			"numero",
			new BiConsumer<SMS, Object>() {

				@Override
				public void accept(SMS sms, Object numero) {
					sms.setNumero((String)numero);
				}

			});
		attributeGetterFunctions.put(
			"nomeDestinatario",
			new Function<SMS, Object>() {

				@Override
				public Object apply(SMS sms) {
					return sms.getNomeDestinatario();
				}

			});
		attributeSetterBiConsumers.put(
			"nomeDestinatario",
			new BiConsumer<SMS, Object>() {

				@Override
				public void accept(SMS sms, Object nomeDestinatario) {
					sms.setNomeDestinatario((String)nomeDestinatario);
				}

			});
		attributeGetterFunctions.put(
			"stato",
			new Function<SMS, Object>() {

				@Override
				public Object apply(SMS sms) {
					return sms.getStato();
				}

			});
		attributeSetterBiConsumers.put(
			"stato",
			new BiConsumer<SMS, Object>() {

				@Override
				public void accept(SMS sms, Object stato) {
					sms.setStato((Long)stato);
				}

			});
		attributeGetterFunctions.put(
			"dataInvio",
			new Function<SMS, Object>() {

				@Override
				public Object apply(SMS sms) {
					return sms.getDataInvio();
				}

			});
		attributeSetterBiConsumers.put(
			"dataInvio",
			new BiConsumer<SMS, Object>() {

				@Override
				public void accept(SMS sms, Object dataInvio) {
					sms.setDataInvio((Date)dataInvio);
				}

			});
		attributeGetterFunctions.put(
			"dataAck",
			new Function<SMS, Object>() {

				@Override
				public Object apply(SMS sms) {
					return sms.getDataAck();
				}

			});
		attributeSetterBiConsumers.put(
			"dataAck",
			new BiConsumer<SMS, Object>() {

				@Override
				public void accept(SMS sms, Object dataAck) {
					sms.setDataAck((Date)dataAck);
				}

			});
		attributeGetterFunctions.put(
			"dataRicevuta",
			new Function<SMS, Object>() {

				@Override
				public Object apply(SMS sms) {
					return sms.getDataRicevuta();
				}

			});
		attributeSetterBiConsumers.put(
			"dataRicevuta",
			new BiConsumer<SMS, Object>() {

				@Override
				public void accept(SMS sms, Object dataRicevuta) {
					sms.setDataRicevuta((Date)dataRicevuta);
				}

			});
		attributeGetterFunctions.put(
			"tentativi",
			new Function<SMS, Object>() {

				@Override
				public Object apply(SMS sms) {
					return sms.getTentativi();
				}

			});
		attributeSetterBiConsumers.put(
			"tentativi",
			new BiConsumer<SMS, Object>() {

				@Override
				public void accept(SMS sms, Object tentativi) {
					sms.setTentativi((Long)tentativi);
				}

			});
		attributeGetterFunctions.put(
			"prossimoInvio",
			new Function<SMS, Object>() {

				@Override
				public Object apply(SMS sms) {
					return sms.getProssimoInvio();
				}

			});
		attributeSetterBiConsumers.put(
			"prossimoInvio",
			new BiConsumer<SMS, Object>() {

				@Override
				public void accept(SMS sms, Object prossimoInvio) {
					sms.setProssimoInvio((Date)prossimoInvio);
				}

			});
		attributeGetterFunctions.put(
			"codiceErrore",
			new Function<SMS, Object>() {

				@Override
				public Object apply(SMS sms) {
					return sms.getCodiceErrore();
				}

			});
		attributeSetterBiConsumers.put(
			"codiceErrore",
			new BiConsumer<SMS, Object>() {

				@Override
				public void accept(SMS sms, Object codiceErrore) {
					sms.setCodiceErrore((String)codiceErrore);
				}

			});
		attributeGetterFunctions.put(
			"descrizioneErrore",
			new Function<SMS, Object>() {

				@Override
				public Object apply(SMS sms) {
					return sms.getDescrizioneErrore();
				}

			});
		attributeSetterBiConsumers.put(
			"descrizioneErrore",
			new BiConsumer<SMS, Object>() {

				@Override
				public void accept(SMS sms, Object descrizioneErrore) {
					sms.setDescrizioneErrore((String)descrizioneErrore);
				}

			});
		attributeGetterFunctions.put(
			"timestamp",
			new Function<SMS, Object>() {

				@Override
				public Object apply(SMS sms) {
					return sms.getTimestamp();
				}

			});
		attributeSetterBiConsumers.put(
			"timestamp",
			new BiConsumer<SMS, Object>() {

				@Override
				public void accept(SMS sms, Object timestamp) {
					sms.setTimestamp((String)timestamp);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getTipo() {
		if (_tipo == null) {
			return "";
		}
		else {
			return _tipo;
		}
	}

	@Override
	public void setTipo(String tipo) {
		_columnBitmask |= TIPO_COLUMN_BITMASK;

		if (_originalTipo == null) {
			_originalTipo = _tipo;
		}

		_tipo = tipo;
	}

	public String getOriginalTipo() {
		return GetterUtil.getString(_originalTipo);
	}

	@JSON
	@Override
	public String getSottotipo() {
		if (_sottotipo == null) {
			return "";
		}
		else {
			return _sottotipo;
		}
	}

	@Override
	public void setSottotipo(String sottotipo) {
		_columnBitmask |= SOTTOTIPO_COLUMN_BITMASK;

		if (_originalSottotipo == null) {
			_originalSottotipo = _sottotipo;
		}

		_sottotipo = sottotipo;
	}

	public String getOriginalSottotipo() {
		return GetterUtil.getString(_originalSottotipo);
	}

	@JSON
	@Override
	public long getParam() {
		return _param;
	}

	@Override
	public void setParam(long param) {
		_columnBitmask |= PARAM_COLUMN_BITMASK;

		if (!_setOriginalParam) {
			_setOriginalParam = true;

			_originalParam = _param;
		}

		_param = param;
	}

	public long getOriginalParam() {
		return _originalParam;
	}

	@JSON
	@Override
	public String getTesto() {
		if (_testo == null) {
			return "";
		}
		else {
			return _testo;
		}
	}

	@Override
	public void setTesto(String testo) {
		_testo = testo;
	}

	@JSON
	@Override
	public long getDestinatario() {
		return _destinatario;
	}

	@Override
	public void setDestinatario(long destinatario) {
		_columnBitmask |= DESTINATARIO_COLUMN_BITMASK;

		if (!_setOriginalDestinatario) {
			_setOriginalDestinatario = true;

			_originalDestinatario = _destinatario;
		}

		_destinatario = destinatario;
	}

	public long getOriginalDestinatario() {
		return _originalDestinatario;
	}

	@JSON
	@Override
	public String getNumeroDa() {
		if (_numeroDa == null) {
			return "";
		}
		else {
			return _numeroDa;
		}
	}

	@Override
	public void setNumeroDa(String numeroDa) {
		_numeroDa = numeroDa;
	}

	@JSON
	@Override
	public String getNumero() {
		if (_numero == null) {
			return "";
		}
		else {
			return _numero;
		}
	}

	@Override
	public void setNumero(String numero) {
		_columnBitmask |= NUMERO_COLUMN_BITMASK;

		if (_originalNumero == null) {
			_originalNumero = _numero;
		}

		_numero = numero;
	}

	public String getOriginalNumero() {
		return GetterUtil.getString(_originalNumero);
	}

	@JSON
	@Override
	public String getNomeDestinatario() {
		if (_nomeDestinatario == null) {
			return "";
		}
		else {
			return _nomeDestinatario;
		}
	}

	@Override
	public void setNomeDestinatario(String nomeDestinatario) {
		_nomeDestinatario = nomeDestinatario;
	}

	@JSON
	@Override
	public long getStato() {
		return _stato;
	}

	@Override
	public void setStato(long stato) {
		_stato = stato;
	}

	@JSON
	@Override
	public Date getDataInvio() {
		return _dataInvio;
	}

	@Override
	public void setDataInvio(Date dataInvio) {
		_dataInvio = dataInvio;
	}

	@JSON
	@Override
	public Date getDataAck() {
		return _dataAck;
	}

	@Override
	public void setDataAck(Date dataAck) {
		_columnBitmask |= DATAACK_COLUMN_BITMASK;

		if (_originalDataAck == null) {
			_originalDataAck = _dataAck;
		}

		_dataAck = dataAck;
	}

	public Date getOriginalDataAck() {
		return _originalDataAck;
	}

	@JSON
	@Override
	public Date getDataRicevuta() {
		return _dataRicevuta;
	}

	@Override
	public void setDataRicevuta(Date dataRicevuta) {
		_dataRicevuta = dataRicevuta;
	}

	@JSON
	@Override
	public long getTentativi() {
		return _tentativi;
	}

	@Override
	public void setTentativi(long tentativi) {
		_tentativi = tentativi;
	}

	@JSON
	@Override
	public Date getProssimoInvio() {
		return _prossimoInvio;
	}

	@Override
	public void setProssimoInvio(Date prossimoInvio) {
		_prossimoInvio = prossimoInvio;
	}

	@JSON
	@Override
	public String getCodiceErrore() {
		if (_codiceErrore == null) {
			return "";
		}
		else {
			return _codiceErrore;
		}
	}

	@Override
	public void setCodiceErrore(String codiceErrore) {
		_codiceErrore = codiceErrore;
	}

	@JSON
	@Override
	public String getDescrizioneErrore() {
		if (_descrizioneErrore == null) {
			return "";
		}
		else {
			return _descrizioneErrore;
		}
	}

	@Override
	public void setDescrizioneErrore(String descrizioneErrore) {
		_descrizioneErrore = descrizioneErrore;
	}

	@JSON
	@Override
	public String getTimestamp() {
		if (_timestamp == null) {
			return "";
		}
		else {
			return _timestamp;
		}
	}

	@Override
	public void setTimestamp(String timestamp) {
		_columnBitmask |= TIMESTAMP_COLUMN_BITMASK;

		if (_originalTimestamp == null) {
			_originalTimestamp = _timestamp;
		}

		_timestamp = timestamp;
	}

	public String getOriginalTimestamp() {
		return GetterUtil.getString(_originalTimestamp);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, SMS.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SMS toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SMS)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SMSImpl smsImpl = new SMSImpl();

		smsImpl.setId(getId());
		smsImpl.setTipo(getTipo());
		smsImpl.setSottotipo(getSottotipo());
		smsImpl.setParam(getParam());
		smsImpl.setTesto(getTesto());
		smsImpl.setDestinatario(getDestinatario());
		smsImpl.setNumeroDa(getNumeroDa());
		smsImpl.setNumero(getNumero());
		smsImpl.setNomeDestinatario(getNomeDestinatario());
		smsImpl.setStato(getStato());
		smsImpl.setDataInvio(getDataInvio());
		smsImpl.setDataAck(getDataAck());
		smsImpl.setDataRicevuta(getDataRicevuta());
		smsImpl.setTentativi(getTentativi());
		smsImpl.setProssimoInvio(getProssimoInvio());
		smsImpl.setCodiceErrore(getCodiceErrore());
		smsImpl.setDescrizioneErrore(getDescrizioneErrore());
		smsImpl.setTimestamp(getTimestamp());

		smsImpl.resetOriginalValues();

		return smsImpl;
	}

	@Override
	public int compareTo(SMS sms) {
		int value = 0;

		if (getId() < sms.getId()) {
			value = -1;
		}
		else if (getId() > sms.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SMS)) {
			return false;
		}

		SMS sms = (SMS)obj;

		long primaryKey = sms.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		SMSModelImpl smsModelImpl = this;

		smsModelImpl._originalTipo = smsModelImpl._tipo;

		smsModelImpl._originalSottotipo = smsModelImpl._sottotipo;

		smsModelImpl._originalParam = smsModelImpl._param;

		smsModelImpl._setOriginalParam = false;

		smsModelImpl._originalDestinatario = smsModelImpl._destinatario;

		smsModelImpl._setOriginalDestinatario = false;

		smsModelImpl._originalNumero = smsModelImpl._numero;

		smsModelImpl._originalDataAck = smsModelImpl._dataAck;

		smsModelImpl._originalTimestamp = smsModelImpl._timestamp;

		smsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SMS> toCacheModel() {
		SMSCacheModel smsCacheModel = new SMSCacheModel();

		smsCacheModel.id = getId();

		smsCacheModel.tipo = getTipo();

		String tipo = smsCacheModel.tipo;

		if ((tipo != null) && (tipo.length() == 0)) {
			smsCacheModel.tipo = null;
		}

		smsCacheModel.sottotipo = getSottotipo();

		String sottotipo = smsCacheModel.sottotipo;

		if ((sottotipo != null) && (sottotipo.length() == 0)) {
			smsCacheModel.sottotipo = null;
		}

		smsCacheModel.param = getParam();

		smsCacheModel.testo = getTesto();

		String testo = smsCacheModel.testo;

		if ((testo != null) && (testo.length() == 0)) {
			smsCacheModel.testo = null;
		}

		smsCacheModel.destinatario = getDestinatario();

		smsCacheModel.numeroDa = getNumeroDa();

		String numeroDa = smsCacheModel.numeroDa;

		if ((numeroDa != null) && (numeroDa.length() == 0)) {
			smsCacheModel.numeroDa = null;
		}

		smsCacheModel.numero = getNumero();

		String numero = smsCacheModel.numero;

		if ((numero != null) && (numero.length() == 0)) {
			smsCacheModel.numero = null;
		}

		smsCacheModel.nomeDestinatario = getNomeDestinatario();

		String nomeDestinatario = smsCacheModel.nomeDestinatario;

		if ((nomeDestinatario != null) && (nomeDestinatario.length() == 0)) {
			smsCacheModel.nomeDestinatario = null;
		}

		smsCacheModel.stato = getStato();

		Date dataInvio = getDataInvio();

		if (dataInvio != null) {
			smsCacheModel.dataInvio = dataInvio.getTime();
		}
		else {
			smsCacheModel.dataInvio = Long.MIN_VALUE;
		}

		Date dataAck = getDataAck();

		if (dataAck != null) {
			smsCacheModel.dataAck = dataAck.getTime();
		}
		else {
			smsCacheModel.dataAck = Long.MIN_VALUE;
		}

		Date dataRicevuta = getDataRicevuta();

		if (dataRicevuta != null) {
			smsCacheModel.dataRicevuta = dataRicevuta.getTime();
		}
		else {
			smsCacheModel.dataRicevuta = Long.MIN_VALUE;
		}

		smsCacheModel.tentativi = getTentativi();

		Date prossimoInvio = getProssimoInvio();

		if (prossimoInvio != null) {
			smsCacheModel.prossimoInvio = prossimoInvio.getTime();
		}
		else {
			smsCacheModel.prossimoInvio = Long.MIN_VALUE;
		}

		smsCacheModel.codiceErrore = getCodiceErrore();

		String codiceErrore = smsCacheModel.codiceErrore;

		if ((codiceErrore != null) && (codiceErrore.length() == 0)) {
			smsCacheModel.codiceErrore = null;
		}

		smsCacheModel.descrizioneErrore = getDescrizioneErrore();

		String descrizioneErrore = smsCacheModel.descrizioneErrore;

		if ((descrizioneErrore != null) && (descrizioneErrore.length() == 0)) {
			smsCacheModel.descrizioneErrore = null;
		}

		smsCacheModel.timestamp = getTimestamp();

		String timestamp = smsCacheModel.timestamp;

		if ((timestamp != null) && (timestamp.length() == 0)) {
			smsCacheModel.timestamp = null;
		}

		return smsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<SMS, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<SMS, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SMS, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((SMS)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<SMS, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<SMS, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SMS, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((SMS)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = SMS.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		SMS.class, ModelWrapper.class
	};

	private long _id;
	private String _tipo;
	private String _originalTipo;
	private String _sottotipo;
	private String _originalSottotipo;
	private long _param;
	private long _originalParam;
	private boolean _setOriginalParam;
	private String _testo;
	private long _destinatario;
	private long _originalDestinatario;
	private boolean _setOriginalDestinatario;
	private String _numeroDa;
	private String _numero;
	private String _originalNumero;
	private String _nomeDestinatario;
	private long _stato;
	private Date _dataInvio;
	private Date _dataAck;
	private Date _originalDataAck;
	private Date _dataRicevuta;
	private long _tentativi;
	private Date _prossimoInvio;
	private String _codiceErrore;
	private String _descrizioneErrore;
	private String _timestamp;
	private String _originalTimestamp;
	private long _columnBitmask;
	private SMS _escapedModel;

}