/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.allerter.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.allerter.model.Feed;
import it.eng.allerter.model.FeedModel;
import it.eng.allerter.model.FeedSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Feed service. Represents a row in the &quot;ALLERTER_Feed&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>FeedModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FeedImpl}.
 * </p>
 *
 * @author GFAVINI
 * @see FeedImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class FeedModelImpl extends BaseModelImpl<Feed> implements FeedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a feed model instance should use the <code>Feed</code> interface instead.
	 */
	public static final String TABLE_NAME = "ALLERTER_Feed";

	public static final Object[][] TABLE_COLUMNS = {
		{"feedId", Types.VARCHAR}, {"titolo", Types.VARCHAR},
		{"link", Types.VARCHAR}, {"autore", Types.VARCHAR},
		{"query", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("feedId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("titolo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("link", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("autore", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("query", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ALLERTER_Feed (feedId VARCHAR(75) not null primary key,titolo VARCHAR(75) null,link VARCHAR(75) null,autore VARCHAR(75) null,query TEXT null)";

	public static final String TABLE_SQL_DROP = "drop table ALLERTER_Feed";

	public static final String ORDER_BY_JPQL = " ORDER BY feed.feedId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ALLERTER_Feed.feedId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.allertaer.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.allerter.model.Feed"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.allertaer.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.allerter.model.Feed"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Feed toModel(FeedSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Feed model = new FeedImpl();

		model.setFeedId(soapModel.getFeedId());
		model.setTitolo(soapModel.getTitolo());
		model.setLink(soapModel.getLink());
		model.setAutore(soapModel.getAutore());
		model.setQuery(soapModel.getQuery());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Feed> toModels(FeedSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Feed> models = new ArrayList<Feed>(soapModels.length);

		for (FeedSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		it.eng.allertaer.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.allerter.model.Feed"));

	public FeedModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _feedId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setFeedId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _feedId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Feed.class;
	}

	@Override
	public String getModelClassName() {
		return Feed.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Feed, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Feed, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Feed, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Feed)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Feed, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Feed, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Feed)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Feed, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Feed, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Feed, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Feed, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Feed, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Feed, Object>>();
		Map<String, BiConsumer<Feed, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Feed, ?>>();

		attributeGetterFunctions.put(
			"feedId",
			new Function<Feed, Object>() {

				@Override
				public Object apply(Feed feed) {
					return feed.getFeedId();
				}

			});
		attributeSetterBiConsumers.put(
			"feedId",
			new BiConsumer<Feed, Object>() {

				@Override
				public void accept(Feed feed, Object feedId) {
					feed.setFeedId((String)feedId);
				}

			});
		attributeGetterFunctions.put(
			"titolo",
			new Function<Feed, Object>() {

				@Override
				public Object apply(Feed feed) {
					return feed.getTitolo();
				}

			});
		attributeSetterBiConsumers.put(
			"titolo",
			new BiConsumer<Feed, Object>() {

				@Override
				public void accept(Feed feed, Object titolo) {
					feed.setTitolo((String)titolo);
				}

			});
		attributeGetterFunctions.put(
			"link",
			new Function<Feed, Object>() {

				@Override
				public Object apply(Feed feed) {
					return feed.getLink();
				}

			});
		attributeSetterBiConsumers.put(
			"link",
			new BiConsumer<Feed, Object>() {

				@Override
				public void accept(Feed feed, Object link) {
					feed.setLink((String)link);
				}

			});
		attributeGetterFunctions.put(
			"autore",
			new Function<Feed, Object>() {

				@Override
				public Object apply(Feed feed) {
					return feed.getAutore();
				}

			});
		attributeSetterBiConsumers.put(
			"autore",
			new BiConsumer<Feed, Object>() {

				@Override
				public void accept(Feed feed, Object autore) {
					feed.setAutore((String)autore);
				}

			});
		attributeGetterFunctions.put(
			"query",
			new Function<Feed, Object>() {

				@Override
				public Object apply(Feed feed) {
					return feed.getQuery();
				}

			});
		attributeSetterBiConsumers.put(
			"query",
			new BiConsumer<Feed, Object>() {

				@Override
				public void accept(Feed feed, Object query) {
					feed.setQuery((String)query);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getFeedId() {
		if (_feedId == null) {
			return "";
		}
		else {
			return _feedId;
		}
	}

	@Override
	public void setFeedId(String feedId) {
		_feedId = feedId;
	}

	@JSON
	@Override
	public String getTitolo() {
		if (_titolo == null) {
			return "";
		}
		else {
			return _titolo;
		}
	}

	@Override
	public void setTitolo(String titolo) {
		_titolo = titolo;
	}

	@JSON
	@Override
	public String getLink() {
		if (_link == null) {
			return "";
		}
		else {
			return _link;
		}
	}

	@Override
	public void setLink(String link) {
		_link = link;
	}

	@JSON
	@Override
	public String getAutore() {
		if (_autore == null) {
			return "";
		}
		else {
			return _autore;
		}
	}

	@Override
	public void setAutore(String autore) {
		_autore = autore;
	}

	@JSON
	@Override
	public String getQuery() {
		if (_query == null) {
			return "";
		}
		else {
			return _query;
		}
	}

	@Override
	public void setQuery(String query) {
		_query = query;
	}

	@Override
	public Feed toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Feed)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FeedImpl feedImpl = new FeedImpl();

		feedImpl.setFeedId(getFeedId());
		feedImpl.setTitolo(getTitolo());
		feedImpl.setLink(getLink());
		feedImpl.setAutore(getAutore());
		feedImpl.setQuery(getQuery());

		feedImpl.resetOriginalValues();

		return feedImpl;
	}

	@Override
	public int compareTo(Feed feed) {
		int value = 0;

		value = getFeedId().compareTo(feed.getFeedId());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Feed)) {
			return false;
		}

		Feed feed = (Feed)obj;

		String primaryKey = feed.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Feed> toCacheModel() {
		FeedCacheModel feedCacheModel = new FeedCacheModel();

		feedCacheModel.feedId = getFeedId();

		String feedId = feedCacheModel.feedId;

		if ((feedId != null) && (feedId.length() == 0)) {
			feedCacheModel.feedId = null;
		}

		feedCacheModel.titolo = getTitolo();

		String titolo = feedCacheModel.titolo;

		if ((titolo != null) && (titolo.length() == 0)) {
			feedCacheModel.titolo = null;
		}

		feedCacheModel.link = getLink();

		String link = feedCacheModel.link;

		if ((link != null) && (link.length() == 0)) {
			feedCacheModel.link = null;
		}

		feedCacheModel.autore = getAutore();

		String autore = feedCacheModel.autore;

		if ((autore != null) && (autore.length() == 0)) {
			feedCacheModel.autore = null;
		}

		feedCacheModel.query = getQuery();

		String query = feedCacheModel.query;

		if ((query != null) && (query.length() == 0)) {
			feedCacheModel.query = null;
		}

		return feedCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Feed, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Feed, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Feed, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Feed)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Feed, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Feed, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Feed, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Feed)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Feed.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		Feed.class, ModelWrapper.class
	};

	private String _feedId;
	private String _titolo;
	private String _link;
	private String _autore;
	private String _query;
	private Feed _escapedModel;

}