/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.allerter.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.allerter.model.Email;
import it.eng.allerter.model.EmailModel;
import it.eng.allerter.model.EmailSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Email service. Represents a row in the &quot;ALLERTER_Email&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>EmailModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmailImpl}.
 * </p>
 *
 * @author GFAVINI
 * @see EmailImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class EmailModelImpl extends BaseModelImpl<Email> implements EmailModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a email model instance should use the <code>Email</code> interface instead.
	 */
	public static final String TABLE_NAME = "ALLERTER_Email";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"tipo", Types.VARCHAR},
		{"sottotipo", Types.VARCHAR}, {"param", Types.BIGINT},
		{"destinatario", Types.BIGINT}, {"indirizzo", Types.VARCHAR},
		{"nomeDestinatario", Types.VARCHAR}, {"stato", Types.BIGINT},
		{"dataInvio", Types.TIMESTAMP}, {"testo", Types.VARCHAR},
		{"oggetto", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tipo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sottotipo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("param", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("destinatario", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("indirizzo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nomeDestinatario", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stato", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataInvio", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("testo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("oggetto", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ALLERTER_Email (id_ LONG not null primary key,tipo VARCHAR(75) null,sottotipo VARCHAR(75) null,param LONG,destinatario LONG,indirizzo VARCHAR(256) null,nomeDestinatario VARCHAR(200) null,stato LONG,dataInvio DATE null,testo TEXT null,oggetto TEXT null)";

	public static final String TABLE_SQL_DROP = "drop table ALLERTER_Email";

	public static final String ORDER_BY_JPQL = " ORDER BY email.id DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ALLERTER_Email.id_ DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.allertaer.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.allerter.model.Email"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.allertaer.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.allerter.model.Email"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		it.eng.allertaer.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.it.eng.allerter.model.Email"),
		true);

	public static final long DESTINATARIO_COLUMN_BITMASK = 1L;

	public static final long INDIRIZZO_COLUMN_BITMASK = 2L;

	public static final long PARAM_COLUMN_BITMASK = 4L;

	public static final long SOTTOTIPO_COLUMN_BITMASK = 8L;

	public static final long TIPO_COLUMN_BITMASK = 16L;

	public static final long ID_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Email toModel(EmailSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Email model = new EmailImpl();

		model.setId(soapModel.getId());
		model.setTipo(soapModel.getTipo());
		model.setSottotipo(soapModel.getSottotipo());
		model.setParam(soapModel.getParam());
		model.setDestinatario(soapModel.getDestinatario());
		model.setIndirizzo(soapModel.getIndirizzo());
		model.setNomeDestinatario(soapModel.getNomeDestinatario());
		model.setStato(soapModel.getStato());
		model.setDataInvio(soapModel.getDataInvio());
		model.setTesto(soapModel.getTesto());
		model.setOggetto(soapModel.getOggetto());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Email> toModels(EmailSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Email> models = new ArrayList<Email>(soapModels.length);

		for (EmailSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		it.eng.allertaer.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.allerter.model.Email"));

	public EmailModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Email.class;
	}

	@Override
	public String getModelClassName() {
		return Email.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Email, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Email, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Email, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Email)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Email, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Email, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Email)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Email, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Email, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Email, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Email, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Email, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Email, Object>>();
		Map<String, BiConsumer<Email, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Email, ?>>();

		attributeGetterFunctions.put(
			"id",
			new Function<Email, Object>() {

				@Override
				public Object apply(Email email) {
					return email.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<Email, Object>() {

				@Override
				public void accept(Email email, Object id) {
					email.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"tipo",
			new Function<Email, Object>() {

				@Override
				public Object apply(Email email) {
					return email.getTipo();
				}

			});
		attributeSetterBiConsumers.put(
			"tipo",
			new BiConsumer<Email, Object>() {

				@Override
				public void accept(Email email, Object tipo) {
					email.setTipo((String)tipo);
				}

			});
		attributeGetterFunctions.put(
			"sottotipo",
			new Function<Email, Object>() {

				@Override
				public Object apply(Email email) {
					return email.getSottotipo();
				}

			});
		attributeSetterBiConsumers.put(
			"sottotipo",
			new BiConsumer<Email, Object>() {

				@Override
				public void accept(Email email, Object sottotipo) {
					email.setSottotipo((String)sottotipo);
				}

			});
		attributeGetterFunctions.put(
			"param",
			new Function<Email, Object>() {

				@Override
				public Object apply(Email email) {
					return email.getParam();
				}

			});
		attributeSetterBiConsumers.put(
			"param",
			new BiConsumer<Email, Object>() {

				@Override
				public void accept(Email email, Object param) {
					email.setParam((Long)param);
				}

			});
		attributeGetterFunctions.put(
			"destinatario",
			new Function<Email, Object>() {

				@Override
				public Object apply(Email email) {
					return email.getDestinatario();
				}

			});
		attributeSetterBiConsumers.put(
			"destinatario",
			new BiConsumer<Email, Object>() {

				@Override
				public void accept(Email email, Object destinatario) {
					email.setDestinatario((Long)destinatario);
				}

			});
		attributeGetterFunctions.put(
			"indirizzo",
			new Function<Email, Object>() {

				@Override
				public Object apply(Email email) {
					return email.getIndirizzo();
				}

			});
		attributeSetterBiConsumers.put(
			"indirizzo",
			new BiConsumer<Email, Object>() {

				@Override
				public void accept(Email email, Object indirizzo) {
					email.setIndirizzo((String)indirizzo);
				}

			});
		attributeGetterFunctions.put(
			"nomeDestinatario",
			new Function<Email, Object>() {

				@Override
				public Object apply(Email email) {
					return email.getNomeDestinatario();
				}

			});
		attributeSetterBiConsumers.put(
			"nomeDestinatario",
			new BiConsumer<Email, Object>() {

				@Override
				public void accept(Email email, Object nomeDestinatario) {
					email.setNomeDestinatario((String)nomeDestinatario);
				}

			});
		attributeGetterFunctions.put(
			"stato",
			new Function<Email, Object>() {

				@Override
				public Object apply(Email email) {
					return email.getStato();
				}

			});
		attributeSetterBiConsumers.put(
			"stato",
			new BiConsumer<Email, Object>() {

				@Override
				public void accept(Email email, Object stato) {
					email.setStato((Long)stato);
				}

			});
		attributeGetterFunctions.put(
			"dataInvio",
			new Function<Email, Object>() {

				@Override
				public Object apply(Email email) {
					return email.getDataInvio();
				}

			});
		attributeSetterBiConsumers.put(
			"dataInvio",
			new BiConsumer<Email, Object>() {

				@Override
				public void accept(Email email, Object dataInvio) {
					email.setDataInvio((Date)dataInvio);
				}

			});
		attributeGetterFunctions.put(
			"testo",
			new Function<Email, Object>() {

				@Override
				public Object apply(Email email) {
					return email.getTesto();
				}

			});
		attributeSetterBiConsumers.put(
			"testo",
			new BiConsumer<Email, Object>() {

				@Override
				public void accept(Email email, Object testo) {
					email.setTesto((String)testo);
				}

			});
		attributeGetterFunctions.put(
			"oggetto",
			new Function<Email, Object>() {

				@Override
				public Object apply(Email email) {
					return email.getOggetto();
				}

			});
		attributeSetterBiConsumers.put(
			"oggetto",
			new BiConsumer<Email, Object>() {

				@Override
				public void accept(Email email, Object oggetto) {
					email.setOggetto((String)oggetto);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getTipo() {
		if (_tipo == null) {
			return "";
		}
		else {
			return _tipo;
		}
	}

	@Override
	public void setTipo(String tipo) {
		_columnBitmask |= TIPO_COLUMN_BITMASK;

		if (_originalTipo == null) {
			_originalTipo = _tipo;
		}

		_tipo = tipo;
	}

	public String getOriginalTipo() {
		return GetterUtil.getString(_originalTipo);
	}

	@JSON
	@Override
	public String getSottotipo() {
		if (_sottotipo == null) {
			return "";
		}
		else {
			return _sottotipo;
		}
	}

	@Override
	public void setSottotipo(String sottotipo) {
		_columnBitmask |= SOTTOTIPO_COLUMN_BITMASK;

		if (_originalSottotipo == null) {
			_originalSottotipo = _sottotipo;
		}

		_sottotipo = sottotipo;
	}

	public String getOriginalSottotipo() {
		return GetterUtil.getString(_originalSottotipo);
	}

	@JSON
	@Override
	public long getParam() {
		return _param;
	}

	@Override
	public void setParam(long param) {
		_columnBitmask |= PARAM_COLUMN_BITMASK;

		if (!_setOriginalParam) {
			_setOriginalParam = true;

			_originalParam = _param;
		}

		_param = param;
	}

	public long getOriginalParam() {
		return _originalParam;
	}

	@JSON
	@Override
	public long getDestinatario() {
		return _destinatario;
	}

	@Override
	public void setDestinatario(long destinatario) {
		_columnBitmask |= DESTINATARIO_COLUMN_BITMASK;

		if (!_setOriginalDestinatario) {
			_setOriginalDestinatario = true;

			_originalDestinatario = _destinatario;
		}

		_destinatario = destinatario;
	}

	public long getOriginalDestinatario() {
		return _originalDestinatario;
	}

	@JSON
	@Override
	public String getIndirizzo() {
		if (_indirizzo == null) {
			return "";
		}
		else {
			return _indirizzo;
		}
	}

	@Override
	public void setIndirizzo(String indirizzo) {
		_columnBitmask |= INDIRIZZO_COLUMN_BITMASK;

		if (_originalIndirizzo == null) {
			_originalIndirizzo = _indirizzo;
		}

		_indirizzo = indirizzo;
	}

	public String getOriginalIndirizzo() {
		return GetterUtil.getString(_originalIndirizzo);
	}

	@JSON
	@Override
	public String getNomeDestinatario() {
		if (_nomeDestinatario == null) {
			return "";
		}
		else {
			return _nomeDestinatario;
		}
	}

	@Override
	public void setNomeDestinatario(String nomeDestinatario) {
		_nomeDestinatario = nomeDestinatario;
	}

	@JSON
	@Override
	public long getStato() {
		return _stato;
	}

	@Override
	public void setStato(long stato) {
		_stato = stato;
	}

	@JSON
	@Override
	public Date getDataInvio() {
		return _dataInvio;
	}

	@Override
	public void setDataInvio(Date dataInvio) {
		_dataInvio = dataInvio;
	}

	@JSON
	@Override
	public String getTesto() {
		if (_testo == null) {
			return "";
		}
		else {
			return _testo;
		}
	}

	@Override
	public void setTesto(String testo) {
		_testo = testo;
	}

	@JSON
	@Override
	public String getOggetto() {
		if (_oggetto == null) {
			return "";
		}
		else {
			return _oggetto;
		}
	}

	@Override
	public void setOggetto(String oggetto) {
		_oggetto = oggetto;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Email.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Email toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Email)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmailImpl emailImpl = new EmailImpl();

		emailImpl.setId(getId());
		emailImpl.setTipo(getTipo());
		emailImpl.setSottotipo(getSottotipo());
		emailImpl.setParam(getParam());
		emailImpl.setDestinatario(getDestinatario());
		emailImpl.setIndirizzo(getIndirizzo());
		emailImpl.setNomeDestinatario(getNomeDestinatario());
		emailImpl.setStato(getStato());
		emailImpl.setDataInvio(getDataInvio());
		emailImpl.setTesto(getTesto());
		emailImpl.setOggetto(getOggetto());

		emailImpl.resetOriginalValues();

		return emailImpl;
	}

	@Override
	public int compareTo(Email email) {
		int value = 0;

		if (getId() < email.getId()) {
			value = -1;
		}
		else if (getId() > email.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Email)) {
			return false;
		}

		Email email = (Email)obj;

		long primaryKey = email.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		EmailModelImpl emailModelImpl = this;

		emailModelImpl._originalTipo = emailModelImpl._tipo;

		emailModelImpl._originalSottotipo = emailModelImpl._sottotipo;

		emailModelImpl._originalParam = emailModelImpl._param;

		emailModelImpl._setOriginalParam = false;

		emailModelImpl._originalDestinatario = emailModelImpl._destinatario;

		emailModelImpl._setOriginalDestinatario = false;

		emailModelImpl._originalIndirizzo = emailModelImpl._indirizzo;

		emailModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Email> toCacheModel() {
		EmailCacheModel emailCacheModel = new EmailCacheModel();

		emailCacheModel.id = getId();

		emailCacheModel.tipo = getTipo();

		String tipo = emailCacheModel.tipo;

		if ((tipo != null) && (tipo.length() == 0)) {
			emailCacheModel.tipo = null;
		}

		emailCacheModel.sottotipo = getSottotipo();

		String sottotipo = emailCacheModel.sottotipo;

		if ((sottotipo != null) && (sottotipo.length() == 0)) {
			emailCacheModel.sottotipo = null;
		}

		emailCacheModel.param = getParam();

		emailCacheModel.destinatario = getDestinatario();

		emailCacheModel.indirizzo = getIndirizzo();

		String indirizzo = emailCacheModel.indirizzo;

		if ((indirizzo != null) && (indirizzo.length() == 0)) {
			emailCacheModel.indirizzo = null;
		}

		emailCacheModel.nomeDestinatario = getNomeDestinatario();

		String nomeDestinatario = emailCacheModel.nomeDestinatario;

		if ((nomeDestinatario != null) && (nomeDestinatario.length() == 0)) {
			emailCacheModel.nomeDestinatario = null;
		}

		emailCacheModel.stato = getStato();

		Date dataInvio = getDataInvio();

		if (dataInvio != null) {
			emailCacheModel.dataInvio = dataInvio.getTime();
		}
		else {
			emailCacheModel.dataInvio = Long.MIN_VALUE;
		}

		emailCacheModel.testo = getTesto();

		String testo = emailCacheModel.testo;

		if ((testo != null) && (testo.length() == 0)) {
			emailCacheModel.testo = null;
		}

		emailCacheModel.oggetto = getOggetto();

		String oggetto = emailCacheModel.oggetto;

		if ((oggetto != null) && (oggetto.length() == 0)) {
			emailCacheModel.oggetto = null;
		}

		return emailCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Email, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Email, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Email, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Email)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Email, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Email, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Email, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Email)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		Email.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		Email.class, ModelWrapper.class
	};

	private long _id;
	private String _tipo;
	private String _originalTipo;
	private String _sottotipo;
	private String _originalSottotipo;
	private long _param;
	private long _originalParam;
	private boolean _setOriginalParam;
	private long _destinatario;
	private long _originalDestinatario;
	private boolean _setOriginalDestinatario;
	private String _indirizzo;
	private String _originalIndirizzo;
	private String _nomeDestinatario;
	private long _stato;
	private Date _dataInvio;
	private String _testo;
	private String _oggetto;
	private long _columnBitmask;
	private Email _escapedModel;

}