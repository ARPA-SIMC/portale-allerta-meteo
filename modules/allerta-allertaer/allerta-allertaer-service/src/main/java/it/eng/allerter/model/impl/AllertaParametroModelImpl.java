/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.allerter.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.allerter.model.AllertaParametro;
import it.eng.allerter.model.AllertaParametroModel;
import it.eng.allerter.model.AllertaParametroSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AllertaParametro service. Represents a row in the &quot;ALLERTER_AllertaParametro&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>AllertaParametroModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AllertaParametroImpl}.
 * </p>
 *
 * @author GFAVINI
 * @see AllertaParametroImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class AllertaParametroModelImpl
	extends BaseModelImpl<AllertaParametro> implements AllertaParametroModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a allerta parametro model instance should use the <code>AllertaParametro</code> interface instead.
	 */
	public static final String TABLE_NAME = "ALLERTER_AllertaParametro";

	public static final Object[][] TABLE_COLUMNS = {
		{"parametroId", Types.VARCHAR}, {"valore", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("parametroId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("valore", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ALLERTER_AllertaParametro (parametroId VARCHAR(75) not null primary key,valore TEXT null)";

	public static final String TABLE_SQL_DROP =
		"drop table ALLERTER_AllertaParametro";

	public static final String ORDER_BY_JPQL =
		" ORDER BY allertaParametro.parametroId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ALLERTER_AllertaParametro.parametroId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.allertaer.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.allerter.model.AllertaParametro"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.allertaer.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.allerter.model.AllertaParametro"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AllertaParametro toModel(AllertaParametroSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AllertaParametro model = new AllertaParametroImpl();

		model.setParametroId(soapModel.getParametroId());
		model.setValore(soapModel.getValore());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AllertaParametro> toModels(
		AllertaParametroSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<AllertaParametro> models = new ArrayList<AllertaParametro>(
			soapModels.length);

		for (AllertaParametroSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		it.eng.allertaer.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.allerter.model.AllertaParametro"));

	public AllertaParametroModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _parametroId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setParametroId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _parametroId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return AllertaParametro.class;
	}

	@Override
	public String getModelClassName() {
		return AllertaParametro.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AllertaParametro, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AllertaParametro, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AllertaParametro, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AllertaParametro)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AllertaParametro, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AllertaParametro, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AllertaParametro)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AllertaParametro, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AllertaParametro, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<AllertaParametro, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<AllertaParametro, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<AllertaParametro, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<AllertaParametro, Object>>();
		Map<String, BiConsumer<AllertaParametro, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<AllertaParametro, ?>>();

		attributeGetterFunctions.put(
			"parametroId",
			new Function<AllertaParametro, Object>() {

				@Override
				public Object apply(AllertaParametro allertaParametro) {
					return allertaParametro.getParametroId();
				}

			});
		attributeSetterBiConsumers.put(
			"parametroId",
			new BiConsumer<AllertaParametro, Object>() {

				@Override
				public void accept(
					AllertaParametro allertaParametro, Object parametroId) {

					allertaParametro.setParametroId((String)parametroId);
				}

			});
		attributeGetterFunctions.put(
			"valore",
			new Function<AllertaParametro, Object>() {

				@Override
				public Object apply(AllertaParametro allertaParametro) {
					return allertaParametro.getValore();
				}

			});
		attributeSetterBiConsumers.put(
			"valore",
			new BiConsumer<AllertaParametro, Object>() {

				@Override
				public void accept(
					AllertaParametro allertaParametro, Object valore) {

					allertaParametro.setValore((String)valore);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getParametroId() {
		if (_parametroId == null) {
			return "";
		}
		else {
			return _parametroId;
		}
	}

	@Override
	public void setParametroId(String parametroId) {
		_parametroId = parametroId;
	}

	@JSON
	@Override
	public String getValore() {
		if (_valore == null) {
			return "";
		}
		else {
			return _valore;
		}
	}

	@Override
	public void setValore(String valore) {
		_valore = valore;
	}

	@Override
	public AllertaParametro toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AllertaParametro)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AllertaParametroImpl allertaParametroImpl = new AllertaParametroImpl();

		allertaParametroImpl.setParametroId(getParametroId());
		allertaParametroImpl.setValore(getValore());

		allertaParametroImpl.resetOriginalValues();

		return allertaParametroImpl;
	}

	@Override
	public int compareTo(AllertaParametro allertaParametro) {
		int value = 0;

		value = getParametroId().compareTo(allertaParametro.getParametroId());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AllertaParametro)) {
			return false;
		}

		AllertaParametro allertaParametro = (AllertaParametro)obj;

		String primaryKey = allertaParametro.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<AllertaParametro> toCacheModel() {
		AllertaParametroCacheModel allertaParametroCacheModel =
			new AllertaParametroCacheModel();

		allertaParametroCacheModel.parametroId = getParametroId();

		String parametroId = allertaParametroCacheModel.parametroId;

		if ((parametroId != null) && (parametroId.length() == 0)) {
			allertaParametroCacheModel.parametroId = null;
		}

		allertaParametroCacheModel.valore = getValore();

		String valore = allertaParametroCacheModel.valore;

		if ((valore != null) && (valore.length() == 0)) {
			allertaParametroCacheModel.valore = null;
		}

		return allertaParametroCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AllertaParametro, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AllertaParametro, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AllertaParametro, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((AllertaParametro)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<AllertaParametro, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<AllertaParametro, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AllertaParametro, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((AllertaParametro)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		AllertaParametro.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		AllertaParametro.class, ModelWrapper.class
	};

	private String _parametroId;
	private String _valore;
	private AllertaParametro _escapedModel;

}