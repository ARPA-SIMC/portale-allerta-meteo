/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.radarMeteo.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.radarMeteo.model.Json;
import it.eng.radarMeteo.model.JsonModel;
import it.eng.radarMeteo.model.JsonSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Json service. Represents a row in the &quot;rt_portlet_json&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>JsonModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link JsonImpl}.
 * </p>
 *
 * @author Francesco
 * @see JsonImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class JsonModelImpl extends BaseModelImpl<Json> implements JsonModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a json model instance should use the <code>Json</code> interface instead.
	 */
	public static final String TABLE_NAME = "rt_portlet_json";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"type_", Types.VARCHAR},
		{"inserted", Types.BIGINT}, {"data_", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inserted", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("data_", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table rt_portlet_json (id_ LONG not null primary key,type_ VARCHAR(75) null,inserted LONG,data_ TEXT null)";

	public static final String TABLE_SQL_DROP = "drop table rt_portlet_json";

	public static final String ORDER_BY_JPQL = " ORDER BY json.id DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY rt_portlet_json.id_ DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.radarMeteo.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.radarMeteo.model.Json"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.radarMeteo.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.radarMeteo.model.Json"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		it.eng.radarMeteo.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.it.eng.radarMeteo.model.Json"),
		true);

	public static final long TYPE_COLUMN_BITMASK = 1L;

	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Json toModel(JsonSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Json model = new JsonImpl();

		model.setId(soapModel.getId());
		model.setType(soapModel.getType());
		model.setInserted(soapModel.getInserted());
		model.setData(soapModel.getData());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Json> toModels(JsonSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Json> models = new ArrayList<Json>(soapModels.length);

		for (JsonSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		it.eng.radarMeteo.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.radarMeteo.model.Json"));

	public JsonModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Json.class;
	}

	@Override
	public String getModelClassName() {
		return Json.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Json, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Json, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Json, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Json)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Json, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Json, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Json)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Json, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Json, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Json, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Json, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Json, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Json, Object>>();
		Map<String, BiConsumer<Json, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Json, ?>>();

		attributeGetterFunctions.put(
			"id",
			new Function<Json, Object>() {

				@Override
				public Object apply(Json json) {
					return json.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<Json, Object>() {

				@Override
				public void accept(Json json, Object id) {
					json.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"type",
			new Function<Json, Object>() {

				@Override
				public Object apply(Json json) {
					return json.getType();
				}

			});
		attributeSetterBiConsumers.put(
			"type",
			new BiConsumer<Json, Object>() {

				@Override
				public void accept(Json json, Object type) {
					json.setType((String)type);
				}

			});
		attributeGetterFunctions.put(
			"inserted",
			new Function<Json, Object>() {

				@Override
				public Object apply(Json json) {
					return json.getInserted();
				}

			});
		attributeSetterBiConsumers.put(
			"inserted",
			new BiConsumer<Json, Object>() {

				@Override
				public void accept(Json json, Object inserted) {
					json.setInserted((Long)inserted);
				}

			});
		attributeGetterFunctions.put(
			"data",
			new Function<Json, Object>() {

				@Override
				public Object apply(Json json) {
					return json.getData();
				}

			});
		attributeSetterBiConsumers.put(
			"data",
			new BiConsumer<Json, Object>() {

				@Override
				public void accept(Json json, Object data) {
					json.setData((String)data);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return "";
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (_originalType == null) {
			_originalType = _type;
		}

		_type = type;
	}

	public String getOriginalType() {
		return GetterUtil.getString(_originalType);
	}

	@JSON
	@Override
	public long getInserted() {
		return _inserted;
	}

	@Override
	public void setInserted(long inserted) {
		_inserted = inserted;
	}

	@JSON
	@Override
	public String getData() {
		if (_data == null) {
			return "";
		}
		else {
			return _data;
		}
	}

	@Override
	public void setData(String data) {
		_data = data;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Json.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Json toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Json)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		JsonImpl jsonImpl = new JsonImpl();

		jsonImpl.setId(getId());
		jsonImpl.setType(getType());
		jsonImpl.setInserted(getInserted());
		jsonImpl.setData(getData());

		jsonImpl.resetOriginalValues();

		return jsonImpl;
	}

	@Override
	public int compareTo(Json json) {
		int value = 0;

		if (getId() < json.getId()) {
			value = -1;
		}
		else if (getId() > json.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Json)) {
			return false;
		}

		Json json = (Json)obj;

		long primaryKey = json.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		JsonModelImpl jsonModelImpl = this;

		jsonModelImpl._originalType = jsonModelImpl._type;

		jsonModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Json> toCacheModel() {
		JsonCacheModel jsonCacheModel = new JsonCacheModel();

		jsonCacheModel.id = getId();

		jsonCacheModel.type = getType();

		String type = jsonCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			jsonCacheModel.type = null;
		}

		jsonCacheModel.inserted = getInserted();

		jsonCacheModel.data = getData();

		String data = jsonCacheModel.data;

		if ((data != null) && (data.length() == 0)) {
			jsonCacheModel.data = null;
		}

		return jsonCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Json, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Json, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Json, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Json)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Json, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Json, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Json, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Json)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Json.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		Json.class, ModelWrapper.class
	};

	private long _id;
	private String _type;
	private String _originalType;
	private long _inserted;
	private String _data;
	private long _columnBitmask;
	private Json _escapedModel;

}