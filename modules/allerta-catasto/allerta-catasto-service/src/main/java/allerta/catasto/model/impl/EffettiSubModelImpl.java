/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package allerta.catasto.model.impl;

import aQute.bnd.annotation.ProviderType;

import allerta.catasto.model.EffettiSub;
import allerta.catasto.model.EffettiSubModel;
import allerta.catasto.model.EffettiSubSoap;
import allerta.catasto.service.persistence.EffettiSubPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EffettiSub service. Represents a row in the &quot;CATASTO_EffettiSub&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>EffettiSubModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EffettiSubImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EffettiSubImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class EffettiSubModelImpl
	extends BaseModelImpl<EffettiSub> implements EffettiSubModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a effetti sub model instance should use the <code>EffettiSub</code> interface instead.
	 */
	public static final String TABLE_NAME = "CATASTO_EffettiSub";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"idEffetti", Types.BIGINT},
		{"descrizione", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("idEffetti", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("descrizione", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CATASTO_EffettiSub (id_ LONG not null,idEffetti LONG not null,descrizione VARCHAR(75) null,primary key (id_, idEffetti))";

	public static final String TABLE_SQL_DROP = "drop table CATASTO_EffettiSub";

	public static final String ORDER_BY_JPQL = " ORDER BY effettiSub.id.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY CATASTO_EffettiSub.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.catasto.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.allerta.catasto.model.EffettiSub"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.catasto.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.allerta.catasto.model.EffettiSub"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EffettiSub toModel(EffettiSubSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EffettiSub model = new EffettiSubImpl();

		model.setId(soapModel.getId());
		model.setIdEffetti(soapModel.getIdEffetti());
		model.setDescrizione(soapModel.getDescrizione());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EffettiSub> toModels(EffettiSubSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EffettiSub> models = new ArrayList<EffettiSub>(soapModels.length);

		for (EffettiSubSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		allerta.catasto.service.util.ServiceProps.get(
			"lock.expiration.time.allerta.catasto.model.EffettiSub"));

	public EffettiSubModelImpl() {
	}

	@Override
	public EffettiSubPK getPrimaryKey() {
		return new EffettiSubPK(_id, _idEffetti);
	}

	@Override
	public void setPrimaryKey(EffettiSubPK primaryKey) {
		setId(primaryKey.id);
		setIdEffetti(primaryKey.idEffetti);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new EffettiSubPK(_id, _idEffetti);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((EffettiSubPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return EffettiSub.class;
	}

	@Override
	public String getModelClassName() {
		return EffettiSub.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EffettiSub, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EffettiSub, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EffettiSub, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((EffettiSub)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EffettiSub, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EffettiSub, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EffettiSub)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EffettiSub, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EffettiSub, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<EffettiSub, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<EffettiSub, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<EffettiSub, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<EffettiSub, Object>>();
		Map<String, BiConsumer<EffettiSub, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<EffettiSub, ?>>();

		attributeGetterFunctions.put(
			"id",
			new Function<EffettiSub, Object>() {

				@Override
				public Object apply(EffettiSub effettiSub) {
					return effettiSub.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<EffettiSub, Object>() {

				@Override
				public void accept(EffettiSub effettiSub, Object id) {
					effettiSub.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"idEffetti",
			new Function<EffettiSub, Object>() {

				@Override
				public Object apply(EffettiSub effettiSub) {
					return effettiSub.getIdEffetti();
				}

			});
		attributeSetterBiConsumers.put(
			"idEffetti",
			new BiConsumer<EffettiSub, Object>() {

				@Override
				public void accept(EffettiSub effettiSub, Object idEffetti) {
					effettiSub.setIdEffetti((Long)idEffetti);
				}

			});
		attributeGetterFunctions.put(
			"descrizione",
			new Function<EffettiSub, Object>() {

				@Override
				public Object apply(EffettiSub effettiSub) {
					return effettiSub.getDescrizione();
				}

			});
		attributeSetterBiConsumers.put(
			"descrizione",
			new BiConsumer<EffettiSub, Object>() {

				@Override
				public void accept(EffettiSub effettiSub, Object descrizione) {
					effettiSub.setDescrizione((String)descrizione);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getIdEffetti() {
		return _idEffetti;
	}

	@Override
	public void setIdEffetti(long idEffetti) {
		_idEffetti = idEffetti;
	}

	@JSON
	@Override
	public String getDescrizione() {
		if (_descrizione == null) {
			return "";
		}
		else {
			return _descrizione;
		}
	}

	@Override
	public void setDescrizione(String descrizione) {
		_descrizione = descrizione;
	}

	@Override
	public EffettiSub toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EffettiSub)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EffettiSubImpl effettiSubImpl = new EffettiSubImpl();

		effettiSubImpl.setId(getId());
		effettiSubImpl.setIdEffetti(getIdEffetti());
		effettiSubImpl.setDescrizione(getDescrizione());

		effettiSubImpl.resetOriginalValues();

		return effettiSubImpl;
	}

	@Override
	public int compareTo(EffettiSub effettiSub) {
		int value = 0;

		if (getId() < effettiSub.getId()) {
			value = -1;
		}
		else if (getId() > effettiSub.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EffettiSub)) {
			return false;
		}

		EffettiSub effettiSub = (EffettiSub)obj;

		EffettiSubPK primaryKey = effettiSub.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<EffettiSub> toCacheModel() {
		EffettiSubCacheModel effettiSubCacheModel = new EffettiSubCacheModel();

		effettiSubCacheModel.effettiSubPK = getPrimaryKey();

		effettiSubCacheModel.id = getId();

		effettiSubCacheModel.idEffetti = getIdEffetti();

		effettiSubCacheModel.descrizione = getDescrizione();

		String descrizione = effettiSubCacheModel.descrizione;

		if ((descrizione != null) && (descrizione.length() == 0)) {
			effettiSubCacheModel.descrizione = null;
		}

		return effettiSubCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EffettiSub, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EffettiSub, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EffettiSub, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((EffettiSub)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<EffettiSub, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<EffettiSub, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EffettiSub, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((EffettiSub)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		EffettiSub.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		EffettiSub.class, ModelWrapper.class
	};

	private long _id;
	private long _idEffetti;
	private String _descrizione;
	private EffettiSub _escapedModel;

}