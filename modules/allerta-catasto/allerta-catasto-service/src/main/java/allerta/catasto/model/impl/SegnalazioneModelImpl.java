/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package allerta.catasto.model.impl;

import aQute.bnd.annotation.ProviderType;

import allerta.catasto.model.Segnalazione;
import allerta.catasto.model.SegnalazioneModel;
import allerta.catasto.model.SegnalazioneSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Segnalazione service. Represents a row in the &quot;CATASTO_Segnalazione&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>SegnalazioneModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SegnalazioneImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SegnalazioneImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class SegnalazioneModelImpl
	extends BaseModelImpl<Segnalazione> implements SegnalazioneModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a segnalazione model instance should use the <code>Segnalazione</code> interface instead.
	 */
	public static final String TABLE_NAME = "CATASTO_Segnalazione";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"documentoAssociato", Types.BIGINT},
		{"dataEvento", Types.TIMESTAMP}, {"enteSegnalante", Types.VARCHAR},
		{"fonte", Types.BIGINT}, {"categoria", Types.BIGINT},
		{"sottocategoria", Types.BIGINT}, {"riferimento", Types.VARCHAR},
		{"descrizione", Types.VARCHAR}, {"note", Types.VARCHAR},
		{"area", Types.VARCHAR}, {"provincia", Types.VARCHAR},
		{"comune", Types.VARCHAR}, {"indirizzo", Types.VARCHAR},
		{"civico", Types.VARCHAR}, {"lat", Types.DOUBLE}, {"lon", Types.DOUBLE},
		{"effetti", Types.BIGINT}, {"effettiSub", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("documentoAssociato", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataEvento", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("enteSegnalante", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fonte", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("categoria", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sottocategoria", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("riferimento", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("descrizione", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("note", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("area", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("provincia", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comune", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("indirizzo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("civico", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lat", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("lon", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("effetti", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("effettiSub", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CATASTO_Segnalazione (id_ LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,documentoAssociato LONG,dataEvento DATE null,enteSegnalante VARCHAR(75) null,fonte LONG,categoria LONG,sottocategoria LONG,riferimento VARCHAR(75) null,descrizione VARCHAR(75) null,note VARCHAR(75) null,area VARCHAR(75) null,provincia VARCHAR(75) null,comune VARCHAR(75) null,indirizzo VARCHAR(75) null,civico VARCHAR(75) null,lat DOUBLE,lon DOUBLE,effetti LONG,effettiSub LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table CATASTO_Segnalazione";

	public static final String ORDER_BY_JPQL = " ORDER BY segnalazione.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY CATASTO_Segnalazione.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.catasto.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.allerta.catasto.model.Segnalazione"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.catasto.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.allerta.catasto.model.Segnalazione"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		allerta.catasto.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.allerta.catasto.model.Segnalazione"),
		true);

	public static final long DOCUMENTOASSOCIATO_COLUMN_BITMASK = 1L;

	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Segnalazione toModel(SegnalazioneSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Segnalazione model = new SegnalazioneImpl();

		model.setId(soapModel.getId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setDocumentoAssociato(soapModel.getDocumentoAssociato());
		model.setDataEvento(soapModel.getDataEvento());
		model.setEnteSegnalante(soapModel.getEnteSegnalante());
		model.setFonte(soapModel.getFonte());
		model.setCategoria(soapModel.getCategoria());
		model.setSottocategoria(soapModel.getSottocategoria());
		model.setRiferimento(soapModel.getRiferimento());
		model.setDescrizione(soapModel.getDescrizione());
		model.setNote(soapModel.getNote());
		model.setArea(soapModel.getArea());
		model.setProvincia(soapModel.getProvincia());
		model.setComune(soapModel.getComune());
		model.setIndirizzo(soapModel.getIndirizzo());
		model.setCivico(soapModel.getCivico());
		model.setLat(soapModel.getLat());
		model.setLon(soapModel.getLon());
		model.setEffetti(soapModel.getEffetti());
		model.setEffettiSub(soapModel.getEffettiSub());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Segnalazione> toModels(SegnalazioneSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Segnalazione> models = new ArrayList<Segnalazione>(
			soapModels.length);

		for (SegnalazioneSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		allerta.catasto.service.util.ServiceProps.get(
			"lock.expiration.time.allerta.catasto.model.Segnalazione"));

	public SegnalazioneModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Segnalazione.class;
	}

	@Override
	public String getModelClassName() {
		return Segnalazione.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Segnalazione, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Segnalazione, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Segnalazione, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Segnalazione)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Segnalazione, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Segnalazione, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Segnalazione)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Segnalazione, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Segnalazione, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Segnalazione, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Segnalazione, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Segnalazione, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Segnalazione, Object>>();
		Map<String, BiConsumer<Segnalazione, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Segnalazione, ?>>();

		attributeGetterFunctions.put(
			"id",
			new Function<Segnalazione, Object>() {

				@Override
				public Object apply(Segnalazione segnalazione) {
					return segnalazione.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<Segnalazione, Object>() {

				@Override
				public void accept(Segnalazione segnalazione, Object id) {
					segnalazione.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<Segnalazione, Object>() {

				@Override
				public Object apply(Segnalazione segnalazione) {
					return segnalazione.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<Segnalazione, Object>() {

				@Override
				public void accept(Segnalazione segnalazione, Object groupId) {
					segnalazione.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<Segnalazione, Object>() {

				@Override
				public Object apply(Segnalazione segnalazione) {
					return segnalazione.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<Segnalazione, Object>() {

				@Override
				public void accept(
					Segnalazione segnalazione, Object companyId) {

					segnalazione.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<Segnalazione, Object>() {

				@Override
				public Object apply(Segnalazione segnalazione) {
					return segnalazione.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<Segnalazione, Object>() {

				@Override
				public void accept(Segnalazione segnalazione, Object userId) {
					segnalazione.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<Segnalazione, Object>() {

				@Override
				public Object apply(Segnalazione segnalazione) {
					return segnalazione.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<Segnalazione, Object>() {

				@Override
				public void accept(Segnalazione segnalazione, Object userName) {
					segnalazione.setUserName((String)userName);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<Segnalazione, Object>() {

				@Override
				public Object apply(Segnalazione segnalazione) {
					return segnalazione.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<Segnalazione, Object>() {

				@Override
				public void accept(
					Segnalazione segnalazione, Object createDate) {

					segnalazione.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<Segnalazione, Object>() {

				@Override
				public Object apply(Segnalazione segnalazione) {
					return segnalazione.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<Segnalazione, Object>() {

				@Override
				public void accept(
					Segnalazione segnalazione, Object modifiedDate) {

					segnalazione.setModifiedDate((Date)modifiedDate);
				}

			});
		attributeGetterFunctions.put(
			"documentoAssociato",
			new Function<Segnalazione, Object>() {

				@Override
				public Object apply(Segnalazione segnalazione) {
					return segnalazione.getDocumentoAssociato();
				}

			});
		attributeSetterBiConsumers.put(
			"documentoAssociato",
			new BiConsumer<Segnalazione, Object>() {

				@Override
				public void accept(
					Segnalazione segnalazione, Object documentoAssociato) {

					segnalazione.setDocumentoAssociato(
						(Long)documentoAssociato);
				}

			});
		attributeGetterFunctions.put(
			"dataEvento",
			new Function<Segnalazione, Object>() {

				@Override
				public Object apply(Segnalazione segnalazione) {
					return segnalazione.getDataEvento();
				}

			});
		attributeSetterBiConsumers.put(
			"dataEvento",
			new BiConsumer<Segnalazione, Object>() {

				@Override
				public void accept(
					Segnalazione segnalazione, Object dataEvento) {

					segnalazione.setDataEvento((Date)dataEvento);
				}

			});
		attributeGetterFunctions.put(
			"enteSegnalante",
			new Function<Segnalazione, Object>() {

				@Override
				public Object apply(Segnalazione segnalazione) {
					return segnalazione.getEnteSegnalante();
				}

			});
		attributeSetterBiConsumers.put(
			"enteSegnalante",
			new BiConsumer<Segnalazione, Object>() {

				@Override
				public void accept(
					Segnalazione segnalazione, Object enteSegnalante) {

					segnalazione.setEnteSegnalante((String)enteSegnalante);
				}

			});
		attributeGetterFunctions.put(
			"fonte",
			new Function<Segnalazione, Object>() {

				@Override
				public Object apply(Segnalazione segnalazione) {
					return segnalazione.getFonte();
				}

			});
		attributeSetterBiConsumers.put(
			"fonte",
			new BiConsumer<Segnalazione, Object>() {

				@Override
				public void accept(Segnalazione segnalazione, Object fonte) {
					segnalazione.setFonte((Long)fonte);
				}

			});
		attributeGetterFunctions.put(
			"categoria",
			new Function<Segnalazione, Object>() {

				@Override
				public Object apply(Segnalazione segnalazione) {
					return segnalazione.getCategoria();
				}

			});
		attributeSetterBiConsumers.put(
			"categoria",
			new BiConsumer<Segnalazione, Object>() {

				@Override
				public void accept(
					Segnalazione segnalazione, Object categoria) {

					segnalazione.setCategoria((Long)categoria);
				}

			});
		attributeGetterFunctions.put(
			"sottocategoria",
			new Function<Segnalazione, Object>() {

				@Override
				public Object apply(Segnalazione segnalazione) {
					return segnalazione.getSottocategoria();
				}

			});
		attributeSetterBiConsumers.put(
			"sottocategoria",
			new BiConsumer<Segnalazione, Object>() {

				@Override
				public void accept(
					Segnalazione segnalazione, Object sottocategoria) {

					segnalazione.setSottocategoria((Long)sottocategoria);
				}

			});
		attributeGetterFunctions.put(
			"riferimento",
			new Function<Segnalazione, Object>() {

				@Override
				public Object apply(Segnalazione segnalazione) {
					return segnalazione.getRiferimento();
				}

			});
		attributeSetterBiConsumers.put(
			"riferimento",
			new BiConsumer<Segnalazione, Object>() {

				@Override
				public void accept(
					Segnalazione segnalazione, Object riferimento) {

					segnalazione.setRiferimento((String)riferimento);
				}

			});
		attributeGetterFunctions.put(
			"descrizione",
			new Function<Segnalazione, Object>() {

				@Override
				public Object apply(Segnalazione segnalazione) {
					return segnalazione.getDescrizione();
				}

			});
		attributeSetterBiConsumers.put(
			"descrizione",
			new BiConsumer<Segnalazione, Object>() {

				@Override
				public void accept(
					Segnalazione segnalazione, Object descrizione) {

					segnalazione.setDescrizione((String)descrizione);
				}

			});
		attributeGetterFunctions.put(
			"note",
			new Function<Segnalazione, Object>() {

				@Override
				public Object apply(Segnalazione segnalazione) {
					return segnalazione.getNote();
				}

			});
		attributeSetterBiConsumers.put(
			"note",
			new BiConsumer<Segnalazione, Object>() {

				@Override
				public void accept(Segnalazione segnalazione, Object note) {
					segnalazione.setNote((String)note);
				}

			});
		attributeGetterFunctions.put(
			"area",
			new Function<Segnalazione, Object>() {

				@Override
				public Object apply(Segnalazione segnalazione) {
					return segnalazione.getArea();
				}

			});
		attributeSetterBiConsumers.put(
			"area",
			new BiConsumer<Segnalazione, Object>() {

				@Override
				public void accept(Segnalazione segnalazione, Object area) {
					segnalazione.setArea((String)area);
				}

			});
		attributeGetterFunctions.put(
			"provincia",
			new Function<Segnalazione, Object>() {

				@Override
				public Object apply(Segnalazione segnalazione) {
					return segnalazione.getProvincia();
				}

			});
		attributeSetterBiConsumers.put(
			"provincia",
			new BiConsumer<Segnalazione, Object>() {

				@Override
				public void accept(
					Segnalazione segnalazione, Object provincia) {

					segnalazione.setProvincia((String)provincia);
				}

			});
		attributeGetterFunctions.put(
			"comune",
			new Function<Segnalazione, Object>() {

				@Override
				public Object apply(Segnalazione segnalazione) {
					return segnalazione.getComune();
				}

			});
		attributeSetterBiConsumers.put(
			"comune",
			new BiConsumer<Segnalazione, Object>() {

				@Override
				public void accept(Segnalazione segnalazione, Object comune) {
					segnalazione.setComune((String)comune);
				}

			});
		attributeGetterFunctions.put(
			"indirizzo",
			new Function<Segnalazione, Object>() {

				@Override
				public Object apply(Segnalazione segnalazione) {
					return segnalazione.getIndirizzo();
				}

			});
		attributeSetterBiConsumers.put(
			"indirizzo",
			new BiConsumer<Segnalazione, Object>() {

				@Override
				public void accept(
					Segnalazione segnalazione, Object indirizzo) {

					segnalazione.setIndirizzo((String)indirizzo);
				}

			});
		attributeGetterFunctions.put(
			"civico",
			new Function<Segnalazione, Object>() {

				@Override
				public Object apply(Segnalazione segnalazione) {
					return segnalazione.getCivico();
				}

			});
		attributeSetterBiConsumers.put(
			"civico",
			new BiConsumer<Segnalazione, Object>() {

				@Override
				public void accept(Segnalazione segnalazione, Object civico) {
					segnalazione.setCivico((String)civico);
				}

			});
		attributeGetterFunctions.put(
			"lat",
			new Function<Segnalazione, Object>() {

				@Override
				public Object apply(Segnalazione segnalazione) {
					return segnalazione.getLat();
				}

			});
		attributeSetterBiConsumers.put(
			"lat",
			new BiConsumer<Segnalazione, Object>() {

				@Override
				public void accept(Segnalazione segnalazione, Object lat) {
					segnalazione.setLat((Double)lat);
				}

			});
		attributeGetterFunctions.put(
			"lon",
			new Function<Segnalazione, Object>() {

				@Override
				public Object apply(Segnalazione segnalazione) {
					return segnalazione.getLon();
				}

			});
		attributeSetterBiConsumers.put(
			"lon",
			new BiConsumer<Segnalazione, Object>() {

				@Override
				public void accept(Segnalazione segnalazione, Object lon) {
					segnalazione.setLon((Double)lon);
				}

			});
		attributeGetterFunctions.put(
			"effetti",
			new Function<Segnalazione, Object>() {

				@Override
				public Object apply(Segnalazione segnalazione) {
					return segnalazione.getEffetti();
				}

			});
		attributeSetterBiConsumers.put(
			"effetti",
			new BiConsumer<Segnalazione, Object>() {

				@Override
				public void accept(Segnalazione segnalazione, Object effetti) {
					segnalazione.setEffetti((Long)effetti);
				}

			});
		attributeGetterFunctions.put(
			"effettiSub",
			new Function<Segnalazione, Object>() {

				@Override
				public Object apply(Segnalazione segnalazione) {
					return segnalazione.getEffettiSub();
				}

			});
		attributeSetterBiConsumers.put(
			"effettiSub",
			new BiConsumer<Segnalazione, Object>() {

				@Override
				public void accept(
					Segnalazione segnalazione, Object effettiSub) {

					segnalazione.setEffettiSub((Long)effettiSub);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getDocumentoAssociato() {
		return _documentoAssociato;
	}

	@Override
	public void setDocumentoAssociato(long documentoAssociato) {
		_columnBitmask |= DOCUMENTOASSOCIATO_COLUMN_BITMASK;

		if (!_setOriginalDocumentoAssociato) {
			_setOriginalDocumentoAssociato = true;

			_originalDocumentoAssociato = _documentoAssociato;
		}

		_documentoAssociato = documentoAssociato;
	}

	public long getOriginalDocumentoAssociato() {
		return _originalDocumentoAssociato;
	}

	@JSON
	@Override
	public Date getDataEvento() {
		return _dataEvento;
	}

	@Override
	public void setDataEvento(Date dataEvento) {
		_dataEvento = dataEvento;
	}

	@JSON
	@Override
	public String getEnteSegnalante() {
		if (_enteSegnalante == null) {
			return "";
		}
		else {
			return _enteSegnalante;
		}
	}

	@Override
	public void setEnteSegnalante(String enteSegnalante) {
		_enteSegnalante = enteSegnalante;
	}

	@JSON
	@Override
	public long getFonte() {
		return _fonte;
	}

	@Override
	public void setFonte(long fonte) {
		_fonte = fonte;
	}

	@JSON
	@Override
	public long getCategoria() {
		return _categoria;
	}

	@Override
	public void setCategoria(long categoria) {
		_categoria = categoria;
	}

	@JSON
	@Override
	public long getSottocategoria() {
		return _sottocategoria;
	}

	@Override
	public void setSottocategoria(long sottocategoria) {
		_sottocategoria = sottocategoria;
	}

	@JSON
	@Override
	public String getRiferimento() {
		if (_riferimento == null) {
			return "";
		}
		else {
			return _riferimento;
		}
	}

	@Override
	public void setRiferimento(String riferimento) {
		_riferimento = riferimento;
	}

	@JSON
	@Override
	public String getDescrizione() {
		if (_descrizione == null) {
			return "";
		}
		else {
			return _descrizione;
		}
	}

	@Override
	public void setDescrizione(String descrizione) {
		_descrizione = descrizione;
	}

	@JSON
	@Override
	public String getNote() {
		if (_note == null) {
			return "";
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	@JSON
	@Override
	public String getArea() {
		if (_area == null) {
			return "";
		}
		else {
			return _area;
		}
	}

	@Override
	public void setArea(String area) {
		_area = area;
	}

	@JSON
	@Override
	public String getProvincia() {
		if (_provincia == null) {
			return "";
		}
		else {
			return _provincia;
		}
	}

	@Override
	public void setProvincia(String provincia) {
		_provincia = provincia;
	}

	@JSON
	@Override
	public String getComune() {
		if (_comune == null) {
			return "";
		}
		else {
			return _comune;
		}
	}

	@Override
	public void setComune(String comune) {
		_comune = comune;
	}

	@JSON
	@Override
	public String getIndirizzo() {
		if (_indirizzo == null) {
			return "";
		}
		else {
			return _indirizzo;
		}
	}

	@Override
	public void setIndirizzo(String indirizzo) {
		_indirizzo = indirizzo;
	}

	@JSON
	@Override
	public String getCivico() {
		if (_civico == null) {
			return "";
		}
		else {
			return _civico;
		}
	}

	@Override
	public void setCivico(String civico) {
		_civico = civico;
	}

	@JSON
	@Override
	public double getLat() {
		return _lat;
	}

	@Override
	public void setLat(double lat) {
		_lat = lat;
	}

	@JSON
	@Override
	public double getLon() {
		return _lon;
	}

	@Override
	public void setLon(double lon) {
		_lon = lon;
	}

	@JSON
	@Override
	public long getEffetti() {
		return _effetti;
	}

	@Override
	public void setEffetti(long effetti) {
		_effetti = effetti;
	}

	@JSON
	@Override
	public long getEffettiSub() {
		return _effettiSub;
	}

	@Override
	public void setEffettiSub(long effettiSub) {
		_effettiSub = effettiSub;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Segnalazione.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Segnalazione toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Segnalazione)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SegnalazioneImpl segnalazioneImpl = new SegnalazioneImpl();

		segnalazioneImpl.setId(getId());
		segnalazioneImpl.setGroupId(getGroupId());
		segnalazioneImpl.setCompanyId(getCompanyId());
		segnalazioneImpl.setUserId(getUserId());
		segnalazioneImpl.setUserName(getUserName());
		segnalazioneImpl.setCreateDate(getCreateDate());
		segnalazioneImpl.setModifiedDate(getModifiedDate());
		segnalazioneImpl.setDocumentoAssociato(getDocumentoAssociato());
		segnalazioneImpl.setDataEvento(getDataEvento());
		segnalazioneImpl.setEnteSegnalante(getEnteSegnalante());
		segnalazioneImpl.setFonte(getFonte());
		segnalazioneImpl.setCategoria(getCategoria());
		segnalazioneImpl.setSottocategoria(getSottocategoria());
		segnalazioneImpl.setRiferimento(getRiferimento());
		segnalazioneImpl.setDescrizione(getDescrizione());
		segnalazioneImpl.setNote(getNote());
		segnalazioneImpl.setArea(getArea());
		segnalazioneImpl.setProvincia(getProvincia());
		segnalazioneImpl.setComune(getComune());
		segnalazioneImpl.setIndirizzo(getIndirizzo());
		segnalazioneImpl.setCivico(getCivico());
		segnalazioneImpl.setLat(getLat());
		segnalazioneImpl.setLon(getLon());
		segnalazioneImpl.setEffetti(getEffetti());
		segnalazioneImpl.setEffettiSub(getEffettiSub());

		segnalazioneImpl.resetOriginalValues();

		return segnalazioneImpl;
	}

	@Override
	public int compareTo(Segnalazione segnalazione) {
		int value = 0;

		if (getId() < segnalazione.getId()) {
			value = -1;
		}
		else if (getId() > segnalazione.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Segnalazione)) {
			return false;
		}

		Segnalazione segnalazione = (Segnalazione)obj;

		long primaryKey = segnalazione.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		SegnalazioneModelImpl segnalazioneModelImpl = this;

		segnalazioneModelImpl._setModifiedDate = false;

		segnalazioneModelImpl._originalDocumentoAssociato =
			segnalazioneModelImpl._documentoAssociato;

		segnalazioneModelImpl._setOriginalDocumentoAssociato = false;

		segnalazioneModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Segnalazione> toCacheModel() {
		SegnalazioneCacheModel segnalazioneCacheModel =
			new SegnalazioneCacheModel();

		segnalazioneCacheModel.id = getId();

		segnalazioneCacheModel.groupId = getGroupId();

		segnalazioneCacheModel.companyId = getCompanyId();

		segnalazioneCacheModel.userId = getUserId();

		segnalazioneCacheModel.userName = getUserName();

		String userName = segnalazioneCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			segnalazioneCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			segnalazioneCacheModel.createDate = createDate.getTime();
		}
		else {
			segnalazioneCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			segnalazioneCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			segnalazioneCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		segnalazioneCacheModel.documentoAssociato = getDocumentoAssociato();

		Date dataEvento = getDataEvento();

		if (dataEvento != null) {
			segnalazioneCacheModel.dataEvento = dataEvento.getTime();
		}
		else {
			segnalazioneCacheModel.dataEvento = Long.MIN_VALUE;
		}

		segnalazioneCacheModel.enteSegnalante = getEnteSegnalante();

		String enteSegnalante = segnalazioneCacheModel.enteSegnalante;

		if ((enteSegnalante != null) && (enteSegnalante.length() == 0)) {
			segnalazioneCacheModel.enteSegnalante = null;
		}

		segnalazioneCacheModel.fonte = getFonte();

		segnalazioneCacheModel.categoria = getCategoria();

		segnalazioneCacheModel.sottocategoria = getSottocategoria();

		segnalazioneCacheModel.riferimento = getRiferimento();

		String riferimento = segnalazioneCacheModel.riferimento;

		if ((riferimento != null) && (riferimento.length() == 0)) {
			segnalazioneCacheModel.riferimento = null;
		}

		segnalazioneCacheModel.descrizione = getDescrizione();

		String descrizione = segnalazioneCacheModel.descrizione;

		if ((descrizione != null) && (descrizione.length() == 0)) {
			segnalazioneCacheModel.descrizione = null;
		}

		segnalazioneCacheModel.note = getNote();

		String note = segnalazioneCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			segnalazioneCacheModel.note = null;
		}

		segnalazioneCacheModel.area = getArea();

		String area = segnalazioneCacheModel.area;

		if ((area != null) && (area.length() == 0)) {
			segnalazioneCacheModel.area = null;
		}

		segnalazioneCacheModel.provincia = getProvincia();

		String provincia = segnalazioneCacheModel.provincia;

		if ((provincia != null) && (provincia.length() == 0)) {
			segnalazioneCacheModel.provincia = null;
		}

		segnalazioneCacheModel.comune = getComune();

		String comune = segnalazioneCacheModel.comune;

		if ((comune != null) && (comune.length() == 0)) {
			segnalazioneCacheModel.comune = null;
		}

		segnalazioneCacheModel.indirizzo = getIndirizzo();

		String indirizzo = segnalazioneCacheModel.indirizzo;

		if ((indirizzo != null) && (indirizzo.length() == 0)) {
			segnalazioneCacheModel.indirizzo = null;
		}

		segnalazioneCacheModel.civico = getCivico();

		String civico = segnalazioneCacheModel.civico;

		if ((civico != null) && (civico.length() == 0)) {
			segnalazioneCacheModel.civico = null;
		}

		segnalazioneCacheModel.lat = getLat();

		segnalazioneCacheModel.lon = getLon();

		segnalazioneCacheModel.effetti = getEffetti();

		segnalazioneCacheModel.effettiSub = getEffettiSub();

		return segnalazioneCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Segnalazione, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Segnalazione, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Segnalazione, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Segnalazione)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Segnalazione, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Segnalazione, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Segnalazione, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Segnalazione)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		Segnalazione.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		Segnalazione.class, ModelWrapper.class
	};

	private long _id;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _documentoAssociato;
	private long _originalDocumentoAssociato;
	private boolean _setOriginalDocumentoAssociato;
	private Date _dataEvento;
	private String _enteSegnalante;
	private long _fonte;
	private long _categoria;
	private long _sottocategoria;
	private String _riferimento;
	private String _descrizione;
	private String _note;
	private String _area;
	private String _provincia;
	private String _comune;
	private String _indirizzo;
	private String _civico;
	private double _lat;
	private double _lon;
	private long _effetti;
	private long _effettiSub;
	private long _columnBitmask;
	private Segnalazione _escapedModel;

}