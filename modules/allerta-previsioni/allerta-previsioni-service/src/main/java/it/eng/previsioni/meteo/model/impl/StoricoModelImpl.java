/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.previsioni.meteo.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.previsioni.meteo.model.Storico;
import it.eng.previsioni.meteo.model.StoricoModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Storico service. Represents a row in the &quot;prev_meteo_Storico&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>StoricoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StoricoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StoricoImpl
 * @generated
 */
@ProviderType
public class StoricoModelImpl
	extends BaseModelImpl<Storico> implements StoricoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a storico model instance should use the <code>Storico</code> interface instead.
	 */
	public static final String TABLE_NAME = "prev_meteo_Storico";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"idZona", Types.INTEGER},
		{"nome", Types.VARCHAR}, {"sigla", Types.VARCHAR},
		{"tipo", Types.VARCHAR}, {"xml", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("idZona", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("nome", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sigla", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tipo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("xml", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table prev_meteo_Storico (id_ LONG not null primary key,idZona INTEGER,nome VARCHAR(75) null,sigla VARCHAR(75) null,tipo VARCHAR(75) null,xml TEXT null)";

	public static final String TABLE_SQL_DROP = "drop table prev_meteo_Storico";

	public static final String ORDER_BY_JPQL = " ORDER BY storico.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY prev_meteo_Storico.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.allerta.previsioni.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.previsioni.meteo.model.Storico"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.allerta.previsioni.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.previsioni.meteo.model.Storico"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		it.eng.allerta.previsioni.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.it.eng.previsioni.meteo.model.Storico"),
		true);

	public static final long SIGLA_COLUMN_BITMASK = 1L;

	public static final long ID_COLUMN_BITMASK = 2L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		it.eng.allerta.previsioni.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.previsioni.meteo.model.Storico"));

	public StoricoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Storico.class;
	}

	@Override
	public String getModelClassName() {
		return Storico.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Storico, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Storico, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Storico, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Storico)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Storico, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Storico, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Storico)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Storico, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Storico, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Storico, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Storico, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Storico, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Storico, Object>>();
		Map<String, BiConsumer<Storico, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Storico, ?>>();

		attributeGetterFunctions.put(
			"id",
			new Function<Storico, Object>() {

				@Override
				public Object apply(Storico storico) {
					return storico.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<Storico, Object>() {

				@Override
				public void accept(Storico storico, Object id) {
					storico.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"idZona",
			new Function<Storico, Object>() {

				@Override
				public Object apply(Storico storico) {
					return storico.getIdZona();
				}

			});
		attributeSetterBiConsumers.put(
			"idZona",
			new BiConsumer<Storico, Object>() {

				@Override
				public void accept(Storico storico, Object idZona) {
					storico.setIdZona((Integer)idZona);
				}

			});
		attributeGetterFunctions.put(
			"nome",
			new Function<Storico, Object>() {

				@Override
				public Object apply(Storico storico) {
					return storico.getNome();
				}

			});
		attributeSetterBiConsumers.put(
			"nome",
			new BiConsumer<Storico, Object>() {

				@Override
				public void accept(Storico storico, Object nome) {
					storico.setNome((String)nome);
				}

			});
		attributeGetterFunctions.put(
			"sigla",
			new Function<Storico, Object>() {

				@Override
				public Object apply(Storico storico) {
					return storico.getSigla();
				}

			});
		attributeSetterBiConsumers.put(
			"sigla",
			new BiConsumer<Storico, Object>() {

				@Override
				public void accept(Storico storico, Object sigla) {
					storico.setSigla((String)sigla);
				}

			});
		attributeGetterFunctions.put(
			"tipo",
			new Function<Storico, Object>() {

				@Override
				public Object apply(Storico storico) {
					return storico.getTipo();
				}

			});
		attributeSetterBiConsumers.put(
			"tipo",
			new BiConsumer<Storico, Object>() {

				@Override
				public void accept(Storico storico, Object tipo) {
					storico.setTipo((String)tipo);
				}

			});
		attributeGetterFunctions.put(
			"xml",
			new Function<Storico, Object>() {

				@Override
				public Object apply(Storico storico) {
					return storico.getXml();
				}

			});
		attributeSetterBiConsumers.put(
			"xml",
			new BiConsumer<Storico, Object>() {

				@Override
				public void accept(Storico storico, Object xml) {
					storico.setXml((String)xml);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@Override
	public int getIdZona() {
		return _idZona;
	}

	@Override
	public void setIdZona(int idZona) {
		_idZona = idZona;
	}

	@Override
	public String getNome() {
		if (_nome == null) {
			return "";
		}
		else {
			return _nome;
		}
	}

	@Override
	public void setNome(String nome) {
		_nome = nome;
	}

	@Override
	public String getSigla() {
		if (_sigla == null) {
			return "";
		}
		else {
			return _sigla;
		}
	}

	@Override
	public void setSigla(String sigla) {
		_columnBitmask |= SIGLA_COLUMN_BITMASK;

		if (_originalSigla == null) {
			_originalSigla = _sigla;
		}

		_sigla = sigla;
	}

	public String getOriginalSigla() {
		return GetterUtil.getString(_originalSigla);
	}

	@Override
	public String getTipo() {
		if (_tipo == null) {
			return "";
		}
		else {
			return _tipo;
		}
	}

	@Override
	public void setTipo(String tipo) {
		_tipo = tipo;
	}

	@Override
	public String getXml() {
		if (_xml == null) {
			return "";
		}
		else {
			return _xml;
		}
	}

	@Override
	public void setXml(String xml) {
		_xml = xml;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Storico.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Storico toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Storico)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StoricoImpl storicoImpl = new StoricoImpl();

		storicoImpl.setId(getId());
		storicoImpl.setIdZona(getIdZona());
		storicoImpl.setNome(getNome());
		storicoImpl.setSigla(getSigla());
		storicoImpl.setTipo(getTipo());
		storicoImpl.setXml(getXml());

		storicoImpl.resetOriginalValues();

		return storicoImpl;
	}

	@Override
	public int compareTo(Storico storico) {
		int value = 0;

		if (getId() < storico.getId()) {
			value = -1;
		}
		else if (getId() > storico.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Storico)) {
			return false;
		}

		Storico storico = (Storico)obj;

		long primaryKey = storico.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		StoricoModelImpl storicoModelImpl = this;

		storicoModelImpl._originalSigla = storicoModelImpl._sigla;

		storicoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Storico> toCacheModel() {
		StoricoCacheModel storicoCacheModel = new StoricoCacheModel();

		storicoCacheModel.id = getId();

		storicoCacheModel.idZona = getIdZona();

		storicoCacheModel.nome = getNome();

		String nome = storicoCacheModel.nome;

		if ((nome != null) && (nome.length() == 0)) {
			storicoCacheModel.nome = null;
		}

		storicoCacheModel.sigla = getSigla();

		String sigla = storicoCacheModel.sigla;

		if ((sigla != null) && (sigla.length() == 0)) {
			storicoCacheModel.sigla = null;
		}

		storicoCacheModel.tipo = getTipo();

		String tipo = storicoCacheModel.tipo;

		if ((tipo != null) && (tipo.length() == 0)) {
			storicoCacheModel.tipo = null;
		}

		storicoCacheModel.xml = getXml();

		String xml = storicoCacheModel.xml;

		if ((xml != null) && (xml.length() == 0)) {
			storicoCacheModel.xml = null;
		}

		return storicoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Storico, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Storico, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Storico, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Storico)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Storico, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Storico, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Storico, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Storico)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		Storico.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		Storico.class, ModelWrapper.class
	};

	private long _id;
	private int _idZona;
	private String _nome;
	private String _sigla;
	private String _originalSigla;
	private String _tipo;
	private String _xml;
	private long _columnBitmask;
	private Storico _escapedModel;

}