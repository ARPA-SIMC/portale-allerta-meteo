/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.previsioni.meteo.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.previsioni.meteo.model.Bollettino;
import it.eng.previsioni.meteo.model.BollettinoModel;
import it.eng.previsioni.meteo.model.BollettinoSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Bollettino service. Represents a row in the &quot;prev_meteo_Bollettino&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>BollettinoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BollettinoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BollettinoImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class BollettinoModelImpl
	extends BaseModelImpl<Bollettino> implements BollettinoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bollettino model instance should use the <code>Bollettino</code> interface instead.
	 */
	public static final String TABLE_NAME = "prev_meteo_Bollettino";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"tipo", Types.VARCHAR},
		{"timestamp", Types.BIGINT}, {"emissione", Types.VARCHAR},
		{"validita", Types.VARCHAR}, {"xml_content", Types.VARCHAR},
		{"json", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tipo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("timestamp", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("emissione", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("validita", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("xml_content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("json", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table prev_meteo_Bollettino (id_ LONG not null primary key,tipo VARCHAR(75) null,timestamp LONG,emissione VARCHAR(75) null,validita VARCHAR(75) null,xml_content TEXT null,json TEXT null)";

	public static final String TABLE_SQL_DROP =
		"drop table prev_meteo_Bollettino";

	public static final String ORDER_BY_JPQL = " ORDER BY bollettino.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY prev_meteo_Bollettino.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.allerta.previsioni.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.previsioni.meteo.model.Bollettino"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.allerta.previsioni.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.previsioni.meteo.model.Bollettino"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		it.eng.allerta.previsioni.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.it.eng.previsioni.meteo.model.Bollettino"),
		true);

	public static final long TIPO_COLUMN_BITMASK = 1L;

	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Bollettino toModel(BollettinoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Bollettino model = new BollettinoImpl();

		model.setId(soapModel.getId());
		model.setTipo(soapModel.getTipo());
		model.setTimestamp(soapModel.getTimestamp());
		model.setEmissione(soapModel.getEmissione());
		model.setValidita(soapModel.getValidita());
		model.setXml_content(soapModel.getXml_content());
		model.setJson(soapModel.getJson());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Bollettino> toModels(BollettinoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Bollettino> models = new ArrayList<Bollettino>(soapModels.length);

		for (BollettinoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		it.eng.allerta.previsioni.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.previsioni.meteo.model.Bollettino"));

	public BollettinoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Bollettino.class;
	}

	@Override
	public String getModelClassName() {
		return Bollettino.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Bollettino, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Bollettino, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Bollettino, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Bollettino)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Bollettino, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Bollettino, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Bollettino)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Bollettino, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Bollettino, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Bollettino, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Bollettino, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Bollettino, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Bollettino, Object>>();
		Map<String, BiConsumer<Bollettino, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Bollettino, ?>>();

		attributeGetterFunctions.put(
			"id",
			new Function<Bollettino, Object>() {

				@Override
				public Object apply(Bollettino bollettino) {
					return bollettino.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<Bollettino, Object>() {

				@Override
				public void accept(Bollettino bollettino, Object id) {
					bollettino.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"tipo",
			new Function<Bollettino, Object>() {

				@Override
				public Object apply(Bollettino bollettino) {
					return bollettino.getTipo();
				}

			});
		attributeSetterBiConsumers.put(
			"tipo",
			new BiConsumer<Bollettino, Object>() {

				@Override
				public void accept(Bollettino bollettino, Object tipo) {
					bollettino.setTipo((String)tipo);
				}

			});
		attributeGetterFunctions.put(
			"timestamp",
			new Function<Bollettino, Object>() {

				@Override
				public Object apply(Bollettino bollettino) {
					return bollettino.getTimestamp();
				}

			});
		attributeSetterBiConsumers.put(
			"timestamp",
			new BiConsumer<Bollettino, Object>() {

				@Override
				public void accept(Bollettino bollettino, Object timestamp) {
					bollettino.setTimestamp((Long)timestamp);
				}

			});
		attributeGetterFunctions.put(
			"emissione",
			new Function<Bollettino, Object>() {

				@Override
				public Object apply(Bollettino bollettino) {
					return bollettino.getEmissione();
				}

			});
		attributeSetterBiConsumers.put(
			"emissione",
			new BiConsumer<Bollettino, Object>() {

				@Override
				public void accept(Bollettino bollettino, Object emissione) {
					bollettino.setEmissione((String)emissione);
				}

			});
		attributeGetterFunctions.put(
			"validita",
			new Function<Bollettino, Object>() {

				@Override
				public Object apply(Bollettino bollettino) {
					return bollettino.getValidita();
				}

			});
		attributeSetterBiConsumers.put(
			"validita",
			new BiConsumer<Bollettino, Object>() {

				@Override
				public void accept(Bollettino bollettino, Object validita) {
					bollettino.setValidita((String)validita);
				}

			});
		attributeGetterFunctions.put(
			"xml_content",
			new Function<Bollettino, Object>() {

				@Override
				public Object apply(Bollettino bollettino) {
					return bollettino.getXml_content();
				}

			});
		attributeSetterBiConsumers.put(
			"xml_content",
			new BiConsumer<Bollettino, Object>() {

				@Override
				public void accept(Bollettino bollettino, Object xml_content) {
					bollettino.setXml_content((String)xml_content);
				}

			});
		attributeGetterFunctions.put(
			"json",
			new Function<Bollettino, Object>() {

				@Override
				public Object apply(Bollettino bollettino) {
					return bollettino.getJson();
				}

			});
		attributeSetterBiConsumers.put(
			"json",
			new BiConsumer<Bollettino, Object>() {

				@Override
				public void accept(Bollettino bollettino, Object json) {
					bollettino.setJson((String)json);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getTipo() {
		if (_tipo == null) {
			return "";
		}
		else {
			return _tipo;
		}
	}

	@Override
	public void setTipo(String tipo) {
		_columnBitmask |= TIPO_COLUMN_BITMASK;

		if (_originalTipo == null) {
			_originalTipo = _tipo;
		}

		_tipo = tipo;
	}

	public String getOriginalTipo() {
		return GetterUtil.getString(_originalTipo);
	}

	@JSON
	@Override
	public long getTimestamp() {
		return _timestamp;
	}

	@Override
	public void setTimestamp(long timestamp) {
		_timestamp = timestamp;
	}

	@JSON
	@Override
	public String getEmissione() {
		if (_emissione == null) {
			return "";
		}
		else {
			return _emissione;
		}
	}

	@Override
	public void setEmissione(String emissione) {
		_emissione = emissione;
	}

	@JSON
	@Override
	public String getValidita() {
		if (_validita == null) {
			return "";
		}
		else {
			return _validita;
		}
	}

	@Override
	public void setValidita(String validita) {
		_validita = validita;
	}

	@JSON
	@Override
	public String getXml_content() {
		if (_xml_content == null) {
			return "";
		}
		else {
			return _xml_content;
		}
	}

	@Override
	public void setXml_content(String xml_content) {
		_xml_content = xml_content;
	}

	@JSON
	@Override
	public String getJson() {
		if (_json == null) {
			return "";
		}
		else {
			return _json;
		}
	}

	@Override
	public void setJson(String json) {
		_json = json;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Bollettino.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Bollettino toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Bollettino)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BollettinoImpl bollettinoImpl = new BollettinoImpl();

		bollettinoImpl.setId(getId());
		bollettinoImpl.setTipo(getTipo());
		bollettinoImpl.setTimestamp(getTimestamp());
		bollettinoImpl.setEmissione(getEmissione());
		bollettinoImpl.setValidita(getValidita());
		bollettinoImpl.setXml_content(getXml_content());
		bollettinoImpl.setJson(getJson());

		bollettinoImpl.resetOriginalValues();

		return bollettinoImpl;
	}

	@Override
	public int compareTo(Bollettino bollettino) {
		int value = 0;

		if (getId() < bollettino.getId()) {
			value = -1;
		}
		else if (getId() > bollettino.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Bollettino)) {
			return false;
		}

		Bollettino bollettino = (Bollettino)obj;

		long primaryKey = bollettino.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		BollettinoModelImpl bollettinoModelImpl = this;

		bollettinoModelImpl._originalTipo = bollettinoModelImpl._tipo;

		bollettinoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Bollettino> toCacheModel() {
		BollettinoCacheModel bollettinoCacheModel = new BollettinoCacheModel();

		bollettinoCacheModel.id = getId();

		bollettinoCacheModel.tipo = getTipo();

		String tipo = bollettinoCacheModel.tipo;

		if ((tipo != null) && (tipo.length() == 0)) {
			bollettinoCacheModel.tipo = null;
		}

		bollettinoCacheModel.timestamp = getTimestamp();

		bollettinoCacheModel.emissione = getEmissione();

		String emissione = bollettinoCacheModel.emissione;

		if ((emissione != null) && (emissione.length() == 0)) {
			bollettinoCacheModel.emissione = null;
		}

		bollettinoCacheModel.validita = getValidita();

		String validita = bollettinoCacheModel.validita;

		if ((validita != null) && (validita.length() == 0)) {
			bollettinoCacheModel.validita = null;
		}

		bollettinoCacheModel.xml_content = getXml_content();

		String xml_content = bollettinoCacheModel.xml_content;

		if ((xml_content != null) && (xml_content.length() == 0)) {
			bollettinoCacheModel.xml_content = null;
		}

		bollettinoCacheModel.json = getJson();

		String json = bollettinoCacheModel.json;

		if ((json != null) && (json.length() == 0)) {
			bollettinoCacheModel.json = null;
		}

		return bollettinoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Bollettino, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Bollettino, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Bollettino, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Bollettino)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Bollettino, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Bollettino, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Bollettino, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Bollettino)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		Bollettino.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		Bollettino.class, ModelWrapper.class
	};

	private long _id;
	private String _tipo;
	private String _originalTipo;
	private long _timestamp;
	private String _emissione;
	private String _validita;
	private String _xml_content;
	private String _json;
	private long _columnBitmask;
	private Bollettino _escapedModel;

}