/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package allerta.dewetra.model.impl;

import aQute.bnd.annotation.ProviderType;

import allerta.dewetra.model.HRW;
import allerta.dewetra.model.HRWModel;
import allerta.dewetra.model.HRWSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the HRW service. Represents a row in the &quot;DEWETRA_HRW&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>HRWModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HRWImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see HRWImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class HRWModelImpl extends BaseModelImpl<HRW> implements HRWModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a hrw model instance should use the <code>HRW</code> interface instead.
	 */
	public static final String TABLE_NAME = "DEWETRA_HRW";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"comune", Types.VARCHAR},
		{"timestamp", Types.TIMESTAMP}, {"HRI", Types.DOUBLE},
		{"SSI", Types.DOUBLE}, {"SRI", Types.DOUBLE}, {"VMI", Types.DOUBLE},
		{"VIL", Types.DOUBLE}, {"POH", Types.DOUBLE}, {"ETM", Types.DOUBLE},
		{"TOP", Types.DOUBLE}, {"LGT", Types.DOUBLE}, {"Pers", Types.DOUBLE},
		{"SRT", Types.DOUBLE}, {"SRT_3", Types.DOUBLE}, {"SRT_6", Types.DOUBLE},
		{"Vel", Types.DOUBLE}, {"Dir", Types.DOUBLE}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("comune", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("timestamp", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("HRI", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("SSI", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("SRI", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("VMI", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("VIL", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("POH", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("ETM", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("TOP", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("LGT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("Pers", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("SRT", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("SRT_3", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("SRT_6", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("Vel", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("Dir", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DEWETRA_HRW (id_ LONG not null primary key,comune VARCHAR(75) null,timestamp DATE null,HRI DOUBLE,SSI DOUBLE,SRI DOUBLE,VMI DOUBLE,VIL DOUBLE,POH DOUBLE,ETM DOUBLE,TOP DOUBLE,LGT DOUBLE,Pers DOUBLE,SRT DOUBLE,SRT_3 DOUBLE,SRT_6 DOUBLE,Vel DOUBLE,Dir DOUBLE)";

	public static final String TABLE_SQL_DROP = "drop table DEWETRA_HRW";

	public static final String ORDER_BY_JPQL = " ORDER BY hrw.id ASC";

	public static final String ORDER_BY_SQL = " ORDER BY DEWETRA_HRW.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.dewetra.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.allerta.dewetra.model.HRW"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.dewetra.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.allerta.dewetra.model.HRW"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		allerta.dewetra.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.allerta.dewetra.model.HRW"),
		true);

	public static final long COMUNE_COLUMN_BITMASK = 1L;

	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static HRW toModel(HRWSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		HRW model = new HRWImpl();

		model.setId(soapModel.getId());
		model.setComune(soapModel.getComune());
		model.setTimestamp(soapModel.getTimestamp());
		model.setHRI(soapModel.getHRI());
		model.setSSI(soapModel.getSSI());
		model.setSRI(soapModel.getSRI());
		model.setVMI(soapModel.getVMI());
		model.setVIL(soapModel.getVIL());
		model.setPOH(soapModel.getPOH());
		model.setETM(soapModel.getETM());
		model.setTOP(soapModel.getTOP());
		model.setLGT(soapModel.getLGT());
		model.setPers(soapModel.getPers());
		model.setSRT(soapModel.getSRT());
		model.setSRT_3(soapModel.getSRT_3());
		model.setSRT_6(soapModel.getSRT_6());
		model.setVel(soapModel.getVel());
		model.setDir(soapModel.getDir());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<HRW> toModels(HRWSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<HRW> models = new ArrayList<HRW>(soapModels.length);

		for (HRWSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		allerta.dewetra.service.util.ServiceProps.get(
			"lock.expiration.time.allerta.dewetra.model.HRW"));

	public HRWModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return HRW.class;
	}

	@Override
	public String getModelClassName() {
		return HRW.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<HRW, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<HRW, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HRW, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((HRW)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<HRW, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<HRW, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((HRW)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<HRW, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<HRW, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<HRW, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<HRW, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<HRW, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<HRW, Object>>();
		Map<String, BiConsumer<HRW, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<HRW, ?>>();

		attributeGetterFunctions.put(
			"id",
			new Function<HRW, Object>() {

				@Override
				public Object apply(HRW hrw) {
					return hrw.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<HRW, Object>() {

				@Override
				public void accept(HRW hrw, Object id) {
					hrw.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"comune",
			new Function<HRW, Object>() {

				@Override
				public Object apply(HRW hrw) {
					return hrw.getComune();
				}

			});
		attributeSetterBiConsumers.put(
			"comune",
			new BiConsumer<HRW, Object>() {

				@Override
				public void accept(HRW hrw, Object comune) {
					hrw.setComune((String)comune);
				}

			});
		attributeGetterFunctions.put(
			"timestamp",
			new Function<HRW, Object>() {

				@Override
				public Object apply(HRW hrw) {
					return hrw.getTimestamp();
				}

			});
		attributeSetterBiConsumers.put(
			"timestamp",
			new BiConsumer<HRW, Object>() {

				@Override
				public void accept(HRW hrw, Object timestamp) {
					hrw.setTimestamp((Date)timestamp);
				}

			});
		attributeGetterFunctions.put(
			"HRI",
			new Function<HRW, Object>() {

				@Override
				public Object apply(HRW hrw) {
					return hrw.getHRI();
				}

			});
		attributeSetterBiConsumers.put(
			"HRI",
			new BiConsumer<HRW, Object>() {

				@Override
				public void accept(HRW hrw, Object HRI) {
					hrw.setHRI((Double)HRI);
				}

			});
		attributeGetterFunctions.put(
			"SSI",
			new Function<HRW, Object>() {

				@Override
				public Object apply(HRW hrw) {
					return hrw.getSSI();
				}

			});
		attributeSetterBiConsumers.put(
			"SSI",
			new BiConsumer<HRW, Object>() {

				@Override
				public void accept(HRW hrw, Object SSI) {
					hrw.setSSI((Double)SSI);
				}

			});
		attributeGetterFunctions.put(
			"SRI",
			new Function<HRW, Object>() {

				@Override
				public Object apply(HRW hrw) {
					return hrw.getSRI();
				}

			});
		attributeSetterBiConsumers.put(
			"SRI",
			new BiConsumer<HRW, Object>() {

				@Override
				public void accept(HRW hrw, Object SRI) {
					hrw.setSRI((Double)SRI);
				}

			});
		attributeGetterFunctions.put(
			"VMI",
			new Function<HRW, Object>() {

				@Override
				public Object apply(HRW hrw) {
					return hrw.getVMI();
				}

			});
		attributeSetterBiConsumers.put(
			"VMI",
			new BiConsumer<HRW, Object>() {

				@Override
				public void accept(HRW hrw, Object VMI) {
					hrw.setVMI((Double)VMI);
				}

			});
		attributeGetterFunctions.put(
			"VIL",
			new Function<HRW, Object>() {

				@Override
				public Object apply(HRW hrw) {
					return hrw.getVIL();
				}

			});
		attributeSetterBiConsumers.put(
			"VIL",
			new BiConsumer<HRW, Object>() {

				@Override
				public void accept(HRW hrw, Object VIL) {
					hrw.setVIL((Double)VIL);
				}

			});
		attributeGetterFunctions.put(
			"POH",
			new Function<HRW, Object>() {

				@Override
				public Object apply(HRW hrw) {
					return hrw.getPOH();
				}

			});
		attributeSetterBiConsumers.put(
			"POH",
			new BiConsumer<HRW, Object>() {

				@Override
				public void accept(HRW hrw, Object POH) {
					hrw.setPOH((Double)POH);
				}

			});
		attributeGetterFunctions.put(
			"ETM",
			new Function<HRW, Object>() {

				@Override
				public Object apply(HRW hrw) {
					return hrw.getETM();
				}

			});
		attributeSetterBiConsumers.put(
			"ETM",
			new BiConsumer<HRW, Object>() {

				@Override
				public void accept(HRW hrw, Object ETM) {
					hrw.setETM((Double)ETM);
				}

			});
		attributeGetterFunctions.put(
			"TOP",
			new Function<HRW, Object>() {

				@Override
				public Object apply(HRW hrw) {
					return hrw.getTOP();
				}

			});
		attributeSetterBiConsumers.put(
			"TOP",
			new BiConsumer<HRW, Object>() {

				@Override
				public void accept(HRW hrw, Object TOP) {
					hrw.setTOP((Double)TOP);
				}

			});
		attributeGetterFunctions.put(
			"LGT",
			new Function<HRW, Object>() {

				@Override
				public Object apply(HRW hrw) {
					return hrw.getLGT();
				}

			});
		attributeSetterBiConsumers.put(
			"LGT",
			new BiConsumer<HRW, Object>() {

				@Override
				public void accept(HRW hrw, Object LGT) {
					hrw.setLGT((Double)LGT);
				}

			});
		attributeGetterFunctions.put(
			"Pers",
			new Function<HRW, Object>() {

				@Override
				public Object apply(HRW hrw) {
					return hrw.getPers();
				}

			});
		attributeSetterBiConsumers.put(
			"Pers",
			new BiConsumer<HRW, Object>() {

				@Override
				public void accept(HRW hrw, Object Pers) {
					hrw.setPers((Double)Pers);
				}

			});
		attributeGetterFunctions.put(
			"SRT",
			new Function<HRW, Object>() {

				@Override
				public Object apply(HRW hrw) {
					return hrw.getSRT();
				}

			});
		attributeSetterBiConsumers.put(
			"SRT",
			new BiConsumer<HRW, Object>() {

				@Override
				public void accept(HRW hrw, Object SRT) {
					hrw.setSRT((Double)SRT);
				}

			});
		attributeGetterFunctions.put(
			"SRT_3",
			new Function<HRW, Object>() {

				@Override
				public Object apply(HRW hrw) {
					return hrw.getSRT_3();
				}

			});
		attributeSetterBiConsumers.put(
			"SRT_3",
			new BiConsumer<HRW, Object>() {

				@Override
				public void accept(HRW hrw, Object SRT_3) {
					hrw.setSRT_3((Double)SRT_3);
				}

			});
		attributeGetterFunctions.put(
			"SRT_6",
			new Function<HRW, Object>() {

				@Override
				public Object apply(HRW hrw) {
					return hrw.getSRT_6();
				}

			});
		attributeSetterBiConsumers.put(
			"SRT_6",
			new BiConsumer<HRW, Object>() {

				@Override
				public void accept(HRW hrw, Object SRT_6) {
					hrw.setSRT_6((Double)SRT_6);
				}

			});
		attributeGetterFunctions.put(
			"Vel",
			new Function<HRW, Object>() {

				@Override
				public Object apply(HRW hrw) {
					return hrw.getVel();
				}

			});
		attributeSetterBiConsumers.put(
			"Vel",
			new BiConsumer<HRW, Object>() {

				@Override
				public void accept(HRW hrw, Object Vel) {
					hrw.setVel((Double)Vel);
				}

			});
		attributeGetterFunctions.put(
			"Dir",
			new Function<HRW, Object>() {

				@Override
				public Object apply(HRW hrw) {
					return hrw.getDir();
				}

			});
		attributeSetterBiConsumers.put(
			"Dir",
			new BiConsumer<HRW, Object>() {

				@Override
				public void accept(HRW hrw, Object Dir) {
					hrw.setDir((Double)Dir);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getComune() {
		if (_comune == null) {
			return "";
		}
		else {
			return _comune;
		}
	}

	@Override
	public void setComune(String comune) {
		_columnBitmask |= COMUNE_COLUMN_BITMASK;

		if (_originalComune == null) {
			_originalComune = _comune;
		}

		_comune = comune;
	}

	public String getOriginalComune() {
		return GetterUtil.getString(_originalComune);
	}

	@JSON
	@Override
	public Date getTimestamp() {
		return _timestamp;
	}

	@Override
	public void setTimestamp(Date timestamp) {
		_timestamp = timestamp;
	}

	@JSON
	@Override
	public double getHRI() {
		return _HRI;
	}

	@Override
	public void setHRI(double HRI) {
		_HRI = HRI;
	}

	@JSON
	@Override
	public double getSSI() {
		return _SSI;
	}

	@Override
	public void setSSI(double SSI) {
		_SSI = SSI;
	}

	@JSON
	@Override
	public double getSRI() {
		return _SRI;
	}

	@Override
	public void setSRI(double SRI) {
		_SRI = SRI;
	}

	@JSON
	@Override
	public double getVMI() {
		return _VMI;
	}

	@Override
	public void setVMI(double VMI) {
		_VMI = VMI;
	}

	@JSON
	@Override
	public double getVIL() {
		return _VIL;
	}

	@Override
	public void setVIL(double VIL) {
		_VIL = VIL;
	}

	@JSON
	@Override
	public double getPOH() {
		return _POH;
	}

	@Override
	public void setPOH(double POH) {
		_POH = POH;
	}

	@JSON
	@Override
	public double getETM() {
		return _ETM;
	}

	@Override
	public void setETM(double ETM) {
		_ETM = ETM;
	}

	@JSON
	@Override
	public double getTOP() {
		return _TOP;
	}

	@Override
	public void setTOP(double TOP) {
		_TOP = TOP;
	}

	@JSON
	@Override
	public double getLGT() {
		return _LGT;
	}

	@Override
	public void setLGT(double LGT) {
		_LGT = LGT;
	}

	@JSON
	@Override
	public double getPers() {
		return _Pers;
	}

	@Override
	public void setPers(double Pers) {
		_Pers = Pers;
	}

	@JSON
	@Override
	public double getSRT() {
		return _SRT;
	}

	@Override
	public void setSRT(double SRT) {
		_SRT = SRT;
	}

	@JSON
	@Override
	public double getSRT_3() {
		return _SRT_3;
	}

	@Override
	public void setSRT_3(double SRT_3) {
		_SRT_3 = SRT_3;
	}

	@JSON
	@Override
	public double getSRT_6() {
		return _SRT_6;
	}

	@Override
	public void setSRT_6(double SRT_6) {
		_SRT_6 = SRT_6;
	}

	@JSON
	@Override
	public double getVel() {
		return _Vel;
	}

	@Override
	public void setVel(double Vel) {
		_Vel = Vel;
	}

	@JSON
	@Override
	public double getDir() {
		return _Dir;
	}

	@Override
	public void setDir(double Dir) {
		_Dir = Dir;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, HRW.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public HRW toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (HRW)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HRWImpl hrwImpl = new HRWImpl();

		hrwImpl.setId(getId());
		hrwImpl.setComune(getComune());
		hrwImpl.setTimestamp(getTimestamp());
		hrwImpl.setHRI(getHRI());
		hrwImpl.setSSI(getSSI());
		hrwImpl.setSRI(getSRI());
		hrwImpl.setVMI(getVMI());
		hrwImpl.setVIL(getVIL());
		hrwImpl.setPOH(getPOH());
		hrwImpl.setETM(getETM());
		hrwImpl.setTOP(getTOP());
		hrwImpl.setLGT(getLGT());
		hrwImpl.setPers(getPers());
		hrwImpl.setSRT(getSRT());
		hrwImpl.setSRT_3(getSRT_3());
		hrwImpl.setSRT_6(getSRT_6());
		hrwImpl.setVel(getVel());
		hrwImpl.setDir(getDir());

		hrwImpl.resetOriginalValues();

		return hrwImpl;
	}

	@Override
	public int compareTo(HRW hrw) {
		int value = 0;

		if (getId() < hrw.getId()) {
			value = -1;
		}
		else if (getId() > hrw.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof HRW)) {
			return false;
		}

		HRW hrw = (HRW)obj;

		long primaryKey = hrw.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		HRWModelImpl hrwModelImpl = this;

		hrwModelImpl._originalComune = hrwModelImpl._comune;

		hrwModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<HRW> toCacheModel() {
		HRWCacheModel hrwCacheModel = new HRWCacheModel();

		hrwCacheModel.id = getId();

		hrwCacheModel.comune = getComune();

		String comune = hrwCacheModel.comune;

		if ((comune != null) && (comune.length() == 0)) {
			hrwCacheModel.comune = null;
		}

		Date timestamp = getTimestamp();

		if (timestamp != null) {
			hrwCacheModel.timestamp = timestamp.getTime();
		}
		else {
			hrwCacheModel.timestamp = Long.MIN_VALUE;
		}

		hrwCacheModel.HRI = getHRI();

		hrwCacheModel.SSI = getSSI();

		hrwCacheModel.SRI = getSRI();

		hrwCacheModel.VMI = getVMI();

		hrwCacheModel.VIL = getVIL();

		hrwCacheModel.POH = getPOH();

		hrwCacheModel.ETM = getETM();

		hrwCacheModel.TOP = getTOP();

		hrwCacheModel.LGT = getLGT();

		hrwCacheModel.Pers = getPers();

		hrwCacheModel.SRT = getSRT();

		hrwCacheModel.SRT_3 = getSRT_3();

		hrwCacheModel.SRT_6 = getSRT_6();

		hrwCacheModel.Vel = getVel();

		hrwCacheModel.Dir = getDir();

		return hrwCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<HRW, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<HRW, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HRW, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((HRW)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<HRW, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<HRW, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HRW, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((HRW)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = HRW.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		HRW.class, ModelWrapper.class
	};

	private long _id;
	private String _comune;
	private String _originalComune;
	private Date _timestamp;

	private double _HRI;

	private double _SSI;

	private double _SRI;

	private double _VMI;

	private double _VIL;

	private double _POH;

	private double _ETM;

	private double _TOP;

	private double _LGT;

	private double _Pers;

	private double _SRT;

	private double _SRT_3;

	private double _SRT_6;

	private double _Vel;
	private double _Dir;
	private long _columnBitmask;
	private HRW _escapedModel;

}