/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.animaeteo.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.animaeteo.model.AnimeteoImg;
import it.eng.animaeteo.model.AnimeteoImgModel;
import it.eng.animaeteo.model.AnimeteoImgSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AnimeteoImg service. Represents a row in the &quot;animeteo_AnimeteoImg&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>AnimeteoImgModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AnimeteoImgImpl}.
 * </p>
 *
 * @author UTENTE
 * @see AnimeteoImgImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class AnimeteoImgModelImpl
	extends BaseModelImpl<AnimeteoImg> implements AnimeteoImgModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a animeteo img model instance should use the <code>AnimeteoImg</code> interface instead.
	 */
	public static final String TABLE_NAME = "animeteo_AnimeteoImg";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"name", Types.VARCHAR},
		{"type_", Types.VARCHAR}, {"inserted", Types.TIMESTAMP},
		{"data_", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inserted", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("data_", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table animeteo_AnimeteoImg (id_ LONG not null primary key,name VARCHAR(75) null,type_ VARCHAR(75) null,inserted DATE null,data_ TEXT null)";

	public static final String TABLE_SQL_DROP =
		"drop table animeteo_AnimeteoImg";

	public static final String ORDER_BY_JPQL = " ORDER BY animeteoImg.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY animeteo_AnimeteoImg.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.allerta.animazionemeteo.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.animaeteo.model.AnimeteoImg"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		it.eng.allerta.animazionemeteo.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.animaeteo.model.AnimeteoImg"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		it.eng.allerta.animazionemeteo.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.it.eng.animaeteo.model.AnimeteoImg"),
		true);

	public static final long TYPE_COLUMN_BITMASK = 1L;

	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AnimeteoImg toModel(AnimeteoImgSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AnimeteoImg model = new AnimeteoImgImpl();

		model.setId(soapModel.getId());
		model.setName(soapModel.getName());
		model.setType(soapModel.getType());
		model.setInserted(soapModel.getInserted());
		model.setData(soapModel.getData());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AnimeteoImg> toModels(AnimeteoImgSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AnimeteoImg> models = new ArrayList<AnimeteoImg>(
			soapModels.length);

		for (AnimeteoImgSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		it.eng.allerta.animazionemeteo.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.animaeteo.model.AnimeteoImg"));

	public AnimeteoImgModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AnimeteoImg.class;
	}

	@Override
	public String getModelClassName() {
		return AnimeteoImg.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AnimeteoImg, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AnimeteoImg, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AnimeteoImg, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AnimeteoImg)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AnimeteoImg, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AnimeteoImg, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AnimeteoImg)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AnimeteoImg, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AnimeteoImg, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<AnimeteoImg, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<AnimeteoImg, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<AnimeteoImg, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<AnimeteoImg, Object>>();
		Map<String, BiConsumer<AnimeteoImg, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<AnimeteoImg, ?>>();

		attributeGetterFunctions.put(
			"id",
			new Function<AnimeteoImg, Object>() {

				@Override
				public Object apply(AnimeteoImg animeteoImg) {
					return animeteoImg.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<AnimeteoImg, Object>() {

				@Override
				public void accept(AnimeteoImg animeteoImg, Object id) {
					animeteoImg.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"name",
			new Function<AnimeteoImg, Object>() {

				@Override
				public Object apply(AnimeteoImg animeteoImg) {
					return animeteoImg.getName();
				}

			});
		attributeSetterBiConsumers.put(
			"name",
			new BiConsumer<AnimeteoImg, Object>() {

				@Override
				public void accept(AnimeteoImg animeteoImg, Object name) {
					animeteoImg.setName((String)name);
				}

			});
		attributeGetterFunctions.put(
			"type",
			new Function<AnimeteoImg, Object>() {

				@Override
				public Object apply(AnimeteoImg animeteoImg) {
					return animeteoImg.getType();
				}

			});
		attributeSetterBiConsumers.put(
			"type",
			new BiConsumer<AnimeteoImg, Object>() {

				@Override
				public void accept(AnimeteoImg animeteoImg, Object type) {
					animeteoImg.setType((String)type);
				}

			});
		attributeGetterFunctions.put(
			"inserted",
			new Function<AnimeteoImg, Object>() {

				@Override
				public Object apply(AnimeteoImg animeteoImg) {
					return animeteoImg.getInserted();
				}

			});
		attributeSetterBiConsumers.put(
			"inserted",
			new BiConsumer<AnimeteoImg, Object>() {

				@Override
				public void accept(AnimeteoImg animeteoImg, Object inserted) {
					animeteoImg.setInserted((Date)inserted);
				}

			});
		attributeGetterFunctions.put(
			"data",
			new Function<AnimeteoImg, Object>() {

				@Override
				public Object apply(AnimeteoImg animeteoImg) {
					return animeteoImg.getData();
				}

			});
		attributeSetterBiConsumers.put(
			"data",
			new BiConsumer<AnimeteoImg, Object>() {

				@Override
				public void accept(AnimeteoImg animeteoImg, Object data) {
					animeteoImg.setData((String)data);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return "";
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (_originalType == null) {
			_originalType = _type;
		}

		_type = type;
	}

	public String getOriginalType() {
		return GetterUtil.getString(_originalType);
	}

	@JSON
	@Override
	public Date getInserted() {
		return _inserted;
	}

	@Override
	public void setInserted(Date inserted) {
		_inserted = inserted;
	}

	@JSON
	@Override
	public String getData() {
		if (_data == null) {
			return "";
		}
		else {
			return _data;
		}
	}

	@Override
	public void setData(String data) {
		_data = data;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, AnimeteoImg.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AnimeteoImg toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AnimeteoImg)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AnimeteoImgImpl animeteoImgImpl = new AnimeteoImgImpl();

		animeteoImgImpl.setId(getId());
		animeteoImgImpl.setName(getName());
		animeteoImgImpl.setType(getType());
		animeteoImgImpl.setInserted(getInserted());
		animeteoImgImpl.setData(getData());

		animeteoImgImpl.resetOriginalValues();

		return animeteoImgImpl;
	}

	@Override
	public int compareTo(AnimeteoImg animeteoImg) {
		int value = 0;

		if (getId() < animeteoImg.getId()) {
			value = -1;
		}
		else if (getId() > animeteoImg.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AnimeteoImg)) {
			return false;
		}

		AnimeteoImg animeteoImg = (AnimeteoImg)obj;

		long primaryKey = animeteoImg.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		AnimeteoImgModelImpl animeteoImgModelImpl = this;

		animeteoImgModelImpl._originalType = animeteoImgModelImpl._type;

		animeteoImgModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AnimeteoImg> toCacheModel() {
		AnimeteoImgCacheModel animeteoImgCacheModel =
			new AnimeteoImgCacheModel();

		animeteoImgCacheModel.id = getId();

		animeteoImgCacheModel.name = getName();

		String name = animeteoImgCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			animeteoImgCacheModel.name = null;
		}

		animeteoImgCacheModel.type = getType();

		String type = animeteoImgCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			animeteoImgCacheModel.type = null;
		}

		Date inserted = getInserted();

		if (inserted != null) {
			animeteoImgCacheModel.inserted = inserted.getTime();
		}
		else {
			animeteoImgCacheModel.inserted = Long.MIN_VALUE;
		}

		animeteoImgCacheModel.data = getData();

		String data = animeteoImgCacheModel.data;

		if ((data != null) && (data.length() == 0)) {
			animeteoImgCacheModel.data = null;
		}

		return animeteoImgCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AnimeteoImg, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AnimeteoImg, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AnimeteoImg, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((AnimeteoImg)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<AnimeteoImg, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<AnimeteoImg, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AnimeteoImg, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((AnimeteoImg)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		AnimeteoImg.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		AnimeteoImg.class, ModelWrapper.class
	};

	private long _id;
	private String _name;
	private String _type;
	private String _originalType;
	private Date _inserted;
	private String _data;
	private long _columnBitmask;
	private AnimeteoImg _escapedModel;

}