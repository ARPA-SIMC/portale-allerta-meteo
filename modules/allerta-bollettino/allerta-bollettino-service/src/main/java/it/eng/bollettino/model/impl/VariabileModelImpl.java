/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.bollettino.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.bollettino.model.Variabile;
import it.eng.bollettino.model.VariabileModel;
import it.eng.bollettino.model.VariabileSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Variabile service. Represents a row in the &quot;BOLLETTINO_Variabile&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>VariabileModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VariabileImpl}.
 * </p>
 *
 * @author GFAVINI
 * @see VariabileImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class VariabileModelImpl
	extends BaseModelImpl<Variabile> implements VariabileModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a variabile model instance should use the <code>Variabile</code> interface instead.
	 */
	public static final String TABLE_NAME = "BOLLETTINO_Variabile";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"id_", Types.VARCHAR},
		{"description_it", Types.VARCHAR}, {"level_t1", Types.INTEGER},
		{"level_t2", Types.INTEGER}, {"level_v1", Types.INTEGER},
		{"level_v2", Types.INTEGER}, {"trange_p1", Types.INTEGER},
		{"trange_p2", Types.INTEGER}, {"trange_pind", Types.INTEGER},
		{"unit", Types.VARCHAR}, {"bcode", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description_it", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("level_t1", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("level_t2", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("level_v1", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("level_v2", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("trange_p1", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("trange_p2", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("trange_pind", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("unit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bcode", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table BOLLETTINO_Variabile (uuid_ VARCHAR(75) null,id_ VARCHAR(75) not null primary key,description_it TEXT null,level_t1 INTEGER,level_t2 INTEGER,level_v1 INTEGER,level_v2 INTEGER,trange_p1 INTEGER,trange_p2 INTEGER,trange_pind INTEGER,unit VARCHAR(75) null,bcode VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table BOLLETTINO_Variabile";

	public static final String ORDER_BY_JPQL =
		" ORDER BY variabile.description_it ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY BOLLETTINO_Variabile.description_it ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.bollettino.model.Variabile"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.bollettino.model.Variabile"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.it.eng.bollettino.model.Variabile"),
		true);

	public static final long UUID_COLUMN_BITMASK = 1L;

	public static final long DESCRIPTION_IT_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Variabile toModel(VariabileSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Variabile model = new VariabileImpl();

		model.setUuid(soapModel.getUuid());
		model.setId(soapModel.getId());
		model.setDescription_it(soapModel.getDescription_it());
		model.setLevel_t1(soapModel.getLevel_t1());
		model.setLevel_t2(soapModel.getLevel_t2());
		model.setLevel_v1(soapModel.getLevel_v1());
		model.setLevel_v2(soapModel.getLevel_v2());
		model.setTrange_p1(soapModel.getTrange_p1());
		model.setTrange_p2(soapModel.getTrange_p2());
		model.setTrange_pind(soapModel.getTrange_pind());
		model.setUnit(soapModel.getUnit());
		model.setBcode(soapModel.getBcode());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Variabile> toModels(VariabileSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Variabile> models = new ArrayList<Variabile>(soapModels.length);

		for (VariabileSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		allerta.bollettino.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.bollettino.model.Variabile"));

	public VariabileModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Variabile.class;
	}

	@Override
	public String getModelClassName() {
		return Variabile.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Variabile, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Variabile, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Variabile, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Variabile)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Variabile, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Variabile, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Variabile)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Variabile, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Variabile, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Variabile, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Variabile, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Variabile, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Variabile, Object>>();
		Map<String, BiConsumer<Variabile, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Variabile, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<Variabile, Object>() {

				@Override
				public Object apply(Variabile variabile) {
					return variabile.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<Variabile, Object>() {

				@Override
				public void accept(Variabile variabile, Object uuid) {
					variabile.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"id",
			new Function<Variabile, Object>() {

				@Override
				public Object apply(Variabile variabile) {
					return variabile.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<Variabile, Object>() {

				@Override
				public void accept(Variabile variabile, Object id) {
					variabile.setId((String)id);
				}

			});
		attributeGetterFunctions.put(
			"description_it",
			new Function<Variabile, Object>() {

				@Override
				public Object apply(Variabile variabile) {
					return variabile.getDescription_it();
				}

			});
		attributeSetterBiConsumers.put(
			"description_it",
			new BiConsumer<Variabile, Object>() {

				@Override
				public void accept(Variabile variabile, Object description_it) {
					variabile.setDescription_it((String)description_it);
				}

			});
		attributeGetterFunctions.put(
			"level_t1",
			new Function<Variabile, Object>() {

				@Override
				public Object apply(Variabile variabile) {
					return variabile.getLevel_t1();
				}

			});
		attributeSetterBiConsumers.put(
			"level_t1",
			new BiConsumer<Variabile, Object>() {

				@Override
				public void accept(Variabile variabile, Object level_t1) {
					variabile.setLevel_t1((Integer)level_t1);
				}

			});
		attributeGetterFunctions.put(
			"level_t2",
			new Function<Variabile, Object>() {

				@Override
				public Object apply(Variabile variabile) {
					return variabile.getLevel_t2();
				}

			});
		attributeSetterBiConsumers.put(
			"level_t2",
			new BiConsumer<Variabile, Object>() {

				@Override
				public void accept(Variabile variabile, Object level_t2) {
					variabile.setLevel_t2((Integer)level_t2);
				}

			});
		attributeGetterFunctions.put(
			"level_v1",
			new Function<Variabile, Object>() {

				@Override
				public Object apply(Variabile variabile) {
					return variabile.getLevel_v1();
				}

			});
		attributeSetterBiConsumers.put(
			"level_v1",
			new BiConsumer<Variabile, Object>() {

				@Override
				public void accept(Variabile variabile, Object level_v1) {
					variabile.setLevel_v1((Integer)level_v1);
				}

			});
		attributeGetterFunctions.put(
			"level_v2",
			new Function<Variabile, Object>() {

				@Override
				public Object apply(Variabile variabile) {
					return variabile.getLevel_v2();
				}

			});
		attributeSetterBiConsumers.put(
			"level_v2",
			new BiConsumer<Variabile, Object>() {

				@Override
				public void accept(Variabile variabile, Object level_v2) {
					variabile.setLevel_v2((Integer)level_v2);
				}

			});
		attributeGetterFunctions.put(
			"trange_p1",
			new Function<Variabile, Object>() {

				@Override
				public Object apply(Variabile variabile) {
					return variabile.getTrange_p1();
				}

			});
		attributeSetterBiConsumers.put(
			"trange_p1",
			new BiConsumer<Variabile, Object>() {

				@Override
				public void accept(Variabile variabile, Object trange_p1) {
					variabile.setTrange_p1((Integer)trange_p1);
				}

			});
		attributeGetterFunctions.put(
			"trange_p2",
			new Function<Variabile, Object>() {

				@Override
				public Object apply(Variabile variabile) {
					return variabile.getTrange_p2();
				}

			});
		attributeSetterBiConsumers.put(
			"trange_p2",
			new BiConsumer<Variabile, Object>() {

				@Override
				public void accept(Variabile variabile, Object trange_p2) {
					variabile.setTrange_p2((Integer)trange_p2);
				}

			});
		attributeGetterFunctions.put(
			"trange_pind",
			new Function<Variabile, Object>() {

				@Override
				public Object apply(Variabile variabile) {
					return variabile.getTrange_pind();
				}

			});
		attributeSetterBiConsumers.put(
			"trange_pind",
			new BiConsumer<Variabile, Object>() {

				@Override
				public void accept(Variabile variabile, Object trange_pind) {
					variabile.setTrange_pind((Integer)trange_pind);
				}

			});
		attributeGetterFunctions.put(
			"unit",
			new Function<Variabile, Object>() {

				@Override
				public Object apply(Variabile variabile) {
					return variabile.getUnit();
				}

			});
		attributeSetterBiConsumers.put(
			"unit",
			new BiConsumer<Variabile, Object>() {

				@Override
				public void accept(Variabile variabile, Object unit) {
					variabile.setUnit((String)unit);
				}

			});
		attributeGetterFunctions.put(
			"bcode",
			new Function<Variabile, Object>() {

				@Override
				public Object apply(Variabile variabile) {
					return variabile.getBcode();
				}

			});
		attributeSetterBiConsumers.put(
			"bcode",
			new BiConsumer<Variabile, Object>() {

				@Override
				public void accept(Variabile variabile, Object bcode) {
					variabile.setBcode((String)bcode);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public String getId() {
		if (_id == null) {
			return "";
		}
		else {
			return _id;
		}
	}

	@Override
	public void setId(String id) {
		_id = id;
	}

	@JSON
	@Override
	public String getDescription_it() {
		if (_description_it == null) {
			return "";
		}
		else {
			return _description_it;
		}
	}

	@Override
	public void setDescription_it(String description_it) {
		_columnBitmask = -1L;

		_description_it = description_it;
	}

	@JSON
	@Override
	public int getLevel_t1() {
		return _level_t1;
	}

	@Override
	public void setLevel_t1(int level_t1) {
		_level_t1 = level_t1;
	}

	@JSON
	@Override
	public int getLevel_t2() {
		return _level_t2;
	}

	@Override
	public void setLevel_t2(int level_t2) {
		_level_t2 = level_t2;
	}

	@JSON
	@Override
	public int getLevel_v1() {
		return _level_v1;
	}

	@Override
	public void setLevel_v1(int level_v1) {
		_level_v1 = level_v1;
	}

	@JSON
	@Override
	public int getLevel_v2() {
		return _level_v2;
	}

	@Override
	public void setLevel_v2(int level_v2) {
		_level_v2 = level_v2;
	}

	@JSON
	@Override
	public int getTrange_p1() {
		return _trange_p1;
	}

	@Override
	public void setTrange_p1(int trange_p1) {
		_trange_p1 = trange_p1;
	}

	@JSON
	@Override
	public int getTrange_p2() {
		return _trange_p2;
	}

	@Override
	public void setTrange_p2(int trange_p2) {
		_trange_p2 = trange_p2;
	}

	@JSON
	@Override
	public int getTrange_pind() {
		return _trange_pind;
	}

	@Override
	public void setTrange_pind(int trange_pind) {
		_trange_pind = trange_pind;
	}

	@JSON
	@Override
	public String getUnit() {
		if (_unit == null) {
			return "";
		}
		else {
			return _unit;
		}
	}

	@Override
	public void setUnit(String unit) {
		_unit = unit;
	}

	@JSON
	@Override
	public String getBcode() {
		if (_bcode == null) {
			return "";
		}
		else {
			return _bcode;
		}
	}

	@Override
	public void setBcode(String bcode) {
		_bcode = bcode;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Variabile toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Variabile)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VariabileImpl variabileImpl = new VariabileImpl();

		variabileImpl.setUuid(getUuid());
		variabileImpl.setId(getId());
		variabileImpl.setDescription_it(getDescription_it());
		variabileImpl.setLevel_t1(getLevel_t1());
		variabileImpl.setLevel_t2(getLevel_t2());
		variabileImpl.setLevel_v1(getLevel_v1());
		variabileImpl.setLevel_v2(getLevel_v2());
		variabileImpl.setTrange_p1(getTrange_p1());
		variabileImpl.setTrange_p2(getTrange_p2());
		variabileImpl.setTrange_pind(getTrange_pind());
		variabileImpl.setUnit(getUnit());
		variabileImpl.setBcode(getBcode());

		variabileImpl.resetOriginalValues();

		return variabileImpl;
	}

	@Override
	public int compareTo(Variabile variabile) {
		int value = 0;

		value = getDescription_it().compareTo(variabile.getDescription_it());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Variabile)) {
			return false;
		}

		Variabile variabile = (Variabile)obj;

		String primaryKey = variabile.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VariabileModelImpl variabileModelImpl = this;

		variabileModelImpl._originalUuid = variabileModelImpl._uuid;

		variabileModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Variabile> toCacheModel() {
		VariabileCacheModel variabileCacheModel = new VariabileCacheModel();

		variabileCacheModel.uuid = getUuid();

		String uuid = variabileCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			variabileCacheModel.uuid = null;
		}

		variabileCacheModel.id = getId();

		String id = variabileCacheModel.id;

		if ((id != null) && (id.length() == 0)) {
			variabileCacheModel.id = null;
		}

		variabileCacheModel.description_it = getDescription_it();

		String description_it = variabileCacheModel.description_it;

		if ((description_it != null) && (description_it.length() == 0)) {
			variabileCacheModel.description_it = null;
		}

		variabileCacheModel.level_t1 = getLevel_t1();

		variabileCacheModel.level_t2 = getLevel_t2();

		variabileCacheModel.level_v1 = getLevel_v1();

		variabileCacheModel.level_v2 = getLevel_v2();

		variabileCacheModel.trange_p1 = getTrange_p1();

		variabileCacheModel.trange_p2 = getTrange_p2();

		variabileCacheModel.trange_pind = getTrange_pind();

		variabileCacheModel.unit = getUnit();

		String unit = variabileCacheModel.unit;

		if ((unit != null) && (unit.length() == 0)) {
			variabileCacheModel.unit = null;
		}

		variabileCacheModel.bcode = getBcode();

		String bcode = variabileCacheModel.bcode;

		if ((bcode != null) && (bcode.length() == 0)) {
			variabileCacheModel.bcode = null;
		}

		return variabileCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Variabile, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Variabile, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Variabile, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Variabile)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Variabile, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Variabile, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Variabile, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Variabile)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		Variabile.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		Variabile.class, ModelWrapper.class
	};

	private String _uuid;
	private String _originalUuid;
	private String _id;
	private String _description_it;
	private int _level_t1;
	private int _level_t2;
	private int _level_v1;
	private int _level_v2;
	private int _trange_p1;
	private int _trange_p2;
	private int _trange_pind;
	private String _unit;
	private String _bcode;
	private long _columnBitmask;
	private Variabile _escapedModel;

}