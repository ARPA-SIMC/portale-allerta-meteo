/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.bollettino.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.bollettino.model.BollettinoBacino;
import it.eng.bollettino.model.BollettinoBacinoModel;
import it.eng.bollettino.model.BollettinoBacinoSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the BollettinoBacino service. Represents a row in the &quot;BOLLETTINO_BollettinoBacino&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>BollettinoBacinoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BollettinoBacinoImpl}.
 * </p>
 *
 * @author GFAVINI
 * @see BollettinoBacinoImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class BollettinoBacinoModelImpl
	extends BaseModelImpl<BollettinoBacino> implements BollettinoBacinoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bollettino bacino model instance should use the <code>BollettinoBacino</code> interface instead.
	 */
	public static final String TABLE_NAME = "BOLLETTINO_BollettinoBacino";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"id_", Types.BIGINT},
		{"idBollettino", Types.BIGINT}, {"progressivo", Types.INTEGER},
		{"idBacino", Types.VARCHAR}, {"nomeBacino", Types.VARCHAR},
		{"oreOsservazione", Types.VARCHAR}, {"note", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("idBollettino", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("progressivo", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("idBacino", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nomeBacino", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("oreOsservazione", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("note", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table BOLLETTINO_BollettinoBacino (uuid_ VARCHAR(75) null,id_ LONG not null primary key,idBollettino LONG,progressivo INTEGER,idBacino VARCHAR(75) null,nomeBacino VARCHAR(75) null,oreOsservazione VARCHAR(75) null,note TEXT null)";

	public static final String TABLE_SQL_DROP =
		"drop table BOLLETTINO_BollettinoBacino";

	public static final String ORDER_BY_JPQL =
		" ORDER BY bollettinoBacino.progressivo ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY BOLLETTINO_BollettinoBacino.progressivo ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.bollettino.model.BollettinoBacino"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.bollettino.model.BollettinoBacino"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.it.eng.bollettino.model.BollettinoBacino"),
		true);

	public static final long IDBOLLETTINO_COLUMN_BITMASK = 1L;

	public static final long UUID_COLUMN_BITMASK = 2L;

	public static final long PROGRESSIVO_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static BollettinoBacino toModel(BollettinoBacinoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		BollettinoBacino model = new BollettinoBacinoImpl();

		model.setUuid(soapModel.getUuid());
		model.setId(soapModel.getId());
		model.setIdBollettino(soapModel.getIdBollettino());
		model.setProgressivo(soapModel.getProgressivo());
		model.setIdBacino(soapModel.getIdBacino());
		model.setNomeBacino(soapModel.getNomeBacino());
		model.setOreOsservazione(soapModel.getOreOsservazione());
		model.setNote(soapModel.getNote());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<BollettinoBacino> toModels(
		BollettinoBacinoSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<BollettinoBacino> models = new ArrayList<BollettinoBacino>(
			soapModels.length);

		for (BollettinoBacinoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		allerta.bollettino.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.bollettino.model.BollettinoBacino"));

	public BollettinoBacinoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BollettinoBacino.class;
	}

	@Override
	public String getModelClassName() {
		return BollettinoBacino.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<BollettinoBacino, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<BollettinoBacino, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BollettinoBacino, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((BollettinoBacino)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<BollettinoBacino, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<BollettinoBacino, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(BollettinoBacino)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<BollettinoBacino, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<BollettinoBacino, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<BollettinoBacino, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<BollettinoBacino, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<BollettinoBacino, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<BollettinoBacino, Object>>();
		Map<String, BiConsumer<BollettinoBacino, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<BollettinoBacino, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<BollettinoBacino, Object>() {

				@Override
				public Object apply(BollettinoBacino bollettinoBacino) {
					return bollettinoBacino.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<BollettinoBacino, Object>() {

				@Override
				public void accept(
					BollettinoBacino bollettinoBacino, Object uuid) {

					bollettinoBacino.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"id",
			new Function<BollettinoBacino, Object>() {

				@Override
				public Object apply(BollettinoBacino bollettinoBacino) {
					return bollettinoBacino.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<BollettinoBacino, Object>() {

				@Override
				public void accept(
					BollettinoBacino bollettinoBacino, Object id) {

					bollettinoBacino.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"idBollettino",
			new Function<BollettinoBacino, Object>() {

				@Override
				public Object apply(BollettinoBacino bollettinoBacino) {
					return bollettinoBacino.getIdBollettino();
				}

			});
		attributeSetterBiConsumers.put(
			"idBollettino",
			new BiConsumer<BollettinoBacino, Object>() {

				@Override
				public void accept(
					BollettinoBacino bollettinoBacino, Object idBollettino) {

					bollettinoBacino.setIdBollettino((Long)idBollettino);
				}

			});
		attributeGetterFunctions.put(
			"progressivo",
			new Function<BollettinoBacino, Object>() {

				@Override
				public Object apply(BollettinoBacino bollettinoBacino) {
					return bollettinoBacino.getProgressivo();
				}

			});
		attributeSetterBiConsumers.put(
			"progressivo",
			new BiConsumer<BollettinoBacino, Object>() {

				@Override
				public void accept(
					BollettinoBacino bollettinoBacino, Object progressivo) {

					bollettinoBacino.setProgressivo((Integer)progressivo);
				}

			});
		attributeGetterFunctions.put(
			"idBacino",
			new Function<BollettinoBacino, Object>() {

				@Override
				public Object apply(BollettinoBacino bollettinoBacino) {
					return bollettinoBacino.getIdBacino();
				}

			});
		attributeSetterBiConsumers.put(
			"idBacino",
			new BiConsumer<BollettinoBacino, Object>() {

				@Override
				public void accept(
					BollettinoBacino bollettinoBacino, Object idBacino) {

					bollettinoBacino.setIdBacino((String)idBacino);
				}

			});
		attributeGetterFunctions.put(
			"nomeBacino",
			new Function<BollettinoBacino, Object>() {

				@Override
				public Object apply(BollettinoBacino bollettinoBacino) {
					return bollettinoBacino.getNomeBacino();
				}

			});
		attributeSetterBiConsumers.put(
			"nomeBacino",
			new BiConsumer<BollettinoBacino, Object>() {

				@Override
				public void accept(
					BollettinoBacino bollettinoBacino, Object nomeBacino) {

					bollettinoBacino.setNomeBacino((String)nomeBacino);
				}

			});
		attributeGetterFunctions.put(
			"oreOsservazione",
			new Function<BollettinoBacino, Object>() {

				@Override
				public Object apply(BollettinoBacino bollettinoBacino) {
					return bollettinoBacino.getOreOsservazione();
				}

			});
		attributeSetterBiConsumers.put(
			"oreOsservazione",
			new BiConsumer<BollettinoBacino, Object>() {

				@Override
				public void accept(
					BollettinoBacino bollettinoBacino, Object oreOsservazione) {

					bollettinoBacino.setOreOsservazione(
						(String)oreOsservazione);
				}

			});
		attributeGetterFunctions.put(
			"note",
			new Function<BollettinoBacino, Object>() {

				@Override
				public Object apply(BollettinoBacino bollettinoBacino) {
					return bollettinoBacino.getNote();
				}

			});
		attributeSetterBiConsumers.put(
			"note",
			new BiConsumer<BollettinoBacino, Object>() {

				@Override
				public void accept(
					BollettinoBacino bollettinoBacino, Object note) {

					bollettinoBacino.setNote((String)note);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getIdBollettino() {
		return _idBollettino;
	}

	@Override
	public void setIdBollettino(long idBollettino) {
		_columnBitmask |= IDBOLLETTINO_COLUMN_BITMASK;

		if (!_setOriginalIdBollettino) {
			_setOriginalIdBollettino = true;

			_originalIdBollettino = _idBollettino;
		}

		_idBollettino = idBollettino;
	}

	public long getOriginalIdBollettino() {
		return _originalIdBollettino;
	}

	@JSON
	@Override
	public int getProgressivo() {
		return _progressivo;
	}

	@Override
	public void setProgressivo(int progressivo) {
		_columnBitmask = -1L;

		_progressivo = progressivo;
	}

	@JSON
	@Override
	public String getIdBacino() {
		if (_idBacino == null) {
			return "";
		}
		else {
			return _idBacino;
		}
	}

	@Override
	public void setIdBacino(String idBacino) {
		_idBacino = idBacino;
	}

	@JSON
	@Override
	public String getNomeBacino() {
		if (_nomeBacino == null) {
			return "";
		}
		else {
			return _nomeBacino;
		}
	}

	@Override
	public void setNomeBacino(String nomeBacino) {
		_nomeBacino = nomeBacino;
	}

	@JSON
	@Override
	public String getOreOsservazione() {
		if (_oreOsservazione == null) {
			return "";
		}
		else {
			return _oreOsservazione;
		}
	}

	@Override
	public void setOreOsservazione(String oreOsservazione) {
		_oreOsservazione = oreOsservazione;
	}

	@JSON
	@Override
	public String getNote() {
		if (_note == null) {
			return "";
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, BollettinoBacino.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BollettinoBacino toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BollettinoBacino)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BollettinoBacinoImpl bollettinoBacinoImpl = new BollettinoBacinoImpl();

		bollettinoBacinoImpl.setUuid(getUuid());
		bollettinoBacinoImpl.setId(getId());
		bollettinoBacinoImpl.setIdBollettino(getIdBollettino());
		bollettinoBacinoImpl.setProgressivo(getProgressivo());
		bollettinoBacinoImpl.setIdBacino(getIdBacino());
		bollettinoBacinoImpl.setNomeBacino(getNomeBacino());
		bollettinoBacinoImpl.setOreOsservazione(getOreOsservazione());
		bollettinoBacinoImpl.setNote(getNote());

		bollettinoBacinoImpl.resetOriginalValues();

		return bollettinoBacinoImpl;
	}

	@Override
	public int compareTo(BollettinoBacino bollettinoBacino) {
		int value = 0;

		if (getProgressivo() < bollettinoBacino.getProgressivo()) {
			value = -1;
		}
		else if (getProgressivo() > bollettinoBacino.getProgressivo()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BollettinoBacino)) {
			return false;
		}

		BollettinoBacino bollettinoBacino = (BollettinoBacino)obj;

		long primaryKey = bollettinoBacino.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		BollettinoBacinoModelImpl bollettinoBacinoModelImpl = this;

		bollettinoBacinoModelImpl._originalUuid =
			bollettinoBacinoModelImpl._uuid;

		bollettinoBacinoModelImpl._originalIdBollettino =
			bollettinoBacinoModelImpl._idBollettino;

		bollettinoBacinoModelImpl._setOriginalIdBollettino = false;

		bollettinoBacinoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BollettinoBacino> toCacheModel() {
		BollettinoBacinoCacheModel bollettinoBacinoCacheModel =
			new BollettinoBacinoCacheModel();

		bollettinoBacinoCacheModel.uuid = getUuid();

		String uuid = bollettinoBacinoCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			bollettinoBacinoCacheModel.uuid = null;
		}

		bollettinoBacinoCacheModel.id = getId();

		bollettinoBacinoCacheModel.idBollettino = getIdBollettino();

		bollettinoBacinoCacheModel.progressivo = getProgressivo();

		bollettinoBacinoCacheModel.idBacino = getIdBacino();

		String idBacino = bollettinoBacinoCacheModel.idBacino;

		if ((idBacino != null) && (idBacino.length() == 0)) {
			bollettinoBacinoCacheModel.idBacino = null;
		}

		bollettinoBacinoCacheModel.nomeBacino = getNomeBacino();

		String nomeBacino = bollettinoBacinoCacheModel.nomeBacino;

		if ((nomeBacino != null) && (nomeBacino.length() == 0)) {
			bollettinoBacinoCacheModel.nomeBacino = null;
		}

		bollettinoBacinoCacheModel.oreOsservazione = getOreOsservazione();

		String oreOsservazione = bollettinoBacinoCacheModel.oreOsservazione;

		if ((oreOsservazione != null) && (oreOsservazione.length() == 0)) {
			bollettinoBacinoCacheModel.oreOsservazione = null;
		}

		bollettinoBacinoCacheModel.note = getNote();

		String note = bollettinoBacinoCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			bollettinoBacinoCacheModel.note = null;
		}

		return bollettinoBacinoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<BollettinoBacino, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<BollettinoBacino, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BollettinoBacino, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((BollettinoBacino)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<BollettinoBacino, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<BollettinoBacino, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BollettinoBacino, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((BollettinoBacino)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		BollettinoBacino.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		BollettinoBacino.class, ModelWrapper.class
	};

	private String _uuid;
	private String _originalUuid;
	private long _id;
	private long _idBollettino;
	private long _originalIdBollettino;
	private boolean _setOriginalIdBollettino;
	private int _progressivo;
	private String _idBacino;
	private String _nomeBacino;
	private String _oreOsservazione;
	private String _note;
	private long _columnBitmask;
	private BollettinoBacino _escapedModel;

}