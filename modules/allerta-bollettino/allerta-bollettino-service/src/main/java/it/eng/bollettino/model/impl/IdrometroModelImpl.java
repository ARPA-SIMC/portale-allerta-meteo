/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.bollettino.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.bollettino.model.Idrometro;
import it.eng.bollettino.model.IdrometroModel;
import it.eng.bollettino.model.IdrometroSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Idrometro service. Represents a row in the &quot;BOLLETTINO_Idrometro&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>IdrometroModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IdrometroImpl}.
 * </p>
 *
 * @author GFAVINI
 * @see IdrometroImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class IdrometroModelImpl
	extends BaseModelImpl<Idrometro> implements IdrometroModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a idrometro model instance should use the <code>Idrometro</code> interface instead.
	 */
	public static final String TABLE_NAME = "BOLLETTINO_Idrometro";

	public static final Object[][] TABLE_COLUMNS = {
		{"stazioneId", Types.VARCHAR}, {"nomeBacino", Types.VARCHAR},
		{"nomeSottobacino", Types.VARCHAR}, {"nomeRubrica", Types.VARCHAR},
		{"sogliaSpike", Types.DOUBLE}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("stazioneId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nomeBacino", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nomeSottobacino", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nomeRubrica", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sogliaSpike", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE =
		"create table BOLLETTINO_Idrometro (stazioneId VARCHAR(75) not null primary key,nomeBacino VARCHAR(75) null,nomeSottobacino VARCHAR(75) null,nomeRubrica VARCHAR(75) null,sogliaSpike DOUBLE)";

	public static final String TABLE_SQL_DROP =
		"drop table BOLLETTINO_Idrometro";

	public static final String ORDER_BY_JPQL =
		" ORDER BY idrometro.stazioneId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY BOLLETTINO_Idrometro.stazioneId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.bollettino.model.Idrometro"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.bollettino.model.Idrometro"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.it.eng.bollettino.model.Idrometro"),
		true);

	public static final long NOMEBACINO_COLUMN_BITMASK = 1L;

	public static final long NOMERUBRICA_COLUMN_BITMASK = 2L;

	public static final long NOMESOTTOBACINO_COLUMN_BITMASK = 4L;

	public static final long STAZIONEID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Idrometro toModel(IdrometroSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Idrometro model = new IdrometroImpl();

		model.setStazioneId(soapModel.getStazioneId());
		model.setNomeBacino(soapModel.getNomeBacino());
		model.setNomeSottobacino(soapModel.getNomeSottobacino());
		model.setNomeRubrica(soapModel.getNomeRubrica());
		model.setSogliaSpike(soapModel.getSogliaSpike());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Idrometro> toModels(IdrometroSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Idrometro> models = new ArrayList<Idrometro>(soapModels.length);

		for (IdrometroSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		allerta.bollettino.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.bollettino.model.Idrometro"));

	public IdrometroModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _stazioneId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setStazioneId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _stazioneId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Idrometro.class;
	}

	@Override
	public String getModelClassName() {
		return Idrometro.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Idrometro, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Idrometro, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Idrometro, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Idrometro)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Idrometro, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Idrometro, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Idrometro)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Idrometro, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Idrometro, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Idrometro, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Idrometro, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Idrometro, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Idrometro, Object>>();
		Map<String, BiConsumer<Idrometro, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Idrometro, ?>>();

		attributeGetterFunctions.put(
			"stazioneId",
			new Function<Idrometro, Object>() {

				@Override
				public Object apply(Idrometro idrometro) {
					return idrometro.getStazioneId();
				}

			});
		attributeSetterBiConsumers.put(
			"stazioneId",
			new BiConsumer<Idrometro, Object>() {

				@Override
				public void accept(Idrometro idrometro, Object stazioneId) {
					idrometro.setStazioneId((String)stazioneId);
				}

			});
		attributeGetterFunctions.put(
			"nomeBacino",
			new Function<Idrometro, Object>() {

				@Override
				public Object apply(Idrometro idrometro) {
					return idrometro.getNomeBacino();
				}

			});
		attributeSetterBiConsumers.put(
			"nomeBacino",
			new BiConsumer<Idrometro, Object>() {

				@Override
				public void accept(Idrometro idrometro, Object nomeBacino) {
					idrometro.setNomeBacino((String)nomeBacino);
				}

			});
		attributeGetterFunctions.put(
			"nomeSottobacino",
			new Function<Idrometro, Object>() {

				@Override
				public Object apply(Idrometro idrometro) {
					return idrometro.getNomeSottobacino();
				}

			});
		attributeSetterBiConsumers.put(
			"nomeSottobacino",
			new BiConsumer<Idrometro, Object>() {

				@Override
				public void accept(
					Idrometro idrometro, Object nomeSottobacino) {

					idrometro.setNomeSottobacino((String)nomeSottobacino);
				}

			});
		attributeGetterFunctions.put(
			"nomeRubrica",
			new Function<Idrometro, Object>() {

				@Override
				public Object apply(Idrometro idrometro) {
					return idrometro.getNomeRubrica();
				}

			});
		attributeSetterBiConsumers.put(
			"nomeRubrica",
			new BiConsumer<Idrometro, Object>() {

				@Override
				public void accept(Idrometro idrometro, Object nomeRubrica) {
					idrometro.setNomeRubrica((String)nomeRubrica);
				}

			});
		attributeGetterFunctions.put(
			"sogliaSpike",
			new Function<Idrometro, Object>() {

				@Override
				public Object apply(Idrometro idrometro) {
					return idrometro.getSogliaSpike();
				}

			});
		attributeSetterBiConsumers.put(
			"sogliaSpike",
			new BiConsumer<Idrometro, Object>() {

				@Override
				public void accept(Idrometro idrometro, Object sogliaSpike) {
					idrometro.setSogliaSpike((Double)sogliaSpike);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getStazioneId() {
		if (_stazioneId == null) {
			return "";
		}
		else {
			return _stazioneId;
		}
	}

	@Override
	public void setStazioneId(String stazioneId) {
		_columnBitmask = -1L;

		_stazioneId = stazioneId;
	}

	@JSON
	@Override
	public String getNomeBacino() {
		if (_nomeBacino == null) {
			return "";
		}
		else {
			return _nomeBacino;
		}
	}

	@Override
	public void setNomeBacino(String nomeBacino) {
		_columnBitmask |= NOMEBACINO_COLUMN_BITMASK;

		if (_originalNomeBacino == null) {
			_originalNomeBacino = _nomeBacino;
		}

		_nomeBacino = nomeBacino;
	}

	public String getOriginalNomeBacino() {
		return GetterUtil.getString(_originalNomeBacino);
	}

	@JSON
	@Override
	public String getNomeSottobacino() {
		if (_nomeSottobacino == null) {
			return "";
		}
		else {
			return _nomeSottobacino;
		}
	}

	@Override
	public void setNomeSottobacino(String nomeSottobacino) {
		_columnBitmask |= NOMESOTTOBACINO_COLUMN_BITMASK;

		if (_originalNomeSottobacino == null) {
			_originalNomeSottobacino = _nomeSottobacino;
		}

		_nomeSottobacino = nomeSottobacino;
	}

	public String getOriginalNomeSottobacino() {
		return GetterUtil.getString(_originalNomeSottobacino);
	}

	@JSON
	@Override
	public String getNomeRubrica() {
		if (_nomeRubrica == null) {
			return "";
		}
		else {
			return _nomeRubrica;
		}
	}

	@Override
	public void setNomeRubrica(String nomeRubrica) {
		_columnBitmask |= NOMERUBRICA_COLUMN_BITMASK;

		if (_originalNomeRubrica == null) {
			_originalNomeRubrica = _nomeRubrica;
		}

		_nomeRubrica = nomeRubrica;
	}

	public String getOriginalNomeRubrica() {
		return GetterUtil.getString(_originalNomeRubrica);
	}

	@JSON
	@Override
	public double getSogliaSpike() {
		return _sogliaSpike;
	}

	@Override
	public void setSogliaSpike(double sogliaSpike) {
		_sogliaSpike = sogliaSpike;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Idrometro toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Idrometro)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		IdrometroImpl idrometroImpl = new IdrometroImpl();

		idrometroImpl.setStazioneId(getStazioneId());
		idrometroImpl.setNomeBacino(getNomeBacino());
		idrometroImpl.setNomeSottobacino(getNomeSottobacino());
		idrometroImpl.setNomeRubrica(getNomeRubrica());
		idrometroImpl.setSogliaSpike(getSogliaSpike());

		idrometroImpl.resetOriginalValues();

		return idrometroImpl;
	}

	@Override
	public int compareTo(Idrometro idrometro) {
		int value = 0;

		value = getStazioneId().compareTo(idrometro.getStazioneId());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Idrometro)) {
			return false;
		}

		Idrometro idrometro = (Idrometro)obj;

		String primaryKey = idrometro.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		IdrometroModelImpl idrometroModelImpl = this;

		idrometroModelImpl._originalNomeBacino = idrometroModelImpl._nomeBacino;

		idrometroModelImpl._originalNomeSottobacino =
			idrometroModelImpl._nomeSottobacino;

		idrometroModelImpl._originalNomeRubrica =
			idrometroModelImpl._nomeRubrica;

		idrometroModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Idrometro> toCacheModel() {
		IdrometroCacheModel idrometroCacheModel = new IdrometroCacheModel();

		idrometroCacheModel.stazioneId = getStazioneId();

		String stazioneId = idrometroCacheModel.stazioneId;

		if ((stazioneId != null) && (stazioneId.length() == 0)) {
			idrometroCacheModel.stazioneId = null;
		}

		idrometroCacheModel.nomeBacino = getNomeBacino();

		String nomeBacino = idrometroCacheModel.nomeBacino;

		if ((nomeBacino != null) && (nomeBacino.length() == 0)) {
			idrometroCacheModel.nomeBacino = null;
		}

		idrometroCacheModel.nomeSottobacino = getNomeSottobacino();

		String nomeSottobacino = idrometroCacheModel.nomeSottobacino;

		if ((nomeSottobacino != null) && (nomeSottobacino.length() == 0)) {
			idrometroCacheModel.nomeSottobacino = null;
		}

		idrometroCacheModel.nomeRubrica = getNomeRubrica();

		String nomeRubrica = idrometroCacheModel.nomeRubrica;

		if ((nomeRubrica != null) && (nomeRubrica.length() == 0)) {
			idrometroCacheModel.nomeRubrica = null;
		}

		idrometroCacheModel.sogliaSpike = getSogliaSpike();

		return idrometroCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Idrometro, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Idrometro, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Idrometro, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Idrometro)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Idrometro, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Idrometro, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Idrometro, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Idrometro)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		Idrometro.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		Idrometro.class, ModelWrapper.class
	};

	private String _stazioneId;
	private String _nomeBacino;
	private String _originalNomeBacino;
	private String _nomeSottobacino;
	private String _originalNomeSottobacino;
	private String _nomeRubrica;
	private String _originalNomeRubrica;
	private double _sogliaSpike;
	private long _columnBitmask;
	private Idrometro _escapedModel;

}