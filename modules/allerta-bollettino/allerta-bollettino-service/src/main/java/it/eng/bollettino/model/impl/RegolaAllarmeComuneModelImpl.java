/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.bollettino.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.bollettino.model.RegolaAllarmeComune;
import it.eng.bollettino.model.RegolaAllarmeComuneModel;
import it.eng.bollettino.model.RegolaAllarmeComuneSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the RegolaAllarmeComune service. Represents a row in the &quot;BOLLETTINO_RegolaAllarmeComune&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>RegolaAllarmeComuneModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RegolaAllarmeComuneImpl}.
 * </p>
 *
 * @author GFAVINI
 * @see RegolaAllarmeComuneImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class RegolaAllarmeComuneModelImpl
	extends BaseModelImpl<RegolaAllarmeComune>
	implements RegolaAllarmeComuneModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a regola allarme comune model instance should use the <code>RegolaAllarmeComune</code> interface instead.
	 */
	public static final String TABLE_NAME = "BOLLETTINO_RegolaAllarmeComune";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"id_", Types.BIGINT},
		{"idRegola", Types.BIGINT}, {"idComune", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("idRegola", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("idComune", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table BOLLETTINO_RegolaAllarmeComune (uuid_ VARCHAR(75) null,id_ LONG not null primary key,idRegola LONG,idComune LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table BOLLETTINO_RegolaAllarmeComune";

	public static final String ORDER_BY_JPQL =
		" ORDER BY regolaAllarmeComune.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY BOLLETTINO_RegolaAllarmeComune.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.bollettino.model.RegolaAllarmeComune"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.bollettino.model.RegolaAllarmeComune"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.it.eng.bollettino.model.RegolaAllarmeComune"),
		true);

	public static final long IDCOMUNE_COLUMN_BITMASK = 1L;

	public static final long IDREGOLA_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long ID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static RegolaAllarmeComune toModel(
		RegolaAllarmeComuneSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		RegolaAllarmeComune model = new RegolaAllarmeComuneImpl();

		model.setUuid(soapModel.getUuid());
		model.setId(soapModel.getId());
		model.setIdRegola(soapModel.getIdRegola());
		model.setIdComune(soapModel.getIdComune());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<RegolaAllarmeComune> toModels(
		RegolaAllarmeComuneSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<RegolaAllarmeComune> models = new ArrayList<RegolaAllarmeComune>(
			soapModels.length);

		for (RegolaAllarmeComuneSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		allerta.bollettino.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.bollettino.model.RegolaAllarmeComune"));

	public RegolaAllarmeComuneModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RegolaAllarmeComune.class;
	}

	@Override
	public String getModelClassName() {
		return RegolaAllarmeComune.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<RegolaAllarmeComune, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<RegolaAllarmeComune, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RegolaAllarmeComune, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((RegolaAllarmeComune)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<RegolaAllarmeComune, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<RegolaAllarmeComune, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(RegolaAllarmeComune)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<RegolaAllarmeComune, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<RegolaAllarmeComune, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<RegolaAllarmeComune, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<RegolaAllarmeComune, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<RegolaAllarmeComune, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<RegolaAllarmeComune, Object>>();
		Map<String, BiConsumer<RegolaAllarmeComune, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<RegolaAllarmeComune, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<RegolaAllarmeComune, Object>() {

				@Override
				public Object apply(RegolaAllarmeComune regolaAllarmeComune) {
					return regolaAllarmeComune.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<RegolaAllarmeComune, Object>() {

				@Override
				public void accept(
					RegolaAllarmeComune regolaAllarmeComune, Object uuid) {

					regolaAllarmeComune.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"id",
			new Function<RegolaAllarmeComune, Object>() {

				@Override
				public Object apply(RegolaAllarmeComune regolaAllarmeComune) {
					return regolaAllarmeComune.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<RegolaAllarmeComune, Object>() {

				@Override
				public void accept(
					RegolaAllarmeComune regolaAllarmeComune, Object id) {

					regolaAllarmeComune.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"idRegola",
			new Function<RegolaAllarmeComune, Object>() {

				@Override
				public Object apply(RegolaAllarmeComune regolaAllarmeComune) {
					return regolaAllarmeComune.getIdRegola();
				}

			});
		attributeSetterBiConsumers.put(
			"idRegola",
			new BiConsumer<RegolaAllarmeComune, Object>() {

				@Override
				public void accept(
					RegolaAllarmeComune regolaAllarmeComune, Object idRegola) {

					regolaAllarmeComune.setIdRegola((Long)idRegola);
				}

			});
		attributeGetterFunctions.put(
			"idComune",
			new Function<RegolaAllarmeComune, Object>() {

				@Override
				public Object apply(RegolaAllarmeComune regolaAllarmeComune) {
					return regolaAllarmeComune.getIdComune();
				}

			});
		attributeSetterBiConsumers.put(
			"idComune",
			new BiConsumer<RegolaAllarmeComune, Object>() {

				@Override
				public void accept(
					RegolaAllarmeComune regolaAllarmeComune, Object idComune) {

					regolaAllarmeComune.setIdComune((Long)idComune);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public long getIdRegola() {
		return _idRegola;
	}

	@Override
	public void setIdRegola(long idRegola) {
		_columnBitmask |= IDREGOLA_COLUMN_BITMASK;

		if (!_setOriginalIdRegola) {
			_setOriginalIdRegola = true;

			_originalIdRegola = _idRegola;
		}

		_idRegola = idRegola;
	}

	public long getOriginalIdRegola() {
		return _originalIdRegola;
	}

	@JSON
	@Override
	public long getIdComune() {
		return _idComune;
	}

	@Override
	public void setIdComune(long idComune) {
		_columnBitmask |= IDCOMUNE_COLUMN_BITMASK;

		if (!_setOriginalIdComune) {
			_setOriginalIdComune = true;

			_originalIdComune = _idComune;
		}

		_idComune = idComune;
	}

	public long getOriginalIdComune() {
		return _originalIdComune;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, RegolaAllarmeComune.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RegolaAllarmeComune toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RegolaAllarmeComune)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RegolaAllarmeComuneImpl regolaAllarmeComuneImpl =
			new RegolaAllarmeComuneImpl();

		regolaAllarmeComuneImpl.setUuid(getUuid());
		regolaAllarmeComuneImpl.setId(getId());
		regolaAllarmeComuneImpl.setIdRegola(getIdRegola());
		regolaAllarmeComuneImpl.setIdComune(getIdComune());

		regolaAllarmeComuneImpl.resetOriginalValues();

		return regolaAllarmeComuneImpl;
	}

	@Override
	public int compareTo(RegolaAllarmeComune regolaAllarmeComune) {
		int value = 0;

		if (getId() < regolaAllarmeComune.getId()) {
			value = -1;
		}
		else if (getId() > regolaAllarmeComune.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RegolaAllarmeComune)) {
			return false;
		}

		RegolaAllarmeComune regolaAllarmeComune = (RegolaAllarmeComune)obj;

		long primaryKey = regolaAllarmeComune.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		RegolaAllarmeComuneModelImpl regolaAllarmeComuneModelImpl = this;

		regolaAllarmeComuneModelImpl._originalUuid =
			regolaAllarmeComuneModelImpl._uuid;

		regolaAllarmeComuneModelImpl._originalIdRegola =
			regolaAllarmeComuneModelImpl._idRegola;

		regolaAllarmeComuneModelImpl._setOriginalIdRegola = false;

		regolaAllarmeComuneModelImpl._originalIdComune =
			regolaAllarmeComuneModelImpl._idComune;

		regolaAllarmeComuneModelImpl._setOriginalIdComune = false;

		regolaAllarmeComuneModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RegolaAllarmeComune> toCacheModel() {
		RegolaAllarmeComuneCacheModel regolaAllarmeComuneCacheModel =
			new RegolaAllarmeComuneCacheModel();

		regolaAllarmeComuneCacheModel.uuid = getUuid();

		String uuid = regolaAllarmeComuneCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			regolaAllarmeComuneCacheModel.uuid = null;
		}

		regolaAllarmeComuneCacheModel.id = getId();

		regolaAllarmeComuneCacheModel.idRegola = getIdRegola();

		regolaAllarmeComuneCacheModel.idComune = getIdComune();

		return regolaAllarmeComuneCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<RegolaAllarmeComune, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<RegolaAllarmeComune, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RegolaAllarmeComune, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((RegolaAllarmeComune)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<RegolaAllarmeComune, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<RegolaAllarmeComune, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RegolaAllarmeComune, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((RegolaAllarmeComune)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		RegolaAllarmeComune.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		RegolaAllarmeComune.class, ModelWrapper.class
	};

	private String _uuid;
	private String _originalUuid;
	private long _id;
	private long _idRegola;
	private long _originalIdRegola;
	private boolean _setOriginalIdRegola;
	private long _idComune;
	private long _originalIdComune;
	private boolean _setOriginalIdComune;
	private long _columnBitmask;
	private RegolaAllarmeComune _escapedModel;

}