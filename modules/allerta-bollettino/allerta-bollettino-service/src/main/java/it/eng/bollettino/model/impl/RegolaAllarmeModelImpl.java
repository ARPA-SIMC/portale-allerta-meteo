/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.bollettino.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.bollettino.model.RegolaAllarme;
import it.eng.bollettino.model.RegolaAllarmeModel;
import it.eng.bollettino.model.RegolaAllarmeSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the RegolaAllarme service. Represents a row in the &quot;BOLLETTINO_RegolaAllarme&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>RegolaAllarmeModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RegolaAllarmeImpl}.
 * </p>
 *
 * @author GFAVINI
 * @see RegolaAllarmeImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class RegolaAllarmeModelImpl
	extends BaseModelImpl<RegolaAllarme> implements RegolaAllarmeModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a regola allarme model instance should use the <code>RegolaAllarme</code> interface instead.
	 */
	public static final String TABLE_NAME = "BOLLETTINO_RegolaAllarme";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"id_", Types.BIGINT},
		{"nome", Types.VARCHAR}, {"espressione", Types.VARCHAR},
		{"descrizione", Types.VARCHAR}, {"colore", Types.INTEGER},
		{"attivo", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nome", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("espressione", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("descrizione", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("colore", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("attivo", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table BOLLETTINO_RegolaAllarme (uuid_ VARCHAR(75) null,id_ LONG not null primary key,nome VARCHAR(75) null,espressione VARCHAR(1024) null,descrizione VARCHAR(75) null,colore INTEGER,attivo BOOLEAN)";

	public static final String TABLE_SQL_DROP =
		"drop table BOLLETTINO_RegolaAllarme";

	public static final String ORDER_BY_JPQL = " ORDER BY regolaAllarme.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY BOLLETTINO_RegolaAllarme.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.bollettino.model.RegolaAllarme"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.bollettino.model.RegolaAllarme"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.it.eng.bollettino.model.RegolaAllarme"),
		true);

	public static final long ATTIVO_COLUMN_BITMASK = 1L;

	public static final long UUID_COLUMN_BITMASK = 2L;

	public static final long ID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static RegolaAllarme toModel(RegolaAllarmeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RegolaAllarme model = new RegolaAllarmeImpl();

		model.setUuid(soapModel.getUuid());
		model.setId(soapModel.getId());
		model.setNome(soapModel.getNome());
		model.setEspressione(soapModel.getEspressione());
		model.setDescrizione(soapModel.getDescrizione());
		model.setColore(soapModel.getColore());
		model.setAttivo(soapModel.isAttivo());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<RegolaAllarme> toModels(RegolaAllarmeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<RegolaAllarme> models = new ArrayList<RegolaAllarme>(
			soapModels.length);

		for (RegolaAllarmeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		allerta.bollettino.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.bollettino.model.RegolaAllarme"));

	public RegolaAllarmeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RegolaAllarme.class;
	}

	@Override
	public String getModelClassName() {
		return RegolaAllarme.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<RegolaAllarme, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<RegolaAllarme, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RegolaAllarme, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((RegolaAllarme)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<RegolaAllarme, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<RegolaAllarme, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(RegolaAllarme)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<RegolaAllarme, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<RegolaAllarme, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<RegolaAllarme, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<RegolaAllarme, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<RegolaAllarme, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<RegolaAllarme, Object>>();
		Map<String, BiConsumer<RegolaAllarme, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<RegolaAllarme, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<RegolaAllarme, Object>() {

				@Override
				public Object apply(RegolaAllarme regolaAllarme) {
					return regolaAllarme.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<RegolaAllarme, Object>() {

				@Override
				public void accept(RegolaAllarme regolaAllarme, Object uuid) {
					regolaAllarme.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"id",
			new Function<RegolaAllarme, Object>() {

				@Override
				public Object apply(RegolaAllarme regolaAllarme) {
					return regolaAllarme.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<RegolaAllarme, Object>() {

				@Override
				public void accept(RegolaAllarme regolaAllarme, Object id) {
					regolaAllarme.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"nome",
			new Function<RegolaAllarme, Object>() {

				@Override
				public Object apply(RegolaAllarme regolaAllarme) {
					return regolaAllarme.getNome();
				}

			});
		attributeSetterBiConsumers.put(
			"nome",
			new BiConsumer<RegolaAllarme, Object>() {

				@Override
				public void accept(RegolaAllarme regolaAllarme, Object nome) {
					regolaAllarme.setNome((String)nome);
				}

			});
		attributeGetterFunctions.put(
			"espressione",
			new Function<RegolaAllarme, Object>() {

				@Override
				public Object apply(RegolaAllarme regolaAllarme) {
					return regolaAllarme.getEspressione();
				}

			});
		attributeSetterBiConsumers.put(
			"espressione",
			new BiConsumer<RegolaAllarme, Object>() {

				@Override
				public void accept(
					RegolaAllarme regolaAllarme, Object espressione) {

					regolaAllarme.setEspressione((String)espressione);
				}

			});
		attributeGetterFunctions.put(
			"descrizione",
			new Function<RegolaAllarme, Object>() {

				@Override
				public Object apply(RegolaAllarme regolaAllarme) {
					return regolaAllarme.getDescrizione();
				}

			});
		attributeSetterBiConsumers.put(
			"descrizione",
			new BiConsumer<RegolaAllarme, Object>() {

				@Override
				public void accept(
					RegolaAllarme regolaAllarme, Object descrizione) {

					regolaAllarme.setDescrizione((String)descrizione);
				}

			});
		attributeGetterFunctions.put(
			"colore",
			new Function<RegolaAllarme, Object>() {

				@Override
				public Object apply(RegolaAllarme regolaAllarme) {
					return regolaAllarme.getColore();
				}

			});
		attributeSetterBiConsumers.put(
			"colore",
			new BiConsumer<RegolaAllarme, Object>() {

				@Override
				public void accept(RegolaAllarme regolaAllarme, Object colore) {
					regolaAllarme.setColore((Integer)colore);
				}

			});
		attributeGetterFunctions.put(
			"attivo",
			new Function<RegolaAllarme, Object>() {

				@Override
				public Object apply(RegolaAllarme regolaAllarme) {
					return regolaAllarme.getAttivo();
				}

			});
		attributeSetterBiConsumers.put(
			"attivo",
			new BiConsumer<RegolaAllarme, Object>() {

				@Override
				public void accept(RegolaAllarme regolaAllarme, Object attivo) {
					regolaAllarme.setAttivo((Boolean)attivo);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getNome() {
		if (_nome == null) {
			return "";
		}
		else {
			return _nome;
		}
	}

	@Override
	public void setNome(String nome) {
		_nome = nome;
	}

	@JSON
	@Override
	public String getEspressione() {
		if (_espressione == null) {
			return "";
		}
		else {
			return _espressione;
		}
	}

	@Override
	public void setEspressione(String espressione) {
		_espressione = espressione;
	}

	@JSON
	@Override
	public String getDescrizione() {
		if (_descrizione == null) {
			return "";
		}
		else {
			return _descrizione;
		}
	}

	@Override
	public void setDescrizione(String descrizione) {
		_descrizione = descrizione;
	}

	@JSON
	@Override
	public int getColore() {
		return _colore;
	}

	@Override
	public void setColore(int colore) {
		_colore = colore;
	}

	@JSON
	@Override
	public boolean getAttivo() {
		return _attivo;
	}

	@JSON
	@Override
	public boolean isAttivo() {
		return _attivo;
	}

	@Override
	public void setAttivo(boolean attivo) {
		_columnBitmask |= ATTIVO_COLUMN_BITMASK;

		if (!_setOriginalAttivo) {
			_setOriginalAttivo = true;

			_originalAttivo = _attivo;
		}

		_attivo = attivo;
	}

	public boolean getOriginalAttivo() {
		return _originalAttivo;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, RegolaAllarme.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RegolaAllarme toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RegolaAllarme)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RegolaAllarmeImpl regolaAllarmeImpl = new RegolaAllarmeImpl();

		regolaAllarmeImpl.setUuid(getUuid());
		regolaAllarmeImpl.setId(getId());
		regolaAllarmeImpl.setNome(getNome());
		regolaAllarmeImpl.setEspressione(getEspressione());
		regolaAllarmeImpl.setDescrizione(getDescrizione());
		regolaAllarmeImpl.setColore(getColore());
		regolaAllarmeImpl.setAttivo(isAttivo());

		regolaAllarmeImpl.resetOriginalValues();

		return regolaAllarmeImpl;
	}

	@Override
	public int compareTo(RegolaAllarme regolaAllarme) {
		int value = 0;

		if (getId() < regolaAllarme.getId()) {
			value = -1;
		}
		else if (getId() > regolaAllarme.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RegolaAllarme)) {
			return false;
		}

		RegolaAllarme regolaAllarme = (RegolaAllarme)obj;

		long primaryKey = regolaAllarme.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		RegolaAllarmeModelImpl regolaAllarmeModelImpl = this;

		regolaAllarmeModelImpl._originalUuid = regolaAllarmeModelImpl._uuid;

		regolaAllarmeModelImpl._originalAttivo = regolaAllarmeModelImpl._attivo;

		regolaAllarmeModelImpl._setOriginalAttivo = false;

		regolaAllarmeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RegolaAllarme> toCacheModel() {
		RegolaAllarmeCacheModel regolaAllarmeCacheModel =
			new RegolaAllarmeCacheModel();

		regolaAllarmeCacheModel.uuid = getUuid();

		String uuid = regolaAllarmeCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			regolaAllarmeCacheModel.uuid = null;
		}

		regolaAllarmeCacheModel.id = getId();

		regolaAllarmeCacheModel.nome = getNome();

		String nome = regolaAllarmeCacheModel.nome;

		if ((nome != null) && (nome.length() == 0)) {
			regolaAllarmeCacheModel.nome = null;
		}

		regolaAllarmeCacheModel.espressione = getEspressione();

		String espressione = regolaAllarmeCacheModel.espressione;

		if ((espressione != null) && (espressione.length() == 0)) {
			regolaAllarmeCacheModel.espressione = null;
		}

		regolaAllarmeCacheModel.descrizione = getDescrizione();

		String descrizione = regolaAllarmeCacheModel.descrizione;

		if ((descrizione != null) && (descrizione.length() == 0)) {
			regolaAllarmeCacheModel.descrizione = null;
		}

		regolaAllarmeCacheModel.colore = getColore();

		regolaAllarmeCacheModel.attivo = isAttivo();

		return regolaAllarmeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<RegolaAllarme, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<RegolaAllarme, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RegolaAllarme, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((RegolaAllarme)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<RegolaAllarme, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<RegolaAllarme, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RegolaAllarme, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((RegolaAllarme)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		RegolaAllarme.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		RegolaAllarme.class, ModelWrapper.class
	};

	private String _uuid;
	private String _originalUuid;
	private long _id;
	private String _nome;
	private String _espressione;
	private String _descrizione;
	private int _colore;
	private boolean _attivo;
	private boolean _originalAttivo;
	private boolean _setOriginalAttivo;
	private long _columnBitmask;
	private RegolaAllarme _escapedModel;

}