/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.bollettino.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.bollettino.model.RegolaAllarmeCondizione;
import it.eng.bollettino.model.RegolaAllarmeCondizioneModel;
import it.eng.bollettino.model.RegolaAllarmeCondizioneSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the RegolaAllarmeCondizione service. Represents a row in the &quot;BOLLETTINO_RegolaAllarmeCondizione&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>RegolaAllarmeCondizioneModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RegolaAllarmeCondizioneImpl}.
 * </p>
 *
 * @author GFAVINI
 * @see RegolaAllarmeCondizioneImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class RegolaAllarmeCondizioneModelImpl
	extends BaseModelImpl<RegolaAllarmeCondizione>
	implements RegolaAllarmeCondizioneModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a regola allarme condizione model instance should use the <code>RegolaAllarmeCondizione</code> interface instead.
	 */
	public static final String TABLE_NAME =
		"BOLLETTINO_RegolaAllarmeCondizione";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"id_", Types.BIGINT},
		{"idRegola", Types.BIGINT}, {"lettera", Types.VARCHAR},
		{"idVariabile", Types.VARCHAR}, {"idStazione", Types.VARCHAR},
		{"idStazioneVariabile", Types.BIGINT}, {"soglia", Types.INTEGER},
		{"valoreSoglia", Types.DOUBLE}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("idRegola", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("lettera", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idVariabile", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idStazione", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idStazioneVariabile", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("soglia", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("valoreSoglia", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE =
		"create table BOLLETTINO_RegolaAllarmeCondizione (uuid_ VARCHAR(75) null,id_ LONG not null primary key,idRegola LONG,lettera VARCHAR(75) null,idVariabile VARCHAR(75) null,idStazione VARCHAR(75) null,idStazioneVariabile LONG,soglia INTEGER,valoreSoglia DOUBLE)";

	public static final String TABLE_SQL_DROP =
		"drop table BOLLETTINO_RegolaAllarmeCondizione";

	public static final String ORDER_BY_JPQL =
		" ORDER BY regolaAllarmeCondizione.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY BOLLETTINO_RegolaAllarmeCondizione.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.bollettino.model.RegolaAllarmeCondizione"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.bollettino.model.RegolaAllarmeCondizione"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.it.eng.bollettino.model.RegolaAllarmeCondizione"),
		true);

	public static final long IDREGOLA_COLUMN_BITMASK = 1L;

	public static final long UUID_COLUMN_BITMASK = 2L;

	public static final long ID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static RegolaAllarmeCondizione toModel(
		RegolaAllarmeCondizioneSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		RegolaAllarmeCondizione model = new RegolaAllarmeCondizioneImpl();

		model.setUuid(soapModel.getUuid());
		model.setId(soapModel.getId());
		model.setIdRegola(soapModel.getIdRegola());
		model.setLettera(soapModel.getLettera());
		model.setIdVariabile(soapModel.getIdVariabile());
		model.setIdStazione(soapModel.getIdStazione());
		model.setIdStazioneVariabile(soapModel.getIdStazioneVariabile());
		model.setSoglia(soapModel.getSoglia());
		model.setValoreSoglia(soapModel.getValoreSoglia());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<RegolaAllarmeCondizione> toModels(
		RegolaAllarmeCondizioneSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<RegolaAllarmeCondizione> models =
			new ArrayList<RegolaAllarmeCondizione>(soapModels.length);

		for (RegolaAllarmeCondizioneSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		allerta.bollettino.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.bollettino.model.RegolaAllarmeCondizione"));

	public RegolaAllarmeCondizioneModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RegolaAllarmeCondizione.class;
	}

	@Override
	public String getModelClassName() {
		return RegolaAllarmeCondizione.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<RegolaAllarmeCondizione, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<RegolaAllarmeCondizione, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RegolaAllarmeCondizione, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((RegolaAllarmeCondizione)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<RegolaAllarmeCondizione, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<RegolaAllarmeCondizione, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(RegolaAllarmeCondizione)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<RegolaAllarmeCondizione, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<RegolaAllarmeCondizione, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<RegolaAllarmeCondizione, Object>>
		_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<RegolaAllarmeCondizione, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<RegolaAllarmeCondizione, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<RegolaAllarmeCondizione, Object>>();
		Map<String, BiConsumer<RegolaAllarmeCondizione, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<RegolaAllarmeCondizione, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<RegolaAllarmeCondizione, Object>() {

				@Override
				public Object apply(
					RegolaAllarmeCondizione regolaAllarmeCondizione) {

					return regolaAllarmeCondizione.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<RegolaAllarmeCondizione, Object>() {

				@Override
				public void accept(
					RegolaAllarmeCondizione regolaAllarmeCondizione,
					Object uuid) {

					regolaAllarmeCondizione.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"id",
			new Function<RegolaAllarmeCondizione, Object>() {

				@Override
				public Object apply(
					RegolaAllarmeCondizione regolaAllarmeCondizione) {

					return regolaAllarmeCondizione.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<RegolaAllarmeCondizione, Object>() {

				@Override
				public void accept(
					RegolaAllarmeCondizione regolaAllarmeCondizione,
					Object id) {

					regolaAllarmeCondizione.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"idRegola",
			new Function<RegolaAllarmeCondizione, Object>() {

				@Override
				public Object apply(
					RegolaAllarmeCondizione regolaAllarmeCondizione) {

					return regolaAllarmeCondizione.getIdRegola();
				}

			});
		attributeSetterBiConsumers.put(
			"idRegola",
			new BiConsumer<RegolaAllarmeCondizione, Object>() {

				@Override
				public void accept(
					RegolaAllarmeCondizione regolaAllarmeCondizione,
					Object idRegola) {

					regolaAllarmeCondizione.setIdRegola((Long)idRegola);
				}

			});
		attributeGetterFunctions.put(
			"lettera",
			new Function<RegolaAllarmeCondizione, Object>() {

				@Override
				public Object apply(
					RegolaAllarmeCondizione regolaAllarmeCondizione) {

					return regolaAllarmeCondizione.getLettera();
				}

			});
		attributeSetterBiConsumers.put(
			"lettera",
			new BiConsumer<RegolaAllarmeCondizione, Object>() {

				@Override
				public void accept(
					RegolaAllarmeCondizione regolaAllarmeCondizione,
					Object lettera) {

					regolaAllarmeCondizione.setLettera((String)lettera);
				}

			});
		attributeGetterFunctions.put(
			"idVariabile",
			new Function<RegolaAllarmeCondizione, Object>() {

				@Override
				public Object apply(
					RegolaAllarmeCondizione regolaAllarmeCondizione) {

					return regolaAllarmeCondizione.getIdVariabile();
				}

			});
		attributeSetterBiConsumers.put(
			"idVariabile",
			new BiConsumer<RegolaAllarmeCondizione, Object>() {

				@Override
				public void accept(
					RegolaAllarmeCondizione regolaAllarmeCondizione,
					Object idVariabile) {

					regolaAllarmeCondizione.setIdVariabile((String)idVariabile);
				}

			});
		attributeGetterFunctions.put(
			"idStazione",
			new Function<RegolaAllarmeCondizione, Object>() {

				@Override
				public Object apply(
					RegolaAllarmeCondizione regolaAllarmeCondizione) {

					return regolaAllarmeCondizione.getIdStazione();
				}

			});
		attributeSetterBiConsumers.put(
			"idStazione",
			new BiConsumer<RegolaAllarmeCondizione, Object>() {

				@Override
				public void accept(
					RegolaAllarmeCondizione regolaAllarmeCondizione,
					Object idStazione) {

					regolaAllarmeCondizione.setIdStazione((String)idStazione);
				}

			});
		attributeGetterFunctions.put(
			"idStazioneVariabile",
			new Function<RegolaAllarmeCondizione, Object>() {

				@Override
				public Object apply(
					RegolaAllarmeCondizione regolaAllarmeCondizione) {

					return regolaAllarmeCondizione.getIdStazioneVariabile();
				}

			});
		attributeSetterBiConsumers.put(
			"idStazioneVariabile",
			new BiConsumer<RegolaAllarmeCondizione, Object>() {

				@Override
				public void accept(
					RegolaAllarmeCondizione regolaAllarmeCondizione,
					Object idStazioneVariabile) {

					regolaAllarmeCondizione.setIdStazioneVariabile(
						(Long)idStazioneVariabile);
				}

			});
		attributeGetterFunctions.put(
			"soglia",
			new Function<RegolaAllarmeCondizione, Object>() {

				@Override
				public Object apply(
					RegolaAllarmeCondizione regolaAllarmeCondizione) {

					return regolaAllarmeCondizione.getSoglia();
				}

			});
		attributeSetterBiConsumers.put(
			"soglia",
			new BiConsumer<RegolaAllarmeCondizione, Object>() {

				@Override
				public void accept(
					RegolaAllarmeCondizione regolaAllarmeCondizione,
					Object soglia) {

					regolaAllarmeCondizione.setSoglia((Integer)soglia);
				}

			});
		attributeGetterFunctions.put(
			"valoreSoglia",
			new Function<RegolaAllarmeCondizione, Object>() {

				@Override
				public Object apply(
					RegolaAllarmeCondizione regolaAllarmeCondizione) {

					return regolaAllarmeCondizione.getValoreSoglia();
				}

			});
		attributeSetterBiConsumers.put(
			"valoreSoglia",
			new BiConsumer<RegolaAllarmeCondizione, Object>() {

				@Override
				public void accept(
					RegolaAllarmeCondizione regolaAllarmeCondizione,
					Object valoreSoglia) {

					regolaAllarmeCondizione.setValoreSoglia(
						(Double)valoreSoglia);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public long getIdRegola() {
		return _idRegola;
	}

	@Override
	public void setIdRegola(long idRegola) {
		_columnBitmask |= IDREGOLA_COLUMN_BITMASK;

		if (!_setOriginalIdRegola) {
			_setOriginalIdRegola = true;

			_originalIdRegola = _idRegola;
		}

		_idRegola = idRegola;
	}

	public long getOriginalIdRegola() {
		return _originalIdRegola;
	}

	@JSON
	@Override
	public String getLettera() {
		if (_lettera == null) {
			return "";
		}
		else {
			return _lettera;
		}
	}

	@Override
	public void setLettera(String lettera) {
		_lettera = lettera;
	}

	@JSON
	@Override
	public String getIdVariabile() {
		if (_idVariabile == null) {
			return "";
		}
		else {
			return _idVariabile;
		}
	}

	@Override
	public void setIdVariabile(String idVariabile) {
		_idVariabile = idVariabile;
	}

	@JSON
	@Override
	public String getIdStazione() {
		if (_idStazione == null) {
			return "";
		}
		else {
			return _idStazione;
		}
	}

	@Override
	public void setIdStazione(String idStazione) {
		_idStazione = idStazione;
	}

	@JSON
	@Override
	public long getIdStazioneVariabile() {
		return _idStazioneVariabile;
	}

	@Override
	public void setIdStazioneVariabile(long idStazioneVariabile) {
		_idStazioneVariabile = idStazioneVariabile;
	}

	@JSON
	@Override
	public int getSoglia() {
		return _soglia;
	}

	@Override
	public void setSoglia(int soglia) {
		_soglia = soglia;
	}

	@JSON
	@Override
	public double getValoreSoglia() {
		return _valoreSoglia;
	}

	@Override
	public void setValoreSoglia(double valoreSoglia) {
		_valoreSoglia = valoreSoglia;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, RegolaAllarmeCondizione.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RegolaAllarmeCondizione toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RegolaAllarmeCondizione)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RegolaAllarmeCondizioneImpl regolaAllarmeCondizioneImpl =
			new RegolaAllarmeCondizioneImpl();

		regolaAllarmeCondizioneImpl.setUuid(getUuid());
		regolaAllarmeCondizioneImpl.setId(getId());
		regolaAllarmeCondizioneImpl.setIdRegola(getIdRegola());
		regolaAllarmeCondizioneImpl.setLettera(getLettera());
		regolaAllarmeCondizioneImpl.setIdVariabile(getIdVariabile());
		regolaAllarmeCondizioneImpl.setIdStazione(getIdStazione());
		regolaAllarmeCondizioneImpl.setIdStazioneVariabile(
			getIdStazioneVariabile());
		regolaAllarmeCondizioneImpl.setSoglia(getSoglia());
		regolaAllarmeCondizioneImpl.setValoreSoglia(getValoreSoglia());

		regolaAllarmeCondizioneImpl.resetOriginalValues();

		return regolaAllarmeCondizioneImpl;
	}

	@Override
	public int compareTo(RegolaAllarmeCondizione regolaAllarmeCondizione) {
		int value = 0;

		if (getId() < regolaAllarmeCondizione.getId()) {
			value = -1;
		}
		else if (getId() > regolaAllarmeCondizione.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RegolaAllarmeCondizione)) {
			return false;
		}

		RegolaAllarmeCondizione regolaAllarmeCondizione =
			(RegolaAllarmeCondizione)obj;

		long primaryKey = regolaAllarmeCondizione.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		RegolaAllarmeCondizioneModelImpl regolaAllarmeCondizioneModelImpl =
			this;

		regolaAllarmeCondizioneModelImpl._originalUuid =
			regolaAllarmeCondizioneModelImpl._uuid;

		regolaAllarmeCondizioneModelImpl._originalIdRegola =
			regolaAllarmeCondizioneModelImpl._idRegola;

		regolaAllarmeCondizioneModelImpl._setOriginalIdRegola = false;

		regolaAllarmeCondizioneModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RegolaAllarmeCondizione> toCacheModel() {
		RegolaAllarmeCondizioneCacheModel regolaAllarmeCondizioneCacheModel =
			new RegolaAllarmeCondizioneCacheModel();

		regolaAllarmeCondizioneCacheModel.uuid = getUuid();

		String uuid = regolaAllarmeCondizioneCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			regolaAllarmeCondizioneCacheModel.uuid = null;
		}

		regolaAllarmeCondizioneCacheModel.id = getId();

		regolaAllarmeCondizioneCacheModel.idRegola = getIdRegola();

		regolaAllarmeCondizioneCacheModel.lettera = getLettera();

		String lettera = regolaAllarmeCondizioneCacheModel.lettera;

		if ((lettera != null) && (lettera.length() == 0)) {
			regolaAllarmeCondizioneCacheModel.lettera = null;
		}

		regolaAllarmeCondizioneCacheModel.idVariabile = getIdVariabile();

		String idVariabile = regolaAllarmeCondizioneCacheModel.idVariabile;

		if ((idVariabile != null) && (idVariabile.length() == 0)) {
			regolaAllarmeCondizioneCacheModel.idVariabile = null;
		}

		regolaAllarmeCondizioneCacheModel.idStazione = getIdStazione();

		String idStazione = regolaAllarmeCondizioneCacheModel.idStazione;

		if ((idStazione != null) && (idStazione.length() == 0)) {
			regolaAllarmeCondizioneCacheModel.idStazione = null;
		}

		regolaAllarmeCondizioneCacheModel.idStazioneVariabile =
			getIdStazioneVariabile();

		regolaAllarmeCondizioneCacheModel.soglia = getSoglia();

		regolaAllarmeCondizioneCacheModel.valoreSoglia = getValoreSoglia();

		return regolaAllarmeCondizioneCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<RegolaAllarmeCondizione, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<RegolaAllarmeCondizione, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RegolaAllarmeCondizione, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((RegolaAllarmeCondizione)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<RegolaAllarmeCondizione, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<RegolaAllarmeCondizione, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RegolaAllarmeCondizione, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((RegolaAllarmeCondizione)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		RegolaAllarmeCondizione.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		RegolaAllarmeCondizione.class, ModelWrapper.class
	};

	private String _uuid;
	private String _originalUuid;
	private long _id;
	private long _idRegola;
	private long _originalIdRegola;
	private boolean _setOriginalIdRegola;
	private String _lettera;
	private String _idVariabile;
	private String _idStazione;
	private long _idStazioneVariabile;
	private int _soglia;
	private double _valoreSoglia;
	private long _columnBitmask;
	private RegolaAllarmeCondizione _escapedModel;

}