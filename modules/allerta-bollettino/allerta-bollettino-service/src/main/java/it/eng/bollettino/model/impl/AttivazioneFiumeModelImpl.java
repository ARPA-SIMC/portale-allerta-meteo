/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.bollettino.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.bollettino.model.AttivazioneFiume;
import it.eng.bollettino.model.AttivazioneFiumeModel;
import it.eng.bollettino.model.AttivazioneFiumeSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AttivazioneFiume service. Represents a row in the &quot;BOLLETTINO_AttivazioneFiume&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>AttivazioneFiumeModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AttivazioneFiumeImpl}.
 * </p>
 *
 * @author GFAVINI
 * @see AttivazioneFiumeImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class AttivazioneFiumeModelImpl
	extends BaseModelImpl<AttivazioneFiume> implements AttivazioneFiumeModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a attivazione fiume model instance should use the <code>AttivazioneFiume</code> interface instead.
	 */
	public static final String TABLE_NAME = "BOLLETTINO_AttivazioneFiume";

	public static final Object[][] TABLE_COLUMNS = {
		{"fiumeId", Types.VARCHAR}, {"attivo", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("fiumeId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("attivo", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table BOLLETTINO_AttivazioneFiume (fiumeId VARCHAR(75) not null primary key,attivo BOOLEAN)";

	public static final String TABLE_SQL_DROP =
		"drop table BOLLETTINO_AttivazioneFiume";

	public static final String ORDER_BY_JPQL =
		" ORDER BY attivazioneFiume.fiumeId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY BOLLETTINO_AttivazioneFiume.fiumeId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.bollettino.model.AttivazioneFiume"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.bollettino.model.AttivazioneFiume"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AttivazioneFiume toModel(AttivazioneFiumeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AttivazioneFiume model = new AttivazioneFiumeImpl();

		model.setFiumeId(soapModel.getFiumeId());
		model.setAttivo(soapModel.isAttivo());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AttivazioneFiume> toModels(
		AttivazioneFiumeSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<AttivazioneFiume> models = new ArrayList<AttivazioneFiume>(
			soapModels.length);

		for (AttivazioneFiumeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		allerta.bollettino.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.bollettino.model.AttivazioneFiume"));

	public AttivazioneFiumeModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _fiumeId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setFiumeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fiumeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return AttivazioneFiume.class;
	}

	@Override
	public String getModelClassName() {
		return AttivazioneFiume.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AttivazioneFiume, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AttivazioneFiume, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttivazioneFiume, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AttivazioneFiume)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AttivazioneFiume, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AttivazioneFiume, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AttivazioneFiume)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AttivazioneFiume, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AttivazioneFiume, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<AttivazioneFiume, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<AttivazioneFiume, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<AttivazioneFiume, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<AttivazioneFiume, Object>>();
		Map<String, BiConsumer<AttivazioneFiume, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<AttivazioneFiume, ?>>();

		attributeGetterFunctions.put(
			"fiumeId",
			new Function<AttivazioneFiume, Object>() {

				@Override
				public Object apply(AttivazioneFiume attivazioneFiume) {
					return attivazioneFiume.getFiumeId();
				}

			});
		attributeSetterBiConsumers.put(
			"fiumeId",
			new BiConsumer<AttivazioneFiume, Object>() {

				@Override
				public void accept(
					AttivazioneFiume attivazioneFiume, Object fiumeId) {

					attivazioneFiume.setFiumeId((String)fiumeId);
				}

			});
		attributeGetterFunctions.put(
			"attivo",
			new Function<AttivazioneFiume, Object>() {

				@Override
				public Object apply(AttivazioneFiume attivazioneFiume) {
					return attivazioneFiume.getAttivo();
				}

			});
		attributeSetterBiConsumers.put(
			"attivo",
			new BiConsumer<AttivazioneFiume, Object>() {

				@Override
				public void accept(
					AttivazioneFiume attivazioneFiume, Object attivo) {

					attivazioneFiume.setAttivo((Boolean)attivo);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getFiumeId() {
		if (_fiumeId == null) {
			return "";
		}
		else {
			return _fiumeId;
		}
	}

	@Override
	public void setFiumeId(String fiumeId) {
		_fiumeId = fiumeId;
	}

	@JSON
	@Override
	public boolean getAttivo() {
		return _attivo;
	}

	@JSON
	@Override
	public boolean isAttivo() {
		return _attivo;
	}

	@Override
	public void setAttivo(boolean attivo) {
		_attivo = attivo;
	}

	@Override
	public AttivazioneFiume toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AttivazioneFiume)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AttivazioneFiumeImpl attivazioneFiumeImpl = new AttivazioneFiumeImpl();

		attivazioneFiumeImpl.setFiumeId(getFiumeId());
		attivazioneFiumeImpl.setAttivo(isAttivo());

		attivazioneFiumeImpl.resetOriginalValues();

		return attivazioneFiumeImpl;
	}

	@Override
	public int compareTo(AttivazioneFiume attivazioneFiume) {
		int value = 0;

		value = getFiumeId().compareTo(attivazioneFiume.getFiumeId());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AttivazioneFiume)) {
			return false;
		}

		AttivazioneFiume attivazioneFiume = (AttivazioneFiume)obj;

		String primaryKey = attivazioneFiume.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<AttivazioneFiume> toCacheModel() {
		AttivazioneFiumeCacheModel attivazioneFiumeCacheModel =
			new AttivazioneFiumeCacheModel();

		attivazioneFiumeCacheModel.fiumeId = getFiumeId();

		String fiumeId = attivazioneFiumeCacheModel.fiumeId;

		if ((fiumeId != null) && (fiumeId.length() == 0)) {
			attivazioneFiumeCacheModel.fiumeId = null;
		}

		attivazioneFiumeCacheModel.attivo = isAttivo();

		return attivazioneFiumeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AttivazioneFiume, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AttivazioneFiume, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttivazioneFiume, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((AttivazioneFiume)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<AttivazioneFiume, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<AttivazioneFiume, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AttivazioneFiume, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((AttivazioneFiume)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		AttivazioneFiume.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		AttivazioneFiume.class, ModelWrapper.class
	};

	private String _fiumeId;
	private boolean _attivo;
	private AttivazioneFiume _escapedModel;

}