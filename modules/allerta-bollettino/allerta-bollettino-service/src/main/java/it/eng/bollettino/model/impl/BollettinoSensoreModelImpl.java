/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.bollettino.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.bollettino.model.BollettinoSensore;
import it.eng.bollettino.model.BollettinoSensoreModel;
import it.eng.bollettino.model.BollettinoSensoreSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the BollettinoSensore service. Represents a row in the &quot;BOLLETTINO_BollettinoSensore&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>BollettinoSensoreModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BollettinoSensoreImpl}.
 * </p>
 *
 * @author GFAVINI
 * @see BollettinoSensoreImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class BollettinoSensoreModelImpl
	extends BaseModelImpl<BollettinoSensore> implements BollettinoSensoreModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bollettino sensore model instance should use the <code>BollettinoSensore</code> interface instead.
	 */
	public static final String TABLE_NAME = "BOLLETTINO_BollettinoSensore";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"id_", Types.BIGINT},
		{"idBollettino", Types.BIGINT}, {"idStazione", Types.BIGINT},
		{"idBollettinoBacino", Types.BIGINT}, {"progressivo", Types.INTEGER},
		{"nomeStazione", Types.VARCHAR}, {"oreOsservazione", Types.VARCHAR},
		{"osservazione", Types.DOUBLE}, {"tendenza", Types.INTEGER},
		{"colmoPrevisto", Types.VARCHAR}, {"oraPrevista", Types.VARCHAR},
		{"soglia1", Types.DOUBLE}, {"soglia2", Types.DOUBLE},
		{"soglia3", Types.DOUBLE}, {"giornoPrevisto", Types.VARCHAR},
		{"osservato", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("idBollettino", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("idStazione", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("idBollettinoBacino", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("progressivo", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("nomeStazione", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("oreOsservazione", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("osservazione", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("tendenza", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("colmoPrevisto", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("oraPrevista", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("soglia1", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("soglia2", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("soglia3", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("giornoPrevisto", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("osservato", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table BOLLETTINO_BollettinoSensore (uuid_ VARCHAR(75) null,id_ LONG not null primary key,idBollettino LONG,idStazione LONG,idBollettinoBacino LONG,progressivo INTEGER,nomeStazione VARCHAR(75) null,oreOsservazione VARCHAR(75) null,osservazione DOUBLE,tendenza INTEGER,colmoPrevisto VARCHAR(75) null,oraPrevista VARCHAR(75) null,soglia1 DOUBLE,soglia2 DOUBLE,soglia3 DOUBLE,giornoPrevisto VARCHAR(75) null,osservato BOOLEAN)";

	public static final String TABLE_SQL_DROP =
		"drop table BOLLETTINO_BollettinoSensore";

	public static final String ORDER_BY_JPQL =
		" ORDER BY bollettinoSensore.progressivo ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY BOLLETTINO_BollettinoSensore.progressivo ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.bollettino.model.BollettinoSensore"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.bollettino.model.BollettinoSensore"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.it.eng.bollettino.model.BollettinoSensore"),
		true);

	public static final long IDBOLLETTINO_COLUMN_BITMASK = 1L;

	public static final long UUID_COLUMN_BITMASK = 2L;

	public static final long PROGRESSIVO_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static BollettinoSensore toModel(BollettinoSensoreSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		BollettinoSensore model = new BollettinoSensoreImpl();

		model.setUuid(soapModel.getUuid());
		model.setId(soapModel.getId());
		model.setIdBollettino(soapModel.getIdBollettino());
		model.setIdStazione(soapModel.getIdStazione());
		model.setIdBollettinoBacino(soapModel.getIdBollettinoBacino());
		model.setProgressivo(soapModel.getProgressivo());
		model.setNomeStazione(soapModel.getNomeStazione());
		model.setOreOsservazione(soapModel.getOreOsservazione());
		model.setOsservazione(soapModel.getOsservazione());
		model.setTendenza(soapModel.getTendenza());
		model.setColmoPrevisto(soapModel.getColmoPrevisto());
		model.setOraPrevista(soapModel.getOraPrevista());
		model.setSoglia1(soapModel.getSoglia1());
		model.setSoglia2(soapModel.getSoglia2());
		model.setSoglia3(soapModel.getSoglia3());
		model.setGiornoPrevisto(soapModel.getGiornoPrevisto());
		model.setOsservato(soapModel.isOsservato());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<BollettinoSensore> toModels(
		BollettinoSensoreSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<BollettinoSensore> models = new ArrayList<BollettinoSensore>(
			soapModels.length);

		for (BollettinoSensoreSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		allerta.bollettino.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.bollettino.model.BollettinoSensore"));

	public BollettinoSensoreModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BollettinoSensore.class;
	}

	@Override
	public String getModelClassName() {
		return BollettinoSensore.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<BollettinoSensore, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<BollettinoSensore, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BollettinoSensore, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((BollettinoSensore)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<BollettinoSensore, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<BollettinoSensore, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(BollettinoSensore)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<BollettinoSensore, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<BollettinoSensore, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<BollettinoSensore, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<BollettinoSensore, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<BollettinoSensore, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<BollettinoSensore, Object>>();
		Map<String, BiConsumer<BollettinoSensore, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<BollettinoSensore, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<BollettinoSensore, Object>() {

				@Override
				public Object apply(BollettinoSensore bollettinoSensore) {
					return bollettinoSensore.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<BollettinoSensore, Object>() {

				@Override
				public void accept(
					BollettinoSensore bollettinoSensore, Object uuid) {

					bollettinoSensore.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"id",
			new Function<BollettinoSensore, Object>() {

				@Override
				public Object apply(BollettinoSensore bollettinoSensore) {
					return bollettinoSensore.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<BollettinoSensore, Object>() {

				@Override
				public void accept(
					BollettinoSensore bollettinoSensore, Object id) {

					bollettinoSensore.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"idBollettino",
			new Function<BollettinoSensore, Object>() {

				@Override
				public Object apply(BollettinoSensore bollettinoSensore) {
					return bollettinoSensore.getIdBollettino();
				}

			});
		attributeSetterBiConsumers.put(
			"idBollettino",
			new BiConsumer<BollettinoSensore, Object>() {

				@Override
				public void accept(
					BollettinoSensore bollettinoSensore, Object idBollettino) {

					bollettinoSensore.setIdBollettino((Long)idBollettino);
				}

			});
		attributeGetterFunctions.put(
			"idStazione",
			new Function<BollettinoSensore, Object>() {

				@Override
				public Object apply(BollettinoSensore bollettinoSensore) {
					return bollettinoSensore.getIdStazione();
				}

			});
		attributeSetterBiConsumers.put(
			"idStazione",
			new BiConsumer<BollettinoSensore, Object>() {

				@Override
				public void accept(
					BollettinoSensore bollettinoSensore, Object idStazione) {

					bollettinoSensore.setIdStazione((Long)idStazione);
				}

			});
		attributeGetterFunctions.put(
			"idBollettinoBacino",
			new Function<BollettinoSensore, Object>() {

				@Override
				public Object apply(BollettinoSensore bollettinoSensore) {
					return bollettinoSensore.getIdBollettinoBacino();
				}

			});
		attributeSetterBiConsumers.put(
			"idBollettinoBacino",
			new BiConsumer<BollettinoSensore, Object>() {

				@Override
				public void accept(
					BollettinoSensore bollettinoSensore,
					Object idBollettinoBacino) {

					bollettinoSensore.setIdBollettinoBacino(
						(Long)idBollettinoBacino);
				}

			});
		attributeGetterFunctions.put(
			"progressivo",
			new Function<BollettinoSensore, Object>() {

				@Override
				public Object apply(BollettinoSensore bollettinoSensore) {
					return bollettinoSensore.getProgressivo();
				}

			});
		attributeSetterBiConsumers.put(
			"progressivo",
			new BiConsumer<BollettinoSensore, Object>() {

				@Override
				public void accept(
					BollettinoSensore bollettinoSensore, Object progressivo) {

					bollettinoSensore.setProgressivo((Integer)progressivo);
				}

			});
		attributeGetterFunctions.put(
			"nomeStazione",
			new Function<BollettinoSensore, Object>() {

				@Override
				public Object apply(BollettinoSensore bollettinoSensore) {
					return bollettinoSensore.getNomeStazione();
				}

			});
		attributeSetterBiConsumers.put(
			"nomeStazione",
			new BiConsumer<BollettinoSensore, Object>() {

				@Override
				public void accept(
					BollettinoSensore bollettinoSensore, Object nomeStazione) {

					bollettinoSensore.setNomeStazione((String)nomeStazione);
				}

			});
		attributeGetterFunctions.put(
			"oreOsservazione",
			new Function<BollettinoSensore, Object>() {

				@Override
				public Object apply(BollettinoSensore bollettinoSensore) {
					return bollettinoSensore.getOreOsservazione();
				}

			});
		attributeSetterBiConsumers.put(
			"oreOsservazione",
			new BiConsumer<BollettinoSensore, Object>() {

				@Override
				public void accept(
					BollettinoSensore bollettinoSensore,
					Object oreOsservazione) {

					bollettinoSensore.setOreOsservazione(
						(String)oreOsservazione);
				}

			});
		attributeGetterFunctions.put(
			"osservazione",
			new Function<BollettinoSensore, Object>() {

				@Override
				public Object apply(BollettinoSensore bollettinoSensore) {
					return bollettinoSensore.getOsservazione();
				}

			});
		attributeSetterBiConsumers.put(
			"osservazione",
			new BiConsumer<BollettinoSensore, Object>() {

				@Override
				public void accept(
					BollettinoSensore bollettinoSensore, Object osservazione) {

					bollettinoSensore.setOsservazione((Double)osservazione);
				}

			});
		attributeGetterFunctions.put(
			"tendenza",
			new Function<BollettinoSensore, Object>() {

				@Override
				public Object apply(BollettinoSensore bollettinoSensore) {
					return bollettinoSensore.getTendenza();
				}

			});
		attributeSetterBiConsumers.put(
			"tendenza",
			new BiConsumer<BollettinoSensore, Object>() {

				@Override
				public void accept(
					BollettinoSensore bollettinoSensore, Object tendenza) {

					bollettinoSensore.setTendenza((Integer)tendenza);
				}

			});
		attributeGetterFunctions.put(
			"colmoPrevisto",
			new Function<BollettinoSensore, Object>() {

				@Override
				public Object apply(BollettinoSensore bollettinoSensore) {
					return bollettinoSensore.getColmoPrevisto();
				}

			});
		attributeSetterBiConsumers.put(
			"colmoPrevisto",
			new BiConsumer<BollettinoSensore, Object>() {

				@Override
				public void accept(
					BollettinoSensore bollettinoSensore, Object colmoPrevisto) {

					bollettinoSensore.setColmoPrevisto((String)colmoPrevisto);
				}

			});
		attributeGetterFunctions.put(
			"oraPrevista",
			new Function<BollettinoSensore, Object>() {

				@Override
				public Object apply(BollettinoSensore bollettinoSensore) {
					return bollettinoSensore.getOraPrevista();
				}

			});
		attributeSetterBiConsumers.put(
			"oraPrevista",
			new BiConsumer<BollettinoSensore, Object>() {

				@Override
				public void accept(
					BollettinoSensore bollettinoSensore, Object oraPrevista) {

					bollettinoSensore.setOraPrevista((String)oraPrevista);
				}

			});
		attributeGetterFunctions.put(
			"soglia1",
			new Function<BollettinoSensore, Object>() {

				@Override
				public Object apply(BollettinoSensore bollettinoSensore) {
					return bollettinoSensore.getSoglia1();
				}

			});
		attributeSetterBiConsumers.put(
			"soglia1",
			new BiConsumer<BollettinoSensore, Object>() {

				@Override
				public void accept(
					BollettinoSensore bollettinoSensore, Object soglia1) {

					bollettinoSensore.setSoglia1((Double)soglia1);
				}

			});
		attributeGetterFunctions.put(
			"soglia2",
			new Function<BollettinoSensore, Object>() {

				@Override
				public Object apply(BollettinoSensore bollettinoSensore) {
					return bollettinoSensore.getSoglia2();
				}

			});
		attributeSetterBiConsumers.put(
			"soglia2",
			new BiConsumer<BollettinoSensore, Object>() {

				@Override
				public void accept(
					BollettinoSensore bollettinoSensore, Object soglia2) {

					bollettinoSensore.setSoglia2((Double)soglia2);
				}

			});
		attributeGetterFunctions.put(
			"soglia3",
			new Function<BollettinoSensore, Object>() {

				@Override
				public Object apply(BollettinoSensore bollettinoSensore) {
					return bollettinoSensore.getSoglia3();
				}

			});
		attributeSetterBiConsumers.put(
			"soglia3",
			new BiConsumer<BollettinoSensore, Object>() {

				@Override
				public void accept(
					BollettinoSensore bollettinoSensore, Object soglia3) {

					bollettinoSensore.setSoglia3((Double)soglia3);
				}

			});
		attributeGetterFunctions.put(
			"giornoPrevisto",
			new Function<BollettinoSensore, Object>() {

				@Override
				public Object apply(BollettinoSensore bollettinoSensore) {
					return bollettinoSensore.getGiornoPrevisto();
				}

			});
		attributeSetterBiConsumers.put(
			"giornoPrevisto",
			new BiConsumer<BollettinoSensore, Object>() {

				@Override
				public void accept(
					BollettinoSensore bollettinoSensore,
					Object giornoPrevisto) {

					bollettinoSensore.setGiornoPrevisto((String)giornoPrevisto);
				}

			});
		attributeGetterFunctions.put(
			"osservato",
			new Function<BollettinoSensore, Object>() {

				@Override
				public Object apply(BollettinoSensore bollettinoSensore) {
					return bollettinoSensore.getOsservato();
				}

			});
		attributeSetterBiConsumers.put(
			"osservato",
			new BiConsumer<BollettinoSensore, Object>() {

				@Override
				public void accept(
					BollettinoSensore bollettinoSensore, Object osservato) {

					bollettinoSensore.setOsservato((Boolean)osservato);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getIdBollettino() {
		return _idBollettino;
	}

	@Override
	public void setIdBollettino(long idBollettino) {
		_columnBitmask |= IDBOLLETTINO_COLUMN_BITMASK;

		if (!_setOriginalIdBollettino) {
			_setOriginalIdBollettino = true;

			_originalIdBollettino = _idBollettino;
		}

		_idBollettino = idBollettino;
	}

	public long getOriginalIdBollettino() {
		return _originalIdBollettino;
	}

	@JSON
	@Override
	public long getIdStazione() {
		return _idStazione;
	}

	@Override
	public void setIdStazione(long idStazione) {
		_idStazione = idStazione;
	}

	@JSON
	@Override
	public long getIdBollettinoBacino() {
		return _idBollettinoBacino;
	}

	@Override
	public void setIdBollettinoBacino(long idBollettinoBacino) {
		_idBollettinoBacino = idBollettinoBacino;
	}

	@JSON
	@Override
	public int getProgressivo() {
		return _progressivo;
	}

	@Override
	public void setProgressivo(int progressivo) {
		_columnBitmask = -1L;

		_progressivo = progressivo;
	}

	@JSON
	@Override
	public String getNomeStazione() {
		if (_nomeStazione == null) {
			return "";
		}
		else {
			return _nomeStazione;
		}
	}

	@Override
	public void setNomeStazione(String nomeStazione) {
		_nomeStazione = nomeStazione;
	}

	@JSON
	@Override
	public String getOreOsservazione() {
		if (_oreOsservazione == null) {
			return "";
		}
		else {
			return _oreOsservazione;
		}
	}

	@Override
	public void setOreOsservazione(String oreOsservazione) {
		_oreOsservazione = oreOsservazione;
	}

	@JSON
	@Override
	public double getOsservazione() {
		return _osservazione;
	}

	@Override
	public void setOsservazione(double osservazione) {
		_osservazione = osservazione;
	}

	@JSON
	@Override
	public int getTendenza() {
		return _tendenza;
	}

	@Override
	public void setTendenza(int tendenza) {
		_tendenza = tendenza;
	}

	@JSON
	@Override
	public String getColmoPrevisto() {
		if (_colmoPrevisto == null) {
			return "";
		}
		else {
			return _colmoPrevisto;
		}
	}

	@Override
	public void setColmoPrevisto(String colmoPrevisto) {
		_colmoPrevisto = colmoPrevisto;
	}

	@JSON
	@Override
	public String getOraPrevista() {
		if (_oraPrevista == null) {
			return "";
		}
		else {
			return _oraPrevista;
		}
	}

	@Override
	public void setOraPrevista(String oraPrevista) {
		_oraPrevista = oraPrevista;
	}

	@JSON
	@Override
	public double getSoglia1() {
		return _soglia1;
	}

	@Override
	public void setSoglia1(double soglia1) {
		_soglia1 = soglia1;
	}

	@JSON
	@Override
	public double getSoglia2() {
		return _soglia2;
	}

	@Override
	public void setSoglia2(double soglia2) {
		_soglia2 = soglia2;
	}

	@JSON
	@Override
	public double getSoglia3() {
		return _soglia3;
	}

	@Override
	public void setSoglia3(double soglia3) {
		_soglia3 = soglia3;
	}

	@JSON
	@Override
	public String getGiornoPrevisto() {
		if (_giornoPrevisto == null) {
			return "";
		}
		else {
			return _giornoPrevisto;
		}
	}

	@Override
	public void setGiornoPrevisto(String giornoPrevisto) {
		_giornoPrevisto = giornoPrevisto;
	}

	@JSON
	@Override
	public boolean getOsservato() {
		return _osservato;
	}

	@JSON
	@Override
	public boolean isOsservato() {
		return _osservato;
	}

	@Override
	public void setOsservato(boolean osservato) {
		_osservato = osservato;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, BollettinoSensore.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BollettinoSensore toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BollettinoSensore)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BollettinoSensoreImpl bollettinoSensoreImpl =
			new BollettinoSensoreImpl();

		bollettinoSensoreImpl.setUuid(getUuid());
		bollettinoSensoreImpl.setId(getId());
		bollettinoSensoreImpl.setIdBollettino(getIdBollettino());
		bollettinoSensoreImpl.setIdStazione(getIdStazione());
		bollettinoSensoreImpl.setIdBollettinoBacino(getIdBollettinoBacino());
		bollettinoSensoreImpl.setProgressivo(getProgressivo());
		bollettinoSensoreImpl.setNomeStazione(getNomeStazione());
		bollettinoSensoreImpl.setOreOsservazione(getOreOsservazione());
		bollettinoSensoreImpl.setOsservazione(getOsservazione());
		bollettinoSensoreImpl.setTendenza(getTendenza());
		bollettinoSensoreImpl.setColmoPrevisto(getColmoPrevisto());
		bollettinoSensoreImpl.setOraPrevista(getOraPrevista());
		bollettinoSensoreImpl.setSoglia1(getSoglia1());
		bollettinoSensoreImpl.setSoglia2(getSoglia2());
		bollettinoSensoreImpl.setSoglia3(getSoglia3());
		bollettinoSensoreImpl.setGiornoPrevisto(getGiornoPrevisto());
		bollettinoSensoreImpl.setOsservato(isOsservato());

		bollettinoSensoreImpl.resetOriginalValues();

		return bollettinoSensoreImpl;
	}

	@Override
	public int compareTo(BollettinoSensore bollettinoSensore) {
		int value = 0;

		if (getProgressivo() < bollettinoSensore.getProgressivo()) {
			value = -1;
		}
		else if (getProgressivo() > bollettinoSensore.getProgressivo()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BollettinoSensore)) {
			return false;
		}

		BollettinoSensore bollettinoSensore = (BollettinoSensore)obj;

		long primaryKey = bollettinoSensore.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		BollettinoSensoreModelImpl bollettinoSensoreModelImpl = this;

		bollettinoSensoreModelImpl._originalUuid =
			bollettinoSensoreModelImpl._uuid;

		bollettinoSensoreModelImpl._originalIdBollettino =
			bollettinoSensoreModelImpl._idBollettino;

		bollettinoSensoreModelImpl._setOriginalIdBollettino = false;

		bollettinoSensoreModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BollettinoSensore> toCacheModel() {
		BollettinoSensoreCacheModel bollettinoSensoreCacheModel =
			new BollettinoSensoreCacheModel();

		bollettinoSensoreCacheModel.uuid = getUuid();

		String uuid = bollettinoSensoreCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			bollettinoSensoreCacheModel.uuid = null;
		}

		bollettinoSensoreCacheModel.id = getId();

		bollettinoSensoreCacheModel.idBollettino = getIdBollettino();

		bollettinoSensoreCacheModel.idStazione = getIdStazione();

		bollettinoSensoreCacheModel.idBollettinoBacino =
			getIdBollettinoBacino();

		bollettinoSensoreCacheModel.progressivo = getProgressivo();

		bollettinoSensoreCacheModel.nomeStazione = getNomeStazione();

		String nomeStazione = bollettinoSensoreCacheModel.nomeStazione;

		if ((nomeStazione != null) && (nomeStazione.length() == 0)) {
			bollettinoSensoreCacheModel.nomeStazione = null;
		}

		bollettinoSensoreCacheModel.oreOsservazione = getOreOsservazione();

		String oreOsservazione = bollettinoSensoreCacheModel.oreOsservazione;

		if ((oreOsservazione != null) && (oreOsservazione.length() == 0)) {
			bollettinoSensoreCacheModel.oreOsservazione = null;
		}

		bollettinoSensoreCacheModel.osservazione = getOsservazione();

		bollettinoSensoreCacheModel.tendenza = getTendenza();

		bollettinoSensoreCacheModel.colmoPrevisto = getColmoPrevisto();

		String colmoPrevisto = bollettinoSensoreCacheModel.colmoPrevisto;

		if ((colmoPrevisto != null) && (colmoPrevisto.length() == 0)) {
			bollettinoSensoreCacheModel.colmoPrevisto = null;
		}

		bollettinoSensoreCacheModel.oraPrevista = getOraPrevista();

		String oraPrevista = bollettinoSensoreCacheModel.oraPrevista;

		if ((oraPrevista != null) && (oraPrevista.length() == 0)) {
			bollettinoSensoreCacheModel.oraPrevista = null;
		}

		bollettinoSensoreCacheModel.soglia1 = getSoglia1();

		bollettinoSensoreCacheModel.soglia2 = getSoglia2();

		bollettinoSensoreCacheModel.soglia3 = getSoglia3();

		bollettinoSensoreCacheModel.giornoPrevisto = getGiornoPrevisto();

		String giornoPrevisto = bollettinoSensoreCacheModel.giornoPrevisto;

		if ((giornoPrevisto != null) && (giornoPrevisto.length() == 0)) {
			bollettinoSensoreCacheModel.giornoPrevisto = null;
		}

		bollettinoSensoreCacheModel.osservato = isOsservato();

		return bollettinoSensoreCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<BollettinoSensore, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<BollettinoSensore, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BollettinoSensore, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((BollettinoSensore)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<BollettinoSensore, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<BollettinoSensore, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BollettinoSensore, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((BollettinoSensore)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		BollettinoSensore.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		BollettinoSensore.class, ModelWrapper.class
	};

	private String _uuid;
	private String _originalUuid;
	private long _id;
	private long _idBollettino;
	private long _originalIdBollettino;
	private boolean _setOriginalIdBollettino;
	private long _idStazione;
	private long _idBollettinoBacino;
	private int _progressivo;
	private String _nomeStazione;
	private String _oreOsservazione;
	private double _osservazione;
	private int _tendenza;
	private String _colmoPrevisto;
	private String _oraPrevista;
	private double _soglia1;
	private double _soglia2;
	private double _soglia3;
	private String _giornoPrevisto;
	private boolean _osservato;
	private long _columnBitmask;
	private BollettinoSensore _escapedModel;

}