/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.bollettino.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.bollettino.model.Stazione;
import it.eng.bollettino.model.StazioneModel;
import it.eng.bollettino.model.StazioneSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Stazione service. Represents a row in the &quot;BOLLETTINO_Stazione&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>StazioneModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StazioneImpl}.
 * </p>
 *
 * @author GFAVINI
 * @see StazioneImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class StazioneModelImpl
	extends BaseModelImpl<Stazione> implements StazioneModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a stazione model instance should use the <code>Stazione</code> interface instead.
	 */
	public static final String TABLE_NAME = "BOLLETTINO_Stazione";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"id_", Types.VARCHAR},
		{"ident", Types.VARCHAR}, {"name", Types.VARCHAR},
		{"lon", Types.BIGINT}, {"lat", Types.BIGINT}, {"height", Types.DOUBLE},
		{"idBasin", Types.VARCHAR}, {"idSubbasin", Types.VARCHAR},
		{"idCountry", Types.VARCHAR}, {"idProvince", Types.VARCHAR},
		{"idRegion", Types.VARCHAR}, {"idMunicipality", Types.VARCHAR},
		{"idMacroarea", Types.VARCHAR}, {"nameBasin", Types.VARCHAR},
		{"nameSubbasin", Types.VARCHAR}, {"nameCountry", Types.VARCHAR},
		{"nameProvince", Types.VARCHAR}, {"nameRegion", Types.VARCHAR},
		{"nameMunicipality", Types.VARCHAR}, {"nameMacroarea", Types.VARCHAR},
		{"network", Types.VARCHAR}, {"attivo", Types.BOOLEAN},
		{"incluso", Types.BOOLEAN}, {"progressivo", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ident", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lon", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("lat", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("height", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("idBasin", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idSubbasin", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idCountry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idProvince", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idRegion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idMunicipality", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idMacroarea", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameBasin", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameSubbasin", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameCountry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameProvince", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameRegion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameMunicipality", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameMacroarea", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("network", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("attivo", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("incluso", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("progressivo", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table BOLLETTINO_Stazione (uuid_ VARCHAR(75) null,id_ VARCHAR(75) not null primary key,ident VARCHAR(75) null,name VARCHAR(75) null,lon LONG,lat LONG,height DOUBLE,idBasin VARCHAR(75) null,idSubbasin VARCHAR(75) null,idCountry VARCHAR(75) null,idProvince VARCHAR(75) null,idRegion VARCHAR(75) null,idMunicipality VARCHAR(75) null,idMacroarea VARCHAR(75) null,nameBasin VARCHAR(75) null,nameSubbasin VARCHAR(75) null,nameCountry VARCHAR(75) null,nameProvince VARCHAR(75) null,nameRegion VARCHAR(75) null,nameMunicipality VARCHAR(75) null,nameMacroarea VARCHAR(75) null,network VARCHAR(75) null,attivo BOOLEAN,incluso BOOLEAN,progressivo INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table BOLLETTINO_Stazione";

	public static final String ORDER_BY_JPQL =
		" ORDER BY stazione.progressivo ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY BOLLETTINO_Stazione.progressivo ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.bollettino.model.Stazione"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.bollettino.model.Stazione"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.it.eng.bollettino.model.Stazione"),
		true);

	public static final long ATTIVO_COLUMN_BITMASK = 1L;

	public static final long IDBASIN_COLUMN_BITMASK = 2L;

	public static final long INCLUSO_COLUMN_BITMASK = 4L;

	public static final long NAME_COLUMN_BITMASK = 8L;

	public static final long UUID_COLUMN_BITMASK = 16L;

	public static final long PROGRESSIVO_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Stazione toModel(StazioneSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Stazione model = new StazioneImpl();

		model.setUuid(soapModel.getUuid());
		model.setId(soapModel.getId());
		model.setIdent(soapModel.getIdent());
		model.setName(soapModel.getName());
		model.setLon(soapModel.getLon());
		model.setLat(soapModel.getLat());
		model.setHeight(soapModel.getHeight());
		model.setIdBasin(soapModel.getIdBasin());
		model.setIdSubbasin(soapModel.getIdSubbasin());
		model.setIdCountry(soapModel.getIdCountry());
		model.setIdProvince(soapModel.getIdProvince());
		model.setIdRegion(soapModel.getIdRegion());
		model.setIdMunicipality(soapModel.getIdMunicipality());
		model.setIdMacroarea(soapModel.getIdMacroarea());
		model.setNameBasin(soapModel.getNameBasin());
		model.setNameSubbasin(soapModel.getNameSubbasin());
		model.setNameCountry(soapModel.getNameCountry());
		model.setNameProvince(soapModel.getNameProvince());
		model.setNameRegion(soapModel.getNameRegion());
		model.setNameMunicipality(soapModel.getNameMunicipality());
		model.setNameMacroarea(soapModel.getNameMacroarea());
		model.setNetwork(soapModel.getNetwork());
		model.setAttivo(soapModel.isAttivo());
		model.setIncluso(soapModel.isIncluso());
		model.setProgressivo(soapModel.getProgressivo());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Stazione> toModels(StazioneSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Stazione> models = new ArrayList<Stazione>(soapModels.length);

		for (StazioneSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		allerta.bollettino.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.bollettino.model.Stazione"));

	public StazioneModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Stazione.class;
	}

	@Override
	public String getModelClassName() {
		return Stazione.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Stazione, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Stazione, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Stazione, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Stazione)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Stazione, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Stazione, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Stazione)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Stazione, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Stazione, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Stazione, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Stazione, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Stazione, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Stazione, Object>>();
		Map<String, BiConsumer<Stazione, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Stazione, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<Stazione, Object>() {

				@Override
				public Object apply(Stazione stazione) {
					return stazione.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<Stazione, Object>() {

				@Override
				public void accept(Stazione stazione, Object uuid) {
					stazione.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"id",
			new Function<Stazione, Object>() {

				@Override
				public Object apply(Stazione stazione) {
					return stazione.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<Stazione, Object>() {

				@Override
				public void accept(Stazione stazione, Object id) {
					stazione.setId((String)id);
				}

			});
		attributeGetterFunctions.put(
			"ident",
			new Function<Stazione, Object>() {

				@Override
				public Object apply(Stazione stazione) {
					return stazione.getIdent();
				}

			});
		attributeSetterBiConsumers.put(
			"ident",
			new BiConsumer<Stazione, Object>() {

				@Override
				public void accept(Stazione stazione, Object ident) {
					stazione.setIdent((String)ident);
				}

			});
		attributeGetterFunctions.put(
			"name",
			new Function<Stazione, Object>() {

				@Override
				public Object apply(Stazione stazione) {
					return stazione.getName();
				}

			});
		attributeSetterBiConsumers.put(
			"name",
			new BiConsumer<Stazione, Object>() {

				@Override
				public void accept(Stazione stazione, Object name) {
					stazione.setName((String)name);
				}

			});
		attributeGetterFunctions.put(
			"lon",
			new Function<Stazione, Object>() {

				@Override
				public Object apply(Stazione stazione) {
					return stazione.getLon();
				}

			});
		attributeSetterBiConsumers.put(
			"lon",
			new BiConsumer<Stazione, Object>() {

				@Override
				public void accept(Stazione stazione, Object lon) {
					stazione.setLon((Long)lon);
				}

			});
		attributeGetterFunctions.put(
			"lat",
			new Function<Stazione, Object>() {

				@Override
				public Object apply(Stazione stazione) {
					return stazione.getLat();
				}

			});
		attributeSetterBiConsumers.put(
			"lat",
			new BiConsumer<Stazione, Object>() {

				@Override
				public void accept(Stazione stazione, Object lat) {
					stazione.setLat((Long)lat);
				}

			});
		attributeGetterFunctions.put(
			"height",
			new Function<Stazione, Object>() {

				@Override
				public Object apply(Stazione stazione) {
					return stazione.getHeight();
				}

			});
		attributeSetterBiConsumers.put(
			"height",
			new BiConsumer<Stazione, Object>() {

				@Override
				public void accept(Stazione stazione, Object height) {
					stazione.setHeight((Double)height);
				}

			});
		attributeGetterFunctions.put(
			"idBasin",
			new Function<Stazione, Object>() {

				@Override
				public Object apply(Stazione stazione) {
					return stazione.getIdBasin();
				}

			});
		attributeSetterBiConsumers.put(
			"idBasin",
			new BiConsumer<Stazione, Object>() {

				@Override
				public void accept(Stazione stazione, Object idBasin) {
					stazione.setIdBasin((String)idBasin);
				}

			});
		attributeGetterFunctions.put(
			"idSubbasin",
			new Function<Stazione, Object>() {

				@Override
				public Object apply(Stazione stazione) {
					return stazione.getIdSubbasin();
				}

			});
		attributeSetterBiConsumers.put(
			"idSubbasin",
			new BiConsumer<Stazione, Object>() {

				@Override
				public void accept(Stazione stazione, Object idSubbasin) {
					stazione.setIdSubbasin((String)idSubbasin);
				}

			});
		attributeGetterFunctions.put(
			"idCountry",
			new Function<Stazione, Object>() {

				@Override
				public Object apply(Stazione stazione) {
					return stazione.getIdCountry();
				}

			});
		attributeSetterBiConsumers.put(
			"idCountry",
			new BiConsumer<Stazione, Object>() {

				@Override
				public void accept(Stazione stazione, Object idCountry) {
					stazione.setIdCountry((String)idCountry);
				}

			});
		attributeGetterFunctions.put(
			"idProvince",
			new Function<Stazione, Object>() {

				@Override
				public Object apply(Stazione stazione) {
					return stazione.getIdProvince();
				}

			});
		attributeSetterBiConsumers.put(
			"idProvince",
			new BiConsumer<Stazione, Object>() {

				@Override
				public void accept(Stazione stazione, Object idProvince) {
					stazione.setIdProvince((String)idProvince);
				}

			});
		attributeGetterFunctions.put(
			"idRegion",
			new Function<Stazione, Object>() {

				@Override
				public Object apply(Stazione stazione) {
					return stazione.getIdRegion();
				}

			});
		attributeSetterBiConsumers.put(
			"idRegion",
			new BiConsumer<Stazione, Object>() {

				@Override
				public void accept(Stazione stazione, Object idRegion) {
					stazione.setIdRegion((String)idRegion);
				}

			});
		attributeGetterFunctions.put(
			"idMunicipality",
			new Function<Stazione, Object>() {

				@Override
				public Object apply(Stazione stazione) {
					return stazione.getIdMunicipality();
				}

			});
		attributeSetterBiConsumers.put(
			"idMunicipality",
			new BiConsumer<Stazione, Object>() {

				@Override
				public void accept(Stazione stazione, Object idMunicipality) {
					stazione.setIdMunicipality((String)idMunicipality);
				}

			});
		attributeGetterFunctions.put(
			"idMacroarea",
			new Function<Stazione, Object>() {

				@Override
				public Object apply(Stazione stazione) {
					return stazione.getIdMacroarea();
				}

			});
		attributeSetterBiConsumers.put(
			"idMacroarea",
			new BiConsumer<Stazione, Object>() {

				@Override
				public void accept(Stazione stazione, Object idMacroarea) {
					stazione.setIdMacroarea((String)idMacroarea);
				}

			});
		attributeGetterFunctions.put(
			"nameBasin",
			new Function<Stazione, Object>() {

				@Override
				public Object apply(Stazione stazione) {
					return stazione.getNameBasin();
				}

			});
		attributeSetterBiConsumers.put(
			"nameBasin",
			new BiConsumer<Stazione, Object>() {

				@Override
				public void accept(Stazione stazione, Object nameBasin) {
					stazione.setNameBasin((String)nameBasin);
				}

			});
		attributeGetterFunctions.put(
			"nameSubbasin",
			new Function<Stazione, Object>() {

				@Override
				public Object apply(Stazione stazione) {
					return stazione.getNameSubbasin();
				}

			});
		attributeSetterBiConsumers.put(
			"nameSubbasin",
			new BiConsumer<Stazione, Object>() {

				@Override
				public void accept(Stazione stazione, Object nameSubbasin) {
					stazione.setNameSubbasin((String)nameSubbasin);
				}

			});
		attributeGetterFunctions.put(
			"nameCountry",
			new Function<Stazione, Object>() {

				@Override
				public Object apply(Stazione stazione) {
					return stazione.getNameCountry();
				}

			});
		attributeSetterBiConsumers.put(
			"nameCountry",
			new BiConsumer<Stazione, Object>() {

				@Override
				public void accept(Stazione stazione, Object nameCountry) {
					stazione.setNameCountry((String)nameCountry);
				}

			});
		attributeGetterFunctions.put(
			"nameProvince",
			new Function<Stazione, Object>() {

				@Override
				public Object apply(Stazione stazione) {
					return stazione.getNameProvince();
				}

			});
		attributeSetterBiConsumers.put(
			"nameProvince",
			new BiConsumer<Stazione, Object>() {

				@Override
				public void accept(Stazione stazione, Object nameProvince) {
					stazione.setNameProvince((String)nameProvince);
				}

			});
		attributeGetterFunctions.put(
			"nameRegion",
			new Function<Stazione, Object>() {

				@Override
				public Object apply(Stazione stazione) {
					return stazione.getNameRegion();
				}

			});
		attributeSetterBiConsumers.put(
			"nameRegion",
			new BiConsumer<Stazione, Object>() {

				@Override
				public void accept(Stazione stazione, Object nameRegion) {
					stazione.setNameRegion((String)nameRegion);
				}

			});
		attributeGetterFunctions.put(
			"nameMunicipality",
			new Function<Stazione, Object>() {

				@Override
				public Object apply(Stazione stazione) {
					return stazione.getNameMunicipality();
				}

			});
		attributeSetterBiConsumers.put(
			"nameMunicipality",
			new BiConsumer<Stazione, Object>() {

				@Override
				public void accept(Stazione stazione, Object nameMunicipality) {
					stazione.setNameMunicipality((String)nameMunicipality);
				}

			});
		attributeGetterFunctions.put(
			"nameMacroarea",
			new Function<Stazione, Object>() {

				@Override
				public Object apply(Stazione stazione) {
					return stazione.getNameMacroarea();
				}

			});
		attributeSetterBiConsumers.put(
			"nameMacroarea",
			new BiConsumer<Stazione, Object>() {

				@Override
				public void accept(Stazione stazione, Object nameMacroarea) {
					stazione.setNameMacroarea((String)nameMacroarea);
				}

			});
		attributeGetterFunctions.put(
			"network",
			new Function<Stazione, Object>() {

				@Override
				public Object apply(Stazione stazione) {
					return stazione.getNetwork();
				}

			});
		attributeSetterBiConsumers.put(
			"network",
			new BiConsumer<Stazione, Object>() {

				@Override
				public void accept(Stazione stazione, Object network) {
					stazione.setNetwork((String)network);
				}

			});
		attributeGetterFunctions.put(
			"attivo",
			new Function<Stazione, Object>() {

				@Override
				public Object apply(Stazione stazione) {
					return stazione.getAttivo();
				}

			});
		attributeSetterBiConsumers.put(
			"attivo",
			new BiConsumer<Stazione, Object>() {

				@Override
				public void accept(Stazione stazione, Object attivo) {
					stazione.setAttivo((Boolean)attivo);
				}

			});
		attributeGetterFunctions.put(
			"incluso",
			new Function<Stazione, Object>() {

				@Override
				public Object apply(Stazione stazione) {
					return stazione.getIncluso();
				}

			});
		attributeSetterBiConsumers.put(
			"incluso",
			new BiConsumer<Stazione, Object>() {

				@Override
				public void accept(Stazione stazione, Object incluso) {
					stazione.setIncluso((Boolean)incluso);
				}

			});
		attributeGetterFunctions.put(
			"progressivo",
			new Function<Stazione, Object>() {

				@Override
				public Object apply(Stazione stazione) {
					return stazione.getProgressivo();
				}

			});
		attributeSetterBiConsumers.put(
			"progressivo",
			new BiConsumer<Stazione, Object>() {

				@Override
				public void accept(Stazione stazione, Object progressivo) {
					stazione.setProgressivo((Integer)progressivo);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public String getId() {
		if (_id == null) {
			return "";
		}
		else {
			return _id;
		}
	}

	@Override
	public void setId(String id) {
		_id = id;
	}

	@JSON
	@Override
	public String getIdent() {
		if (_ident == null) {
			return "";
		}
		else {
			return _ident;
		}
	}

	@Override
	public void setIdent(String ident) {
		_ident = ident;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public long getLon() {
		return _lon;
	}

	@Override
	public void setLon(long lon) {
		_lon = lon;
	}

	@JSON
	@Override
	public long getLat() {
		return _lat;
	}

	@Override
	public void setLat(long lat) {
		_lat = lat;
	}

	@JSON
	@Override
	public double getHeight() {
		return _height;
	}

	@Override
	public void setHeight(double height) {
		_height = height;
	}

	@JSON
	@Override
	public String getIdBasin() {
		if (_idBasin == null) {
			return "";
		}
		else {
			return _idBasin;
		}
	}

	@Override
	public void setIdBasin(String idBasin) {
		_columnBitmask |= IDBASIN_COLUMN_BITMASK;

		if (_originalIdBasin == null) {
			_originalIdBasin = _idBasin;
		}

		_idBasin = idBasin;
	}

	public String getOriginalIdBasin() {
		return GetterUtil.getString(_originalIdBasin);
	}

	@JSON
	@Override
	public String getIdSubbasin() {
		if (_idSubbasin == null) {
			return "";
		}
		else {
			return _idSubbasin;
		}
	}

	@Override
	public void setIdSubbasin(String idSubbasin) {
		_idSubbasin = idSubbasin;
	}

	@JSON
	@Override
	public String getIdCountry() {
		if (_idCountry == null) {
			return "";
		}
		else {
			return _idCountry;
		}
	}

	@Override
	public void setIdCountry(String idCountry) {
		_idCountry = idCountry;
	}

	@JSON
	@Override
	public String getIdProvince() {
		if (_idProvince == null) {
			return "";
		}
		else {
			return _idProvince;
		}
	}

	@Override
	public void setIdProvince(String idProvince) {
		_idProvince = idProvince;
	}

	@JSON
	@Override
	public String getIdRegion() {
		if (_idRegion == null) {
			return "";
		}
		else {
			return _idRegion;
		}
	}

	@Override
	public void setIdRegion(String idRegion) {
		_idRegion = idRegion;
	}

	@JSON
	@Override
	public String getIdMunicipality() {
		if (_idMunicipality == null) {
			return "";
		}
		else {
			return _idMunicipality;
		}
	}

	@Override
	public void setIdMunicipality(String idMunicipality) {
		_idMunicipality = idMunicipality;
	}

	@JSON
	@Override
	public String getIdMacroarea() {
		if (_idMacroarea == null) {
			return "";
		}
		else {
			return _idMacroarea;
		}
	}

	@Override
	public void setIdMacroarea(String idMacroarea) {
		_idMacroarea = idMacroarea;
	}

	@JSON
	@Override
	public String getNameBasin() {
		if (_nameBasin == null) {
			return "";
		}
		else {
			return _nameBasin;
		}
	}

	@Override
	public void setNameBasin(String nameBasin) {
		_nameBasin = nameBasin;
	}

	@JSON
	@Override
	public String getNameSubbasin() {
		if (_nameSubbasin == null) {
			return "";
		}
		else {
			return _nameSubbasin;
		}
	}

	@Override
	public void setNameSubbasin(String nameSubbasin) {
		_nameSubbasin = nameSubbasin;
	}

	@JSON
	@Override
	public String getNameCountry() {
		if (_nameCountry == null) {
			return "";
		}
		else {
			return _nameCountry;
		}
	}

	@Override
	public void setNameCountry(String nameCountry) {
		_nameCountry = nameCountry;
	}

	@JSON
	@Override
	public String getNameProvince() {
		if (_nameProvince == null) {
			return "";
		}
		else {
			return _nameProvince;
		}
	}

	@Override
	public void setNameProvince(String nameProvince) {
		_nameProvince = nameProvince;
	}

	@JSON
	@Override
	public String getNameRegion() {
		if (_nameRegion == null) {
			return "";
		}
		else {
			return _nameRegion;
		}
	}

	@Override
	public void setNameRegion(String nameRegion) {
		_nameRegion = nameRegion;
	}

	@JSON
	@Override
	public String getNameMunicipality() {
		if (_nameMunicipality == null) {
			return "";
		}
		else {
			return _nameMunicipality;
		}
	}

	@Override
	public void setNameMunicipality(String nameMunicipality) {
		_nameMunicipality = nameMunicipality;
	}

	@JSON
	@Override
	public String getNameMacroarea() {
		if (_nameMacroarea == null) {
			return "";
		}
		else {
			return _nameMacroarea;
		}
	}

	@Override
	public void setNameMacroarea(String nameMacroarea) {
		_nameMacroarea = nameMacroarea;
	}

	@JSON
	@Override
	public String getNetwork() {
		if (_network == null) {
			return "";
		}
		else {
			return _network;
		}
	}

	@Override
	public void setNetwork(String network) {
		_network = network;
	}

	@JSON
	@Override
	public boolean getAttivo() {
		return _attivo;
	}

	@JSON
	@Override
	public boolean isAttivo() {
		return _attivo;
	}

	@Override
	public void setAttivo(boolean attivo) {
		_columnBitmask |= ATTIVO_COLUMN_BITMASK;

		if (!_setOriginalAttivo) {
			_setOriginalAttivo = true;

			_originalAttivo = _attivo;
		}

		_attivo = attivo;
	}

	public boolean getOriginalAttivo() {
		return _originalAttivo;
	}

	@JSON
	@Override
	public boolean getIncluso() {
		return _incluso;
	}

	@JSON
	@Override
	public boolean isIncluso() {
		return _incluso;
	}

	@Override
	public void setIncluso(boolean incluso) {
		_columnBitmask |= INCLUSO_COLUMN_BITMASK;

		if (!_setOriginalIncluso) {
			_setOriginalIncluso = true;

			_originalIncluso = _incluso;
		}

		_incluso = incluso;
	}

	public boolean getOriginalIncluso() {
		return _originalIncluso;
	}

	@JSON
	@Override
	public int getProgressivo() {
		return _progressivo;
	}

	@Override
	public void setProgressivo(int progressivo) {
		_columnBitmask = -1L;

		_progressivo = progressivo;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Stazione toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Stazione)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StazioneImpl stazioneImpl = new StazioneImpl();

		stazioneImpl.setUuid(getUuid());
		stazioneImpl.setId(getId());
		stazioneImpl.setIdent(getIdent());
		stazioneImpl.setName(getName());
		stazioneImpl.setLon(getLon());
		stazioneImpl.setLat(getLat());
		stazioneImpl.setHeight(getHeight());
		stazioneImpl.setIdBasin(getIdBasin());
		stazioneImpl.setIdSubbasin(getIdSubbasin());
		stazioneImpl.setIdCountry(getIdCountry());
		stazioneImpl.setIdProvince(getIdProvince());
		stazioneImpl.setIdRegion(getIdRegion());
		stazioneImpl.setIdMunicipality(getIdMunicipality());
		stazioneImpl.setIdMacroarea(getIdMacroarea());
		stazioneImpl.setNameBasin(getNameBasin());
		stazioneImpl.setNameSubbasin(getNameSubbasin());
		stazioneImpl.setNameCountry(getNameCountry());
		stazioneImpl.setNameProvince(getNameProvince());
		stazioneImpl.setNameRegion(getNameRegion());
		stazioneImpl.setNameMunicipality(getNameMunicipality());
		stazioneImpl.setNameMacroarea(getNameMacroarea());
		stazioneImpl.setNetwork(getNetwork());
		stazioneImpl.setAttivo(isAttivo());
		stazioneImpl.setIncluso(isIncluso());
		stazioneImpl.setProgressivo(getProgressivo());

		stazioneImpl.resetOriginalValues();

		return stazioneImpl;
	}

	@Override
	public int compareTo(Stazione stazione) {
		int value = 0;

		if (getProgressivo() < stazione.getProgressivo()) {
			value = -1;
		}
		else if (getProgressivo() > stazione.getProgressivo()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Stazione)) {
			return false;
		}

		Stazione stazione = (Stazione)obj;

		String primaryKey = stazione.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		StazioneModelImpl stazioneModelImpl = this;

		stazioneModelImpl._originalUuid = stazioneModelImpl._uuid;

		stazioneModelImpl._originalName = stazioneModelImpl._name;

		stazioneModelImpl._originalIdBasin = stazioneModelImpl._idBasin;

		stazioneModelImpl._originalAttivo = stazioneModelImpl._attivo;

		stazioneModelImpl._setOriginalAttivo = false;

		stazioneModelImpl._originalIncluso = stazioneModelImpl._incluso;

		stazioneModelImpl._setOriginalIncluso = false;

		stazioneModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Stazione> toCacheModel() {
		StazioneCacheModel stazioneCacheModel = new StazioneCacheModel();

		stazioneCacheModel.uuid = getUuid();

		String uuid = stazioneCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			stazioneCacheModel.uuid = null;
		}

		stazioneCacheModel.id = getId();

		String id = stazioneCacheModel.id;

		if ((id != null) && (id.length() == 0)) {
			stazioneCacheModel.id = null;
		}

		stazioneCacheModel.ident = getIdent();

		String ident = stazioneCacheModel.ident;

		if ((ident != null) && (ident.length() == 0)) {
			stazioneCacheModel.ident = null;
		}

		stazioneCacheModel.name = getName();

		String name = stazioneCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			stazioneCacheModel.name = null;
		}

		stazioneCacheModel.lon = getLon();

		stazioneCacheModel.lat = getLat();

		stazioneCacheModel.height = getHeight();

		stazioneCacheModel.idBasin = getIdBasin();

		String idBasin = stazioneCacheModel.idBasin;

		if ((idBasin != null) && (idBasin.length() == 0)) {
			stazioneCacheModel.idBasin = null;
		}

		stazioneCacheModel.idSubbasin = getIdSubbasin();

		String idSubbasin = stazioneCacheModel.idSubbasin;

		if ((idSubbasin != null) && (idSubbasin.length() == 0)) {
			stazioneCacheModel.idSubbasin = null;
		}

		stazioneCacheModel.idCountry = getIdCountry();

		String idCountry = stazioneCacheModel.idCountry;

		if ((idCountry != null) && (idCountry.length() == 0)) {
			stazioneCacheModel.idCountry = null;
		}

		stazioneCacheModel.idProvince = getIdProvince();

		String idProvince = stazioneCacheModel.idProvince;

		if ((idProvince != null) && (idProvince.length() == 0)) {
			stazioneCacheModel.idProvince = null;
		}

		stazioneCacheModel.idRegion = getIdRegion();

		String idRegion = stazioneCacheModel.idRegion;

		if ((idRegion != null) && (idRegion.length() == 0)) {
			stazioneCacheModel.idRegion = null;
		}

		stazioneCacheModel.idMunicipality = getIdMunicipality();

		String idMunicipality = stazioneCacheModel.idMunicipality;

		if ((idMunicipality != null) && (idMunicipality.length() == 0)) {
			stazioneCacheModel.idMunicipality = null;
		}

		stazioneCacheModel.idMacroarea = getIdMacroarea();

		String idMacroarea = stazioneCacheModel.idMacroarea;

		if ((idMacroarea != null) && (idMacroarea.length() == 0)) {
			stazioneCacheModel.idMacroarea = null;
		}

		stazioneCacheModel.nameBasin = getNameBasin();

		String nameBasin = stazioneCacheModel.nameBasin;

		if ((nameBasin != null) && (nameBasin.length() == 0)) {
			stazioneCacheModel.nameBasin = null;
		}

		stazioneCacheModel.nameSubbasin = getNameSubbasin();

		String nameSubbasin = stazioneCacheModel.nameSubbasin;

		if ((nameSubbasin != null) && (nameSubbasin.length() == 0)) {
			stazioneCacheModel.nameSubbasin = null;
		}

		stazioneCacheModel.nameCountry = getNameCountry();

		String nameCountry = stazioneCacheModel.nameCountry;

		if ((nameCountry != null) && (nameCountry.length() == 0)) {
			stazioneCacheModel.nameCountry = null;
		}

		stazioneCacheModel.nameProvince = getNameProvince();

		String nameProvince = stazioneCacheModel.nameProvince;

		if ((nameProvince != null) && (nameProvince.length() == 0)) {
			stazioneCacheModel.nameProvince = null;
		}

		stazioneCacheModel.nameRegion = getNameRegion();

		String nameRegion = stazioneCacheModel.nameRegion;

		if ((nameRegion != null) && (nameRegion.length() == 0)) {
			stazioneCacheModel.nameRegion = null;
		}

		stazioneCacheModel.nameMunicipality = getNameMunicipality();

		String nameMunicipality = stazioneCacheModel.nameMunicipality;

		if ((nameMunicipality != null) && (nameMunicipality.length() == 0)) {
			stazioneCacheModel.nameMunicipality = null;
		}

		stazioneCacheModel.nameMacroarea = getNameMacroarea();

		String nameMacroarea = stazioneCacheModel.nameMacroarea;

		if ((nameMacroarea != null) && (nameMacroarea.length() == 0)) {
			stazioneCacheModel.nameMacroarea = null;
		}

		stazioneCacheModel.network = getNetwork();

		String network = stazioneCacheModel.network;

		if ((network != null) && (network.length() == 0)) {
			stazioneCacheModel.network = null;
		}

		stazioneCacheModel.attivo = isAttivo();

		stazioneCacheModel.incluso = isIncluso();

		stazioneCacheModel.progressivo = getProgressivo();

		return stazioneCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Stazione, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Stazione, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Stazione, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Stazione)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Stazione, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Stazione, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Stazione, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Stazione)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		Stazione.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		Stazione.class, ModelWrapper.class
	};

	private String _uuid;
	private String _originalUuid;
	private String _id;
	private String _ident;
	private String _name;
	private String _originalName;
	private long _lon;
	private long _lat;
	private double _height;
	private String _idBasin;
	private String _originalIdBasin;
	private String _idSubbasin;
	private String _idCountry;
	private String _idProvince;
	private String _idRegion;
	private String _idMunicipality;
	private String _idMacroarea;
	private String _nameBasin;
	private String _nameSubbasin;
	private String _nameCountry;
	private String _nameProvince;
	private String _nameRegion;
	private String _nameMunicipality;
	private String _nameMacroarea;
	private String _network;
	private boolean _attivo;
	private boolean _originalAttivo;
	private boolean _setOriginalAttivo;
	private boolean _incluso;
	private boolean _originalIncluso;
	private boolean _setOriginalIncluso;
	private int _progressivo;
	private long _columnBitmask;
	private Stazione _escapedModel;

}