/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.bollettino.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.eng.bollettino.model.StazioneVariabile;
import it.eng.bollettino.model.StazioneVariabileModel;
import it.eng.bollettino.model.StazioneVariabileSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the StazioneVariabile service. Represents a row in the &quot;BOLLETTINO_StazioneVariabile&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>StazioneVariabileModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StazioneVariabileImpl}.
 * </p>
 *
 * @author GFAVINI
 * @see StazioneVariabileImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class StazioneVariabileModelImpl
	extends BaseModelImpl<StazioneVariabile> implements StazioneVariabileModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a stazione variabile model instance should use the <code>StazioneVariabile</code> interface instead.
	 */
	public static final String TABLE_NAME = "BOLLETTINO_StazioneVariabile";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"id_", Types.BIGINT},
		{"idStazione", Types.VARCHAR}, {"idVariabile", Types.VARCHAR},
		{"dataUltimoValore", Types.TIMESTAMP}, {"soglia1", Types.DOUBLE},
		{"soglia2", Types.DOUBLE}, {"soglia3", Types.DOUBLE}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("idStazione", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idVariabile", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dataUltimoValore", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("soglia1", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("soglia2", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("soglia3", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE =
		"create table BOLLETTINO_StazioneVariabile (uuid_ VARCHAR(75) null,id_ LONG not null primary key,idStazione VARCHAR(75) null,idVariabile VARCHAR(75) null,dataUltimoValore DATE null,soglia1 DOUBLE,soglia2 DOUBLE,soglia3 DOUBLE)";

	public static final String TABLE_SQL_DROP =
		"drop table BOLLETTINO_StazioneVariabile";

	public static final String ORDER_BY_JPQL =
		" ORDER BY stazioneVariabile.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY BOLLETTINO_StazioneVariabile.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.it.eng.bollettino.model.StazioneVariabile"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.it.eng.bollettino.model.StazioneVariabile"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		allerta.bollettino.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.it.eng.bollettino.model.StazioneVariabile"),
		true);

	public static final long IDSTAZIONE_COLUMN_BITMASK = 1L;

	public static final long IDVARIABILE_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long ID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static StazioneVariabile toModel(StazioneVariabileSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		StazioneVariabile model = new StazioneVariabileImpl();

		model.setUuid(soapModel.getUuid());
		model.setId(soapModel.getId());
		model.setIdStazione(soapModel.getIdStazione());
		model.setIdVariabile(soapModel.getIdVariabile());
		model.setDataUltimoValore(soapModel.getDataUltimoValore());
		model.setSoglia1(soapModel.getSoglia1());
		model.setSoglia2(soapModel.getSoglia2());
		model.setSoglia3(soapModel.getSoglia3());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<StazioneVariabile> toModels(
		StazioneVariabileSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<StazioneVariabile> models = new ArrayList<StazioneVariabile>(
			soapModels.length);

		for (StazioneVariabileSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		allerta.bollettino.service.util.ServiceProps.get(
			"lock.expiration.time.it.eng.bollettino.model.StazioneVariabile"));

	public StazioneVariabileModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StazioneVariabile.class;
	}

	@Override
	public String getModelClassName() {
		return StazioneVariabile.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<StazioneVariabile, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<StazioneVariabile, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StazioneVariabile, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((StazioneVariabile)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<StazioneVariabile, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<StazioneVariabile, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(StazioneVariabile)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<StazioneVariabile, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<StazioneVariabile, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<StazioneVariabile, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<StazioneVariabile, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<StazioneVariabile, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<StazioneVariabile, Object>>();
		Map<String, BiConsumer<StazioneVariabile, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<StazioneVariabile, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<StazioneVariabile, Object>() {

				@Override
				public Object apply(StazioneVariabile stazioneVariabile) {
					return stazioneVariabile.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<StazioneVariabile, Object>() {

				@Override
				public void accept(
					StazioneVariabile stazioneVariabile, Object uuid) {

					stazioneVariabile.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"id",
			new Function<StazioneVariabile, Object>() {

				@Override
				public Object apply(StazioneVariabile stazioneVariabile) {
					return stazioneVariabile.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<StazioneVariabile, Object>() {

				@Override
				public void accept(
					StazioneVariabile stazioneVariabile, Object id) {

					stazioneVariabile.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"idStazione",
			new Function<StazioneVariabile, Object>() {

				@Override
				public Object apply(StazioneVariabile stazioneVariabile) {
					return stazioneVariabile.getIdStazione();
				}

			});
		attributeSetterBiConsumers.put(
			"idStazione",
			new BiConsumer<StazioneVariabile, Object>() {

				@Override
				public void accept(
					StazioneVariabile stazioneVariabile, Object idStazione) {

					stazioneVariabile.setIdStazione((String)idStazione);
				}

			});
		attributeGetterFunctions.put(
			"idVariabile",
			new Function<StazioneVariabile, Object>() {

				@Override
				public Object apply(StazioneVariabile stazioneVariabile) {
					return stazioneVariabile.getIdVariabile();
				}

			});
		attributeSetterBiConsumers.put(
			"idVariabile",
			new BiConsumer<StazioneVariabile, Object>() {

				@Override
				public void accept(
					StazioneVariabile stazioneVariabile, Object idVariabile) {

					stazioneVariabile.setIdVariabile((String)idVariabile);
				}

			});
		attributeGetterFunctions.put(
			"dataUltimoValore",
			new Function<StazioneVariabile, Object>() {

				@Override
				public Object apply(StazioneVariabile stazioneVariabile) {
					return stazioneVariabile.getDataUltimoValore();
				}

			});
		attributeSetterBiConsumers.put(
			"dataUltimoValore",
			new BiConsumer<StazioneVariabile, Object>() {

				@Override
				public void accept(
					StazioneVariabile stazioneVariabile,
					Object dataUltimoValore) {

					stazioneVariabile.setDataUltimoValore(
						(Date)dataUltimoValore);
				}

			});
		attributeGetterFunctions.put(
			"soglia1",
			new Function<StazioneVariabile, Object>() {

				@Override
				public Object apply(StazioneVariabile stazioneVariabile) {
					return stazioneVariabile.getSoglia1();
				}

			});
		attributeSetterBiConsumers.put(
			"soglia1",
			new BiConsumer<StazioneVariabile, Object>() {

				@Override
				public void accept(
					StazioneVariabile stazioneVariabile, Object soglia1) {

					stazioneVariabile.setSoglia1((Double)soglia1);
				}

			});
		attributeGetterFunctions.put(
			"soglia2",
			new Function<StazioneVariabile, Object>() {

				@Override
				public Object apply(StazioneVariabile stazioneVariabile) {
					return stazioneVariabile.getSoglia2();
				}

			});
		attributeSetterBiConsumers.put(
			"soglia2",
			new BiConsumer<StazioneVariabile, Object>() {

				@Override
				public void accept(
					StazioneVariabile stazioneVariabile, Object soglia2) {

					stazioneVariabile.setSoglia2((Double)soglia2);
				}

			});
		attributeGetterFunctions.put(
			"soglia3",
			new Function<StazioneVariabile, Object>() {

				@Override
				public Object apply(StazioneVariabile stazioneVariabile) {
					return stazioneVariabile.getSoglia3();
				}

			});
		attributeSetterBiConsumers.put(
			"soglia3",
			new BiConsumer<StazioneVariabile, Object>() {

				@Override
				public void accept(
					StazioneVariabile stazioneVariabile, Object soglia3) {

					stazioneVariabile.setSoglia3((Double)soglia3);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getIdStazione() {
		if (_idStazione == null) {
			return "";
		}
		else {
			return _idStazione;
		}
	}

	@Override
	public void setIdStazione(String idStazione) {
		_columnBitmask |= IDSTAZIONE_COLUMN_BITMASK;

		if (_originalIdStazione == null) {
			_originalIdStazione = _idStazione;
		}

		_idStazione = idStazione;
	}

	public String getOriginalIdStazione() {
		return GetterUtil.getString(_originalIdStazione);
	}

	@JSON
	@Override
	public String getIdVariabile() {
		if (_idVariabile == null) {
			return "";
		}
		else {
			return _idVariabile;
		}
	}

	@Override
	public void setIdVariabile(String idVariabile) {
		_columnBitmask |= IDVARIABILE_COLUMN_BITMASK;

		if (_originalIdVariabile == null) {
			_originalIdVariabile = _idVariabile;
		}

		_idVariabile = idVariabile;
	}

	public String getOriginalIdVariabile() {
		return GetterUtil.getString(_originalIdVariabile);
	}

	@JSON
	@Override
	public Date getDataUltimoValore() {
		return _dataUltimoValore;
	}

	@Override
	public void setDataUltimoValore(Date dataUltimoValore) {
		_dataUltimoValore = dataUltimoValore;
	}

	@JSON
	@Override
	public double getSoglia1() {
		return _soglia1;
	}

	@Override
	public void setSoglia1(double soglia1) {
		_soglia1 = soglia1;
	}

	@JSON
	@Override
	public double getSoglia2() {
		return _soglia2;
	}

	@Override
	public void setSoglia2(double soglia2) {
		_soglia2 = soglia2;
	}

	@JSON
	@Override
	public double getSoglia3() {
		return _soglia3;
	}

	@Override
	public void setSoglia3(double soglia3) {
		_soglia3 = soglia3;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, StazioneVariabile.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StazioneVariabile toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (StazioneVariabile)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StazioneVariabileImpl stazioneVariabileImpl =
			new StazioneVariabileImpl();

		stazioneVariabileImpl.setUuid(getUuid());
		stazioneVariabileImpl.setId(getId());
		stazioneVariabileImpl.setIdStazione(getIdStazione());
		stazioneVariabileImpl.setIdVariabile(getIdVariabile());
		stazioneVariabileImpl.setDataUltimoValore(getDataUltimoValore());
		stazioneVariabileImpl.setSoglia1(getSoglia1());
		stazioneVariabileImpl.setSoglia2(getSoglia2());
		stazioneVariabileImpl.setSoglia3(getSoglia3());

		stazioneVariabileImpl.resetOriginalValues();

		return stazioneVariabileImpl;
	}

	@Override
	public int compareTo(StazioneVariabile stazioneVariabile) {
		int value = 0;

		if (getId() < stazioneVariabile.getId()) {
			value = -1;
		}
		else if (getId() > stazioneVariabile.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StazioneVariabile)) {
			return false;
		}

		StazioneVariabile stazioneVariabile = (StazioneVariabile)obj;

		long primaryKey = stazioneVariabile.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		StazioneVariabileModelImpl stazioneVariabileModelImpl = this;

		stazioneVariabileModelImpl._originalUuid =
			stazioneVariabileModelImpl._uuid;

		stazioneVariabileModelImpl._originalIdStazione =
			stazioneVariabileModelImpl._idStazione;

		stazioneVariabileModelImpl._originalIdVariabile =
			stazioneVariabileModelImpl._idVariabile;

		stazioneVariabileModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<StazioneVariabile> toCacheModel() {
		StazioneVariabileCacheModel stazioneVariabileCacheModel =
			new StazioneVariabileCacheModel();

		stazioneVariabileCacheModel.uuid = getUuid();

		String uuid = stazioneVariabileCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			stazioneVariabileCacheModel.uuid = null;
		}

		stazioneVariabileCacheModel.id = getId();

		stazioneVariabileCacheModel.idStazione = getIdStazione();

		String idStazione = stazioneVariabileCacheModel.idStazione;

		if ((idStazione != null) && (idStazione.length() == 0)) {
			stazioneVariabileCacheModel.idStazione = null;
		}

		stazioneVariabileCacheModel.idVariabile = getIdVariabile();

		String idVariabile = stazioneVariabileCacheModel.idVariabile;

		if ((idVariabile != null) && (idVariabile.length() == 0)) {
			stazioneVariabileCacheModel.idVariabile = null;
		}

		Date dataUltimoValore = getDataUltimoValore();

		if (dataUltimoValore != null) {
			stazioneVariabileCacheModel.dataUltimoValore =
				dataUltimoValore.getTime();
		}
		else {
			stazioneVariabileCacheModel.dataUltimoValore = Long.MIN_VALUE;
		}

		stazioneVariabileCacheModel.soglia1 = getSoglia1();

		stazioneVariabileCacheModel.soglia2 = getSoglia2();

		stazioneVariabileCacheModel.soglia3 = getSoglia3();

		return stazioneVariabileCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<StazioneVariabile, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<StazioneVariabile, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StazioneVariabile, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((StazioneVariabile)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<StazioneVariabile, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<StazioneVariabile, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StazioneVariabile, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((StazioneVariabile)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		StazioneVariabile.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		StazioneVariabile.class, ModelWrapper.class
	};

	private String _uuid;
	private String _originalUuid;
	private long _id;
	private String _idStazione;
	private String _originalIdStazione;
	private String _idVariabile;
	private String _originalIdVariabile;
	private Date _dataUltimoValore;
	private double _soglia1;
	private double _soglia2;
	private double _soglia3;
	private long _columnBitmask;
	private StazioneVariabile _escapedModel;

}